   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Deinit,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Deinit
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Deinit:
  26              	.LFB114:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 3.4 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  &= (uint32_t)(~(PORT3_PDR0_PD4_Msk));
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  |= (((uint32_t)0 << (uint32_t)PORT3_PDR0_PD4_Pos) & \
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT3_PDR0_PD4_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 432 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
  34              		.loc 1 440 0
  35 0000 C16B     		ldr	r1, [r0, #60]
  36 0002 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  37              		.loc 1 432 0
  38 0004 2DE9F001 		push	{r4, r5, r6, r7, r8}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 20
  41              		.cfi_offset 4, -20
  42              		.cfi_offset 5, -16
  43              		.cfi_offset 6, -12
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 8, -4
  46              		.loc 1 440 0
  47 0008 002B     		cmp	r3, #0
  48 000a 26D0     		beq	.L4
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
  49              		.loc 1 443 0
  50 000c 8269     		ldr	r2, [r0, #24]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
  51              		.loc 1 448 0
  52 000e 4469     		ldr	r4, [r0, #20]
  53 0010 90F83780 		ldrb	r8, [r0, #55]	@ zero_extendqisi2
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
  54              		.loc 1 445 0
  55 0014 0023     		movs	r3, #0
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
  56              		.loc 1 443 0
  57 0016 0727     		movs	r7, #7
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
  58              		.loc 1 444 0
  59 0018 40F60F76 		movw	r6, #3855
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
  60              		.loc 1 443 0
  61 001c 1761     		str	r7, [r2, #16]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
  62              		.loc 1 444 0
  63 001e C2F8B060 		str	r6, [r2, #176]
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
  64              		.loc 1 445 0
  65 0022 C2F8A430 		str	r3, [r2, #164]
  66              		.loc 1 448 0
  67 0026 A568     		ldr	r5, [r4, #8]
  68 0028 45F4407C 		orr	ip, r5, #768
  69 002c 0125     		movs	r5, #1
  70 002e 05FA08F5 		lsl	r5, r5, r8
  71 0032 4CEA0505 		orr	r5, ip, r5
  72 0036 A560     		str	r5, [r4, #8]
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
  73              		.loc 1 453 0
  74 0038 1360     		str	r3, [r2, #0]
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
  75              		.loc 1 454 0
  76 003a 5360     		str	r3, [r2, #4]
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
  77              		.loc 1 455 0
  78 003c 5361     		str	r3, [r2, #20]
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
  79              		.loc 1 456 0
  80 003e 5362     		str	r3, [r2, #36]
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
  81              		.loc 1 457 0
  82 0040 9361     		str	r3, [r2, #24]
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
  83              		.loc 1 458 0
  84 0042 1362     		str	r3, [r2, #32]
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
  85              		.loc 1 459 0
  86 0044 D363     		str	r3, [r2, #60]
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
  87              		.loc 1 460 0
  88 0046 5363     		str	r3, [r2, #52]
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
  89              		.loc 1 463 0
  90 0048 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2
  91 004c 012D     		cmp	r5, #1
  92 004e 06D0     		beq	.L6
  93              	.LVL1:
  94              	.L3:
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
  95              		.loc 1 489 0
  96 0050 0020     		movs	r0, #0
  97 0052 0870     		strb	r0, [r1, #0]
  98              	.LVL2:
  99              	.L2:
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 100              		.loc 1 499 0
 101 0054 BDE8F001 		pop	{r4, r5, r6, r7, r8}
 102 0058 7047     		bx	lr
 103              	.LVL3:
 104              	.L4:
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 105              		.loc 1 433 0
 106 005a 0120     		movs	r0, #1
 107              	.LVL4:
 108 005c FAE7     		b	.L2
 109              	.LVL5:
 110              	.L6:
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 111              		.loc 1 466 0
 112 005e C269     		ldr	r2, [r0, #28]
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 113              		.loc 1 475 0
 114 0060 90F838C0 		ldrb	ip, [r0, #56]	@ zero_extendqisi2
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 115              		.loc 1 466 0
 116 0064 1761     		str	r7, [r2, #16]
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 117              		.loc 1 467 0
 118 0066 C2F8B060 		str	r6, [r2, #176]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 119              		.loc 1 468 0
 120 006a C2F8A430 		str	r3, [r2, #164]
 121              	.LVL6:
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 122              		.loc 1 475 0
 123 006e A068     		ldr	r0, [r4, #8]
 124              	.LVL7:
 125 0070 05FA0CF5 		lsl	r5, r5, ip
 126 0074 40F44070 		orr	r0, r0, #768
 127 0078 0543     		orrs	r5, r5, r0
 128 007a A560     		str	r5, [r4, #8]
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 129              		.loc 1 479 0
 130 007c 1360     		str	r3, [r2, #0]
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 131              		.loc 1 480 0
 132 007e 5360     		str	r3, [r2, #4]
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 133              		.loc 1 481 0
 134 0080 5361     		str	r3, [r2, #20]
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 135              		.loc 1 482 0
 136 0082 5362     		str	r3, [r2, #36]
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 137              		.loc 1 483 0
 138 0084 9361     		str	r3, [r2, #24]
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 139              		.loc 1 484 0
 140 0086 1362     		str	r3, [r2, #32]
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 141              		.loc 1 485 0
 142 0088 D363     		str	r3, [r2, #60]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 143              		.loc 1 486 0
 144 008a 5363     		str	r3, [r2, #52]
 145 008c E0E7     		b	.L3
 146              		.cfi_endproc
 147              	.LFE114:
 149 008e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 150              		.align	2
 151              		.global	PWMSP001_Start
 152              		.thumb
 153              		.thumb_func
 155              	PWMSP001_Start:
 156              	.LFB115:
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 157              		.loc 1 505 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162              	.LVL8:
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 163              		.loc 1 511 0
 164 0000 C26B     		ldr	r2, [r0, #60]
 165 0002 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 166 0004 012B     		cmp	r3, #1
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 167              		.loc 1 505 0
 168 0006 70B4     		push	{r4, r5, r6}
 169              	.LCFI1:
 170              		.cfi_def_cfa_offset 12
 171              		.cfi_offset 4, -12
 172              		.cfi_offset 5, -8
 173              		.cfi_offset 6, -4
 174              		.loc 1 511 0
 175 0008 04D0     		beq	.L8
 176              		.loc 1 511 0 is_stmt 0 discriminator 1
 177 000a 032B     		cmp	r3, #3
 178 000c 02D0     		beq	.L8
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 179              		.loc 1 506 0 is_stmt 1
 180 000e 0120     		movs	r0, #1
 181              	.LVL9:
 182              	.L9:
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 183              		.loc 1 575 0
 184 0010 70BC     		pop	{r4, r5, r6}
 185 0012 7047     		bx	lr
 186              	.LVL10:
 187              	.L8:
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 188              		.loc 1 518 0
 189 0014 8369     		ldr	r3, [r0, #24]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 190              		.loc 1 521 0
 191 0016 4169     		ldr	r1, [r0, #20]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 192              		.loc 1 522 0
 193 0018 90F83740 		ldrb	r4, [r0, #55]	@ zero_extendqisi2
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 194              		.loc 1 518 0
 195 001c 40F60F75 		movw	r5, #3855
 196 0020 C3F8B050 		str	r5, [r3, #176]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 197              		.loc 1 521 0
 198 0024 CD68     		ldr	r5, [r1, #12]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 199              		.loc 1 522 0
 200 0026 0126     		movs	r6, #1
 201 0028 06FA04F4 		lsl	r4, r6, r4
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 202              		.loc 1 521 0
 203 002c 2C43     		orrs	r4, r4, r5
 204 002e CC60     		str	r4, [r1, #12]
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 205              		.loc 1 524 0
 206 0030 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 207 0034 B442     		cmp	r4, r6
 208 0036 3FD0     		beq	.L19
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 209              		.loc 1 532 0
 210 0038 817B     		ldrb	r1, [r0, #14]	@ zero_extendqisi2
 211 003a 59B9     		cbnz	r1, .L11
 212              	.L21:
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 213              		.loc 1 534 0
 214 003c D968     		ldr	r1, [r3, #12]
 215 003e 41F00101 		orr	r1, r1, #1
 216 0042 D960     		str	r1, [r3, #12]
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 217              		.loc 1 535 0
 218 0044 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 219 0048 012B     		cmp	r3, #1
 220 004a 40D0     		beq	.L20
 221              	.LVL11:
 222              	.L13:
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 223              		.loc 1 571 0
 224 004c 0220     		movs	r0, #2
 225 004e 1070     		strb	r0, [r2, #0]
 226              	.LVL12:
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 227              		.loc 1 572 0
 228 0050 0020     		movs	r0, #0
 229 0052 DDE7     		b	.L9
 230              	.LVL13:
 231              	.L11:
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 232              		.loc 1 543 0
 233 0054 0129     		cmp	r1, #1
 234 0056 F9D1     		bne	.L13
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 235              		.loc 1 545 0
 236 0058 1C68     		ldr	r4, [r3, #0]
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 237              		.loc 1 549 0
 238 005a 90F82310 		ldrb	r1, [r0, #35]	@ zero_extendqisi2
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 239              		.loc 1 545 0
 240 005e 24F0C064 		bic	r4, r4, #100663296
 241 0062 24F44034 		bic	r4, r4, #196608
 242 0066 1C60     		str	r4, [r3, #0]
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 243              		.loc 1 547 0
 244 0068 5C68     		ldr	r4, [r3, #4]
 245 006a 24F00304 		bic	r4, r4, #3
 246 006e 5C60     		str	r4, [r3, #4]
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 247              		.loc 1 548 0
 248 0070 1C68     		ldr	r4, [r3, #0]
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 249              		.loc 1 549 0
 250 0072 0904     		lsls	r1, r1, #16
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 251              		.loc 1 550 0
 252 0074 01F44031 		and	r1, r1, #196608
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 253              		.loc 1 548 0
 254 0078 0C43     		orrs	r4, r4, r1
 255 007a 1C60     		str	r4, [r3, #0]
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 256              		.loc 1 552 0
 257 007c 5C68     		ldr	r4, [r3, #4]
 258 007e 44F00104 		orr	r4, r4, #1
 259 0082 5C60     		str	r4, [r3, #4]
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 260              		.loc 1 556 0
 261 0084 837B     		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 262 0086 012B     		cmp	r3, #1
 263 0088 E0D1     		bne	.L13
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 264              		.loc 1 556 0 is_stmt 0 discriminator 1
 265 008a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 266 008e 012B     		cmp	r3, #1
 267 0090 DCD1     		bne	.L13
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 268              		.loc 1 560 0 is_stmt 1
 269 0092 C369     		ldr	r3, [r0, #28]
 270 0094 1868     		ldr	r0, [r3, #0]
 271              	.LVL14:
 272 0096 20F0C060 		bic	r0, r0, #100663296
 273 009a 20F44030 		bic	r0, r0, #196608
 274 009e 1860     		str	r0, [r3, #0]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 275              		.loc 1 561 0
 276 00a0 5868     		ldr	r0, [r3, #4]
 277 00a2 20F00300 		bic	r0, r0, #3
 278 00a6 5860     		str	r0, [r3, #4]
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 279              		.loc 1 562 0
 280 00a8 1868     		ldr	r0, [r3, #0]
 281 00aa 0143     		orrs	r1, r1, r0
 282 00ac 1960     		str	r1, [r3, #0]
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 283              		.loc 1 566 0
 284 00ae 5968     		ldr	r1, [r3, #4]
 285 00b0 41F00100 		orr	r0, r1, #1
 286 00b4 5860     		str	r0, [r3, #4]
 287 00b6 C9E7     		b	.L13
 288              	.LVL15:
 289              	.L19:
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 290              		.loc 1 527 0
 291 00b8 90F83860 		ldrb	r6, [r0, #56]	@ zero_extendqisi2
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 292              		.loc 1 526 0
 293 00bc CD68     		ldr	r5, [r1, #12]
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 294              		.loc 1 527 0
 295 00be 04FA06F4 		lsl	r4, r4, r6
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 296              		.loc 1 526 0
 297 00c2 2C43     		orrs	r4, r4, r5
 298 00c4 CC60     		str	r4, [r1, #12]
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 299              		.loc 1 532 0
 300 00c6 817B     		ldrb	r1, [r0, #14]	@ zero_extendqisi2
 301 00c8 0029     		cmp	r1, #0
 302 00ca C3D1     		bne	.L11
 303 00cc B6E7     		b	.L21
 304              	.L20:
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 305              		.loc 1 537 0
 306 00ce C069     		ldr	r0, [r0, #28]
 307              	.LVL16:
 308 00d0 C168     		ldr	r1, [r0, #12]
 309 00d2 41F00103 		orr	r3, r1, #1
 310 00d6 C360     		str	r3, [r0, #12]
 311 00d8 B8E7     		b	.L13
 312              		.cfi_endproc
 313              	.LFE115:
 315 00da 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 316              		.align	2
 317              		.global	PWMSP001_Stop
 318              		.thumb
 319              		.thumb_func
 321              	PWMSP001_Stop:
 322              	.LFB116:
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 323              		.loc 1 580 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL17:
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 329              		.loc 1 588 0
 330 0000 C36B     		ldr	r3, [r0, #60]
 331 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 332 0004 022A     		cmp	r2, #2
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 333              		.loc 1 580 0
 334 0006 70B4     		push	{r4, r5, r6}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 12
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 6, -4
 340              		.loc 1 588 0
 341 0008 02D0     		beq	.L26
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 342              		.loc 1 581 0
 343 000a 0120     		movs	r0, #1
 344              	.LVL18:
 345              	.L23:
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 346              		.loc 1 617 0
 347 000c 70BC     		pop	{r4, r5, r6}
 348 000e 7047     		bx	lr
 349              	.LVL19:
 350              	.L26:
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 351              		.loc 1 596 0
 352 0010 8169     		ldr	r1, [r0, #24]
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 353              		.loc 1 597 0
 354 0012 4269     		ldr	r2, [r0, #20]
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 355              		.loc 1 594 0
 356 0014 90F83760 		ldrb	r6, [r0, #55]	@ zero_extendqisi2
 357              	.LVL20:
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 358              		.loc 1 596 0
 359 0018 0724     		movs	r4, #7
 360 001a 0C61     		str	r4, [r1, #16]
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 361              		.loc 1 597 0
 362 001c 9568     		ldr	r5, [r2, #8]
 363 001e 0121     		movs	r1, #1
 364 0020 45F40075 		orr	r5, r5, #512
 365 0024 01FA06F1 		lsl	r1, r1, r6
 366 0028 2943     		orrs	r1, r1, r5
 367 002a 9160     		str	r1, [r2, #8]
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 368              		.loc 1 599 0
 369 002c 90F82010 		ldrb	r1, [r0, #32]	@ zero_extendqisi2
 370 0030 0129     		cmp	r1, #1
 371 0032 03D0     		beq	.L27
 372              	.LVL21:
 373              	.L24:
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 374              		.loc 1 607 0
 375 0034 0322     		movs	r2, #3
 376 0036 1A70     		strb	r2, [r3, #0]
 377              	.LVL22:
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 378              		.loc 1 608 0
 379 0038 0020     		movs	r0, #0
 380 003a E7E7     		b	.L23
 381              	.LVL23:
 382              	.L27:
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 383              		.loc 1 601 0
 384 003c C669     		ldr	r6, [r0, #28]
 385              	.LVL24:
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 386              		.loc 1 604 0
 387 003e 90F83850 		ldrb	r5, [r0, #56]	@ zero_extendqisi2
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 388              		.loc 1 601 0
 389 0042 3461     		str	r4, [r6, #16]
 390              	.LVL25:
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 391              		.loc 1 604 0
 392 0044 9068     		ldr	r0, [r2, #8]
 393              	.LVL26:
 394 0046 01FA05F1 		lsl	r1, r1, r5
 395 004a 40F40070 		orr	r0, r0, #512
 396 004e 0143     		orrs	r1, r1, r0
 397 0050 9160     		str	r1, [r2, #8]
 398 0052 EFE7     		b	.L24
 399              		.cfi_endproc
 400              	.LFE116:
 402              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 403              		.align	2
 404              		.global	PWMSP001_SetCompare
 405              		.thumb
 406              		.thumb_func
 408              	PWMSP001_SetCompare:
 409              	.LFB117:
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 410              		.loc 1 626 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL27:
 415 0000 10B5     		push	{r4, lr}
 416              	.LCFI3:
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 4, -8
 419              		.cfi_offset 14, -4
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 420              		.loc 1 630 0
 421 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 422 0006 012B     		cmp	r3, #1
 423 0008 13D0     		beq	.L36
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 424              		.loc 1 633 0
 425 000a 8269     		ldr	r2, [r0, #24]
 426 000c 546B     		ldr	r4, [r2, #52]
 427              	.LVL28:
 428              	.L30:
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 429              		.loc 1 636 0
 430 000e C26B     		ldr	r2, [r0, #60]
 431 0010 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 432 0012 62B1     		cbz	r2, .L34
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 433              		.loc 1 638 0
 434 0014 C26A     		ldr	r2, [r0, #44]
 435 0016 8A42     		cmp	r2, r1
 436 0018 02D2     		bcs	.L32
 437              		.loc 1 638 0 is_stmt 0 discriminator 1
 438 001a 0BB9     		cbnz	r3, .L32
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 439              		.loc 1 641 0 is_stmt 1
 440 001c 0220     		movs	r0, #2
 441              	.LVL29:
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 442              		.loc 1 657 0
 443 001e 10BD     		pop	{r4, pc}
 444              	.LVL30:
 445              	.L32:
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 446              		.loc 1 647 0
 447 0020 8C42     		cmp	r4, r1
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 448              		.loc 1 649 0
 449 0022 98BF     		it	ls
 450 0024 611C     		addls	r1, r4, #1
 451              	.LVL31:
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 452              		.loc 1 652 0
 453 0026 036C     		ldr	r3, [r0, #64]
 454 0028 9847     		blx	r3
 455              	.LVL32:
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 456              		.loc 1 653 0
 457 002a 0020     		movs	r0, #0
 458 002c 10BD     		pop	{r4, pc}
 459              	.LVL33:
 460              	.L34:
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 461              		.loc 1 627 0
 462 002e 0120     		movs	r0, #1
 463              	.LVL34:
 464 0030 10BD     		pop	{r4, pc}
 465              	.LVL35:
 466              	.L36:
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 467              		.loc 1 631 0
 468 0032 C469     		ldr	r4, [r0, #28]
 469 0034 8269     		ldr	r2, [r0, #24]
 470 0036 646B     		ldr	r4, [r4, #52]
 471 0038 526B     		ldr	r2, [r2, #52]
 472 003a 42EA0444 		orr	r4, r2, r4, lsl #16
 473              	.LVL36:
 474 003e E6E7     		b	.L30
 475              		.cfi_endproc
 476              	.LFE117:
 478              		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 479              		.align	2
 480              		.global	PWMSP001_lSetCompareEdgeAlign
 481              		.thumb
 482              		.thumb_func
 484              	PWMSP001_lSetCompareEdgeAlign:
 485              	.LFB118:
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 486              		.loc 1 668 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL37:
 492 0000 10B4     		push	{r4}
 493              	.LCFI4:
 494              		.cfi_def_cfa_offset 4
 495              		.cfi_offset 4, -4
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 496              		.loc 1 672 0
 497 0002 8469     		ldr	r4, [r0, #24]
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 498              		.loc 1 677 0
 499 0004 4369     		ldr	r3, [r0, #20]
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 500              		.loc 1 675 0
 501 0006 90F83720 		ldrb	r2, [r0, #55]	@ zero_extendqisi2
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 502              		.loc 1 672 0
 503 000a 89B2     		uxth	r1, r1
 504              	.LVL38:
 505 000c E163     		str	r1, [r4, #60]
 506              	.LVL39:
 507              		.loc 1 677 0
 508 000e 1969     		ldr	r1, [r3, #16]
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 509              		.loc 1 675 0
 510 0010 9200     		lsls	r2, r2, #2
 511              		.loc 1 677 0
 512 0012 0120     		movs	r0, #1
 513              	.LVL40:
 514 0014 00FA02F2 		lsl	r2, r0, r2
 515 0018 0A43     		orrs	r2, r2, r1
 516 001a 1A61     		str	r2, [r3, #16]
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 517              		.loc 1 678 0
 518 001c 10BC     		pop	{r4}
 519 001e 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE118:
 523              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 524              		.align	2
 525              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 526              		.thumb
 527              		.thumb_func
 529              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 530              	.LFB119:
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 531              		.loc 1 689 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536              	.LVL41:
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 537              		.loc 1 704 0
 538 0000 8369     		ldr	r3, [r0, #24]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 539              		.loc 1 713 0
 540 0002 4269     		ldr	r2, [r0, #20]
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 541              		.loc 1 704 0
 542 0004 D3F834C0 		ldr	ip, [r3, #52]
 543              	.LVL42:
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 544              		.loc 1 689 0
 545 0008 F0B4     		push	{r4, r5, r6, r7}
 546              	.LCFI5:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 4, -16
 549              		.cfi_offset 5, -12
 550              		.cfi_offset 6, -8
 551              		.cfi_offset 7, -4
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 552              		.loc 1 706 0
 553 000a 5F6B     		ldr	r7, [r3, #52]
 554              	.LVL43:
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 555              		.loc 1 712 0
 556 000c 90F83750 		ldrb	r5, [r0, #55]	@ zero_extendqisi2
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 557              		.loc 1 711 0
 558 0010 90F83840 		ldrb	r4, [r0, #56]	@ zero_extendqisi2
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 559              		.loc 1 709 0
 560 0014 C669     		ldr	r6, [r0, #28]
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 561              		.loc 1 703 0
 562 0016 1FFA8CF0 		uxth	r0, ip
 563              	.LVL44:
 564 001a B1FBF0FC 		udiv	ip, r1, r0
 565              	.LVL45:
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 566              		.loc 1 705 0
 567 001e BFB2     		uxth	r7, r7
 568              	.LVL46:
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 569              		.loc 1 703 0
 570 0020 00FB1C10 		mls	r0, r0, ip, r1
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 571              		.loc 1 705 0
 572 0024 B1FBF7F1 		udiv	r1, r1, r7
 573              	.LVL47:
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 574              		.loc 1 708 0
 575 0028 80B2     		uxth	r0, r0
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 576              		.loc 1 709 0
 577 002a 89B2     		uxth	r1, r1
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 578              		.loc 1 708 0
 579 002c D863     		str	r0, [r3, #60]
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 580              		.loc 1 711 0
 581 002e A400     		lsls	r4, r4, #2
 582              		.loc 1 713 0
 583 0030 0123     		movs	r3, #1
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 584              		.loc 1 709 0
 585 0032 F163     		str	r1, [r6, #60]
 586              	.LVL48:
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 587              		.loc 1 712 0
 588 0034 A800     		lsls	r0, r5, #2
 589              		.loc 1 713 0
 590 0036 1169     		ldr	r1, [r2, #16]
 591 0038 03FA00F0 		lsl	r0, r3, r0
 592 003c 03FA04F3 		lsl	r3, r3, r4
 593 0040 0343     		orrs	r3, r3, r0
 594 0042 0B43     		orrs	r3, r3, r1
 595 0044 1361     		str	r3, [r2, #16]
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 596              		.loc 1 714 0
 597 0046 F0BC     		pop	{r4, r5, r6, r7}
 598 0048 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE119:
 602 004a 00BF     		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 603              		.align	2
 604              		.global	PWMSP001_lSetCompareCenterAlign
 605              		.thumb
 606              		.thumb_func
 608              	PWMSP001_lSetCompareCenterAlign:
 609              	.LFB120:
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 610              		.loc 1 725 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL49:
 616 0000 10B4     		push	{r4}
 617              	.LCFI6:
 618              		.cfi_def_cfa_offset 4
 619              		.cfi_offset 4, -4
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 620              		.loc 1 729 0
 621 0002 8469     		ldr	r4, [r0, #24]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 622              		.loc 1 733 0
 623 0004 4369     		ldr	r3, [r0, #20]
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 624              		.loc 1 732 0
 625 0006 90F83720 		ldrb	r2, [r0, #55]	@ zero_extendqisi2
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 626              		.loc 1 729 0
 627 000a 89B2     		uxth	r1, r1
 628              	.LVL50:
 629 000c E163     		str	r1, [r4, #60]
 630              	.LVL51:
 631              		.loc 1 733 0
 632 000e 1969     		ldr	r1, [r3, #16]
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 633              		.loc 1 732 0
 634 0010 9200     		lsls	r2, r2, #2
 635              		.loc 1 733 0
 636 0012 0120     		movs	r0, #1
 637              	.LVL52:
 638 0014 00FA02F2 		lsl	r2, r0, r2
 639 0018 0A43     		orrs	r2, r2, r1
 640 001a 1A61     		str	r2, [r3, #16]
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 641              		.loc 1 734 0
 642 001c 10BC     		pop	{r4}
 643 001e 7047     		bx	lr
 644              		.cfi_endproc
 645              	.LFE120:
 647              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 648              		.align	2
 649              		.global	PWMSP001_SetDutyCycle
 650              		.thumb
 651              		.thumb_func
 653              	PWMSP001_SetDutyCycle:
 654              	.LFB121:
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 655              		.loc 1 746 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL53:
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 660              		.loc 1 749 0
 661 0000 C26B     		ldr	r2, [r0, #60]
 662 0002 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 663              		.loc 1 746 0
 664 0004 08B5     		push	{r3, lr}
 665              	.LCFI7:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 3, -8
 668              		.cfi_offset 14, -4
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 669              		.loc 1 746 0
 670 0006 07EE901A 		fmsr	s15, r1
 671              		.loc 1 749 0
 672 000a 8AB1     		cbz	r2, .L42
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 673              		.loc 1 751 0
 674 000c 9FED097A 		flds	s14, .L46
 675 0010 F4EEC77A 		fcmpes	s15, s14
 676 0014 F1EE10FA 		fmstat
 677 0018 01DD     		ble	.L45
 678              	.L44:
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 679              		.loc 1 753 0
 680 001a 0220     		movs	r0, #2
 681              	.LVL54:
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 682              		.loc 1 763 0
 683 001c 08BD     		pop	{r3, pc}
 684              	.LVL55:
 685              	.L45:
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 686              		.loc 1 751 0 discriminator 1
 687 001e F5EEC07A 		fcmpezs	s15
 688 0022 F1EE10FA 		fmstat
 689 0026 F8D4     		bmi	.L44
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 690              		.loc 1 758 0
 691 0028 436C     		ldr	r3, [r0, #68]
 692 002a 9847     		blx	r3
 693              	.LVL56:
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 694              		.loc 1 759 0
 695 002c 0020     		movs	r0, #0
 696 002e 08BD     		pop	{r3, pc}
 697              	.LVL57:
 698              	.L42:
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 699              		.loc 1 747 0
 700 0030 0120     		movs	r0, #1
 701              	.LVL58:
 702 0032 08BD     		pop	{r3, pc}
 703              	.L47:
 704              		.align	2
 705              	.L46:
 706 0034 0000C842 		.word	1120403456
 707              		.cfi_endproc
 708              	.LFE121:
 710              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 711              		.align	2
 712              		.global	PWMSP001_lSetDutyEdgeAlign
 713              		.thumb
 714              		.thumb_func
 716              	PWMSP001_lSetDutyEdgeAlign:
 717              	.LFB122:
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 718              		.loc 1 774 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL59:
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 724              		.loc 1 783 0
 725 0000 DFED107A 		flds	s15, .L49
 726 0004 06EE901A 		fmsr	s13, r1
 727 0008 37EEE67A 		fsubs	s14, s15, s13
 728              	.LVL60:
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 729              		.loc 1 784 0
 730 000c 8269     		ldr	r2, [r0, #24]
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 731              		.loc 1 790 0
 732 000e 4369     		ldr	r3, [r0, #20]
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 733              		.loc 1 784 0
 734 0010 516B     		ldr	r1, [r2, #52]
 735              	.LVL61:
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 736              		.loc 1 789 0
 737 0012 90F83700 		ldrb	r0, [r0, #55]	@ zero_extendqisi2
 738              	.LVL62:
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 739              		.loc 1 783 0
 740 0016 87EE270A 		fdivs	s0, s14, s15
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 741              		.loc 1 784 0
 742 001a 0131     		adds	r1, r1, #1
 743              	.LVL63:
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 744              		.loc 1 789 0
 745 001c 8000     		lsls	r0, r0, #2
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 746              		.loc 1 784 0
 747 001e 00EE901A 		fmsr	s1, r1	@ int
 748 0022 B8EE601A 		fuitos	s2, s1
 749              	.LVL64:
 750              		.loc 1 790 0
 751 0026 0121     		movs	r1, #1
 752              	.LVL65:
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 753              		.loc 1 785 0
 754 0028 61EE001A 		fmuls	s3, s2, s0
 755              		.loc 1 790 0
 756 002c 01FA00F0 		lsl	r0, r1, r0
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 757              		.loc 1 785 0
 758 0030 BCEEE12A 		ftouizs	s4, s3
 759 0034 12EE101A 		fmrs	r1, s4	@ int
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 760              		.loc 1 786 0
 761 0038 89B2     		uxth	r1, r1
 762 003a D163     		str	r1, [r2, #60]
 763              	.LVL66:
 764              		.loc 1 790 0
 765 003c 1A69     		ldr	r2, [r3, #16]
 766 003e 1043     		orrs	r0, r0, r2
 767 0040 1861     		str	r0, [r3, #16]
 768 0042 7047     		bx	lr
 769              	.L50:
 770              		.align	2
 771              	.L49:
 772 0044 0000C842 		.word	1120403456
 773              		.cfi_endproc
 774              	.LFE122:
 776              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 777              		.align	2
 778              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 779              		.thumb
 780              		.thumb_func
 782              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 783              	.LFB123:
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 784              		.loc 1 803 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 789              	.LVL67:
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 790              		.loc 1 819 0
 791 0000 DFED1E7A 		flds	s15, .L52
 792 0004 06EE901A 		fmsr	s13, r1
 793 0008 37EEE67A 		fsubs	s14, s15, s13
 794              	.LVL68:
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 795              		.loc 1 803 0
 796 000c F0B4     		push	{r4, r5, r6, r7}
 797              	.LCFI8:
 798              		.cfi_def_cfa_offset 16
 799              		.cfi_offset 4, -16
 800              		.cfi_offset 5, -12
 801              		.cfi_offset 6, -8
 802              		.cfi_offset 7, -4
 803              		.loc 1 819 0
 804 000e 87EE270A 		fdivs	s0, s14, s15
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 805              		.loc 1 816 0
 806 0012 8369     		ldr	r3, [r0, #24]
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 807              		.loc 1 815 0
 808 0014 C469     		ldr	r4, [r0, #28]
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 809              		.loc 1 831 0
 810 0016 90F83760 		ldrb	r6, [r0, #55]	@ zero_extendqisi2
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 811              		.loc 1 815 0
 812 001a D4F834C0 		ldr	ip, [r4, #52]
 813              	.LVL69:
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 814              		.loc 1 816 0
 815 001e 5A6B     		ldr	r2, [r3, #52]
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 816              		.loc 1 832 0
 817 0020 90F83870 		ldrb	r7, [r0, #56]	@ zero_extendqisi2
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 818              		.loc 1 833 0
 819 0024 4169     		ldr	r1, [r0, #20]
 820              	.LVL70:
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 821              		.loc 1 824 0
 822 0026 5D6B     		ldr	r5, [r3, #52]
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 823              		.loc 1 816 0
 824 0028 90B2     		uxth	r0, r2
 825              	.LVL71:
 826 002a 421C     		adds	r2, r0, #1
 827 002c 0CFB0220 		mla	r0, ip, r2, r2
 828              	.LVL72:
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 829              		.loc 1 817 0
 830 0030 421C     		adds	r2, r0, #1
 831              	.LVL73:
 832 0032 00EE902A 		fmsr	s1, r2	@ int
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 833              		.loc 1 820 0
 834 0036 B8EE601A 		fuitos	s2, s1
 835              	.LVL74:
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 836              		.loc 1 824 0
 837 003a ADB2     		uxth	r5, r5
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 838              		.loc 1 821 0
 839 003c 61EE001A 		fmuls	s3, s2, s0
 840              		.loc 1 833 0
 841 0040 0120     		movs	r0, #1
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 842              		.loc 1 821 0
 843 0042 BCEEE12A 		ftouizs	s4, s3
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 844              		.loc 1 831 0
 845 0046 B600     		lsls	r6, r6, #2
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 846              		.loc 1 821 0
 847 0048 12EE102A 		fmrs	r2, s4	@ int
 848              	.LVL75:
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 849              		.loc 1 823 0
 850 004c B2FBF5FC 		udiv	ip, r2, r5
 851 0050 05FB1C25 		mls	r5, r5, ip, r2
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 852              		.loc 1 825 0
 853 0054 ADB2     		uxth	r5, r5
 854 0056 DD63     		str	r5, [r3, #60]
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 855              		.loc 1 827 0
 856 0058 5B6B     		ldr	r3, [r3, #52]
 857              	.LVL76:
 858 005a 9BB2     		uxth	r3, r3
 859              	.LVL77:
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 860              		.loc 1 826 0
 861 005c B2FBF3F2 		udiv	r2, r2, r3
 862              	.LVL78:
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 863              		.loc 1 828 0
 864 0060 93B2     		uxth	r3, r2
 865 0062 E363     		str	r3, [r4, #60]
 866              	.LVL79:
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 867              		.loc 1 832 0
 868 0064 BC00     		lsls	r4, r7, #2
 869              		.loc 1 833 0
 870 0066 0B69     		ldr	r3, [r1, #16]
 871 0068 00FA06F2 		lsl	r2, r0, r6
 872 006c 00FA04F0 		lsl	r0, r0, r4
 873 0070 1043     		orrs	r0, r0, r2
 874 0072 1843     		orrs	r0, r0, r3
 875 0074 0861     		str	r0, [r1, #16]
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 876              		.loc 1 834 0
 877 0076 F0BC     		pop	{r4, r5, r6, r7}
 878 0078 7047     		bx	lr
 879              	.L53:
 880 007a 00BF     		.align	2
 881              	.L52:
 882 007c 0000C842 		.word	1120403456
 883              		.cfi_endproc
 884              	.LFE123:
 886              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 887              		.align	2
 888              		.global	PWMSP001_lSetDutyCenterAlign
 889              		.thumb
 890              		.thumb_func
 892              	PWMSP001_lSetDutyCenterAlign:
 893              	.LFB124:
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 894              		.loc 1 845 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 0
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899              	.LVL80:
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 900              		.loc 1 853 0
 901 0000 DFED0F7A 		flds	s15, .L55
 902 0004 06EE901A 		fmsr	s13, r1
 903 0008 37EEE67A 		fsubs	s14, s15, s13
 904              	.LVL81:
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 905              		.loc 1 854 0
 906 000c 8269     		ldr	r2, [r0, #24]
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 907              		.loc 1 860 0
 908 000e 4369     		ldr	r3, [r0, #20]
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 909              		.loc 1 859 0
 910 0010 90F83700 		ldrb	r0, [r0, #55]	@ zero_extendqisi2
 911              	.LVL82:
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 912              		.loc 1 853 0
 913 0014 87EE270A 		fdivs	s0, s14, s15
 914              		.loc 1 860 0
 915 0018 0121     		movs	r1, #1
 916              	.LVL83:
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 917              		.loc 1 859 0
 918 001a 8000     		lsls	r0, r0, #2
 919              		.loc 1 860 0
 920 001c 01FA00F0 		lsl	r0, r1, r0
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 921              		.loc 1 854 0
 922 0020 D2ED0D0A 		flds	s1, [r2, #52]	@ int
 923              	.LVL84:
 924 0024 B8EE601A 		fuitos	s2, s1
 925              	.LVL85:
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 926              		.loc 1 855 0
 927 0028 61EE001A 		fmuls	s3, s2, s0
 928 002c BCEEE12A 		ftouizs	s4, s3
 929 0030 12EE101A 		fmrs	r1, s4	@ int
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 930              		.loc 1 856 0
 931 0034 89B2     		uxth	r1, r1
 932 0036 D163     		str	r1, [r2, #60]
 933              	.LVL86:
 934              		.loc 1 860 0
 935 0038 1A69     		ldr	r2, [r3, #16]
 936 003a 1043     		orrs	r0, r0, r2
 937 003c 1861     		str	r0, [r3, #16]
 938 003e 7047     		bx	lr
 939              	.L56:
 940              		.align	2
 941              	.L55:
 942 0040 0000C842 		.word	1120403456
 943              		.cfi_endproc
 944              	.LFE124:
 946              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 947              		.align	2
 948              		.global	PWMSP001_SetPeriodAndCompare
 949              		.thumb
 950              		.thumb_func
 952              	PWMSP001_SetPeriodAndCompare:
 953              	.LFB125:
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 954              		.loc 1 874 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              	.LVL87:
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 959              		.loc 1 878 0
 960 0000 C36B     		ldr	r3, [r0, #60]
 961 0002 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 962              		.loc 1 874 0
 963 0004 10B5     		push	{r4, lr}
 964              	.LCFI9:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 4, -8
 967              		.cfi_offset 14, -4
 968              		.loc 1 878 0
 969 0006 7BB1     		cbz	r3, .L64
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 970              		.loc 1 880 0
 971 0008 09B9     		cbnz	r1, .L68
 972              	.L67:
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 973              		.loc 1 883 0
 974 000a 0220     		movs	r0, #2
 975              	.LVL88:
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 976              		.loc 1 909 0
 977 000c 10BD     		pop	{r4, pc}
 978              	.LVL89:
 979              	.L68:
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 980              		.loc 1 880 0 discriminator 1
 981 000e C36A     		ldr	r3, [r0, #44]
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 982              		.loc 1 881 0 discriminator 1
 983 0010 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 984              		.loc 1 880 0 discriminator 1
 985 0014 9342     		cmp	r3, r2
 986 0016 09D3     		bcc	.L59
 987              	.L60:
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 988              		.loc 1 887 0
 989 0018 9942     		cmp	r1, r3
 990 001a 0AD9     		bls	.L61
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 991              		.loc 1 887 0 is_stmt 0 discriminator 1
 992 001c 012C     		cmp	r4, #1
 993 001e F4D1     		bne	.L67
 994              	.LVL90:
 995              	.L62:
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 996              		.loc 1 898 0 is_stmt 1
 997 0020 C369     		ldr	r3, [r0, #28]
 998 0022 0C0C     		lsrs	r4, r1, #16
 999 0024 5C63     		str	r4, [r3, #52]
 1000 0026 06E0     		b	.L63
 1001              	.LVL91:
 1002              	.L64:
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1003              		.loc 1 875 0
 1004 0028 0120     		movs	r0, #1
 1005              	.LVL92:
 1006 002a 10BD     		pop	{r4, pc}
 1007              	.LVL93:
 1008              	.L59:
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1009              		.loc 1 880 0 discriminator 1
 1010 002c 002C     		cmp	r4, #0
 1011 002e ECD0     		beq	.L67
 1012 0030 F2E7     		b	.L60
 1013              	.L61:
 1014              	.LVL94:
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1015              		.loc 1 896 0
 1016 0032 012C     		cmp	r4, #1
 1017 0034 F4D0     		beq	.L62
 1018              	.LVL95:
 1019              	.L63:
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1020              		.loc 1 901 0
 1021 0036 8369     		ldr	r3, [r0, #24]
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1022              		.loc 1 903 0
 1023 0038 046C     		ldr	r4, [r0, #64]
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1024              		.loc 1 901 0
 1025 003a 89B2     		uxth	r1, r1
 1026              	.LVL96:
 1027 003c 5963     		str	r1, [r3, #52]
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1028              		.loc 1 903 0
 1029 003e 1146     		mov	r1, r2
 1030 0040 A047     		blx	r4
 1031              	.LVL97:
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1032              		.loc 1 904 0
 1033 0042 0020     		movs	r0, #0
 1034 0044 10BD     		pop	{r4, pc}
 1035              		.cfi_endproc
 1036              	.LFE125:
 1038 0046 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 1039              		.align	2
 1040              		.global	PWMSP001_SetPeriod
 1041              		.thumb
 1042              		.thumb_func
 1044              	PWMSP001_SetPeriod:
 1045              	.LFB126:
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1046              		.loc 1 920 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 1051              	.LVL98:
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1052              		.loc 1 926 0
 1053 0000 C36B     		ldr	r3, [r0, #60]
 1054 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1055              		.loc 1 920 0
 1056 0004 10B4     		push	{r4}
 1057              	.LCFI10:
 1058              		.cfi_def_cfa_offset 4
 1059              		.cfi_offset 4, -4
 1060              		.loc 1 926 0
 1061 0006 EAB1     		cbz	r2, .L74
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 1062              		.loc 1 928 0
 1063 0008 11B9     		cbnz	r1, .L78
 1064              	.L76:
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1065              		.loc 1 930 0
 1066 000a 0220     		movs	r0, #2
 1067              	.LVL99:
 1068              	.L70:
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1069              		.loc 1 961 0
 1070 000c 10BC     		pop	{r4}
 1071 000e 7047     		bx	lr
 1072              	.LVL100:
 1073              	.L78:
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 1074              		.loc 1 934 0
 1075 0010 C36A     		ldr	r3, [r0, #44]
 1076 0012 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 1077 0016 9942     		cmp	r1, r3
 1078 0018 16D8     		bhi	.L79
 1079              	.LVL101:
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1080              		.loc 1 942 0
 1081 001a 012A     		cmp	r2, #1
 1082 001c 16D0     		beq	.L72
 1083              	.LVL102:
 1084              	.L73:
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1085              		.loc 1 946 0
 1086 001e 8269     		ldr	r2, [r0, #24]
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 1087              		.loc 1 948 0
 1088 0020 90F83740 		ldrb	r4, [r0, #55]	@ zero_extendqisi2
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 1089              		.loc 1 949 0
 1090 0024 4369     		ldr	r3, [r0, #20]
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1091              		.loc 1 946 0
 1092 0026 89B2     		uxth	r1, r1
 1093              	.LVL103:
 1094 0028 5163     		str	r1, [r2, #52]
 1095              	.LVL104:
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 1096              		.loc 1 949 0
 1097 002a 1969     		ldr	r1, [r3, #16]
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 1098              		.loc 1 948 0
 1099 002c A200     		lsls	r2, r4, #2
 1100              	.LVL105:
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 1101              		.loc 1 949 0
 1102 002e 0124     		movs	r4, #1
 1103 0030 04FA02F2 		lsl	r2, r4, r2
 1104              	.LVL106:
 1105 0034 0A43     		orrs	r2, r2, r1
 1106 0036 1A61     		str	r2, [r3, #16]
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1107              		.loc 1 950 0
 1108 0038 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 1109 003c A242     		cmp	r2, r4
 1110 003e 09D0     		beq	.L80
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1111              		.loc 1 956 0
 1112 0040 0020     		movs	r0, #0
 1113              	.LVL107:
 1114 0042 E3E7     		b	.L70
 1115              	.LVL108:
 1116              	.L74:
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1117              		.loc 1 921 0
 1118 0044 0120     		movs	r0, #1
 1119              	.LVL109:
 1120 0046 E1E7     		b	.L70
 1121              	.LVL110:
 1122              	.L79:
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 1123              		.loc 1 934 0 discriminator 1
 1124 0048 012A     		cmp	r2, #1
 1125 004a DED1     		bne	.L76
 1126              	.LVL111:
 1127              	.L72:
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 1128              		.loc 1 944 0
 1129 004c C469     		ldr	r4, [r0, #28]
 1130 004e 0B0C     		lsrs	r3, r1, #16
 1131 0050 6363     		str	r3, [r4, #52]
 1132 0052 E4E7     		b	.L73
 1133              	.LVL112:
 1134              	.L80:
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 1135              		.loc 1 953 0
 1136 0054 90F83800 		ldrb	r0, [r0, #56]	@ zero_extendqisi2
 1137              	.LVL113:
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1138              		.loc 1 954 0
 1139 0058 1969     		ldr	r1, [r3, #16]
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 1140              		.loc 1 953 0
 1141 005a 8000     		lsls	r0, r0, #2
 1142              	.LVL114:
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1143              		.loc 1 954 0
 1144 005c 02FA00F2 		lsl	r2, r2, r0
 1145 0060 0A43     		orrs	r2, r2, r1
 1146 0062 1A61     		str	r2, [r3, #16]
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1147              		.loc 1 956 0
 1148 0064 0020     		movs	r0, #0
 1149              	.LVL115:
 1150 0066 D1E7     		b	.L70
 1151              		.cfi_endproc
 1152              	.LFE126:
 1154              		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 1155              		.align	2
 1156              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 1157              		.thumb
 1158              		.thumb_func
 1160              	PWMSP001_SetPwmFreqAndDutyCycle:
 1161              	.LFB127:
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1162              		.loc 1 974 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL116:
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1167              		.loc 1 979 0
 1168 0000 C36B     		ldr	r3, [r0, #60]
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1169              		.loc 1 974 0
 1170 0002 07EE901A 		fmsr	s15, r1
 1171              		.loc 1 979 0
 1172 0006 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1173              	.LVL117:
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1174              		.loc 1 974 0
 1175 0008 10B5     		push	{r4, lr}
 1176              	.LCFI11:
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 4, -8
 1179              		.cfi_offset 14, -4
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1180              		.loc 1 974 0
 1181 000a 07EE102A 		fmsr	s14, r2
 1182              		.loc 1 979 0
 1183 000e 0029     		cmp	r1, #0
 1184 0010 31D0     		beq	.L92
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 1185              		.loc 1 981 0
 1186 0012 F5EE407A 		fcmpzs	s15
 1187 0016 F1EE10FA 		fmstat
 1188 001a 01D1     		bne	.L105
 1189              	.LVL118:
 1190              	.L100:
 1191              	.LBB6:
 1192              	.LBB7:
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1193              		.loc 1 983 0
 1194 001c 0220     		movs	r0, #2
 1195              	.LVL119:
 1196 001e 10BD     		pop	{r4, pc}
 1197              	.LVL120:
 1198              	.L105:
 1199              	.LBE7:
 1200              	.LBE6:
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 1201              		.loc 1 981 0 discriminator 1
 1202 0020 DFED2C6A 		flds	s13, .L107
 1203 0024 B4EEE67A 		fcmpes	s14, s13
 1204 0028 F1EE10FA 		fmstat
 1205 002c F6DC     		bgt	.L100
 1206 002e B5EEC07A 		fcmpezs	s14
 1207 0032 F1EE10FA 		fmstat
 1208 0036 F1D4     		bmi	.L100
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 1209              		.loc 1 987 0
 1210 0038 90ED010A 		flds	s0, [r0, #4]
 1211              	.LVL121:
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 1212              		.loc 1 989 0
 1213 003c 9FED261A 		flds	s2, .L107+4
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 1214              		.loc 1 988 0
 1215 0040 60EE270A 		fmuls	s1, s0, s15
 1216              	.LVL122:
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 1217              		.loc 1 991 0
 1218 0044 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 1219              	.LVL123:
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 1220              		.loc 1 989 0
 1221 0048 C1EE201A 		fdivs	s3, s2, s1
 1222 004c BCEEE12A 		ftouizs	s4, s3
 1223 0050 12EE103A 		fmrs	r3, s4	@ int
 1224              	.LVL124:
 1225              		.loc 1 991 0
 1226 0054 8AB9     		cbnz	r2, .L83
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 1227              		.loc 1 993 0
 1228 0056 B3F5803F 		cmp	r3, #65536
 1229 005a DFD2     		bcs	.L100
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 1230              		.loc 1 999 0
 1231 005c 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2
 1232 0060 0029     		cmp	r1, #0
 1233 0062 2ED1     		bne	.L84
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 1234              		.loc 1 1001 0
 1235 0064 8269     		ldr	r2, [r0, #24]
 1236 0066 013B     		subs	r3, r3, #1
 1237              	.LVL125:
 1238 0068 5363     		str	r3, [r2, #52]
 1239              	.LVL126:
 1240              	.L91:
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1241              		.loc 1 1023 0
 1242 006a 426C     		ldr	r2, [r0, #68]
 1243 006c 17EE101A 		fmrs	r1, s14
 1244 0070 9047     		blx	r2
 1245              	.LVL127:
 1246 0072 0020     		movs	r0, #0
 1247 0074 10BD     		pop	{r4, pc}
 1248              	.LVL128:
 1249              	.L92:
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1250              		.loc 1 975 0
 1251 0076 0120     		movs	r0, #1
 1252              	.LVL129:
 1253 0078 10BD     		pop	{r4, pc}
 1254              	.LVL130:
 1255              	.L83:
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 1256              		.loc 1 1010 0
 1257 007a 012A     		cmp	r2, #1
 1258 007c 1AD1     		bne	.L86
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 1259              		.loc 1 1010 0 is_stmt 0 discriminator 1
 1260 007e B3F5803F 		cmp	r3, #65536
 1261 0082 CBD3     		bcc	.L100
 1262              	.LVL131:
 1263              	.LBB16:
 1264              	.LBB14:
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 1265              		.loc 1 1112 0 is_stmt 1
 1266 0084 5A1C     		adds	r2, r3, #1
 1267 0086 C9D0     		beq	.L100
 1268 0088 0022     		movs	r2, #0
 1269              	.L89:
 1270              	.LBB8:
 1271              	.LBB9:
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1272              		.loc 1 1126 0
 1273 008a 4FF6FE74 		movw	r4, #65534
 1274              	.LVL132:
 1275              	.L101:
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 1276              		.loc 1 1124 0
 1277 008e 5B08     		lsrs	r3, r3, #1
 1278              	.LVL133:
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1279              		.loc 1 1125 0
 1280 0090 511C     		adds	r1, r2, #1
 1281              		.loc 1 1126 0
 1282 0092 A342     		cmp	r3, r4
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1283              		.loc 1 1125 0
 1284 0094 CAB2     		uxtb	r2, r1
 1285              	.LVL134:
 1286              		.loc 1 1126 0
 1287 0096 FAD8     		bhi	.L101
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 1288              		.loc 1 1128 0
 1289 0098 0124     		movs	r4, #1
 1290 009a 04FA02F2 		lsl	r2, r4, r2
 1291 009e 013A     		subs	r2, r2, #1
 1292              	.LVL135:
 1293              	.L88:
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 1294              		.loc 1 1138 0
 1295 00a0 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2
 1296 00a4 0129     		cmp	r1, #1
 1297 00a6 11D0     		beq	.L106
 1298              	.L90:
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1299              		.loc 1 1144 0
 1300 00a8 8469     		ldr	r4, [r0, #24]
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 1301              		.loc 1 1145 0
 1302 00aa C169     		ldr	r1, [r0, #28]
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1303              		.loc 1 1144 0
 1304 00ac 6363     		str	r3, [r4, #52]
 1305              		.loc 1 1145 0
 1306 00ae 92B2     		uxth	r2, r2
 1307              	.LVL136:
 1308 00b0 4A63     		str	r2, [r1, #52]
 1309              	.LVL137:
 1310 00b2 DAE7     		b	.L91
 1311              	.LVL138:
 1312              	.L86:
 1313              	.LBE9:
 1314              	.LBE8:
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 1315              		.loc 1 1112 0
 1316 00b4 591C     		adds	r1, r3, #1
 1317 00b6 B1D0     		beq	.L100
 1318              	.LVL139:
 1319              	.LBB12:
 1320              	.LBB10:
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 1321              		.loc 1 1120 0
 1322 00b8 0022     		movs	r2, #0
 1323 00ba B3F5803F 		cmp	r3, #65536
 1324 00be EFD3     		bcc	.L88
 1325 00c0 E3E7     		b	.L89
 1326              	.LVL140:
 1327              	.L84:
 1328              	.LBE10:
 1329              	.LBE12:
 1330              	.LBE14:
 1331              	.LBE16:
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 1332              		.loc 1 1005 0
 1333 00c2 8269     		ldr	r2, [r0, #24]
 1334 00c4 013B     		subs	r3, r3, #1
 1335              	.LVL141:
 1336 00c6 5908     		lsrs	r1, r3, #1
 1337 00c8 5163     		str	r1, [r2, #52]
 1338              	.LVL142:
 1339 00ca CEE7     		b	.L91
 1340              	.LVL143:
 1341              	.L106:
 1342              	.LBB17:
 1343              	.LBB15:
 1344              	.LBB13:
 1345              	.LBB11:
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 1346              		.loc 1 1140 0
 1347 00cc 5208     		lsrs	r2, r2, #1
 1348              	.LVL144:
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 1349              		.loc 1 1141 0
 1350 00ce 5B08     		lsrs	r3, r3, #1
 1351              	.LVL145:
 1352 00d0 EAE7     		b	.L90
 1353              	.L108:
 1354 00d2 00BF     		.align	2
 1355              	.L107:
 1356 00d4 0000C842 		.word	1120403456
 1357 00d8 286B6E4E 		.word	1315859240
 1358              	.LBE11:
 1359              	.LBE13:
 1360              	.LBE15:
 1361              	.LBE17:
 1362              		.cfi_endproc
 1363              	.LFE127:
 1365              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 1366              		.align	2
 1367              		.global	PWMSP001_SetPwmFreq
 1368              		.thumb
 1369              		.thumb_func
 1371              	PWMSP001_SetPwmFreq:
 1372              	.LFB128:
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1373              		.loc 1 1040 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378              	.LVL146:
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1379              		.loc 1 1047 0
 1380 0000 C36B     		ldr	r3, [r0, #60]
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1381              		.loc 1 1040 0
 1382 0002 07EE901A 		fmsr	s15, r1
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1383              		.loc 1 1047 0
 1384 0006 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1385              	.LVL147:
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1386              		.loc 1 1040 0
 1387 0008 F0B4     		push	{r4, r5, r6, r7}
 1388              	.LCFI12:
 1389              		.cfi_def_cfa_offset 16
 1390              		.cfi_offset 4, -16
 1391              		.cfi_offset 5, -12
 1392              		.cfi_offset 6, -8
 1393              		.cfi_offset 7, -4
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1394              		.loc 1 1047 0
 1395 000a 0029     		cmp	r1, #0
 1396 000c 2CD0     		beq	.L117
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 1397              		.loc 1 1049 0
 1398 000e F5EE407A 		fcmpzs	s15
 1399 0012 F1EE10FA 		fmstat
 1400 0016 02D1     		bne	.L123
 1401              	.LVL148:
 1402              	.L120:
 1403              	.LBB22:
 1404              	.LBB23:
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1405              		.loc 1 1051 0
 1406 0018 0220     		movs	r0, #2
 1407              	.LVL149:
 1408              	.L110:
 1409              	.LBE23:
 1410              	.LBE22:
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1411              		.loc 1 1096 0
 1412 001a F0BC     		pop	{r4, r5, r6, r7}
 1413 001c 7047     		bx	lr
 1414              	.LVL150:
 1415              	.L123:
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 1416              		.loc 1 1055 0
 1417 001e 90ED017A 		flds	s14, [r0, #4]
 1418              	.LVL151:
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 1419              		.loc 1 1057 0
 1420 0022 DFED2C0A 		flds	s1, .L125
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 1421              		.loc 1 1056 0
 1422 0026 27EE270A 		fmuls	s0, s14, s15
 1423              	.LVL152:
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 1424              		.loc 1 1059 0
 1425 002a 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 1426              		.loc 1 1057 0
 1427 002e 80EE801A 		fdivs	s2, s1, s0
 1428 0032 FCEEC11A 		ftouizs	s3, s2
 1429 0036 11EE903A 		fmrs	r3, s3	@ int
 1430              	.LVL153:
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 1431              		.loc 1 1059 0
 1432 003a BAB9     		cbnz	r2, .L111
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 1433              		.loc 1 1061 0
 1434 003c B3F5803F 		cmp	r3, #65536
 1435 0040 EAD2     		bcs	.L120
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 1436              		.loc 1 1067 0
 1437 0042 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2
 1438 0046 0029     		cmp	r1, #0
 1439 0048 3CD1     		bne	.L112
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 1440              		.loc 1 1069 0
 1441 004a 8269     		ldr	r2, [r0, #24]
 1442 004c 013B     		subs	r3, r3, #1
 1443              	.LVL154:
 1444 004e 5363     		str	r3, [r2, #52]
 1445              	.L113:
 1446              	.LVL155:
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 1447              		.loc 1 1077 0
 1448 0050 4369     		ldr	r3, [r0, #20]
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 1449              		.loc 1 1076 0
 1450 0052 90F83700 		ldrb	r0, [r0, #55]	@ zero_extendqisi2
 1451              	.LVL156:
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 1452              		.loc 1 1077 0
 1453 0056 1969     		ldr	r1, [r3, #16]
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 1454              		.loc 1 1076 0
 1455 0058 8200     		lsls	r2, r0, #2
 1456              	.LVL157:
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 1457              		.loc 1 1077 0
 1458 005a 0120     		movs	r0, #1
 1459 005c 00FA02F2 		lsl	r2, r0, r2
 1460              	.LVL158:
 1461 0060 0A43     		orrs	r2, r2, r1
 1462 0062 1A61     		str	r2, [r3, #16]
 1463              	.LVL159:
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1464              		.loc 1 1078 0
 1465 0064 0020     		movs	r0, #0
 1466 0066 D8E7     		b	.L110
 1467              	.LVL160:
 1468              	.L117:
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1469              		.loc 1 1041 0
 1470 0068 0120     		movs	r0, #1
 1471              	.LVL161:
 1472 006a D6E7     		b	.L110
 1473              	.LVL162:
 1474              	.L111:
 1475              	.LBB36:
 1476              	.LBB32:
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 1477              		.loc 1 1112 0
 1478 006c 5A1C     		adds	r2, r3, #1
 1479 006e D3D0     		beq	.L120
 1480              	.LVL163:
 1481              	.LBB24:
 1482              	.LBB25:
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 1483              		.loc 1 1120 0
 1484 0070 0022     		movs	r2, #0
 1485 0072 B3F5803F 		cmp	r3, #65536
 1486 0076 0AD3     		bcc	.L114
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1487              		.loc 1 1126 0
 1488 0078 4FF6FE74 		movw	r4, #65534
 1489              	.LVL164:
 1490              	.L115:
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 1491              		.loc 1 1124 0
 1492 007c 5B08     		lsrs	r3, r3, #1
 1493              	.LVL165:
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1494              		.loc 1 1125 0
 1495 007e 551C     		adds	r5, r2, #1
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1496              		.loc 1 1126 0
 1497 0080 A342     		cmp	r3, r4
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1498              		.loc 1 1125 0
 1499 0082 EAB2     		uxtb	r2, r5
 1500              	.LVL166:
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1501              		.loc 1 1126 0
 1502 0084 FAD8     		bhi	.L115
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 1503              		.loc 1 1128 0
 1504 0086 0126     		movs	r6, #1
 1505 0088 06FA02F7 		lsl	r7, r6, r2
 1506 008c 7A1E     		subs	r2, r7, #1
 1507              	.LVL167:
 1508              	.L114:
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 1509              		.loc 1 1138 0
 1510 008e 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2
 1511 0092 0129     		cmp	r1, #1
 1512 0094 1BD0     		beq	.L124
 1513              	.L116:
 1514              	.LBE25:
 1515              	.LBE24:
 1516              	.LBE32:
 1517              	.LBE36:
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 1518              		.loc 1 1087 0
 1519 0096 90F83750 		ldrb	r5, [r0, #55]	@ zero_extendqisi2
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 1520              		.loc 1 1088 0
 1521 009a 90F83840 		ldrb	r4, [r0, #56]	@ zero_extendqisi2
 1522              	.LBB37:
 1523              	.LBB33:
 1524              	.LBB29:
 1525              	.LBB26:
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1526              		.loc 1 1144 0
 1527 009e 8769     		ldr	r7, [r0, #24]
 1528              		.loc 1 1145 0
 1529 00a0 C669     		ldr	r6, [r0, #28]
 1530              	.LBE26:
 1531              	.LBE29:
 1532              	.LBE33:
 1533              	.LBE37:
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 1534              		.loc 1 1089 0
 1535 00a2 4169     		ldr	r1, [r0, #20]
 1536              	.LBB38:
 1537              	.LBB34:
 1538              	.LBB30:
 1539              	.LBB27:
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1540              		.loc 1 1144 0
 1541 00a4 7B63     		str	r3, [r7, #52]
 1542              		.loc 1 1145 0
 1543 00a6 90B2     		uxth	r0, r2
 1544              	.LVL168:
 1545 00a8 7063     		str	r0, [r6, #52]
 1546              	.LVL169:
 1547              	.LBE27:
 1548              	.LBE30:
 1549              	.LBE34:
 1550              	.LBE38:
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 1551              		.loc 1 1089 0
 1552 00aa 0123     		movs	r3, #1
 1553              	.LVL170:
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 1554              		.loc 1 1087 0
 1555 00ac A800     		lsls	r0, r5, #2
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 1556              		.loc 1 1088 0
 1557 00ae A400     		lsls	r4, r4, #2
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 1558              		.loc 1 1089 0
 1559 00b0 03FA00F0 		lsl	r0, r3, r0
 1560 00b4 0A69     		ldr	r2, [r1, #16]
 1561              	.LVL171:
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 1562              		.loc 1 1090 0
 1563 00b6 03FA04F3 		lsl	r3, r3, r4
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 1564              		.loc 1 1089 0
 1565 00ba 0343     		orrs	r3, r3, r0
 1566 00bc 1343     		orrs	r3, r3, r2
 1567 00be 0B61     		str	r3, [r1, #16]
 1568 00c0 0020     		movs	r0, #0
 1569 00c2 AAE7     		b	.L110
 1570              	.LVL172:
 1571              	.L112:
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 1572              		.loc 1 1073 0
 1573 00c4 8269     		ldr	r2, [r0, #24]
 1574 00c6 013B     		subs	r3, r3, #1
 1575              	.LVL173:
 1576 00c8 5908     		lsrs	r1, r3, #1
 1577 00ca 5163     		str	r1, [r2, #52]
 1578 00cc C0E7     		b	.L113
 1579              	.LVL174:
 1580              	.L124:
 1581              	.LBB39:
 1582              	.LBB35:
 1583              	.LBB31:
 1584              	.LBB28:
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 1585              		.loc 1 1140 0
 1586 00ce 5208     		lsrs	r2, r2, #1
 1587              	.LVL175:
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 1588              		.loc 1 1141 0
 1589 00d0 5B08     		lsrs	r3, r3, #1
 1590              	.LVL176:
 1591 00d2 E0E7     		b	.L116
 1592              	.L126:
 1593              		.align	2
 1594              	.L125:
 1595 00d4 286B6E4E 		.word	1315859240
 1596              	.LBE28:
 1597              	.LBE31:
 1598              	.LBE35:
 1599              	.LBE39:
 1600              		.cfi_endproc
 1601              	.LFE128:
 1603              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 1604              		.align	2
 1605              		.global	PWMSP001_lSetPwmFreqTimerConcat
 1606              		.thumb
 1607              		.thumb_func
 1609              	PWMSP001_lSetPwmFreqTimerConcat:
 1610              	.LFB129:
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1611              		.loc 1 1106 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616              	.LVL177:
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 1617              		.loc 1 1112 0
 1618 0000 4B1C     		adds	r3, r1, #1
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1619              		.loc 1 1106 0
 1620 0002 10B4     		push	{r4}
 1621              	.LCFI13:
 1622              		.cfi_def_cfa_offset 4
 1623              		.cfi_offset 4, -4
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 1624              		.loc 1 1112 0
 1625 0004 1AD0     		beq	.L132
 1626              	.LVL178:
 1627              	.LBB42:
 1628              	.LBB43:
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 1629              		.loc 1 1120 0
 1630 0006 0023     		movs	r3, #0
 1631 0008 B1F5803F 		cmp	r1, #65536
 1632 000c 0AD3     		bcc	.L129
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1633              		.loc 1 1126 0
 1634 000e 4FF6FE72 		movw	r2, #65534
 1635              	.LVL179:
 1636              	.L130:
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 1637              		.loc 1 1124 0
 1638 0012 4908     		lsrs	r1, r1, #1
 1639              	.LVL180:
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1640              		.loc 1 1125 0
 1641 0014 0133     		adds	r3, r3, #1
 1642              	.LVL181:
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1643              		.loc 1 1126 0
 1644 0016 9142     		cmp	r1, r2
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 1645              		.loc 1 1125 0
 1646 0018 DBB2     		uxtb	r3, r3
 1647              	.LVL182:
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 1648              		.loc 1 1126 0
 1649 001a FAD8     		bhi	.L130
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 1650              		.loc 1 1128 0
 1651 001c 0124     		movs	r4, #1
 1652 001e 04FA03F2 		lsl	r2, r4, r3
 1653 0022 531E     		subs	r3, r2, #1
 1654              	.LVL183:
 1655              	.L129:
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 1656              		.loc 1 1138 0
 1657 0024 90F83640 		ldrb	r4, [r0, #54]	@ zero_extendqisi2
 1658 0028 012C     		cmp	r4, #1
 1659 002a 09D0     		beq	.L135
 1660              	.L131:
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1661              		.loc 1 1144 0
 1662 002c 8469     		ldr	r4, [r0, #24]
 1663              		.loc 1 1145 0
 1664 002e C069     		ldr	r0, [r0, #28]
 1665              	.LVL184:
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 1666              		.loc 1 1144 0
 1667 0030 6163     		str	r1, [r4, #52]
 1668              		.loc 1 1145 0
 1669 0032 99B2     		uxth	r1, r3
 1670              	.LVL185:
 1671 0034 4163     		str	r1, [r0, #52]
 1672              	.LVL186:
 1673 0036 0020     		movs	r0, #0
 1674              	.LVL187:
 1675              	.L128:
 1676              	.LBE43:
 1677              	.LBE42:
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1678              		.loc 1 1151 0
 1679 0038 10BC     		pop	{r4}
 1680 003a 7047     		bx	lr
 1681              	.LVL188:
 1682              	.L132:
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1683              		.loc 1 1114 0
 1684 003c 0220     		movs	r0, #2
 1685              	.LVL189:
 1686 003e FBE7     		b	.L128
 1687              	.LVL190:
 1688              	.L135:
 1689              	.LBB45:
 1690              	.LBB44:
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 1691              		.loc 1 1140 0
 1692 0040 5B08     		lsrs	r3, r3, #1
 1693              	.LVL191:
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 1694              		.loc 1 1141 0
 1695 0042 4908     		lsrs	r1, r1, #1
 1696              	.LVL192:
 1697 0044 F2E7     		b	.L131
 1698              	.LBE44:
 1699              	.LBE45:
 1700              		.cfi_endproc
 1701              	.LFE129:
 1703 0046 00BF     		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 1704              		.align	2
 1705              		.global	PWMSP001_SetTimerVal
 1706              		.thumb
 1707              		.thumb_func
 1709              	PWMSP001_SetTimerVal:
 1710              	.LFB130:
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1711              		.loc 1 1164 0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 1715              		@ link register save eliminated.
 1716              	.LVL193:
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 1717              		.loc 1 1167 0
 1718 0000 C36B     		ldr	r3, [r0, #60]
 1719 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1720 0004 012A     		cmp	r2, #1
 1721 0006 03D0     		beq	.L137
 1722              		.loc 1 1167 0 is_stmt 0 discriminator 1
 1723 0008 032A     		cmp	r2, #3
 1724 000a 01D0     		beq	.L137
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1725              		.loc 1 1165 0 is_stmt 1
 1726 000c 0120     		movs	r0, #1
 1727              	.LVL194:
 1728 000e 7047     		bx	lr
 1729              	.LVL195:
 1730              	.L137:
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 1731              		.loc 1 1175 0
 1732 0010 8369     		ldr	r3, [r0, #24]
 1733 0012 8AB2     		uxth	r2, r1
 1734 0014 1A67     		str	r2, [r3, #112]
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1735              		.loc 1 1176 0
 1736 0016 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1737 001a 012B     		cmp	r3, #1
 1738 001c 01D0     		beq	.L144
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1739              		.loc 1 1180 0
 1740 001e 0020     		movs	r0, #0
 1741              	.LVL196:
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1742              		.loc 1 1183 0
 1743 0020 7047     		bx	lr
 1744              	.LVL197:
 1745              	.L144:
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 1746              		.loc 1 1178 0
 1747 0022 C069     		ldr	r0, [r0, #28]
 1748              	.LVL198:
 1749 0024 090C     		lsrs	r1, r1, #16
 1750              	.LVL199:
 1751 0026 0167     		str	r1, [r0, #112]
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1752              		.loc 1 1180 0
 1753 0028 0020     		movs	r0, #0
 1754 002a 7047     		bx	lr
 1755              		.cfi_endproc
 1756              	.LFE130:
 1758              		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 1759              		.align	2
 1760              		.global	PWMSP001_GetTimerStatus
 1761              		.thumb
 1762              		.thumb_func
 1764              	PWMSP001_GetTimerStatus:
 1765              	.LFB131:
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1766              		.loc 1 1194 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
 1771              	.LVL200:
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 1772              		.loc 1 1198 0
 1773 0000 C36B     		ldr	r3, [r0, #60]
 1774 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1775 0004 52B1     		cbz	r2, .L148
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1776              		.loc 1 1205 0
 1777 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1778 000a 012B     		cmp	r3, #1
 1779 000c 08D0     		beq	.L149
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 1780              		.loc 1 1216 0
 1781 000e 8069     		ldr	r0, [r0, #24]
 1782              	.LVL201:
 1783 0010 8268     		ldr	r2, [r0, #8]
 1784 0012 02F00103 		and	r3, r2, #1
 1785 0016 0B60     		str	r3, [r1, #0]
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1786              		.loc 1 1219 0
 1787 0018 0020     		movs	r0, #0
 1788 001a 7047     		bx	lr
 1789              	.LVL202:
 1790              	.L148:
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1791              		.loc 1 1195 0
 1792 001c 0120     		movs	r0, #1
 1793              	.LVL203:
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1794              		.loc 1 1222 0
 1795 001e 7047     		bx	lr
 1796              	.LVL204:
 1797              	.L149:
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 1798              		.loc 1 1207 0
 1799 0020 C269     		ldr	r2, [r0, #28]
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 1800              		.loc 1 1209 0
 1801 0022 8069     		ldr	r0, [r0, #24]
 1802              	.LVL205:
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 1803              		.loc 1 1207 0
 1804 0024 9268     		ldr	r2, [r2, #8]
 1805              	.LVL206:
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 1806              		.loc 1 1209 0
 1807 0026 8368     		ldr	r3, [r0, #8]
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 1808              		.loc 1 1207 0
 1809 0028 1340     		ands	r3, r3, r2
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 1810              		.loc 1 1209 0
 1811 002a 03F00100 		and	r0, r3, #1
 1812 002e 0860     		str	r0, [r1, #0]
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1813              		.loc 1 1219 0
 1814 0030 0020     		movs	r0, #0
 1815 0032 7047     		bx	lr
 1816              		.cfi_endproc
 1817              	.LFE131:
 1819              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 1820              		.align	2
 1821              		.global	PWMSP001_GetTimerRegsVal
 1822              		.thumb
 1823              		.thumb_func
 1825              	PWMSP001_GetTimerRegsVal:
 1826              	.LFB132:
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1827              		.loc 1 1233 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832              	.LVL207:
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 1833              		.loc 1 1238 0
 1834 0000 C36B     		ldr	r3, [r0, #60]
 1835 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1836              		.loc 1 1233 0
 1837 0004 F0B4     		push	{r4, r5, r6, r7}
 1838              	.LCFI14:
 1839              		.cfi_def_cfa_offset 16
 1840              		.cfi_offset 4, -16
 1841              		.cfi_offset 5, -12
 1842              		.cfi_offset 6, -8
 1843              		.cfi_offset 7, -4
 1844              		.loc 1 1238 0
 1845 0006 72B1     		cbz	r2, .L153
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1846              		.loc 1 1245 0
 1847 0008 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1848 000c 012B     		cmp	r3, #1
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1849              		.loc 1 1251 0
 1850 000e 8369     		ldr	r3, [r0, #24]
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1851              		.loc 1 1245 0
 1852 0010 0BD0     		beq	.L154
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1853              		.loc 1 1264 0
 1854 0012 186F     		ldr	r0, [r3, #112]
 1855              	.LVL208:
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 1856              		.loc 1 1267 0
 1857 0014 DA6B     		ldr	r2, [r3, #60]
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 1858              		.loc 1 1268 0
 1859 0016 5B6B     		ldr	r3, [r3, #52]
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 1860              		.loc 1 1267 0
 1861 0018 0A60     		str	r2, [r1, #0]
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1862              		.loc 1 1264 0
 1863 001a 80B2     		uxth	r0, r0
 1864 001c 8860     		str	r0, [r1, #8]
 1865              		.loc 1 1268 0
 1866 001e 4B60     		str	r3, [r1, #4]
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1867              		.loc 1 1271 0
 1868 0020 0020     		movs	r0, #0
 1869              	.LVL209:
 1870              	.L151:
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1871              		.loc 1 1274 0
 1872 0022 F0BC     		pop	{r4, r5, r6, r7}
 1873 0024 7047     		bx	lr
 1874              	.LVL210:
 1875              	.L153:
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1876              		.loc 1 1234 0
 1877 0026 0120     		movs	r0, #1
 1878              	.LVL211:
 1879 0028 FBE7     		b	.L151
 1880              	.LVL212:
 1881              	.L154:
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 1882              		.loc 1 1247 0
 1883 002a C269     		ldr	r2, [r0, #28]
 1884 002c 176F     		ldr	r7, [r2, #112]
 1885              	.LVL213:
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1886              		.loc 1 1251 0
 1887 002e 186F     		ldr	r0, [r3, #112]
 1888              	.LVL214:
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 1889              		.loc 1 1254 0
 1890 0030 D66B     		ldr	r6, [r2, #60]
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 1891              		.loc 1 1255 0
 1892 0032 5D6B     		ldr	r5, [r3, #52]
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 1893              		.loc 1 1256 0
 1894 0034 DC6B     		ldr	r4, [r3, #60]
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 1895              		.loc 1 1257 0
 1896 0036 D2F834C0 		ldr	ip, [r2, #52]
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 1897              		.loc 1 1258 0
 1898 003a 5A6B     		ldr	r2, [r3, #52]
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 1899              		.loc 1 1257 0
 1900 003c 0CF10103 		add	r3, ip, #1
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 1901              		.loc 1 1258 0
 1902 0040 92B2     		uxth	r2, r2
 1903 0042 02FB0333 		mla	r3, r2, r3, r3
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1904              		.loc 1 1251 0
 1905 0046 80B2     		uxth	r0, r0
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 1906              		.loc 1 1250 0
 1907 0048 40EA0740 		orr	r0, r0, r7, lsl #16
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 1908              		.loc 1 1256 0
 1909 004c 06FB0542 		mla	r2, r6, r5, r4
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 1910              		.loc 1 1259 0
 1911 0050 0133     		adds	r3, r3, #1
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 1912              		.loc 1 1250 0
 1913 0052 8860     		str	r0, [r1, #8]
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 1914              		.loc 1 1259 0
 1915 0054 81E80C00 		stmia	r1, {r2, r3}
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1916              		.loc 1 1271 0
 1917 0058 0020     		movs	r0, #0
 1918 005a E2E7     		b	.L151
 1919              		.cfi_endproc
 1920              	.LFE132:
 1922              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 1923              		.align	2
 1924              		.global	PWMSP001_GetPeriodReg
 1925              		.thumb
 1926              		.thumb_func
 1928              	PWMSP001_GetPeriodReg:
 1929              	.LFB133:
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1930              		.loc 1 1285 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935              	.LVL215:
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 1936              		.loc 1 1289 0
 1937 0000 C36B     		ldr	r3, [r0, #60]
 1938 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1939 0004 42B1     		cbz	r2, .L158
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1940              		.loc 1 1295 0
 1941 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1942 000a 012B     		cmp	r3, #1
 1943 000c 06D0     		beq	.L159
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 1944              		.loc 1 1303 0
 1945 000e 8069     		ldr	r0, [r0, #24]
 1946              	.LVL216:
 1947 0010 426B     		ldr	r2, [r0, #52]
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1948              		.loc 1 1305 0
 1949 0012 0020     		movs	r0, #0
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 1950              		.loc 1 1303 0
 1951 0014 0A60     		str	r2, [r1, #0]
 1952 0016 7047     		bx	lr
 1953              	.LVL217:
 1954              	.L158:
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1955              		.loc 1 1286 0
 1956 0018 0120     		movs	r0, #1
 1957              	.LVL218:
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1958              		.loc 1 1308 0
 1959 001a 7047     		bx	lr
 1960              	.LVL219:
 1961              	.L159:
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 1962              		.loc 1 1297 0
 1963 001c C369     		ldr	r3, [r0, #28]
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 1964              		.loc 1 1298 0
 1965 001e 8069     		ldr	r0, [r0, #24]
 1966              	.LVL220:
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 1967              		.loc 1 1297 0
 1968 0020 5A6B     		ldr	r2, [r3, #52]
 1969 0022 531C     		adds	r3, r2, #1
 1970 0024 0B60     		str	r3, [r1, #0]
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 1971              		.loc 1 1298 0
 1972 0026 406B     		ldr	r0, [r0, #52]
 1973 0028 82B2     		uxth	r2, r0
 1974 002a 02FB0333 		mla	r3, r2, r3, r3
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 1975              		.loc 1 1299 0
 1976 002e 581C     		adds	r0, r3, #1
 1977 0030 0860     		str	r0, [r1, #0]
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1978              		.loc 1 1305 0
 1979 0032 0020     		movs	r0, #0
 1980 0034 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE133:
 1984 0036 00BF     		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 1985              		.align	2
 1986              		.global	PWMSP001_SWRequestShadowTransfer
 1987              		.thumb
 1988              		.thumb_func
 1990              	PWMSP001_SWRequestShadowTransfer:
 1991              	.LFB134:
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1992              		.loc 1 1318 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997              	.LVL221:
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 1998              		.loc 1 1325 0
 1999 0000 C36B     		ldr	r3, [r0, #60]
 2000 0002 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2001              		.loc 1 1318 0
 2002 0004 10B4     		push	{r4}
 2003              	.LCFI15:
 2004              		.cfi_def_cfa_offset 4
 2005              		.cfi_offset 4, -4
 2006              		.loc 1 1325 0
 2007 0006 81B1     		cbz	r1, .L163
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2008              		.loc 1 1333 0
 2009 0008 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2010 000c 012B     		cmp	r3, #1
 2011 000e 0ED0     		beq	.L164
 2012              	.LVL222:
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 2013              		.loc 1 1343 0
 2014 0010 4369     		ldr	r3, [r0, #20]
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2015              		.loc 1 1342 0
 2016 0012 90F83720 		ldrb	r2, [r0, #55]	@ zero_extendqisi2
 2017              		.loc 1 1343 0
 2018 0016 1969     		ldr	r1, [r3, #16]
 2019 0018 0120     		movs	r0, #1
 2020              	.LVL223:
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2021              		.loc 1 1342 0
 2022 001a 9200     		lsls	r2, r2, #2
 2023              	.LVL224:
 2024              		.loc 1 1343 0
 2025 001c 00FA02F2 		lsl	r2, r0, r2
 2026              	.LVL225:
 2027 0020 0A43     		orrs	r2, r2, r1
 2028 0022 1A61     		str	r2, [r3, #16]
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2029              		.loc 1 1345 0
 2030 0024 0020     		movs	r0, #0
 2031              	.LVL226:
 2032              	.L161:
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2033              		.loc 1 1348 0
 2034 0026 10BC     		pop	{r4}
 2035 0028 7047     		bx	lr
 2036              	.LVL227:
 2037              	.L163:
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2038              		.loc 1 1319 0
 2039 002a 0120     		movs	r0, #1
 2040              	.LVL228:
 2041 002c FBE7     		b	.L161
 2042              	.LVL229:
 2043              	.L164:
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2044              		.loc 1 1336 0
 2045 002e 90F83710 		ldrb	r1, [r0, #55]	@ zero_extendqisi2
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 2046              		.loc 1 1337 0
 2047 0032 90F83840 		ldrb	r4, [r0, #56]	@ zero_extendqisi2
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 2048              		.loc 1 1338 0
 2049 0036 4269     		ldr	r2, [r0, #20]
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 2050              		.loc 1 1337 0
 2051 0038 A400     		lsls	r4, r4, #2
 2052              	.LVL230:
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2053              		.loc 1 1336 0
 2054 003a 8800     		lsls	r0, r1, #2
 2055              	.LVL231:
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 2056              		.loc 1 1338 0
 2057 003c 03FA00F0 		lsl	r0, r3, r0
 2058              	.LVL232:
 2059 0040 1169     		ldr	r1, [r2, #16]
 2060 0042 03FA04F3 		lsl	r3, r3, r4
 2061 0046 0343     		orrs	r3, r3, r0
 2062 0048 0B43     		orrs	r3, r3, r1
 2063 004a 1361     		str	r3, [r2, #16]
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2064              		.loc 1 1345 0
 2065 004c 0020     		movs	r0, #0
 2066 004e EAE7     		b	.L161
 2067              		.cfi_endproc
 2068              	.LFE134:
 2070              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 2071              		.align	2
 2072              		.global	PWMSP001_ResetTrapFlag
 2073              		.thumb
 2074              		.thumb_func
 2076              	PWMSP001_ResetTrapFlag:
 2077              	.LFB135:
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2078              		.loc 1 1355 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 2082              		@ link register save eliminated.
 2083              	.LVL233:
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 2084              		.loc 1 1356 0
 2085 0000 C37C     		ldrb	r3, [r0, #19]	@ zero_extendqisi2
 2086 0002 012B     		cmp	r3, #1
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 2087              		.loc 1 1358 0
 2088 0004 8369     		ldr	r3, [r0, #24]
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 2089              		.loc 1 1356 0
 2090 0006 11D0     		beq	.L166
 2091              	.L167:
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 2092              		.loc 1 1364 0
 2093 0008 D3F8B020 		ldr	r2, [r3, #176]
 2094 000c 42F40061 		orr	r1, r2, #2048
 2095 0010 C3F8B010 		str	r1, [r3, #176]
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2096              		.loc 1 1365 0
 2097 0014 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2098 0018 012B     		cmp	r3, #1
 2099 001a 06D1     		bne	.L165
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 2100              		.loc 1 1367 0
 2101 001c C069     		ldr	r0, [r0, #28]
 2102              	.LVL234:
 2103 001e D0F8B020 		ldr	r2, [r0, #176]
 2104 0022 42F40061 		orr	r1, r2, #2048
 2105 0026 C0F8B010 		str	r1, [r0, #176]
 2106              	.L165:
 2107 002a 7047     		bx	lr
 2108              	.LVL235:
 2109              	.L166:
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 2110              		.loc 1 1358 0
 2111 002c D3F8B020 		ldr	r2, [r3, #176]
 2112 0030 42F48061 		orr	r1, r2, #1024
 2113 0034 C3F8B010 		str	r1, [r3, #176]
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2114              		.loc 1 1359 0
 2115 0038 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2116 003c 012A     		cmp	r2, #1
 2117 003e E3D1     		bne	.L167
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 2118              		.loc 1 1361 0
 2119 0040 C269     		ldr	r2, [r0, #28]
 2120 0042 D2F8B010 		ldr	r1, [r2, #176]
 2121 0046 41F48061 		orr	r1, r1, #1024
 2122 004a C2F8B010 		str	r1, [r2, #176]
 2123 004e DBE7     		b	.L167
 2124              		.cfi_endproc
 2125              	.LFE135:
 2127              		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 2128              		.align	2
 2129              		.global	PWMSP001_lConfigureSecondSlice
 2130              		.thumb
 2131              		.thumb_func
 2133              	PWMSP001_lConfigureSecondSlice:
 2134              	.LFB136:
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2135              		.loc 1 1377 0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 0
 2138              		@ frame_needed = 0, uses_anonymous_args = 0
 2139              		@ link register save eliminated.
 2140              	.LVL236:
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 2141              		.loc 1 1378 0
 2142 0000 C369     		ldr	r3, [r0, #28]
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 2143              		.loc 1 1381 0
 2144 0002 418D     		ldrh	r1, [r0, #42]
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 2145              		.loc 1 1383 0
 2146 0004 4289     		ldrh	r2, [r0, #10]
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2147              		.loc 1 1377 0
 2148 0006 F0B4     		push	{r4, r5, r6, r7}
 2149              	.LCFI16:
 2150              		.cfi_def_cfa_offset 16
 2151              		.cfi_offset 4, -16
 2152              		.cfi_offset 5, -12
 2153              		.cfi_offset 6, -8
 2154              		.cfi_offset 7, -4
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 2155              		.loc 1 1378 0
 2156 0008 0724     		movs	r4, #7
 2157 000a 1C61     		str	r4, [r3, #16]
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 2158              		.loc 1 1381 0
 2159 000c 5963     		str	r1, [r3, #52]
 2160              		.loc 1 1383 0
 2161 000e DA63     		str	r2, [r3, #60]
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 2162              		.loc 1 1386 0
 2163 0010 5D68     		ldr	r5, [r3, #4]
 2164 0012 45F48016 		orr	r6, r5, #1048576
 2165 0016 5E60     		str	r6, [r3, #4]
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 2166              		.loc 1 1389 0
 2167 0018 C77B     		ldrb	r7, [r0, #15]	@ zero_extendqisi2
 2168 001a 012F     		cmp	r7, #1
 2169 001c 7DD0     		beq	.L172
 2170              	.L170:
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 2171              		.loc 1 1402 0
 2172 001e 477C     		ldrb	r7, [r0, #17]	@ zero_extendqisi2
 2173 0020 012F     		cmp	r7, #1
 2174 0022 14D1     		bne	.L171
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 2175              		.loc 1 1404 0
 2176 0024 1968     		ldr	r1, [r3, #0]
 2177 0026 21F0C242 		bic	r2, r1, #1627389952
 2178 002a 22F44014 		bic	r4, r2, #3145728
 2179 002e 1C60     		str	r4, [r3, #0]
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 2180              		.loc 1 1406 0
 2181 0030 5D68     		ldr	r5, [r3, #4]
 2182 0032 25F40036 		bic	r6, r5, #131072
 2183 0036 5E60     		str	r6, [r3, #4]
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 2184              		.loc 1 1409 0
 2185 0038 0778     		ldrb	r7, [r0, #0]	@ zero_extendqisi2
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 2186              		.loc 1 1407 0
 2187 003a 1968     		ldr	r1, [r3, #0]
 2188              		.loc 1 1409 0
 2189 003c 3A06     		lsls	r2, r7, #24
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 2190              		.loc 1 1407 0
 2191 003e 02F08074 		and	r4, r2, #16777216
 2192 0042 0C43     		orrs	r4, r4, r1
 2193 0044 1C60     		str	r4, [r3, #0]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 2194              		.loc 1 1412 0
 2195 0046 5D68     		ldr	r5, [r3, #4]
 2196 0048 45F40036 		orr	r6, r5, #131072
 2197 004c 5E60     		str	r6, [r3, #4]
 2198              	.L171:
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 2199              		.loc 1 1415 0
 2200 004e 5F69     		ldr	r7, [r3, #20]
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 2201              		.loc 1 1423 0
 2202 0050 90F83440 		ldrb	r4, [r0, #52]	@ zero_extendqisi2
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 2203              		.loc 1 1419 0
 2204 0054 90F83660 		ldrb	r6, [r0, #54]	@ zero_extendqisi2
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 2205              		.loc 1 1424 0
 2206 0058 90F83550 		ldrb	r5, [r0, #53]	@ zero_extendqisi2
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 2207              		.loc 1 1448 0
 2208 005c 4169     		ldr	r1, [r0, #20]
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 2209              		.loc 1 1449 0
 2210 005e 90F83820 		ldrb	r2, [r0, #56]	@ zero_extendqisi2
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 2211              		.loc 1 1415 0
 2212 0062 27F4CE47 		bic	r7, r7, #26368
 2213 0066 27F00B07 		bic	r7, r7, #11
 2214 006a 5F61     		str	r7, [r3, #20]
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 2215              		.loc 1 1420 0
 2216 006c 077B     		ldrb	r7, [r0, #12]	@ zero_extendqisi2
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 2217              		.loc 1 1423 0
 2218 006e A402     		lsls	r4, r4, #10
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 2219              		.loc 1 1420 0
 2220 0070 7F00     		lsls	r7, r7, #1
 2221 0072 07F00207 		and	r7, r7, #2
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 2222              		.loc 1 1424 0
 2223 0076 04F48064 		and	r4, r4, #1024
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 2224              		.loc 1 1421 0
 2225 007a 3C43     		orrs	r4, r4, r7
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 2226              		.loc 1 1419 0
 2227 007c 06F00106 		and	r6, r6, #1
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 2228              		.loc 1 1424 0
 2229 0080 2D02     		lsls	r5, r5, #8
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 2230              		.loc 1 1425 0
 2231 0082 05F44075 		and	r5, r5, #768
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 2232              		.loc 1 1422 0
 2233 0086 3443     		orrs	r4, r4, r6
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 2234              		.loc 1 1424 0
 2235 0088 2C43     		orrs	r4, r4, r5
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 2236              		.loc 1 1418 0
 2237 008a 5C61     		str	r4, [r3, #20]
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 2238              		.loc 1 1428 0
 2239 008c 90F82140 		ldrb	r4, [r0, #33]	@ zero_extendqisi2
 2240 0090 5D69     		ldr	r5, [r3, #20]
 2241 0092 6403     		lsls	r4, r4, #13
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 2242              		.loc 1 1429 0
 2243 0094 04F4C044 		and	r4, r4, #24576
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 2244              		.loc 1 1428 0
 2245 0098 2C43     		orrs	r4, r4, r5
 2246 009a 5C61     		str	r4, [r3, #20]
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 2247              		.loc 1 1430 0
 2248 009c 1D6A     		ldr	r5, [r3, #32]
 2249 009e 447B     		ldrb	r4, [r0, #13]	@ zero_extendqisi2
 2250 00a0 25F00F05 		bic	r5, r5, #15
 2251 00a4 04F00F04 		and	r4, r4, #15
 2252 00a8 2C43     		orrs	r4, r4, r5
 2253 00aa 1C62     		str	r4, [r3, #32]
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 2254              		.loc 1 1434 0
 2255 00ac 847C     		ldrb	r4, [r0, #18]	@ zero_extendqisi2
 2256 00ae 5D69     		ldr	r5, [r3, #20]
 2257 00b0 6405     		lsls	r4, r4, #21
 2258 00b2 25F40015 		bic	r5, r5, #2097152
 2259 00b6 04F40014 		and	r4, r4, #2097152
 2260 00ba 2C43     		orrs	r4, r4, r5
 2261 00bc 5C61     		str	r4, [r3, #20]
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 2262              		.loc 1 1437 0
 2263 00be C47C     		ldrb	r4, [r0, #19]	@ zero_extendqisi2
 2264 00c0 5D69     		ldr	r5, [r3, #20]
 2265 00c2 A405     		lsls	r4, r4, #22
 2266 00c4 25F48005 		bic	r5, r5, #4194304
 2267 00c8 04F48004 		and	r4, r4, #4194304
 2268 00cc 2C43     		orrs	r4, r4, r5
 2269 00ce 5C61     		str	r4, [r3, #20]
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 2270              		.loc 1 1440 0
 2271 00d0 447C     		ldrb	r4, [r0, #17]	@ zero_extendqisi2
 2272 00d2 5D69     		ldr	r5, [r3, #20]
 2273 00d4 6404     		lsls	r4, r4, #17
 2274 00d6 25F40035 		bic	r5, r5, #131072
 2275 00da 04F40034 		and	r4, r4, #131072
 2276 00de 2C43     		orrs	r4, r4, r5
 2277 00e0 5C61     		str	r4, [r3, #20]
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 2278              		.loc 1 1443 0
 2279 00e2 5D6A     		ldr	r5, [r3, #36]
 2280 00e4 90F82240 		ldrb	r4, [r0, #34]	@ zero_extendqisi2
 2281 00e8 25F00F05 		bic	r5, r5, #15
 2282 00ec 04F00F04 		and	r4, r4, #15
 2283 00f0 2C43     		orrs	r4, r4, r5
 2284 00f2 5C62     		str	r4, [r3, #36]
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 2285              		.loc 1 1446 0
 2286 00f4 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 2287              	.LVL237:
 2288 00f6 9861     		str	r0, [r3, #24]
 2289              		.loc 1 1449 0
 2290 00f8 9200     		lsls	r2, r2, #2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 2291              		.loc 1 1448 0
 2292 00fa 0123     		movs	r3, #1
 2293 00fc 0869     		ldr	r0, [r1, #16]
 2294 00fe 03FA02F5 		lsl	r5, r3, r2
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 2295              		.loc 1 1451 0
 2296 0102 D418     		adds	r4, r2, r3
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 2297              		.loc 1 1450 0
 2298 0104 03FA04F4 		lsl	r4, r3, r4
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 2299              		.loc 1 1449 0
 2300 0108 2843     		orrs	r0, r0, r5
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 2301              		.loc 1 1453 0
 2302 010a 0232     		adds	r2, r2, #2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 2303              		.loc 1 1448 0
 2304 010c 2043     		orrs	r0, r0, r4
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 2305              		.loc 1 1452 0
 2306 010e 03FA02F3 		lsl	r3, r3, r2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 2307              		.loc 1 1448 0
 2308 0112 0343     		orrs	r3, r3, r0
 2309 0114 0B61     		str	r3, [r1, #16]
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2310              		.loc 1 1454 0
 2311 0116 F0BC     		pop	{r4, r5, r6, r7}
 2312 0118 7047     		bx	lr
 2313              	.LVL238:
 2314              	.L172:
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 2315              		.loc 1 1391 0
 2316 011a 1968     		ldr	r1, [r3, #0]
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 2317              		.loc 1 1393 0
 2318 011c 90F82420 		ldrb	r2, [r0, #36]	@ zero_extendqisi2
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 2319              		.loc 1 1391 0
 2320 0120 21F0C054 		bic	r4, r1, #402653184
 2321 0124 24F44025 		bic	r5, r4, #786432
 2322 0128 1D60     		str	r5, [r3, #0]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 2323              		.loc 1 1392 0
 2324 012a 5E68     		ldr	r6, [r3, #4]
 2325 012c 26F00C07 		bic	r7, r6, #12
 2326 0130 5F60     		str	r7, [r3, #4]
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 2327              		.loc 1 1393 0
 2328 0132 1968     		ldr	r1, [r3, #0]
 2329 0134 9204     		lsls	r2, r2, #18
 2330 0136 02F44024 		and	r4, r2, #786432
 2331 013a 0C43     		orrs	r4, r4, r1
 2332 013c 1C60     		str	r4, [r3, #0]
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 2333              		.loc 1 1397 0
 2334 013e 5D68     		ldr	r5, [r3, #4]
 2335 0140 45F00806 		orr	r6, r5, #8
 2336 0144 5E60     		str	r6, [r3, #4]
 2337 0146 6AE7     		b	.L170
 2338              		.cfi_endproc
 2339              	.LFE136:
 2341              		.section	.text.PWMSP001_lInit,"ax",%progbits
 2342              		.align	2
 2343              		.global	PWMSP001_lInit
 2344              		.thumb
 2345              		.thumb_func
 2347              	PWMSP001_lInit:
 2348              	.LFB113:
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2349              		.loc 1 301 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 2353              	.LVL239:
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 2354              		.loc 1 307 0
 2355 0000 C26B     		ldr	r2, [r0, #60]
 2356 0002 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2357              		.loc 1 301 0
 2358 0004 70B5     		push	{r4, r5, r6, lr}
 2359              	.LCFI17:
 2360              		.cfi_def_cfa_offset 16
 2361              		.cfi_offset 4, -16
 2362              		.cfi_offset 5, -12
 2363              		.cfi_offset 6, -8
 2364              		.cfi_offset 14, -4
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2365              		.loc 1 301 0
 2366 0006 0446     		mov	r4, r0
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 2367              		.loc 1 307 0
 2368 0008 002B     		cmp	r3, #0
 2369 000a 40F09B80 		bne	.L181
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 2370              		.loc 1 311 0
 2371 000e 8369     		ldr	r3, [r0, #24]
 2372 0010 0721     		movs	r1, #7
 2373 0012 1961     		str	r1, [r3, #16]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 2374              		.loc 1 315 0
 2375 0014 C07B     		ldrb	r0, [r0, #15]	@ zero_extendqisi2
 2376              	.LVL240:
 2377 0016 0128     		cmp	r0, #1
 2378 0018 00F0B180 		beq	.L191
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 2379              		.loc 1 329 0
 2380 001c 667C     		ldrb	r6, [r4, #17]	@ zero_extendqisi2
 2381 001e 012E     		cmp	r6, #1
 2382 0020 00F09280 		beq	.L192
 2383              	.L176:
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 2384              		.loc 1 345 0
 2385 0024 5E69     		ldr	r6, [r3, #20]
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 2386              		.loc 1 350 0
 2387 0026 94F83610 		ldrb	r1, [r4, #54]	@ zero_extendqisi2
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 2388              		.loc 1 353 0
 2389 002a 94F83450 		ldrb	r5, [r4, #52]	@ zero_extendqisi2
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 2390              		.loc 1 354 0
 2391 002e 94F83500 		ldrb	r0, [r4, #53]	@ zero_extendqisi2
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 2392              		.loc 1 345 0
 2393 0032 26F4CE46 		bic	r6, r6, #26368
 2394 0036 26F00906 		bic	r6, r6, #9
 2395 003a 5E61     		str	r6, [r3, #20]
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 2396              		.loc 1 349 0
 2397 003c 5E69     		ldr	r6, [r3, #20]
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 2398              		.loc 1 353 0
 2399 003e AD02     		lsls	r5, r5, #10
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 2400              		.loc 1 350 0
 2401 0040 01F00101 		and	r1, r1, #1
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 2402              		.loc 1 352 0
 2403 0044 3143     		orrs	r1, r1, r6
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 2404              		.loc 1 354 0
 2405 0046 0002     		lsls	r0, r0, #8
 2406 0048 05F48066 		and	r6, r5, #1024
 2407 004c 3143     		orrs	r1, r1, r6
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 2408              		.loc 1 355 0
 2409 004e 00F44075 		and	r5, r0, #768
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 2410              		.loc 1 349 0
 2411 0052 2943     		orrs	r1, r1, r5
 2412 0054 5961     		str	r1, [r3, #20]
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 2413              		.loc 1 360 0
 2414 0056 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 2415 005a 0129     		cmp	r1, #1
 2416 005c 09D0     		beq	.L177
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 2417              		.loc 1 362 0
 2418 005e 267B     		ldrb	r6, [r4, #12]	@ zero_extendqisi2
 2419 0060 5D69     		ldr	r5, [r3, #20]
 2420 0062 7000     		lsls	r0, r6, #1
 2421 0064 00F00206 		and	r6, r0, #2
 2422 0068 25F00201 		bic	r1, r5, #2
 2423 006c 46EA0105 		orr	r5, r6, r1
 2424 0070 5D61     		str	r5, [r3, #20]
 2425              	.L177:
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 2426              		.loc 1 367 0
 2427 0072 94F82160 		ldrb	r6, [r4, #33]	@ zero_extendqisi2
 2428 0076 5869     		ldr	r0, [r3, #20]
 2429 0078 7103     		lsls	r1, r6, #13
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 2430              		.loc 1 368 0
 2431 007a 01F4C045 		and	r5, r1, #24576
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 2432              		.loc 1 367 0
 2433 007e 0543     		orrs	r5, r5, r0
 2434 0080 5D61     		str	r5, [r3, #20]
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 2435              		.loc 1 370 0
 2436 0082 1E6A     		ldr	r6, [r3, #32]
 2437 0084 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 2438 0086 26F00F00 		bic	r0, r6, #15
 2439 008a 01F00F05 		and	r5, r1, #15
 2440 008e 0543     		orrs	r5, r5, r0
 2441 0090 1D62     		str	r5, [r3, #32]
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 2442              		.loc 1 374 0
 2443 0092 94F82060 		ldrb	r6, [r4, #32]	@ zero_extendqisi2
 2444 0096 012E     		cmp	r6, #1
 2445 0098 1DD0     		beq	.L178
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 2446              		.loc 1 377 0
 2447 009a A07C     		ldrb	r0, [r4, #18]	@ zero_extendqisi2
 2448 009c 5969     		ldr	r1, [r3, #20]
 2449 009e 4505     		lsls	r5, r0, #21
 2450 00a0 05F40016 		and	r6, r5, #2097152
 2451 00a4 21F40010 		bic	r0, r1, #2097152
 2452 00a8 46EA0001 		orr	r1, r6, r0
 2453 00ac 5961     		str	r1, [r3, #20]
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 2454              		.loc 1 380 0
 2455 00ae E57C     		ldrb	r5, [r4, #19]	@ zero_extendqisi2
 2456 00b0 5E69     		ldr	r6, [r3, #20]
 2457 00b2 A805     		lsls	r0, r5, #22
 2458 00b4 00F48005 		and	r5, r0, #4194304
 2459 00b8 26F48001 		bic	r1, r6, #4194304
 2460 00bc 45EA0106 		orr	r6, r5, r1
 2461 00c0 5E61     		str	r6, [r3, #20]
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 2462              		.loc 1 383 0
 2463 00c2 607C     		ldrb	r0, [r4, #17]	@ zero_extendqisi2
 2464 00c4 5D69     		ldr	r5, [r3, #20]
 2465 00c6 4104     		lsls	r1, r0, #17
 2466 00c8 01F40036 		and	r6, r1, #131072
 2467 00cc 25F40030 		bic	r0, r5, #131072
 2468 00d0 46EA0005 		orr	r5, r6, r0
 2469 00d4 5D61     		str	r5, [r3, #20]
 2470              	.L178:
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 2471              		.loc 1 387 0
 2472 00d6 5D6A     		ldr	r5, [r3, #36]
 2473 00d8 94F82260 		ldrb	r6, [r4, #34]	@ zero_extendqisi2
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 2474              		.loc 1 393 0
 2475 00dc 208D     		ldrh	r0, [r4, #40]
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 2476              		.loc 1 395 0
 2477 00de 2189     		ldrh	r1, [r4, #8]
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 2478              		.loc 1 387 0
 2479 00e0 25F00F05 		bic	r5, r5, #15
 2480 00e4 06F00F06 		and	r6, r6, #15
 2481 00e8 2E43     		orrs	r6, r6, r5
 2482 00ea 5E62     		str	r6, [r3, #36]
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 2483              		.loc 1 389 0
 2484 00ec 257C     		ldrb	r5, [r4, #16]	@ zero_extendqisi2
 2485 00ee 9D61     		str	r5, [r3, #24]
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 2486              		.loc 1 393 0
 2487 00f0 5863     		str	r0, [r3, #52]
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 2488              		.loc 1 395 0
 2489 00f2 D963     		str	r1, [r3, #60]
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 2490              		.loc 1 396 0
 2491 00f4 D3F8B000 		ldr	r0, [r3, #176]
 2492 00f8 40F47061 		orr	r1, r0, #3840
 2493 00fc 41F00F06 		orr	r6, r1, #15
 2494 0100 C3F8B060 		str	r6, [r3, #176]
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2495              		.loc 1 400 0
 2496 0104 94F82050 		ldrb	r5, [r4, #32]	@ zero_extendqisi2
 2497 0108 012D     		cmp	r5, #1
 2498 010a 53D0     		beq	.L193
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 2499              		.loc 1 408 0
 2500 010c D3F8A400 		ldr	r0, [r3, #164]
 2501 0110 216B     		ldr	r1, [r4, #48]
 2502 0112 40EA0106 		orr	r6, r0, r1
 2503 0116 C3F8A460 		str	r6, [r3, #164]
 2504              	.L180:
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 2505              		.loc 1 414 0
 2506 011a 94F83760 		ldrb	r6, [r4, #55]	@ zero_extendqisi2
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 2507              		.loc 1 413 0
 2508 011e 6069     		ldr	r0, [r4, #20]
 2509 0120 0123     		movs	r3, #1
 2510 0122 0469     		ldr	r4, [r0, #16]
 2511              	.LVL241:
 2512 0124 B100     		lsls	r1, r6, #2
 2513 0126 03FA01F6 		lsl	r6, r3, r1
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 2514              		.loc 1 415 0
 2515 012a CD18     		adds	r5, r1, r3
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 2516              		.loc 1 414 0
 2517 012c 3443     		orrs	r4, r4, r6
 2518 012e 03FA05F5 		lsl	r5, r3, r5
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 2519              		.loc 1 416 0
 2520 0132 0231     		adds	r1, r1, #2
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 2521              		.loc 1 415 0
 2522 0134 2C43     		orrs	r4, r4, r5
 2523 0136 03FA01F1 		lsl	r1, r3, r1
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 2524              		.loc 1 413 0
 2525 013a 2143     		orrs	r1, r1, r4
 2526 013c 0161     		str	r1, [r0, #16]
 2527              	.LVL242:
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2528              		.loc 1 418 0
 2529 013e 0020     		movs	r0, #0
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 2530              		.loc 1 419 0
 2531 0140 1370     		strb	r3, [r2, #0]
 2532 0142 70BD     		pop	{r4, r5, r6, pc}
 2533              	.LVL243:
 2534              	.L181:
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2535              		.loc 1 302 0
 2536 0144 0120     		movs	r0, #1
 2537              	.LVL244:
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2538              		.loc 1 427 0
 2539 0146 70BD     		pop	{r4, r5, r6, pc}
 2540              	.LVL245:
 2541              	.L192:
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 2542              		.loc 1 329 0 discriminator 1
 2543 0148 94F82050 		ldrb	r5, [r4, #32]	@ zero_extendqisi2
 2544 014c 012D     		cmp	r5, #1
 2545 014e 3FF469AF 		beq	.L176
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 2546              		.loc 1 333 0
 2547 0152 1968     		ldr	r1, [r3, #0]
 2548 0154 21F0C240 		bic	r0, r1, #1627389952
 2549 0158 20F44016 		bic	r6, r0, #3145728
 2550 015c 1E60     		str	r6, [r3, #0]
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 2551              		.loc 1 335 0
 2552 015e 5D68     		ldr	r5, [r3, #4]
 2553 0160 25F40031 		bic	r1, r5, #131072
 2554 0164 5960     		str	r1, [r3, #4]
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 2555              		.loc 1 337 0
 2556 0166 2678     		ldrb	r6, [r4, #0]	@ zero_extendqisi2
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 2557              		.loc 1 336 0
 2558 0168 1868     		ldr	r0, [r3, #0]
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 2559              		.loc 1 337 0
 2560 016a 3506     		lsls	r5, r6, #24
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 2561              		.loc 1 338 0
 2562 016c 05F08071 		and	r1, r5, #16777216
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 2563              		.loc 1 336 0
 2564 0170 0143     		orrs	r1, r1, r0
 2565 0172 1960     		str	r1, [r3, #0]
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 2566              		.loc 1 342 0
 2567 0174 5E68     		ldr	r6, [r3, #4]
 2568 0176 46F40030 		orr	r0, r6, #131072
 2569 017a 5860     		str	r0, [r3, #4]
 2570 017c 52E7     		b	.L176
 2571              	.L191:
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 2572              		.loc 1 317 0
 2573 017e 1D68     		ldr	r5, [r3, #0]
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 2574              		.loc 1 319 0
 2575 0180 94F82460 		ldrb	r6, [r4, #36]	@ zero_extendqisi2
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 2576              		.loc 1 317 0
 2577 0184 25F0C051 		bic	r1, r5, #402653184
 2578 0188 21F44020 		bic	r0, r1, #786432
 2579 018c 1860     		str	r0, [r3, #0]
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 2580              		.loc 1 318 0
 2581 018e 5D68     		ldr	r5, [r3, #4]
 2582 0190 25F00C01 		bic	r1, r5, #12
 2583 0194 5960     		str	r1, [r3, #4]
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 2584              		.loc 1 319 0
 2585 0196 1868     		ldr	r0, [r3, #0]
 2586 0198 B604     		lsls	r6, r6, #18
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 2587              		.loc 1 320 0
 2588 019a 06F44025 		and	r5, r6, #786432
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 2589              		.loc 1 319 0
 2590 019e 0543     		orrs	r5, r5, r0
 2591 01a0 1D60     		str	r5, [r3, #0]
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 2592              		.loc 1 323 0
 2593 01a2 5968     		ldr	r1, [r3, #4]
 2594 01a4 41F00800 		orr	r0, r1, #8
 2595 01a8 5860     		str	r0, [r3, #4]
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 2596              		.loc 1 329 0
 2597 01aa 667C     		ldrb	r6, [r4, #17]	@ zero_extendqisi2
 2598 01ac 012E     		cmp	r6, #1
 2599 01ae 7FF439AF 		bne	.L176
 2600 01b2 C9E7     		b	.L192
 2601              	.L193:
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 2602              		.loc 1 402 0
 2603 01b4 2046     		mov	r0, r4
 2604 01b6 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 2605              	.LVL246:
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 2606              		.loc 1 403 0
 2607 01ba E369     		ldr	r3, [r4, #28]
 2608 01bc 256B     		ldr	r5, [r4, #48]
 2609 01be D3F8A400 		ldr	r0, [r3, #164]
 2610 01c2 E26B     		ldr	r2, [r4, #60]
 2611 01c4 40EA0501 		orr	r1, r0, r5
 2612 01c8 C3F8A410 		str	r1, [r3, #164]
 2613 01cc A5E7     		b	.L180
 2614              		.cfi_endproc
 2615              	.LFE113:
 2617 01ce 00BF     		.section	.text.PWMSP001_Init,"ax",%progbits
 2618              		.align	2
 2619              		.global	PWMSP001_Init
 2620              		.thumb
 2621              		.thumb_func
 2623              	PWMSP001_Init:
 2624              	.LFB112:
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2625              		.loc 1 275 0
 2626              		.cfi_startproc
 2627              		@ args = 0, pretend = 0, frame = 0
 2628              		@ frame_needed = 0, uses_anonymous_args = 0
 2629              	.LVL247:
 2630 0000 10B5     		push	{r4, lr}
 2631              	.LCFI18:
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 4, -8
 2634              		.cfi_offset 14, -4
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
 2635              		.loc 1 278 0
 2636 0002 0F4C     		ldr	r4, .L197
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
 2637              		.loc 1 277 0
 2638 0004 FFF7FEFF 		bl	CCU4GLOBAL_Init
 2639              	.LVL248:
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
 2640              		.loc 1 278 0
 2641 0008 2046     		mov	r0, r4
 2642 000a FFF7FEFF 		bl	PWMSP001_lInit
 2643              	.LVL249:
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 2644              		.loc 1 280 0
 2645 000e 10B9     		cbnz	r0, .L195
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
 2646              		.loc 1 282 0
 2647 0010 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2648 0012 012B     		cmp	r3, #1
 2649 0014 10D0     		beq	.L196
 2650              	.LVL250:
 2651              	.L195:
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  &= (uint32_t)(~(PORT3_PDR0_PD4_Msk));
 2652              		.loc 1 290 0
 2653 0016 4FF40340 		mov	r0, #33536
 2654 001a C4F60200 		movt	r0, 18434
 2655 001e 026C     		ldr	r2, [r0, #64]
 2656 0020 22F4E021 		bic	r1, r2, #458752
 2657 0024 0164     		str	r1, [r0, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  |= (((uint32_t)0 << (uint32_t)PORT3_PDR0_PD4_Pos) & \
 2658              		.loc 1 291 0
 2659 0026 036C     		ldr	r3, [r0, #64]
 2660 0028 0364     		str	r3, [r0, #64]
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 2661              		.loc 1 293 0
 2662 002a 4269     		ldr	r2, [r0, #20]
 2663 002c 22F04001 		bic	r1, r2, #64
 2664 0030 4161     		str	r1, [r0, #20]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 2665              		.loc 1 294 0
 2666 0032 4369     		ldr	r3, [r0, #20]
 2667 0034 4361     		str	r3, [r0, #20]
 2668 0036 10BD     		pop	{r4, pc}
 2669              	.LVL251:
 2670              	.L196:
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
 2671              		.loc 1 284 0
 2672 0038 2046     		mov	r0, r4
 2673              	.LVL252:
 2674 003a FFF7FEFF 		bl	PWMSP001_Start
 2675              	.LVL253:
 2676 003e EAE7     		b	.L195
 2677              	.L198:
 2678              		.align	2
 2679              	.L197:
 2680 0040 00000000 		.word	PWMSP001_Handle0
 2681              		.cfi_endproc
 2682              	.LFE112:
 2684              		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 2685              		.align	2
 2686              		.global	PWMSP001_EnableEvent
 2687              		.thumb
 2688              		.thumb_func
 2690              	PWMSP001_EnableEvent:
 2691              	.LFB137:
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2692              		.loc 1 1464 0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 2696              		@ link register save eliminated.
 2697              	.LVL254:
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2698              		.loc 1 1467 0
 2699 0000 C36B     		ldr	r3, [r0, #60]
 2700 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2701 0004 72B1     		cbz	r2, .L202
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2702              		.loc 1 1474 0
 2703 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2704 000a 012B     		cmp	r3, #1
 2705 000c 0CD0     		beq	.L203
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 2706              		.loc 1 1480 0
 2707 000e 8369     		ldr	r3, [r0, #24]
 2708 0010 0120     		movs	r0, #1
 2709              	.LVL255:
 2710 0012 D3F8A420 		ldr	r2, [r3, #164]
 2711 0016 00FA01F1 		lsl	r1, r0, r1
 2712              	.LVL256:
 2713 001a 1143     		orrs	r1, r1, r2
 2714 001c C3F8A410 		str	r1, [r3, #164]
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2715              		.loc 1 1482 0
 2716 0020 0020     		movs	r0, #0
 2717 0022 7047     		bx	lr
 2718              	.LVL257:
 2719              	.L202:
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2720              		.loc 1 1469 0
 2721 0024 0120     		movs	r0, #1
 2722              	.LVL258:
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2723              		.loc 1 1485 0
 2724 0026 7047     		bx	lr
 2725              	.LVL259:
 2726              	.L203:
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 2727              		.loc 1 1476 0
 2728 0028 C269     		ldr	r2, [r0, #28]
 2729 002a D2F8A400 		ldr	r0, [r2, #164]
 2730              	.LVL260:
 2731 002e 03FA01F3 		lsl	r3, r3, r1
 2732 0032 0343     		orrs	r3, r3, r0
 2733 0034 C2F8A430 		str	r3, [r2, #164]
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2734              		.loc 1 1482 0
 2735 0038 0020     		movs	r0, #0
 2736 003a 7047     		bx	lr
 2737              		.cfi_endproc
 2738              	.LFE137:
 2740              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 2741              		.align	2
 2742              		.global	PWMSP001_DisableEvent
 2743              		.thumb
 2744              		.thumb_func
 2746              	PWMSP001_DisableEvent:
 2747              	.LFB138:
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2748              		.loc 1 1495 0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 0
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 2752              		@ link register save eliminated.
 2753              	.LVL261:
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2754              		.loc 1 1498 0
 2755 0000 C36B     		ldr	r3, [r0, #60]
 2756 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2757 0004 7AB1     		cbz	r2, .L207
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2758              		.loc 1 1505 0
 2759 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2760 000a 012B     		cmp	r3, #1
 2761 000c 0DD0     		beq	.L208
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 2762              		.loc 1 1511 0
 2763 000e 8369     		ldr	r3, [r0, #24]
 2764 0010 0120     		movs	r0, #1
 2765              	.LVL262:
 2766 0012 D3F8A420 		ldr	r2, [r3, #164]
 2767 0016 00FA01F1 		lsl	r1, r0, r1
 2768              	.LVL263:
 2769 001a 22EA0102 		bic	r2, r2, r1
 2770 001e C3F8A420 		str	r2, [r3, #164]
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2771              		.loc 1 1513 0
 2772 0022 0020     		movs	r0, #0
 2773 0024 7047     		bx	lr
 2774              	.LVL264:
 2775              	.L207:
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2776              		.loc 1 1500 0
 2777 0026 0120     		movs	r0, #1
 2778              	.LVL265:
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2779              		.loc 1 1516 0
 2780 0028 7047     		bx	lr
 2781              	.LVL266:
 2782              	.L208:
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 2783              		.loc 1 1507 0
 2784 002a C269     		ldr	r2, [r0, #28]
 2785 002c D2F8A400 		ldr	r0, [r2, #164]
 2786              	.LVL267:
 2787 0030 03FA01F3 		lsl	r3, r3, r1
 2788 0034 20EA0303 		bic	r3, r0, r3
 2789 0038 C2F8A430 		str	r3, [r2, #164]
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2790              		.loc 1 1513 0
 2791 003c 0020     		movs	r0, #0
 2792 003e 7047     		bx	lr
 2793              		.cfi_endproc
 2794              	.LFE138:
 2796              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 2797              		.align	2
 2798              		.global	PWMSP001_ClearPendingEvent
 2799              		.thumb
 2800              		.thumb_func
 2802              	PWMSP001_ClearPendingEvent:
 2803              	.LFB139:
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2804              		.loc 1 1526 0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808              		@ link register save eliminated.
 2809              	.LVL268:
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2810              		.loc 1 1529 0
 2811 0000 C36B     		ldr	r3, [r0, #60]
 2812 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2813 0004 72B1     		cbz	r2, .L212
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2814              		.loc 1 1536 0
 2815 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2816 000a 012B     		cmp	r3, #1
 2817 000c 0CD0     		beq	.L213
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 2818              		.loc 1 1542 0
 2819 000e 8369     		ldr	r3, [r0, #24]
 2820 0010 0120     		movs	r0, #1
 2821              	.LVL269:
 2822 0012 D3F8B020 		ldr	r2, [r3, #176]
 2823 0016 00FA01F1 		lsl	r1, r0, r1
 2824              	.LVL270:
 2825 001a 1143     		orrs	r1, r1, r2
 2826 001c C3F8B010 		str	r1, [r3, #176]
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2827              		.loc 1 1544 0
 2828 0020 0020     		movs	r0, #0
 2829 0022 7047     		bx	lr
 2830              	.LVL271:
 2831              	.L212:
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2832              		.loc 1 1531 0
 2833 0024 0120     		movs	r0, #1
 2834              	.LVL272:
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2835              		.loc 1 1547 0
 2836 0026 7047     		bx	lr
 2837              	.LVL273:
 2838              	.L213:
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 2839              		.loc 1 1538 0
 2840 0028 C269     		ldr	r2, [r0, #28]
 2841 002a D2F8B000 		ldr	r0, [r2, #176]
 2842              	.LVL274:
 2843 002e 03FA01F3 		lsl	r3, r3, r1
 2844 0032 0343     		orrs	r3, r3, r0
 2845 0034 C2F8B030 		str	r3, [r2, #176]
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2846              		.loc 1 1544 0
 2847 0038 0020     		movs	r0, #0
 2848 003a 7047     		bx	lr
 2849              		.cfi_endproc
 2850              	.LFE139:
 2852              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 2853              		.align	2
 2854              		.global	PWMSP001_SetPendingEvent
 2855              		.thumb
 2856              		.thumb_func
 2858              	PWMSP001_SetPendingEvent:
 2859              	.LFB140:
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2860              		.loc 1 1558 0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 0
 2863              		@ frame_needed = 0, uses_anonymous_args = 0
 2864              		@ link register save eliminated.
 2865              	.LVL275:
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2866              		.loc 1 1561 0
 2867 0000 C36B     		ldr	r3, [r0, #60]
 2868 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2869 0004 72B1     		cbz	r2, .L217
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2870              		.loc 1 1568 0
 2871 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2872 000a 012B     		cmp	r3, #1
 2873 000c 0CD0     		beq	.L218
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 2874              		.loc 1 1574 0
 2875 000e 8369     		ldr	r3, [r0, #24]
 2876 0010 0120     		movs	r0, #1
 2877              	.LVL276:
 2878 0012 D3F8AC20 		ldr	r2, [r3, #172]
 2879 0016 00FA01F1 		lsl	r1, r0, r1
 2880              	.LVL277:
 2881 001a 1143     		orrs	r1, r1, r2
 2882 001c C3F8AC10 		str	r1, [r3, #172]
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2883              		.loc 1 1576 0
 2884 0020 0020     		movs	r0, #0
 2885 0022 7047     		bx	lr
 2886              	.LVL278:
 2887              	.L217:
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2888              		.loc 1 1563 0
 2889 0024 0120     		movs	r0, #1
 2890              	.LVL279:
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2891              		.loc 1 1579 0
 2892 0026 7047     		bx	lr
 2893              	.LVL280:
 2894              	.L218:
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 2895              		.loc 1 1570 0
 2896 0028 C269     		ldr	r2, [r0, #28]
 2897 002a D2F8AC00 		ldr	r0, [r2, #172]
 2898              	.LVL281:
 2899 002e 03FA01F3 		lsl	r3, r3, r1
 2900 0032 0343     		orrs	r3, r3, r0
 2901 0034 C2F8AC30 		str	r3, [r2, #172]
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2902              		.loc 1 1576 0
 2903 0038 0020     		movs	r0, #0
 2904 003a 7047     		bx	lr
 2905              		.cfi_endproc
 2906              	.LFE140:
 2908              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 2909              		.align	2
 2910              		.global	PWMSP001_GetPendingEvent
 2911              		.thumb
 2912              		.thumb_func
 2914              	PWMSP001_GetPendingEvent:
 2915              	.LFB141:
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2916              		.loc 1 1590 0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 2920              		@ link register save eliminated.
 2921              	.LVL282:
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2922              		.loc 1 1593 0
 2923 0000 C36B     		ldr	r3, [r0, #60]
 2924 0002 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2925              		.loc 1 1590 0
 2926 0004 10B4     		push	{r4}
 2927              	.LCFI19:
 2928              		.cfi_def_cfa_offset 4
 2929              		.cfi_offset 4, -4
 2930              		.loc 1 1593 0
 2931 0006 9BB1     		cbz	r3, .L224
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2932              		.loc 1 1600 0
 2933 0008 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2934 000c 012B     		cmp	r3, #1
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 2935              		.loc 1 1603 0
 2936 000e 0EBF     		itee	eq
 2937 0010 C069     		ldreq	r0, [r0, #28]
 2938              	.LVL283:
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 2939              		.loc 1 1614 0
 2940 0012 8069     		ldrne	r0, [r0, #24]
 2941 0014 0123     		movne	r3, #1
 2942 0016 D0F8A000 		ldr	r0, [r0, #160]
 2943 001a 03FA01F4 		lsl	r4, r3, r1
 2944 001e 2040     		ands	r0, r0, r4
 2945 0020 C840     		lsrs	r0, r0, r1
 2946 0022 02D1     		bne	.L228
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 2947              		.loc 1 1620 0
 2948 0024 1070     		strb	r0, [r2, #0]
 2949              	.L220:
 2950              	.LVL284:
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2951              		.loc 1 1628 0
 2952 0026 10BC     		pop	{r4}
 2953 0028 7047     		bx	lr
 2954              	.LVL285:
 2955              	.L228:
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 2956              		.loc 1 1616 0
 2957 002a 1370     		strb	r3, [r2, #0]
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2958              		.loc 1 1625 0
 2959 002c 0020     		movs	r0, #0
 2960 002e FAE7     		b	.L220
 2961              	.LVL286:
 2962              	.L224:
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2963              		.loc 1 1595 0
 2964 0030 0120     		movs	r0, #1
 2965              	.LVL287:
 2966 0032 F8E7     		b	.L220
 2967              		.cfi_endproc
 2968              	.LFE141:
 2970              		.text
 2971              	.Letext0:
 2972              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2973              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2974              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\PWMSP001_Example1_RelaxKit\\Dave\\Generated\\inc\\DAVESupp
 2975              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\PWMSP001_Example1_RelaxKit\\Dave\\Generated\\inc\\DAVESupp
 2976              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2977              		.file 7 "C:\\DAVE3_workspace\\ws3.1.10\\PWMSP001_Example1_RelaxKit\\Dave\\Generated\\inc\\DAVESupp
 2978              		.file 8 "C:\\DAVE3_workspace\\ws3.1.10\\PWMSP001_Example1_RelaxKit\\Dave\\Generated\\inc\\DAVESupp
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:20     .text.PWMSP001_Deinit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:25     .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:150    .text.PWMSP001_Start:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:155    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:316    .text.PWMSP001_Stop:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:321    .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:403    .text.PWMSP001_SetCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:408    .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:479    .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:484    .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:524    .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:529    .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:603    .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:608    .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:648    .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:653    .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:706    .text.PWMSP001_SetDutyCycle:00000034 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:711    .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:716    .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:772    .text.PWMSP001_lSetDutyEdgeAlign:00000044 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:777    .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:782    .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:882    .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:0000007c $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:887    .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:892    .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:942    .text.PWMSP001_lSetDutyCenterAlign:00000040 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:947    .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:952    .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1039   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1044   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1155   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1160   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1356   .text.PWMSP001_SetPwmFreqAndDutyCycle:000000d4 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1366   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1371   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1595   .text.PWMSP001_SetPwmFreq:000000d4 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1604   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1609   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1704   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1709   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1759   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1764   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1820   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1825   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1923   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1928   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1985   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:1990   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2071   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2076   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2128   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2133   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2342   .text.PWMSP001_lInit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2347   .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2618   .text.PWMSP001_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2623   .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2680   .text.PWMSP001_Init:00000040 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2685   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2690   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2741   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2746   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2797   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2802   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2853   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2858   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2909   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccrfZF6k.s:2914   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.138601bc4243ad38d6b156f545266b0e
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.3616bd1d69628125fed3ac403d83aaef
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
