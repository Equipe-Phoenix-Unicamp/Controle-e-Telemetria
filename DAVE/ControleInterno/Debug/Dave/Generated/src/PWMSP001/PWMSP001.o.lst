   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB112:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.2 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD2_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40143 		mov	r3, #33024
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40142 		mov	r2, #33024
  73 004c C4F60202 		movt	r2, 18434
  74 0050 126C     		ldr	r2, [r2, #64]
  75 0052 22F4E062 		bic	r2, r2, #1792
  76 0056 1A64     		str	r2, [r3, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD2_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40143 		mov	r3, #33024
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40142 		mov	r2, #33024
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 126C     		ldr	r2, [r2, #64]
  83 006a 1A64     		str	r2, [r3, #64]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD2_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40143 		mov	r3, #33024
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40142 		mov	r2, #33024
  88 0078 C4F60202 		movt	r2, 18434
  89 007c 1269     		ldr	r2, [r2, #16]
  90 007e 22F48002 		bic	r2, r2, #4194304
  91 0082 1A61     		str	r2, [r3, #16]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40143 		mov	r3, #33024
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40142 		mov	r2, #33024
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 1269     		ldr	r2, [r2, #16]
  98 0096 1A61     		str	r2, [r3, #16]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
  99              		.loc 1 296 0
 100 0098 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 101 009c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 102 00a0 FFF7FEFF 		bl	PWMSP001_lInit
 103 00a4 7860     		str	r0, [r7, #4]
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 104              		.loc 1 298 0
 105 00a6 7B68     		ldr	r3, [r7, #4]
 106 00a8 002B     		cmp	r3, #0
 107 00aa 0DD1     		bne	.L3
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
 108              		.loc 1 300 0
 109 00ac 40F20003 		movw	r3, #:lower16:PWMSP001_Handle1
 110 00b0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle1
 111 00b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 112 00b6 012B     		cmp	r3, #1
 113 00b8 06D1     		bne	.L3
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
 114              		.loc 1 302 0
 115 00ba 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 116 00be C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 117 00c2 FFF7FEFF 		bl	PWMSP001_Start
 118 00c6 7860     		str	r0, [r7, #4]
 119              	.L3:
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.1 based on User configuration */
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD1_Msk));
 120              		.loc 1 308 0
 121 00c8 4FF40143 		mov	r3, #33024
 122 00cc C4F60203 		movt	r3, 18434
 123 00d0 4FF40142 		mov	r2, #33024
 124 00d4 C4F60202 		movt	r2, 18434
 125 00d8 126C     		ldr	r2, [r2, #64]
 126 00da 22F07002 		bic	r2, r2, #112
 127 00de 1A64     		str	r2, [r3, #64]
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD1_Pos) & \
 128              		.loc 1 309 0
 129 00e0 4FF40143 		mov	r3, #33024
 130 00e4 C4F60203 		movt	r3, 18434
 131 00e8 4FF40142 		mov	r2, #33024
 132 00ec C4F60202 		movt	r2, 18434
 133 00f0 126C     		ldr	r2, [r2, #64]
 134 00f2 1A64     		str	r2, [r3, #64]
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD1_Msk);
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
 135              		.loc 1 311 0
 136 00f4 4FF40143 		mov	r3, #33024
 137 00f8 C4F60203 		movt	r3, 18434
 138 00fc 4FF40142 		mov	r2, #33024
 139 0100 C4F60202 		movt	r2, 18434
 140 0104 1269     		ldr	r2, [r2, #16]
 141 0106 22F48042 		bic	r2, r2, #16384
 142 010a 1A61     		str	r2, [r3, #16]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
 143              		.loc 1 312 0
 144 010c 4FF40143 		mov	r3, #33024
 145 0110 C4F60203 		movt	r3, 18434
 146 0114 4FF40142 		mov	r2, #33024
 147 0118 C4F60202 		movt	r2, 18434
 148 011c 1269     		ldr	r2, [r2, #16]
 149 011e 1A61     		str	r2, [r3, #16]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle2);
 150              		.loc 1 314 0
 151 0120 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 152 0124 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 153 0128 FFF7FEFF 		bl	PWMSP001_lInit
 154 012c 7860     		str	r0, [r7, #4]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 155              		.loc 1 316 0
 156 012e 7B68     		ldr	r3, [r7, #4]
 157 0130 002B     		cmp	r3, #0
 158 0132 0DD1     		bne	.L4
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle2.StartControl == (uint8_t)SET)
 159              		.loc 1 318 0
 160 0134 40F20003 		movw	r3, #:lower16:PWMSP001_Handle2
 161 0138 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle2
 162 013c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 163 013e 012B     		cmp	r3, #1
 164 0140 06D1     		bne	.L4
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle2);
 165              		.loc 1 320 0
 166 0142 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 167 0146 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 168 014a FFF7FEFF 		bl	PWMSP001_Start
 169 014e 7860     		str	r0, [r7, #4]
 170              	.L4:
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.0 based on User configuration */
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD0_Msk));
 171              		.loc 1 326 0
 172 0150 4FF40143 		mov	r3, #33024
 173 0154 C4F60203 		movt	r3, 18434
 174 0158 4FF40142 		mov	r2, #33024
 175 015c C4F60202 		movt	r2, 18434
 176 0160 126C     		ldr	r2, [r2, #64]
 177 0162 22F00702 		bic	r2, r2, #7
 178 0166 1A64     		str	r2, [r3, #64]
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD0_Pos) & \
 179              		.loc 1 327 0
 180 0168 4FF40143 		mov	r3, #33024
 181 016c C4F60203 		movt	r3, 18434
 182 0170 4FF40142 		mov	r2, #33024
 183 0174 C4F60202 		movt	r2, 18434
 184 0178 126C     		ldr	r2, [r2, #64]
 185 017a 1A64     		str	r2, [r3, #64]
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD0_Msk);
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 186              		.loc 1 329 0
 187 017c 4FF40143 		mov	r3, #33024
 188 0180 C4F60203 		movt	r3, 18434
 189 0184 4FF40142 		mov	r2, #33024
 190 0188 C4F60202 		movt	r2, 18434
 191 018c 1269     		ldr	r2, [r2, #16]
 192 018e 22F04002 		bic	r2, r2, #64
 193 0192 1A61     		str	r2, [r3, #16]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 194              		.loc 1 330 0
 195 0194 4FF40143 		mov	r3, #33024
 196 0198 C4F60203 		movt	r3, 18434
 197 019c 4FF40142 		mov	r2, #33024
 198 01a0 C4F60202 		movt	r2, 18434
 199 01a4 1269     		ldr	r2, [r2, #16]
 200 01a6 1A61     		str	r2, [r3, #16]
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 201              		.loc 1 332 0
 202 01a8 07F10807 		add	r7, r7, #8
 203 01ac BD46     		mov	sp, r7
 204 01ae 80BD     		pop	{r7, pc}
 205              		.cfi_endproc
 206              	.LFE112:
 208              		.section	.text.PWMSP001_lInit,"ax",%progbits
 209              		.align	2
 210              		.global	PWMSP001_lInit
 211              		.thumb
 212              		.thumb_func
 214              	PWMSP001_lInit:
 215              	.LFB113:
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 216              		.loc 1 337 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 16
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220 0000 90B5     		push	{r4, r7, lr}
 221              	.LCFI3:
 222              		.cfi_def_cfa_offset 12
 223              		.cfi_offset 4, -12
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 85B0     		sub	sp, sp, #20
 227              	.LCFI4:
 228              		.cfi_def_cfa_offset 32
 229 0004 00AF     		add	r7, sp, #0
 230              	.LCFI5:
 231              		.cfi_def_cfa_register 7
 232 0006 7860     		str	r0, [r7, #4]
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 233              		.loc 1 338 0
 234 0008 4FF00103 		mov	r3, #1
 235 000c FB60     		str	r3, [r7, #12]
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 236              		.loc 1 343 0
 237 000e 7B68     		ldr	r3, [r7, #4]
 238 0010 DB6B     		ldr	r3, [r3, #60]
 239 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 240 0014 002B     		cmp	r3, #0
 241 0016 40F06981 		bne	.L15
 242              	.L6:
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 243              		.loc 1 347 0
 244 001a 7B68     		ldr	r3, [r7, #4]
 245 001c 9B69     		ldr	r3, [r3, #24]
 246 001e 4FF00702 		mov	r2, #7
 247 0022 1A61     		str	r2, [r3, #16]
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 248              		.loc 1 351 0
 249 0024 7B68     		ldr	r3, [r7, #4]
 250 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 251 0028 012B     		cmp	r3, #1
 252 002a 27D1     		bne	.L8
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 253              		.loc 1 353 0
 254 002c 7B68     		ldr	r3, [r7, #4]
 255 002e 9A69     		ldr	r2, [r3, #24]
 256 0030 7B68     		ldr	r3, [r7, #4]
 257 0032 9B69     		ldr	r3, [r3, #24]
 258 0034 1B68     		ldr	r3, [r3, #0]
 259 0036 23F0C053 		bic	r3, r3, #402653184
 260 003a 23F44023 		bic	r3, r3, #786432
 261 003e 1360     		str	r3, [r2, #0]
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 262              		.loc 1 354 0
 263 0040 7B68     		ldr	r3, [r7, #4]
 264 0042 9B69     		ldr	r3, [r3, #24]
 265 0044 7A68     		ldr	r2, [r7, #4]
 266 0046 9269     		ldr	r2, [r2, #24]
 267 0048 5268     		ldr	r2, [r2, #4]
 268 004a 22F00C02 		bic	r2, r2, #12
 269 004e 5A60     		str	r2, [r3, #4]
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 270              		.loc 1 355 0
 271 0050 7B68     		ldr	r3, [r7, #4]
 272 0052 9B69     		ldr	r3, [r3, #24]
 273 0054 7A68     		ldr	r2, [r7, #4]
 274 0056 9269     		ldr	r2, [r2, #24]
 275 0058 1168     		ldr	r1, [r2, #0]
 276 005a 7A68     		ldr	r2, [r7, #4]
 277 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 278 0060 4FEA8242 		lsl	r2, r2, #18
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 279              		.loc 1 356 0
 280 0064 02F44022 		and	r2, r2, #786432
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 281              		.loc 1 355 0
 282 0068 0A43     		orrs	r2, r2, r1
 283 006a 1A60     		str	r2, [r3, #0]
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 284              		.loc 1 359 0
 285 006c 7B68     		ldr	r3, [r7, #4]
 286 006e 9B69     		ldr	r3, [r3, #24]
 287 0070 7A68     		ldr	r2, [r7, #4]
 288 0072 9269     		ldr	r2, [r2, #24]
 289 0074 5268     		ldr	r2, [r2, #4]
 290 0076 42F00802 		orr	r2, r2, #8
 291 007a 5A60     		str	r2, [r3, #4]
 292              	.L8:
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 293              		.loc 1 365 0
 294 007c 7B68     		ldr	r3, [r7, #4]
 295 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 296 0080 012B     		cmp	r3, #1
 297 0082 2BD1     		bne	.L9
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 298              		.loc 1 366 0 discriminator 1
 299 0084 7B68     		ldr	r3, [r7, #4]
 300 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 301              		.loc 1 365 0 discriminator 1
 302 008a 012B     		cmp	r3, #1
 303 008c 26D0     		beq	.L9
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 304              		.loc 1 369 0
 305 008e 7B68     		ldr	r3, [r7, #4]
 306 0090 9A69     		ldr	r2, [r3, #24]
 307 0092 7B68     		ldr	r3, [r7, #4]
 308 0094 9B69     		ldr	r3, [r3, #24]
 309 0096 1B68     		ldr	r3, [r3, #0]
 310 0098 23F0C243 		bic	r3, r3, #1627389952
 311 009c 23F44013 		bic	r3, r3, #3145728
 312 00a0 1360     		str	r3, [r2, #0]
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 313              		.loc 1 371 0
 314 00a2 7B68     		ldr	r3, [r7, #4]
 315 00a4 9B69     		ldr	r3, [r3, #24]
 316 00a6 7A68     		ldr	r2, [r7, #4]
 317 00a8 9269     		ldr	r2, [r2, #24]
 318 00aa 5268     		ldr	r2, [r2, #4]
 319 00ac 22F40032 		bic	r2, r2, #131072
 320 00b0 5A60     		str	r2, [r3, #4]
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 321              		.loc 1 372 0
 322 00b2 7B68     		ldr	r3, [r7, #4]
 323 00b4 9B69     		ldr	r3, [r3, #24]
 324 00b6 7A68     		ldr	r2, [r7, #4]
 325 00b8 9269     		ldr	r2, [r2, #24]
 326 00ba 1168     		ldr	r1, [r2, #0]
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 327              		.loc 1 373 0
 328 00bc 7A68     		ldr	r2, [r7, #4]
 329 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 330 00c0 4FEA0262 		lsl	r2, r2, #24
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 331              		.loc 1 374 0
 332 00c4 02F08072 		and	r2, r2, #16777216
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 333              		.loc 1 372 0
 334 00c8 0A43     		orrs	r2, r2, r1
 335 00ca 1A60     		str	r2, [r3, #0]
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 336              		.loc 1 378 0
 337 00cc 7B68     		ldr	r3, [r7, #4]
 338 00ce 9B69     		ldr	r3, [r3, #24]
 339 00d0 7A68     		ldr	r2, [r7, #4]
 340 00d2 9269     		ldr	r2, [r2, #24]
 341 00d4 5268     		ldr	r2, [r2, #4]
 342 00d6 42F40032 		orr	r2, r2, #131072
 343 00da 5A60     		str	r2, [r3, #4]
 344              	.L9:
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 345              		.loc 1 381 0
 346 00dc 7B68     		ldr	r3, [r7, #4]
 347 00de 9A69     		ldr	r2, [r3, #24]
 348 00e0 7B68     		ldr	r3, [r7, #4]
 349 00e2 9B69     		ldr	r3, [r3, #24]
 350 00e4 5B69     		ldr	r3, [r3, #20]
 351 00e6 23F4CE43 		bic	r3, r3, #26368
 352 00ea 23F00903 		bic	r3, r3, #9
 353 00ee 5361     		str	r3, [r2, #20]
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 354              		.loc 1 385 0
 355 00f0 7B68     		ldr	r3, [r7, #4]
 356 00f2 9B69     		ldr	r3, [r3, #24]
 357 00f4 7A68     		ldr	r2, [r7, #4]
 358 00f6 9269     		ldr	r2, [r2, #24]
 359 00f8 5169     		ldr	r1, [r2, #20]
 360 00fa 7A68     		ldr	r2, [r7, #4]
 361 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 362              		.loc 1 386 0
 363 0100 02F00100 		and	r0, r2, #1
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 364              		.loc 1 389 0
 365 0104 7A68     		ldr	r2, [r7, #4]
 366 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 367 010a 4FEA8222 		lsl	r2, r2, #10
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 368              		.loc 1 390 0
 369 010e 02F48062 		and	r2, r2, #1024
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 370              		.loc 1 388 0
 371 0112 1043     		orrs	r0, r0, r2
 372              		.loc 1 390 0
 373 0114 7A68     		ldr	r2, [r7, #4]
 374 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 375 011a 4FEA0222 		lsl	r2, r2, #8
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 376              		.loc 1 391 0
 377 011e 02F44072 		and	r2, r2, #768
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 378              		.loc 1 390 0
 379 0122 0243     		orrs	r2, r2, r0
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 380              		.loc 1 385 0
 381 0124 0A43     		orrs	r2, r2, r1
 382 0126 5A61     		str	r2, [r3, #20]
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 383              		.loc 1 396 0
 384 0128 7B68     		ldr	r3, [r7, #4]
 385 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 386 012e 012B     		cmp	r3, #1
 387 0130 0ED0     		beq	.L10
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 388              		.loc 1 398 0
 389 0132 7B68     		ldr	r3, [r7, #4]
 390 0134 9B69     		ldr	r3, [r3, #24]
 391 0136 7A68     		ldr	r2, [r7, #4]
 392 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 393 013a 4FEA4202 		lsl	r2, r2, #1
 394 013e 02F00201 		and	r1, r2, #2
 395 0142 7A68     		ldr	r2, [r7, #4]
 396 0144 9269     		ldr	r2, [r2, #24]
 397 0146 5269     		ldr	r2, [r2, #20]
 398 0148 22F00202 		bic	r2, r2, #2
 399 014c 0A43     		orrs	r2, r2, r1
 400 014e 5A61     		str	r2, [r3, #20]
 401              	.L10:
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 402              		.loc 1 403 0
 403 0150 7B68     		ldr	r3, [r7, #4]
 404 0152 9B69     		ldr	r3, [r3, #24]
 405 0154 7A68     		ldr	r2, [r7, #4]
 406 0156 9269     		ldr	r2, [r2, #24]
 407 0158 5169     		ldr	r1, [r2, #20]
 408 015a 7A68     		ldr	r2, [r7, #4]
 409 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 410 0160 4FEA4232 		lsl	r2, r2, #13
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 411              		.loc 1 404 0
 412 0164 02F4C042 		and	r2, r2, #24576
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 413              		.loc 1 403 0
 414 0168 0A43     		orrs	r2, r2, r1
 415 016a 5A61     		str	r2, [r3, #20]
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 416              		.loc 1 406 0
 417 016c 7B68     		ldr	r3, [r7, #4]
 418 016e 9B69     		ldr	r3, [r3, #24]
 419 0170 7A68     		ldr	r2, [r7, #4]
 420 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 421 0174 02F00F01 		and	r1, r2, #15
 422 0178 7A68     		ldr	r2, [r7, #4]
 423 017a 9269     		ldr	r2, [r2, #24]
 424 017c 126A     		ldr	r2, [r2, #32]
 425 017e 22F00F02 		bic	r2, r2, #15
 426 0182 0A43     		orrs	r2, r2, r1
 427 0184 1A62     		str	r2, [r3, #32]
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 428              		.loc 1 410 0
 429 0186 7B68     		ldr	r3, [r7, #4]
 430 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 431 018c 012B     		cmp	r3, #1
 432 018e 2CD0     		beq	.L11
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 433              		.loc 1 413 0
 434 0190 7B68     		ldr	r3, [r7, #4]
 435 0192 9B69     		ldr	r3, [r3, #24]
 436 0194 7A68     		ldr	r2, [r7, #4]
 437 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 438 0198 4FEA4252 		lsl	r2, r2, #21
 439 019c 02F40011 		and	r1, r2, #2097152
 440 01a0 7A68     		ldr	r2, [r7, #4]
 441 01a2 9269     		ldr	r2, [r2, #24]
 442 01a4 5269     		ldr	r2, [r2, #20]
 443 01a6 22F40012 		bic	r2, r2, #2097152
 444 01aa 0A43     		orrs	r2, r2, r1
 445 01ac 5A61     		str	r2, [r3, #20]
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 446              		.loc 1 416 0
 447 01ae 7B68     		ldr	r3, [r7, #4]
 448 01b0 9B69     		ldr	r3, [r3, #24]
 449 01b2 7A68     		ldr	r2, [r7, #4]
 450 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 451 01b6 4FEA8252 		lsl	r2, r2, #22
 452 01ba 02F48001 		and	r1, r2, #4194304
 453 01be 7A68     		ldr	r2, [r7, #4]
 454 01c0 9269     		ldr	r2, [r2, #24]
 455 01c2 5269     		ldr	r2, [r2, #20]
 456 01c4 22F48002 		bic	r2, r2, #4194304
 457 01c8 0A43     		orrs	r2, r2, r1
 458 01ca 5A61     		str	r2, [r3, #20]
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 459              		.loc 1 419 0
 460 01cc 7B68     		ldr	r3, [r7, #4]
 461 01ce 9B69     		ldr	r3, [r3, #24]
 462 01d0 7A68     		ldr	r2, [r7, #4]
 463 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 464 01d4 4FEA4242 		lsl	r2, r2, #17
 465 01d8 02F40031 		and	r1, r2, #131072
 466 01dc 7A68     		ldr	r2, [r7, #4]
 467 01de 9269     		ldr	r2, [r2, #24]
 468 01e0 5269     		ldr	r2, [r2, #20]
 469 01e2 22F40032 		bic	r2, r2, #131072
 470 01e6 0A43     		orrs	r2, r2, r1
 471 01e8 5A61     		str	r2, [r3, #20]
 472              	.L11:
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 473              		.loc 1 423 0
 474 01ea 7B68     		ldr	r3, [r7, #4]
 475 01ec 9B69     		ldr	r3, [r3, #24]
 476 01ee 7A68     		ldr	r2, [r7, #4]
 477 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 478 01f4 02F00F01 		and	r1, r2, #15
 479 01f8 7A68     		ldr	r2, [r7, #4]
 480 01fa 9269     		ldr	r2, [r2, #24]
 481 01fc 526A     		ldr	r2, [r2, #36]
 482 01fe 22F00F02 		bic	r2, r2, #15
 483 0202 0A43     		orrs	r2, r2, r1
 484 0204 5A62     		str	r2, [r3, #36]
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 485              		.loc 1 425 0
 486 0206 7B68     		ldr	r3, [r7, #4]
 487 0208 9B69     		ldr	r3, [r3, #24]
 488 020a 7A68     		ldr	r2, [r7, #4]
 489 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 490 020e 9A61     		str	r2, [r3, #24]
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 491              		.loc 1 429 0
 492 0210 7B68     		ldr	r3, [r7, #4]
 493 0212 9A69     		ldr	r2, [r3, #24]
 494 0214 7B68     		ldr	r3, [r7, #4]
 495 0216 9B6A     		ldr	r3, [r3, #40]
 496 0218 4FEA0343 		lsl	r3, r3, #16
 497 021c 4FEA1343 		lsr	r3, r3, #16
 498 0220 5363     		str	r3, [r2, #52]
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 499              		.loc 1 431 0
 500 0222 7B68     		ldr	r3, [r7, #4]
 501 0224 9A69     		ldr	r2, [r3, #24]
 502 0226 7B68     		ldr	r3, [r7, #4]
 503 0228 9B68     		ldr	r3, [r3, #8]
 504 022a 4FEA0343 		lsl	r3, r3, #16
 505 022e 4FEA1343 		lsr	r3, r3, #16
 506 0232 D363     		str	r3, [r2, #60]
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 507              		.loc 1 432 0
 508 0234 7B68     		ldr	r3, [r7, #4]
 509 0236 9A69     		ldr	r2, [r3, #24]
 510 0238 7B68     		ldr	r3, [r7, #4]
 511 023a 9B69     		ldr	r3, [r3, #24]
 512 023c D3F8B030 		ldr	r3, [r3, #176]
 513 0240 43F47063 		orr	r3, r3, #3840
 514 0244 43F00F03 		orr	r3, r3, #15
 515 0248 C2F8B030 		str	r3, [r2, #176]
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 516              		.loc 1 436 0
 517 024c 7B68     		ldr	r3, [r7, #4]
 518 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 519 0252 012B     		cmp	r3, #1
 520 0254 0ED1     		bne	.L12
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 521              		.loc 1 438 0
 522 0256 7868     		ldr	r0, [r7, #4]
 523 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 524              		.loc 1 439 0
 525 025c 7B68     		ldr	r3, [r7, #4]
 526 025e DB69     		ldr	r3, [r3, #28]
 527 0260 7A68     		ldr	r2, [r7, #4]
 528 0262 D269     		ldr	r2, [r2, #28]
 529 0264 D2F8A410 		ldr	r1, [r2, #164]
 530 0268 7A68     		ldr	r2, [r7, #4]
 531 026a 126B     		ldr	r2, [r2, #48]
 532 026c 0A43     		orrs	r2, r2, r1
 533 026e C3F8A420 		str	r2, [r3, #164]
 534 0272 0AE0     		b	.L13
 535              	.L12:
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 536              		.loc 1 444 0
 537 0274 7B68     		ldr	r3, [r7, #4]
 538 0276 9B69     		ldr	r3, [r3, #24]
 539 0278 7A68     		ldr	r2, [r7, #4]
 540 027a 9269     		ldr	r2, [r2, #24]
 541 027c D2F8A410 		ldr	r1, [r2, #164]
 542 0280 7A68     		ldr	r2, [r7, #4]
 543 0282 126B     		ldr	r2, [r2, #48]
 544 0284 0A43     		orrs	r2, r2, r1
 545 0286 C3F8A420 		str	r2, [r3, #164]
 546              	.L13:
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 547              		.loc 1 449 0
 548 028a 7B68     		ldr	r3, [r7, #4]
 549 028c 5B69     		ldr	r3, [r3, #20]
 550 028e 7A68     		ldr	r2, [r7, #4]
 551 0290 5269     		ldr	r2, [r2, #20]
 552 0292 1169     		ldr	r1, [r2, #16]
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 553              		.loc 1 450 0
 554 0294 7A68     		ldr	r2, [r7, #4]
 555 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 556              		.loc 1 449 0
 557 029a 4FEA8202 		lsl	r2, r2, #2
 558 029e 4FF00100 		mov	r0, #1
 559 02a2 00FA02F0 		lsl	r0, r0, r2
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 560              		.loc 1 451 0
 561 02a6 7A68     		ldr	r2, [r7, #4]
 562 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 563              		.loc 1 450 0
 564 02ac 4FEA8202 		lsl	r2, r2, #2
 565              		.loc 1 451 0
 566 02b0 02F10102 		add	r2, r2, #1
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 567              		.loc 1 450 0
 568 02b4 4FF00104 		mov	r4, #1
 569 02b8 04FA02F2 		lsl	r2, r4, r2
 570 02bc 1043     		orrs	r0, r0, r2
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 571              		.loc 1 452 0
 572 02be 7A68     		ldr	r2, [r7, #4]
 573 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 574 02c4 4FEA8202 		lsl	r2, r2, #2
 575 02c8 02F10202 		add	r2, r2, #2
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 576              		.loc 1 451 0
 577 02cc 4FF00104 		mov	r4, #1
 578 02d0 04FA02F2 		lsl	r2, r4, r2
 579 02d4 0243     		orrs	r2, r2, r0
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 580              		.loc 1 449 0
 581 02d6 0A43     		orrs	r2, r2, r1
 582 02d8 1A61     		str	r2, [r3, #16]
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 583              		.loc 1 454 0
 584 02da 4FF00003 		mov	r3, #0
 585 02de FB60     		str	r3, [r7, #12]
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 586              		.loc 1 455 0
 587 02e0 7B68     		ldr	r3, [r7, #4]
 588 02e2 DB6B     		ldr	r3, [r3, #60]
 589 02e4 4FF00102 		mov	r2, #1
 590 02e8 1A70     		strb	r2, [r3, #0]
 591 02ea 00E0     		b	.L7
 592              	.L15:
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 593              		.loc 1 345 0
 594 02ec 00BF     		nop
 595              	.L7:
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 596              		.loc 1 462 0
 597 02ee FB68     		ldr	r3, [r7, #12]
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 598              		.loc 1 463 0
 599 02f0 1846     		mov	r0, r3
 600 02f2 07F11407 		add	r7, r7, #20
 601 02f6 BD46     		mov	sp, r7
 602 02f8 90BD     		pop	{r4, r7, pc}
 603              		.cfi_endproc
 604              	.LFE113:
 606 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 607              		.align	2
 608              		.global	PWMSP001_Deinit
 609              		.thumb
 610              		.thumb_func
 612              	PWMSP001_Deinit:
 613              	.LFB114:
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 614              		.loc 1 468 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 32
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0000 80B4     		push	{r7}
 620              	.LCFI6:
 621              		.cfi_def_cfa_offset 4
 622              		.cfi_offset 7, -4
 623 0002 89B0     		sub	sp, sp, #36
 624              	.LCFI7:
 625              		.cfi_def_cfa_offset 40
 626 0004 00AF     		add	r7, sp, #0
 627              	.LCFI8:
 628              		.cfi_def_cfa_register 7
 629 0006 7860     		str	r0, [r7, #4]
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 630              		.loc 1 469 0
 631 0008 4FF00103 		mov	r3, #1
 632 000c FB61     		str	r3, [r7, #28]
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 633              		.loc 1 476 0
 634 000e 7B68     		ldr	r3, [r7, #4]
 635 0010 DB6B     		ldr	r3, [r3, #60]
 636 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 637 0014 002B     		cmp	r3, #0
 638 0016 00F0AB80 		beq	.L17
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 639              		.loc 1 479 0
 640 001a 7B68     		ldr	r3, [r7, #4]
 641 001c 9B69     		ldr	r3, [r3, #24]
 642 001e 4FF00702 		mov	r2, #7
 643 0022 1A61     		str	r2, [r3, #16]
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 644              		.loc 1 480 0
 645 0024 7B68     		ldr	r3, [r7, #4]
 646 0026 9B69     		ldr	r3, [r3, #24]
 647 0028 40F60F72 		movw	r2, #3855
 648 002c C3F8B020 		str	r2, [r3, #176]
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 649              		.loc 1 481 0
 650 0030 7B68     		ldr	r3, [r7, #4]
 651 0032 9B69     		ldr	r3, [r3, #24]
 652 0034 4FF00002 		mov	r2, #0
 653 0038 C3F8A420 		str	r2, [r3, #164]
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 654              		.loc 1 484 0
 655 003c 7B68     		ldr	r3, [r7, #4]
 656 003e 5B69     		ldr	r3, [r3, #20]
 657 0040 7A68     		ldr	r2, [r7, #4]
 658 0042 5269     		ldr	r2, [r2, #20]
 659 0044 9168     		ldr	r1, [r2, #8]
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 660              		.loc 1 485 0
 661 0046 7A68     		ldr	r2, [r7, #4]
 662 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 663              		.loc 1 484 0
 664 004c 4FF00100 		mov	r0, #1
 665 0050 00FA02F2 		lsl	r2, r0, r2
 666 0054 0A43     		orrs	r2, r2, r1
 667 0056 42F44072 		orr	r2, r2, #768
 668 005a 9A60     		str	r2, [r3, #8]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 669              		.loc 1 489 0
 670 005c 7B68     		ldr	r3, [r7, #4]
 671 005e 9B69     		ldr	r3, [r3, #24]
 672 0060 4FF00002 		mov	r2, #0
 673 0064 1A60     		str	r2, [r3, #0]
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 674              		.loc 1 490 0
 675 0066 7B68     		ldr	r3, [r7, #4]
 676 0068 9B69     		ldr	r3, [r3, #24]
 677 006a 4FF00002 		mov	r2, #0
 678 006e 5A60     		str	r2, [r3, #4]
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 679              		.loc 1 491 0
 680 0070 7B68     		ldr	r3, [r7, #4]
 681 0072 9B69     		ldr	r3, [r3, #24]
 682 0074 4FF00002 		mov	r2, #0
 683 0078 5A61     		str	r2, [r3, #20]
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 684              		.loc 1 492 0
 685 007a 7B68     		ldr	r3, [r7, #4]
 686 007c 9B69     		ldr	r3, [r3, #24]
 687 007e 4FF00002 		mov	r2, #0
 688 0082 5A62     		str	r2, [r3, #36]
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 689              		.loc 1 493 0
 690 0084 7B68     		ldr	r3, [r7, #4]
 691 0086 9B69     		ldr	r3, [r3, #24]
 692 0088 4FF00002 		mov	r2, #0
 693 008c 9A61     		str	r2, [r3, #24]
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 694              		.loc 1 494 0
 695 008e 7B68     		ldr	r3, [r7, #4]
 696 0090 9B69     		ldr	r3, [r3, #24]
 697 0092 4FF00002 		mov	r2, #0
 698 0096 1A62     		str	r2, [r3, #32]
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 699              		.loc 1 495 0
 700 0098 7B68     		ldr	r3, [r7, #4]
 701 009a 9B69     		ldr	r3, [r3, #24]
 702 009c 4FF00002 		mov	r2, #0
 703 00a0 DA63     		str	r2, [r3, #60]
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 704              		.loc 1 496 0
 705 00a2 7B68     		ldr	r3, [r7, #4]
 706 00a4 9B69     		ldr	r3, [r3, #24]
 707 00a6 4FF00002 		mov	r2, #0
 708 00aa 5A63     		str	r2, [r3, #52]
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 709              		.loc 1 499 0
 710 00ac 7B68     		ldr	r3, [r7, #4]
 711 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 712 00b2 012B     		cmp	r3, #1
 713 00b4 54D1     		bne	.L18
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 714              		.loc 1 502 0
 715 00b6 7B68     		ldr	r3, [r7, #4]
 716 00b8 DB69     		ldr	r3, [r3, #28]
 717 00ba 4FF00702 		mov	r2, #7
 718 00be 1A61     		str	r2, [r3, #16]
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 719              		.loc 1 503 0
 720 00c0 7B68     		ldr	r3, [r7, #4]
 721 00c2 DB69     		ldr	r3, [r3, #28]
 722 00c4 40F60F72 		movw	r2, #3855
 723 00c8 C3F8B020 		str	r2, [r3, #176]
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 724              		.loc 1 504 0
 725 00cc 7B68     		ldr	r3, [r7, #4]
 726 00ce DB69     		ldr	r3, [r3, #28]
 727 00d0 4FF00002 		mov	r2, #0
 728 00d4 C3F8A420 		str	r2, [r3, #164]
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 729              		.loc 1 507 0
 730 00d8 4FF40073 		mov	r3, #512
 731 00dc BB61     		str	r3, [r7, #24]
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 732              		.loc 1 508 0
 733 00de 4FF48073 		mov	r3, #256
 734 00e2 7B61     		str	r3, [r7, #20]
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 735              		.loc 1 509 0
 736 00e4 7B68     		ldr	r3, [r7, #4]
 737 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 738 00ea 3B61     		str	r3, [r7, #16]
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 739              		.loc 1 510 0
 740 00ec 7A69     		ldr	r2, [r7, #20]
 741 00ee BB69     		ldr	r3, [r7, #24]
 742 00f0 1343     		orrs	r3, r3, r2
 743 00f2 FB60     		str	r3, [r7, #12]
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 744              		.loc 1 511 0
 745 00f4 7B68     		ldr	r3, [r7, #4]
 746 00f6 5B69     		ldr	r3, [r3, #20]
 747 00f8 7A68     		ldr	r2, [r7, #4]
 748 00fa 5269     		ldr	r2, [r2, #20]
 749 00fc 9168     		ldr	r1, [r2, #8]
 750 00fe 3A69     		ldr	r2, [r7, #16]
 751 0100 4FF00100 		mov	r0, #1
 752 0104 00FA02F0 		lsl	r0, r0, r2
 753 0108 FA68     		ldr	r2, [r7, #12]
 754 010a 0243     		orrs	r2, r2, r0
 755 010c 0A43     		orrs	r2, r2, r1
 756 010e 9A60     		str	r2, [r3, #8]
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 757              		.loc 1 515 0
 758 0110 7B68     		ldr	r3, [r7, #4]
 759 0112 DB69     		ldr	r3, [r3, #28]
 760 0114 4FF00002 		mov	r2, #0
 761 0118 1A60     		str	r2, [r3, #0]
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 762              		.loc 1 516 0
 763 011a 7B68     		ldr	r3, [r7, #4]
 764 011c DB69     		ldr	r3, [r3, #28]
 765 011e 4FF00002 		mov	r2, #0
 766 0122 5A60     		str	r2, [r3, #4]
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 767              		.loc 1 517 0
 768 0124 7B68     		ldr	r3, [r7, #4]
 769 0126 DB69     		ldr	r3, [r3, #28]
 770 0128 4FF00002 		mov	r2, #0
 771 012c 5A61     		str	r2, [r3, #20]
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 772              		.loc 1 518 0
 773 012e 7B68     		ldr	r3, [r7, #4]
 774 0130 DB69     		ldr	r3, [r3, #28]
 775 0132 4FF00002 		mov	r2, #0
 776 0136 5A62     		str	r2, [r3, #36]
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 777              		.loc 1 519 0
 778 0138 7B68     		ldr	r3, [r7, #4]
 779 013a DB69     		ldr	r3, [r3, #28]
 780 013c 4FF00002 		mov	r2, #0
 781 0140 9A61     		str	r2, [r3, #24]
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 782              		.loc 1 520 0
 783 0142 7B68     		ldr	r3, [r7, #4]
 784 0144 DB69     		ldr	r3, [r3, #28]
 785 0146 4FF00002 		mov	r2, #0
 786 014a 1A62     		str	r2, [r3, #32]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 787              		.loc 1 521 0
 788 014c 7B68     		ldr	r3, [r7, #4]
 789 014e DB69     		ldr	r3, [r3, #28]
 790 0150 4FF00002 		mov	r2, #0
 791 0154 DA63     		str	r2, [r3, #60]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 792              		.loc 1 522 0
 793 0156 7B68     		ldr	r3, [r7, #4]
 794 0158 DB69     		ldr	r3, [r3, #28]
 795 015a 4FF00002 		mov	r2, #0
 796 015e 5A63     		str	r2, [r3, #52]
 797              	.L18:
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 798              		.loc 1 525 0
 799 0160 7B68     		ldr	r3, [r7, #4]
 800 0162 DB6B     		ldr	r3, [r3, #60]
 801 0164 4FF00002 		mov	r2, #0
 802 0168 1A70     		strb	r2, [r3, #0]
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 803              		.loc 1 527 0
 804 016a 4FF00003 		mov	r3, #0
 805 016e FB61     		str	r3, [r7, #28]
 806              	.L17:
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 807              		.loc 1 534 0
 808 0170 FB69     		ldr	r3, [r7, #28]
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 809              		.loc 1 535 0
 810 0172 1846     		mov	r0, r3
 811 0174 07F12407 		add	r7, r7, #36
 812 0178 BD46     		mov	sp, r7
 813 017a 80BC     		pop	{r7}
 814 017c 7047     		bx	lr
 815              		.cfi_endproc
 816              	.LFE114:
 818 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 819              		.align	2
 820              		.global	PWMSP001_Start
 821              		.thumb
 822              		.thumb_func
 824              	PWMSP001_Start:
 825              	.LFB115:
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 826              		.loc 1 541 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 16
 829              		@ frame_needed = 1, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 831 0000 80B4     		push	{r7}
 832              	.LCFI9:
 833              		.cfi_def_cfa_offset 4
 834              		.cfi_offset 7, -4
 835 0002 85B0     		sub	sp, sp, #20
 836              	.LCFI10:
 837              		.cfi_def_cfa_offset 24
 838 0004 00AF     		add	r7, sp, #0
 839              	.LCFI11:
 840              		.cfi_def_cfa_register 7
 841 0006 7860     		str	r0, [r7, #4]
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 842              		.loc 1 542 0
 843 0008 4FF00103 		mov	r3, #1
 844 000c FB60     		str	r3, [r7, #12]
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 845              		.loc 1 547 0
 846 000e 7B68     		ldr	r3, [r7, #4]
 847 0010 DB6B     		ldr	r3, [r3, #60]
 848 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 849 0014 012B     		cmp	r3, #1
 850 0016 05D0     		beq	.L21
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 851              		.loc 1 548 0 discriminator 1
 852 0018 7B68     		ldr	r3, [r7, #4]
 853 001a DB6B     		ldr	r3, [r3, #60]
 854 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 855              		.loc 1 547 0 discriminator 1
 856 001e 032B     		cmp	r3, #3
 857 0020 40F0A780 		bne	.L28
 858              	.L21:
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 859              		.loc 1 554 0
 860 0024 7B68     		ldr	r3, [r7, #4]
 861 0026 9B69     		ldr	r3, [r3, #24]
 862 0028 40F60F72 		movw	r2, #3855
 863 002c C3F8B020 		str	r2, [r3, #176]
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 864              		.loc 1 557 0
 865 0030 7B68     		ldr	r3, [r7, #4]
 866 0032 5B69     		ldr	r3, [r3, #20]
 867 0034 7A68     		ldr	r2, [r7, #4]
 868 0036 5269     		ldr	r2, [r2, #20]
 869 0038 D168     		ldr	r1, [r2, #12]
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 870              		.loc 1 559 0
 871 003a 7A68     		ldr	r2, [r7, #4]
 872 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 873              		.loc 1 558 0
 874 0040 4FF00100 		mov	r0, #1
 875 0044 00FA02F2 		lsl	r2, r0, r2
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 876              		.loc 1 557 0
 877 0048 0A43     		orrs	r2, r2, r1
 878 004a DA60     		str	r2, [r3, #12]
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 879              		.loc 1 560 0
 880 004c 7B68     		ldr	r3, [r7, #4]
 881 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 882 0052 012B     		cmp	r3, #1
 883 0054 0DD1     		bne	.L23
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 884              		.loc 1 562 0
 885 0056 7B68     		ldr	r3, [r7, #4]
 886 0058 5B69     		ldr	r3, [r3, #20]
 887 005a 7A68     		ldr	r2, [r7, #4]
 888 005c 5269     		ldr	r2, [r2, #20]
 889 005e D168     		ldr	r1, [r2, #12]
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 890              		.loc 1 564 0
 891 0060 7A68     		ldr	r2, [r7, #4]
 892 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 893              		.loc 1 563 0
 894 0066 4FF00100 		mov	r0, #1
 895 006a 00FA02F2 		lsl	r2, r0, r2
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 896              		.loc 1 562 0
 897 006e 0A43     		orrs	r2, r2, r1
 898 0070 DA60     		str	r2, [r3, #12]
 899              	.L23:
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 900              		.loc 1 568 0
 901 0072 7B68     		ldr	r3, [r7, #4]
 902 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 903 0076 002B     		cmp	r3, #0
 904 0078 15D1     		bne	.L24
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 905              		.loc 1 570 0
 906 007a 7B68     		ldr	r3, [r7, #4]
 907 007c 9B69     		ldr	r3, [r3, #24]
 908 007e 7A68     		ldr	r2, [r7, #4]
 909 0080 9269     		ldr	r2, [r2, #24]
 910 0082 D268     		ldr	r2, [r2, #12]
 911 0084 42F00102 		orr	r2, r2, #1
 912 0088 DA60     		str	r2, [r3, #12]
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 913              		.loc 1 571 0
 914 008a 7B68     		ldr	r3, [r7, #4]
 915 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 916 0090 012B     		cmp	r3, #1
 917 0092 65D1     		bne	.L25
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 918              		.loc 1 573 0
 919 0094 7B68     		ldr	r3, [r7, #4]
 920 0096 DB69     		ldr	r3, [r3, #28]
 921 0098 7A68     		ldr	r2, [r7, #4]
 922 009a D269     		ldr	r2, [r2, #28]
 923 009c D268     		ldr	r2, [r2, #12]
 924 009e 42F00102 		orr	r2, r2, #1
 925 00a2 DA60     		str	r2, [r3, #12]
 926 00a4 5CE0     		b	.L25
 927              	.L24:
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 928              		.loc 1 579 0
 929 00a6 7B68     		ldr	r3, [r7, #4]
 930 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 931 00aa 012B     		cmp	r3, #1
 932 00ac 27D1     		bne	.L26
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 933              		.loc 1 581 0
 934 00ae 7B68     		ldr	r3, [r7, #4]
 935 00b0 9A69     		ldr	r2, [r3, #24]
 936 00b2 7B68     		ldr	r3, [r7, #4]
 937 00b4 9B69     		ldr	r3, [r3, #24]
 938 00b6 1B68     		ldr	r3, [r3, #0]
 939 00b8 23F0C063 		bic	r3, r3, #100663296
 940 00bc 23F44033 		bic	r3, r3, #196608
 941 00c0 1360     		str	r3, [r2, #0]
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 942              		.loc 1 583 0
 943 00c2 7B68     		ldr	r3, [r7, #4]
 944 00c4 9B69     		ldr	r3, [r3, #24]
 945 00c6 7A68     		ldr	r2, [r7, #4]
 946 00c8 9269     		ldr	r2, [r2, #24]
 947 00ca 5268     		ldr	r2, [r2, #4]
 948 00cc 22F00302 		bic	r2, r2, #3
 949 00d0 5A60     		str	r2, [r3, #4]
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 950              		.loc 1 584 0
 951 00d2 7B68     		ldr	r3, [r7, #4]
 952 00d4 9B69     		ldr	r3, [r3, #24]
 953 00d6 7A68     		ldr	r2, [r7, #4]
 954 00d8 9269     		ldr	r2, [r2, #24]
 955 00da 1168     		ldr	r1, [r2, #0]
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 956              		.loc 1 585 0
 957 00dc 7A68     		ldr	r2, [r7, #4]
 958 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 959 00e2 4FEA0242 		lsl	r2, r2, #16
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 960              		.loc 1 586 0
 961 00e6 02F44032 		and	r2, r2, #196608
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 962              		.loc 1 584 0
 963 00ea 0A43     		orrs	r2, r2, r1
 964 00ec 1A60     		str	r2, [r3, #0]
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 965              		.loc 1 588 0
 966 00ee 7B68     		ldr	r3, [r7, #4]
 967 00f0 9B69     		ldr	r3, [r3, #24]
 968 00f2 7A68     		ldr	r2, [r7, #4]
 969 00f4 9269     		ldr	r2, [r2, #24]
 970 00f6 5268     		ldr	r2, [r2, #4]
 971 00f8 42F00102 		orr	r2, r2, #1
 972 00fc 5A60     		str	r2, [r3, #4]
 973              	.L26:
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 974              		.loc 1 592 0
 975 00fe 7B68     		ldr	r3, [r7, #4]
 976 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 977 0102 012B     		cmp	r3, #1
 978 0104 2CD1     		bne	.L25
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 979              		.loc 1 593 0 discriminator 1
 980 0106 7B68     		ldr	r3, [r7, #4]
 981 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 982              		.loc 1 592 0 discriminator 1
 983 010c 012B     		cmp	r3, #1
 984 010e 27D1     		bne	.L25
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 985              		.loc 1 596 0
 986 0110 7B68     		ldr	r3, [r7, #4]
 987 0112 DA69     		ldr	r2, [r3, #28]
 988 0114 7B68     		ldr	r3, [r7, #4]
 989 0116 DB69     		ldr	r3, [r3, #28]
 990 0118 1B68     		ldr	r3, [r3, #0]
 991 011a 23F0C063 		bic	r3, r3, #100663296
 992 011e 23F44033 		bic	r3, r3, #196608
 993 0122 1360     		str	r3, [r2, #0]
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 994              		.loc 1 597 0
 995 0124 7B68     		ldr	r3, [r7, #4]
 996 0126 DB69     		ldr	r3, [r3, #28]
 997 0128 7A68     		ldr	r2, [r7, #4]
 998 012a D269     		ldr	r2, [r2, #28]
 999 012c 5268     		ldr	r2, [r2, #4]
 1000 012e 22F00302 		bic	r2, r2, #3
 1001 0132 5A60     		str	r2, [r3, #4]
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1002              		.loc 1 598 0
 1003 0134 7B68     		ldr	r3, [r7, #4]
 1004 0136 DB69     		ldr	r3, [r3, #28]
 1005 0138 7A68     		ldr	r2, [r7, #4]
 1006 013a D269     		ldr	r2, [r2, #28]
 1007 013c 1168     		ldr	r1, [r2, #0]
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1008              		.loc 1 599 0
 1009 013e 7A68     		ldr	r2, [r7, #4]
 1010 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1011 0144 4FEA0242 		lsl	r2, r2, #16
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1012              		.loc 1 600 0
 1013 0148 02F44032 		and	r2, r2, #196608
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1014              		.loc 1 598 0
 1015 014c 0A43     		orrs	r2, r2, r1
 1016 014e 1A60     		str	r2, [r3, #0]
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1017              		.loc 1 602 0
 1018 0150 7B68     		ldr	r3, [r7, #4]
 1019 0152 DB69     		ldr	r3, [r3, #28]
 1020 0154 7A68     		ldr	r2, [r7, #4]
 1021 0156 D269     		ldr	r2, [r2, #28]
 1022 0158 5268     		ldr	r2, [r2, #4]
 1023 015a 42F00102 		orr	r2, r2, #1
 1024 015e 5A60     		str	r2, [r3, #4]
 1025              	.L25:
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1026              		.loc 1 607 0
 1027 0160 7B68     		ldr	r3, [r7, #4]
 1028 0162 DB6B     		ldr	r3, [r3, #60]
 1029 0164 4FF00202 		mov	r2, #2
 1030 0168 1A70     		strb	r2, [r3, #0]
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1031              		.loc 1 608 0
 1032 016a 4FF00003 		mov	r3, #0
 1033 016e FB60     		str	r3, [r7, #12]
 1034 0170 00E0     		b	.L22
 1035              	.L28:
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1036              		.loc 1 551 0
 1037 0172 00BF     		nop
 1038              	.L22:
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1039              		.loc 1 610 0
 1040 0174 FB68     		ldr	r3, [r7, #12]
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1041              		.loc 1 611 0
 1042 0176 1846     		mov	r0, r3
 1043 0178 07F11407 		add	r7, r7, #20
 1044 017c BD46     		mov	sp, r7
 1045 017e 80BC     		pop	{r7}
 1046 0180 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE115:
 1050 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 1051              		.align	2
 1052              		.global	PWMSP001_Stop
 1053              		.thumb
 1054              		.thumb_func
 1056              	PWMSP001_Stop:
 1057              	.LFB116:
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1058              		.loc 1 616 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 24
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063 0000 80B4     		push	{r7}
 1064              	.LCFI12:
 1065              		.cfi_def_cfa_offset 4
 1066              		.cfi_offset 7, -4
 1067 0002 87B0     		sub	sp, sp, #28
 1068              	.LCFI13:
 1069              		.cfi_def_cfa_offset 32
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI14:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1074              		.loc 1 617 0
 1075 0008 4FF00103 		mov	r3, #1
 1076 000c 7B61     		str	r3, [r7, #20]
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1077              		.loc 1 624 0
 1078 000e 7B68     		ldr	r3, [r7, #4]
 1079 0010 DB6B     		ldr	r3, [r3, #60]
 1080 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1081 0014 022B     		cmp	r3, #2
 1082 0016 41D1     		bne	.L34
 1083              	.L30:
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1084              		.loc 1 630 0
 1085 0018 7B68     		ldr	r3, [r7, #4]
 1086 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1087 001e 3B61     		str	r3, [r7, #16]
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1088              		.loc 1 631 0
 1089 0020 4FF40073 		mov	r3, #512
 1090 0024 FB60     		str	r3, [r7, #12]
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1091              		.loc 1 632 0
 1092 0026 7B68     		ldr	r3, [r7, #4]
 1093 0028 9B69     		ldr	r3, [r3, #24]
 1094 002a 4FF00702 		mov	r2, #7
 1095 002e 1A61     		str	r2, [r3, #16]
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1096              		.loc 1 633 0
 1097 0030 7B68     		ldr	r3, [r7, #4]
 1098 0032 5B69     		ldr	r3, [r3, #20]
 1099 0034 7A68     		ldr	r2, [r7, #4]
 1100 0036 5269     		ldr	r2, [r2, #20]
 1101 0038 9168     		ldr	r1, [r2, #8]
 1102 003a 3A69     		ldr	r2, [r7, #16]
 1103 003c 4FF00100 		mov	r0, #1
 1104 0040 00FA02F0 		lsl	r0, r0, r2
 1105 0044 FA68     		ldr	r2, [r7, #12]
 1106 0046 0243     		orrs	r2, r2, r0
 1107 0048 0A43     		orrs	r2, r2, r1
 1108 004a 9A60     		str	r2, [r3, #8]
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1109              		.loc 1 635 0
 1110 004c 7B68     		ldr	r3, [r7, #4]
 1111 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1112 0052 012B     		cmp	r3, #1
 1113 0054 19D1     		bne	.L32
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1114              		.loc 1 637 0
 1115 0056 7B68     		ldr	r3, [r7, #4]
 1116 0058 DB69     		ldr	r3, [r3, #28]
 1117 005a 4FF00702 		mov	r2, #7
 1118 005e 1A61     		str	r2, [r3, #16]
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1119              		.loc 1 638 0
 1120 0060 7B68     		ldr	r3, [r7, #4]
 1121 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1122 0066 3B61     		str	r3, [r7, #16]
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1123              		.loc 1 639 0
 1124 0068 4FF40073 		mov	r3, #512
 1125 006c FB60     		str	r3, [r7, #12]
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1126              		.loc 1 640 0
 1127 006e 7B68     		ldr	r3, [r7, #4]
 1128 0070 5B69     		ldr	r3, [r3, #20]
 1129 0072 7A68     		ldr	r2, [r7, #4]
 1130 0074 5269     		ldr	r2, [r2, #20]
 1131 0076 9168     		ldr	r1, [r2, #8]
 1132 0078 3A69     		ldr	r2, [r7, #16]
 1133 007a 4FF00100 		mov	r0, #1
 1134 007e 00FA02F0 		lsl	r0, r0, r2
 1135 0082 FA68     		ldr	r2, [r7, #12]
 1136 0084 0243     		orrs	r2, r2, r0
 1137 0086 0A43     		orrs	r2, r2, r1
 1138 0088 9A60     		str	r2, [r3, #8]
 1139              	.L32:
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1140              		.loc 1 643 0
 1141 008a 7B68     		ldr	r3, [r7, #4]
 1142 008c DB6B     		ldr	r3, [r3, #60]
 1143 008e 4FF00302 		mov	r2, #3
 1144 0092 1A70     		strb	r2, [r3, #0]
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1145              		.loc 1 644 0
 1146 0094 4FF00003 		mov	r3, #0
 1147 0098 7B61     		str	r3, [r7, #20]
 1148 009a 00E0     		b	.L31
 1149              	.L34:
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1150              		.loc 1 626 0
 1151 009c 00BF     		nop
 1152              	.L31:
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1153              		.loc 1 652 0
 1154 009e 7B69     		ldr	r3, [r7, #20]
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1155              		.loc 1 653 0
 1156 00a0 1846     		mov	r0, r3
 1157 00a2 07F11C07 		add	r7, r7, #28
 1158 00a6 BD46     		mov	sp, r7
 1159 00a8 80BC     		pop	{r7}
 1160 00aa 7047     		bx	lr
 1161              		.cfi_endproc
 1162              	.LFE116:
 1164              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1165              		.align	2
 1166              		.global	PWMSP001_SetCompare
 1167              		.thumb
 1168              		.thumb_func
 1170              	PWMSP001_SetCompare:
 1171              	.LFB117:
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1172              		.loc 1 662 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 16
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
 1177              	.LCFI15:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 0002 84B0     		sub	sp, sp, #16
 1182              	.LCFI16:
 1183              		.cfi_def_cfa_offset 24
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI17:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 1188 0008 3960     		str	r1, [r7, #0]
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1189              		.loc 1 663 0
 1190 000a 4FF00103 		mov	r3, #1
 1191 000e FB60     		str	r3, [r7, #12]
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1192              		.loc 1 666 0
 1193 0010 7B68     		ldr	r3, [r7, #4]
 1194 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1195 0016 012B     		cmp	r3, #1
 1196 0018 0AD1     		bne	.L36
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1197              		.loc 1 667 0
 1198 001a 7B68     		ldr	r3, [r7, #4]
 1199 001c DB69     		ldr	r3, [r3, #28]
 1200 001e 5B6B     		ldr	r3, [r3, #52]
 1201 0020 4FEA0342 		lsl	r2, r3, #16
 1202 0024 7B68     		ldr	r3, [r7, #4]
 1203 0026 9B69     		ldr	r3, [r3, #24]
 1204 0028 5B6B     		ldr	r3, [r3, #52]
 1205 002a 1343     		orrs	r3, r3, r2
 1206 002c BB60     		str	r3, [r7, #8]
 1207 002e 03E0     		b	.L37
 1208              	.L36:
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1209              		.loc 1 669 0
 1210 0030 7B68     		ldr	r3, [r7, #4]
 1211 0032 9B69     		ldr	r3, [r3, #24]
 1212 0034 5B6B     		ldr	r3, [r3, #52]
 1213 0036 BB60     		str	r3, [r7, #8]
 1214              	.L37:
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1215              		.loc 1 672 0
 1216 0038 7B68     		ldr	r3, [r7, #4]
 1217 003a DB6B     		ldr	r3, [r3, #60]
 1218 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1219 003e 002B     		cmp	r3, #0
 1220 0040 1DD0     		beq	.L38
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1221              		.loc 1 674 0
 1222 0042 7B68     		ldr	r3, [r7, #4]
 1223 0044 DA6A     		ldr	r2, [r3, #44]
 1224 0046 3B68     		ldr	r3, [r7, #0]
 1225 0048 9A42     		cmp	r2, r3
 1226 004a 08D2     		bcs	.L39
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1227              		.loc 1 675 0 discriminator 1
 1228 004c 7B68     		ldr	r3, [r7, #4]
 1229 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1230              		.loc 1 674 0 discriminator 1
 1231 0052 002B     		cmp	r3, #0
 1232 0054 03D1     		bne	.L39
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1233              		.loc 1 677 0
 1234 0056 4FF00203 		mov	r3, #2
 1235 005a FB60     		str	r3, [r7, #12]
 1236 005c 0FE0     		b	.L38
 1237              	.L39:
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1238              		.loc 1 683 0
 1239 005e 3A68     		ldr	r2, [r7, #0]
 1240 0060 BB68     		ldr	r3, [r7, #8]
 1241 0062 9A42     		cmp	r2, r3
 1242 0064 03D3     		bcc	.L40
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1243              		.loc 1 685 0
 1244 0066 BB68     		ldr	r3, [r7, #8]
 1245 0068 03F10103 		add	r3, r3, #1
 1246 006c 3B60     		str	r3, [r7, #0]
 1247              	.L40:
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1248              		.loc 1 688 0
 1249 006e 7B68     		ldr	r3, [r7, #4]
 1250 0070 1B6C     		ldr	r3, [r3, #64]
 1251 0072 7868     		ldr	r0, [r7, #4]
 1252 0074 3968     		ldr	r1, [r7, #0]
 1253 0076 9847     		blx	r3
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1254              		.loc 1 689 0
 1255 0078 4FF00003 		mov	r3, #0
 1256 007c FB60     		str	r3, [r7, #12]
 1257              	.L38:
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1258              		.loc 1 692 0
 1259 007e FB68     		ldr	r3, [r7, #12]
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1260              		.loc 1 693 0
 1261 0080 1846     		mov	r0, r3
 1262 0082 07F11007 		add	r7, r7, #16
 1263 0086 BD46     		mov	sp, r7
 1264 0088 80BD     		pop	{r7, pc}
 1265              		.cfi_endproc
 1266              	.LFE117:
 1268 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1269              		.align	2
 1270              		.global	PWMSP001_lSetCompareEdgeAlign
 1271              		.thumb
 1272              		.thumb_func
 1274              	PWMSP001_lSetCompareEdgeAlign:
 1275              	.LFB118:
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1276              		.loc 1 704 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 24
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281 0000 80B4     		push	{r7}
 1282              	.LCFI18:
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 7, -4
 1285 0002 87B0     		sub	sp, sp, #28
 1286              	.LCFI19:
 1287              		.cfi_def_cfa_offset 32
 1288 0004 00AF     		add	r7, sp, #0
 1289              	.LCFI20:
 1290              		.cfi_def_cfa_register 7
 1291 0006 7860     		str	r0, [r7, #4]
 1292 0008 3960     		str	r1, [r7, #0]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1293              		.loc 1 707 0
 1294 000a 7B68     		ldr	r3, [r7, #4]
 1295 000c 7B61     		str	r3, [r7, #20]
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1296              		.loc 1 708 0
 1297 000e 7B69     		ldr	r3, [r7, #20]
 1298 0010 9A69     		ldr	r2, [r3, #24]
 1299 0012 3B68     		ldr	r3, [r7, #0]
 1300 0014 4FEA0343 		lsl	r3, r3, #16
 1301 0018 4FEA1343 		lsr	r3, r3, #16
 1302 001c D363     		str	r3, [r2, #60]
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1303              		.loc 1 711 0
 1304 001e 7B69     		ldr	r3, [r7, #20]
 1305 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1306 0024 4FEA8303 		lsl	r3, r3, #2
 1307 0028 3B61     		str	r3, [r7, #16]
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1308              		.loc 1 712 0
 1309 002a 3B69     		ldr	r3, [r7, #16]
 1310 002c FB60     		str	r3, [r7, #12]
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1311              		.loc 1 713 0
 1312 002e 7B69     		ldr	r3, [r7, #20]
 1313 0030 5B69     		ldr	r3, [r3, #20]
 1314 0032 7A69     		ldr	r2, [r7, #20]
 1315 0034 5269     		ldr	r2, [r2, #20]
 1316 0036 1169     		ldr	r1, [r2, #16]
 1317 0038 FA68     		ldr	r2, [r7, #12]
 1318 003a 4FF00100 		mov	r0, #1
 1319 003e 00FA02F2 		lsl	r2, r0, r2
 1320 0042 0A43     		orrs	r2, r2, r1
 1321 0044 1A61     		str	r2, [r3, #16]
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1322              		.loc 1 714 0
 1323 0046 07F11C07 		add	r7, r7, #28
 1324 004a BD46     		mov	sp, r7
 1325 004c 80BC     		pop	{r7}
 1326 004e 7047     		bx	lr
 1327              		.cfi_endproc
 1328              	.LFE118:
 1330              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1331              		.align	2
 1332              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1333              		.thumb
 1334              		.thumb_func
 1336              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1337              	.LFB119:
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1338              		.loc 1 725 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 32
 1341              		@ frame_needed = 1, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
 1343 0000 90B4     		push	{r4, r7}
 1344              	.LCFI21:
 1345              		.cfi_def_cfa_offset 8
 1346              		.cfi_offset 4, -8
 1347              		.cfi_offset 7, -4
 1348 0002 88B0     		sub	sp, sp, #32
 1349              	.LCFI22:
 1350              		.cfi_def_cfa_offset 40
 1351 0004 00AF     		add	r7, sp, #0
 1352              	.LCFI23:
 1353              		.cfi_def_cfa_register 7
 1354 0006 7860     		str	r0, [r7, #4]
 1355 0008 3960     		str	r1, [r7, #0]
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1356              		.loc 1 726 0
 1357 000a 4FF00003 		mov	r3, #0
 1358 000e FB61     		str	r3, [r7, #28]
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1359              		.loc 1 727 0
 1360 0010 4FF00003 		mov	r3, #0
 1361 0014 BB61     		str	r3, [r7, #24]
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1362              		.loc 1 730 0
 1363 0016 7B68     		ldr	r3, [r7, #4]
 1364 0018 7B61     		str	r3, [r7, #20]
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1365              		.loc 1 740 0
 1366 001a 7B69     		ldr	r3, [r7, #20]
 1367 001c 9B69     		ldr	r3, [r3, #24]
 1368 001e 5B6B     		ldr	r3, [r3, #52]
 1369 0020 9BB2     		uxth	r3, r3
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1370              		.loc 1 739 0
 1371 0022 1A46     		mov	r2, r3
 1372 0024 3B68     		ldr	r3, [r7, #0]
 1373 0026 B3FBF2F1 		udiv	r1, r3, r2
 1374 002a 02FB01F2 		mul	r2, r2, r1
 1375 002e 9B1A     		subs	r3, r3, r2
 1376 0030 FB61     		str	r3, [r7, #28]
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1377              		.loc 1 742 0
 1378 0032 7B69     		ldr	r3, [r7, #20]
 1379 0034 9B69     		ldr	r3, [r3, #24]
 1380 0036 5B6B     		ldr	r3, [r3, #52]
 1381 0038 9BB2     		uxth	r3, r3
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1382              		.loc 1 741 0
 1383 003a 3A68     		ldr	r2, [r7, #0]
 1384 003c B2FBF3F3 		udiv	r3, r2, r3
 1385 0040 BB61     		str	r3, [r7, #24]
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1386              		.loc 1 744 0
 1387 0042 7B69     		ldr	r3, [r7, #20]
 1388 0044 9A69     		ldr	r2, [r3, #24]
 1389 0046 FB69     		ldr	r3, [r7, #28]
 1390 0048 4FEA0343 		lsl	r3, r3, #16
 1391 004c 4FEA1343 		lsr	r3, r3, #16
 1392 0050 D363     		str	r3, [r2, #60]
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1393              		.loc 1 745 0
 1394 0052 7B69     		ldr	r3, [r7, #20]
 1395 0054 DA69     		ldr	r2, [r3, #28]
 1396 0056 BB69     		ldr	r3, [r7, #24]
 1397 0058 4FEA0343 		lsl	r3, r3, #16
 1398 005c 4FEA1343 		lsr	r3, r3, #16
 1399 0060 D363     		str	r3, [r2, #60]
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1400              		.loc 1 747 0
 1401 0062 7B69     		ldr	r3, [r7, #20]
 1402 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1403 0068 4FEA8303 		lsl	r3, r3, #2
 1404 006c 3B61     		str	r3, [r7, #16]
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1405              		.loc 1 748 0
 1406 006e 7B69     		ldr	r3, [r7, #20]
 1407 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1408 0074 4FEA8303 		lsl	r3, r3, #2
 1409 0078 FB60     		str	r3, [r7, #12]
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1410              		.loc 1 749 0
 1411 007a 7B69     		ldr	r3, [r7, #20]
 1412 007c 5B69     		ldr	r3, [r3, #20]
 1413 007e 7A69     		ldr	r2, [r7, #20]
 1414 0080 5269     		ldr	r2, [r2, #20]
 1415 0082 1169     		ldr	r1, [r2, #16]
 1416 0084 FA68     		ldr	r2, [r7, #12]
 1417 0086 4FF00100 		mov	r0, #1
 1418 008a 00FA02F0 		lsl	r0, r0, r2
 1419 008e 3A69     		ldr	r2, [r7, #16]
 1420 0090 4FF00104 		mov	r4, #1
 1421 0094 04FA02F2 		lsl	r2, r4, r2
 1422 0098 0243     		orrs	r2, r2, r0
 1423 009a 0A43     		orrs	r2, r2, r1
 1424 009c 1A61     		str	r2, [r3, #16]
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1425              		.loc 1 750 0
 1426 009e 07F12007 		add	r7, r7, #32
 1427 00a2 BD46     		mov	sp, r7
 1428 00a4 90BC     		pop	{r4, r7}
 1429 00a6 7047     		bx	lr
 1430              		.cfi_endproc
 1431              	.LFE119:
 1433              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1434              		.align	2
 1435              		.global	PWMSP001_lSetCompareCenterAlign
 1436              		.thumb
 1437              		.thumb_func
 1439              	PWMSP001_lSetCompareCenterAlign:
 1440              	.LFB120:
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1441              		.loc 1 761 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 16
 1444              		@ frame_needed = 1, uses_anonymous_args = 0
 1445              		@ link register save eliminated.
 1446 0000 80B4     		push	{r7}
 1447              	.LCFI24:
 1448              		.cfi_def_cfa_offset 4
 1449              		.cfi_offset 7, -4
 1450 0002 85B0     		sub	sp, sp, #20
 1451              	.LCFI25:
 1452              		.cfi_def_cfa_offset 24
 1453 0004 00AF     		add	r7, sp, #0
 1454              	.LCFI26:
 1455              		.cfi_def_cfa_register 7
 1456 0006 7860     		str	r0, [r7, #4]
 1457 0008 3960     		str	r1, [r7, #0]
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1458              		.loc 1 764 0
 1459 000a 7B68     		ldr	r3, [r7, #4]
 1460 000c FB60     		str	r3, [r7, #12]
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1461              		.loc 1 765 0
 1462 000e FB68     		ldr	r3, [r7, #12]
 1463 0010 9A69     		ldr	r2, [r3, #24]
 1464 0012 3B68     		ldr	r3, [r7, #0]
 1465 0014 4FEA0343 		lsl	r3, r3, #16
 1466 0018 4FEA1343 		lsr	r3, r3, #16
 1467 001c D363     		str	r3, [r2, #60]
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1468              		.loc 1 768 0
 1469 001e FB68     		ldr	r3, [r7, #12]
 1470 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1471 0024 4FEA8303 		lsl	r3, r3, #2
 1472 0028 BB60     		str	r3, [r7, #8]
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1473              		.loc 1 769 0
 1474 002a FB68     		ldr	r3, [r7, #12]
 1475 002c 5B69     		ldr	r3, [r3, #20]
 1476 002e FA68     		ldr	r2, [r7, #12]
 1477 0030 5269     		ldr	r2, [r2, #20]
 1478 0032 1169     		ldr	r1, [r2, #16]
 1479 0034 BA68     		ldr	r2, [r7, #8]
 1480 0036 4FF00100 		mov	r0, #1
 1481 003a 00FA02F2 		lsl	r2, r0, r2
 1482 003e 0A43     		orrs	r2, r2, r1
 1483 0040 1A61     		str	r2, [r3, #16]
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1484              		.loc 1 770 0
 1485 0042 07F11407 		add	r7, r7, #20
 1486 0046 BD46     		mov	sp, r7
 1487 0048 80BC     		pop	{r7}
 1488 004a 7047     		bx	lr
 1489              		.cfi_endproc
 1490              	.LFE120:
 1492              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1493              		.align	2
 1494              		.global	PWMSP001_SetDutyCycle
 1495              		.thumb
 1496              		.thumb_func
 1498              	PWMSP001_SetDutyCycle:
 1499              	.LFB121:
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1500              		.loc 1 782 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 16
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504 0000 80B5     		push	{r7, lr}
 1505              	.LCFI27:
 1506              		.cfi_def_cfa_offset 8
 1507              		.cfi_offset 7, -8
 1508              		.cfi_offset 14, -4
 1509 0002 84B0     		sub	sp, sp, #16
 1510              	.LCFI28:
 1511              		.cfi_def_cfa_offset 24
 1512 0004 00AF     		add	r7, sp, #0
 1513              	.LCFI29:
 1514              		.cfi_def_cfa_register 7
 1515 0006 7860     		str	r0, [r7, #4]
 1516 0008 3960     		str	r1, [r7, #0]	@ float
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1517              		.loc 1 783 0
 1518 000a 4FF00103 		mov	r3, #1
 1519 000e FB60     		str	r3, [r7, #12]
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1520              		.loc 1 785 0
 1521 0010 7B68     		ldr	r3, [r7, #4]
 1522 0012 DB6B     		ldr	r3, [r3, #60]
 1523 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1524 0016 002B     		cmp	r3, #0
 1525 0018 1BD0     		beq	.L46
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1526              		.loc 1 787 0
 1527 001a 97ED007A 		flds	s14, [r7, #0]
 1528 001e DFED107A 		flds	s15, .L52
 1529 0022 B4EEE77A 		fcmpes	s14, s15
 1530 0026 F1EE10FA 		fmstat
 1531 002a 06DC     		bgt	.L47
 1532              		.loc 1 787 0 is_stmt 0 discriminator 1
 1533 002c D7ED007A 		flds	s15, [r7, #0]
 1534 0030 F5EEC07A 		fcmpezs	s15
 1535 0034 F1EE10FA 		fmstat
 1536 0038 03D5     		bpl	.L51
 1537              	.L47:
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1538              		.loc 1 789 0 is_stmt 1
 1539 003a 4FF00203 		mov	r3, #2
 1540 003e FB60     		str	r3, [r7, #12]
 1541 0040 07E0     		b	.L46
 1542              	.L51:
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1543              		.loc 1 794 0
 1544 0042 7B68     		ldr	r3, [r7, #4]
 1545 0044 5B6C     		ldr	r3, [r3, #68]
 1546 0046 7868     		ldr	r0, [r7, #4]
 1547 0048 3968     		ldr	r1, [r7, #0]	@ float
 1548 004a 9847     		blx	r3
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1549              		.loc 1 795 0
 1550 004c 4FF00003 		mov	r3, #0
 1551 0050 FB60     		str	r3, [r7, #12]
 1552              	.L46:
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1553              		.loc 1 798 0
 1554 0052 FB68     		ldr	r3, [r7, #12]
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1555              		.loc 1 799 0
 1556 0054 1846     		mov	r0, r3
 1557 0056 07F11007 		add	r7, r7, #16
 1558 005a BD46     		mov	sp, r7
 1559 005c 80BD     		pop	{r7, pc}
 1560              	.L53:
 1561 005e 00BF     		.align	2
 1562              	.L52:
 1563 0060 0000C842 		.word	1120403456
 1564              		.cfi_endproc
 1565              	.LFE121:
 1567              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1568              		.align	2
 1569              		.global	PWMSP001_lSetDutyEdgeAlign
 1570              		.thumb
 1571              		.thumb_func
 1573              	PWMSP001_lSetDutyEdgeAlign:
 1574              	.LFB122:
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1575              		.loc 1 810 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 32
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579              		@ link register save eliminated.
 1580 0000 80B4     		push	{r7}
 1581              	.LCFI30:
 1582              		.cfi_def_cfa_offset 4
 1583              		.cfi_offset 7, -4
 1584 0002 89B0     		sub	sp, sp, #36
 1585              	.LCFI31:
 1586              		.cfi_def_cfa_offset 40
 1587 0004 00AF     		add	r7, sp, #0
 1588              	.LCFI32:
 1589              		.cfi_def_cfa_register 7
 1590 0006 7860     		str	r0, [r7, #4]
 1591 0008 3960     		str	r1, [r7, #0]	@ float
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1592              		.loc 1 811 0
 1593 000a 4FF00003 		mov	r3, #0
 1594 000e FB61     		str	r3, [r7, #28]
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1595              		.loc 1 814 0
 1596 0010 7B68     		ldr	r3, [r7, #4]
 1597 0012 BB61     		str	r3, [r7, #24]
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1598              		.loc 1 815 0
 1599 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1600 0016 7B61     		str	r3, [r7, #20]	@ float
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1601              		.loc 1 819 0
 1602 0018 9FED1F7A 		flds	s14, .L55
 1603 001c D7ED057A 		flds	s15, [r7, #20]
 1604 0020 37EE677A 		fsubs	s14, s14, s15
 1605 0024 DFED1C7A 		flds	s15, .L55
 1606 0028 C7EE277A 		fdivs	s15, s14, s15
 1607 002c C7ED057A 		fsts	s15, [r7, #20]
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1608              		.loc 1 820 0
 1609 0030 BB69     		ldr	r3, [r7, #24]
 1610 0032 9B69     		ldr	r3, [r3, #24]
 1611 0034 5B6B     		ldr	r3, [r3, #52]
 1612 0036 03F10103 		add	r3, r3, #1
 1613 003a 07EE103A 		fmsr	s14, r3	@ int
 1614 003e F8EE477A 		fuitos	s15, s14
 1615 0042 C7ED047A 		fsts	s15, [r7, #16]
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1616              		.loc 1 821 0
 1617 0046 97ED047A 		flds	s14, [r7, #16]
 1618 004a D7ED057A 		flds	s15, [r7, #20]
 1619 004e 67EE277A 		fmuls	s15, s14, s15
 1620 0052 FCEEE77A 		ftouizs	s15, s15
 1621 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1622              		.loc 1 822 0
 1623 005a BB69     		ldr	r3, [r7, #24]
 1624 005c 9A69     		ldr	r2, [r3, #24]
 1625 005e FB69     		ldr	r3, [r7, #28]
 1626 0060 4FEA0343 		lsl	r3, r3, #16
 1627 0064 4FEA1343 		lsr	r3, r3, #16
 1628 0068 D363     		str	r3, [r2, #60]
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1629              		.loc 1 825 0
 1630 006a BB69     		ldr	r3, [r7, #24]
 1631 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1632 0070 4FEA8303 		lsl	r3, r3, #2
 1633 0074 FB60     		str	r3, [r7, #12]
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1634              		.loc 1 826 0
 1635 0076 BB69     		ldr	r3, [r7, #24]
 1636 0078 5B69     		ldr	r3, [r3, #20]
 1637 007a BA69     		ldr	r2, [r7, #24]
 1638 007c 5269     		ldr	r2, [r2, #20]
 1639 007e 1169     		ldr	r1, [r2, #16]
 1640 0080 FA68     		ldr	r2, [r7, #12]
 1641 0082 4FF00100 		mov	r0, #1
 1642 0086 00FA02F2 		lsl	r2, r0, r2
 1643 008a 0A43     		orrs	r2, r2, r1
 1644 008c 1A61     		str	r2, [r3, #16]
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1645              		.loc 1 828 0
 1646 008e 07F12407 		add	r7, r7, #36
 1647 0092 BD46     		mov	sp, r7
 1648 0094 80BC     		pop	{r7}
 1649 0096 7047     		bx	lr
 1650              	.L56:
 1651              		.align	2
 1652              	.L55:
 1653 0098 0000C842 		.word	1120403456
 1654              		.cfi_endproc
 1655              	.LFE122:
 1657              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1658              		.align	2
 1659              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1660              		.thumb
 1661              		.thumb_func
 1663              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1664              	.LFB123:
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1665              		.loc 1 839 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 40
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 1670 0000 90B4     		push	{r4, r7}
 1671              	.LCFI33:
 1672              		.cfi_def_cfa_offset 8
 1673              		.cfi_offset 4, -8
 1674              		.cfi_offset 7, -4
 1675 0002 8AB0     		sub	sp, sp, #40
 1676              	.LCFI34:
 1677              		.cfi_def_cfa_offset 48
 1678 0004 00AF     		add	r7, sp, #0
 1679              	.LCFI35:
 1680              		.cfi_def_cfa_register 7
 1681 0006 7860     		str	r0, [r7, #4]
 1682 0008 3960     		str	r1, [r7, #0]	@ float
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1683              		.loc 1 840 0
 1684 000a 4FF00003 		mov	r3, #0
 1685 000e 7B62     		str	r3, [r7, #36]
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1686              		.loc 1 841 0
 1687 0010 4FF00003 		mov	r3, #0
 1688 0014 3B62     		str	r3, [r7, #32]
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1689              		.loc 1 842 0
 1690 0016 4FF00003 		mov	r3, #0
 1691 001a FB61     		str	r3, [r7, #28]
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1692              		.loc 1 846 0
 1693 001c 7B68     		ldr	r3, [r7, #4]
 1694 001e BB61     		str	r3, [r7, #24]
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1695              		.loc 1 848 0
 1696 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1697 0022 7B61     		str	r3, [r7, #20]	@ float
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1698              		.loc 1 851 0
 1699 0024 BB69     		ldr	r3, [r7, #24]
 1700 0026 DB69     		ldr	r3, [r3, #28]
 1701 0028 5B6B     		ldr	r3, [r3, #52]
 1702 002a 03F10103 		add	r3, r3, #1
 1703 002e 7B62     		str	r3, [r7, #36]
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1704              		.loc 1 852 0
 1705 0030 BB69     		ldr	r3, [r7, #24]
 1706 0032 9B69     		ldr	r3, [r3, #24]
 1707 0034 5B6B     		ldr	r3, [r3, #52]
 1708 0036 4FEA0343 		lsl	r3, r3, #16
 1709 003a 4FEA1343 		lsr	r3, r3, #16
 1710 003e 03F10102 		add	r2, r3, #1
 1711 0042 7B6A     		ldr	r3, [r7, #36]
 1712 0044 02FB03F3 		mul	r3, r2, r3
 1713 0048 7B62     		str	r3, [r7, #36]
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1714              		.loc 1 853 0
 1715 004a 7B6A     		ldr	r3, [r7, #36]
 1716 004c 03F10103 		add	r3, r3, #1
 1717 0050 7B62     		str	r3, [r7, #36]
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1718              		.loc 1 855 0
 1719 0052 9FED347A 		flds	s14, .L58
 1720 0056 D7ED057A 		flds	s15, [r7, #20]
 1721 005a 37EE677A 		fsubs	s14, s14, s15
 1722 005e DFED317A 		flds	s15, .L58
 1723 0062 C7EE277A 		fdivs	s15, s14, s15
 1724 0066 C7ED057A 		fsts	s15, [r7, #20]
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1725              		.loc 1 856 0
 1726 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1727 006e F8EE677A 		fuitos	s15, s15
 1728 0072 C7ED047A 		fsts	s15, [r7, #16]
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1729              		.loc 1 857 0
 1730 0076 97ED047A 		flds	s14, [r7, #16]
 1731 007a D7ED057A 		flds	s15, [r7, #20]
 1732 007e 67EE277A 		fmuls	s15, s14, s15
 1733 0082 FCEEE77A 		ftouizs	s15, s15
 1734 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1735              		.loc 1 860 0
 1736 008a BB69     		ldr	r3, [r7, #24]
 1737 008c 9B69     		ldr	r3, [r3, #24]
 1738 008e 5B6B     		ldr	r3, [r3, #52]
 1739 0090 4FEA0343 		lsl	r3, r3, #16
 1740 0094 4FEA1343 		lsr	r3, r3, #16
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1741              		.loc 1 859 0
 1742 0098 7A6A     		ldr	r2, [r7, #36]
 1743 009a B2FBF3F1 		udiv	r1, r2, r3
 1744 009e 03FB01F3 		mul	r3, r3, r1
 1745 00a2 D31A     		subs	r3, r2, r3
 1746 00a4 3B62     		str	r3, [r7, #32]
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1747              		.loc 1 861 0
 1748 00a6 BB69     		ldr	r3, [r7, #24]
 1749 00a8 9A69     		ldr	r2, [r3, #24]
 1750 00aa 3B6A     		ldr	r3, [r7, #32]
 1751 00ac 4FEA0343 		lsl	r3, r3, #16
 1752 00b0 4FEA1343 		lsr	r3, r3, #16
 1753 00b4 D363     		str	r3, [r2, #60]
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1754              		.loc 1 863 0
 1755 00b6 BB69     		ldr	r3, [r7, #24]
 1756 00b8 9B69     		ldr	r3, [r3, #24]
 1757 00ba 5B6B     		ldr	r3, [r3, #52]
 1758 00bc 4FEA0343 		lsl	r3, r3, #16
 1759 00c0 4FEA1343 		lsr	r3, r3, #16
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1760              		.loc 1 862 0
 1761 00c4 7A6A     		ldr	r2, [r7, #36]
 1762 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1763 00ca FB61     		str	r3, [r7, #28]
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1764              		.loc 1 864 0
 1765 00cc BB69     		ldr	r3, [r7, #24]
 1766 00ce DA69     		ldr	r2, [r3, #28]
 1767 00d0 FB69     		ldr	r3, [r7, #28]
 1768 00d2 4FEA0343 		lsl	r3, r3, #16
 1769 00d6 4FEA1343 		lsr	r3, r3, #16
 1770 00da D363     		str	r3, [r2, #60]
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1771              		.loc 1 867 0
 1772 00dc BB69     		ldr	r3, [r7, #24]
 1773 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1774 00e2 4FEA8303 		lsl	r3, r3, #2
 1775 00e6 FB60     		str	r3, [r7, #12]
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1776              		.loc 1 868 0
 1777 00e8 BB69     		ldr	r3, [r7, #24]
 1778 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1779 00ee 4FEA8303 		lsl	r3, r3, #2
 1780 00f2 BB60     		str	r3, [r7, #8]
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1781              		.loc 1 869 0
 1782 00f4 BB69     		ldr	r3, [r7, #24]
 1783 00f6 5B69     		ldr	r3, [r3, #20]
 1784 00f8 BA69     		ldr	r2, [r7, #24]
 1785 00fa 5269     		ldr	r2, [r2, #20]
 1786 00fc 1169     		ldr	r1, [r2, #16]
 1787 00fe FA68     		ldr	r2, [r7, #12]
 1788 0100 4FF00100 		mov	r0, #1
 1789 0104 00FA02F0 		lsl	r0, r0, r2
 1790 0108 BA68     		ldr	r2, [r7, #8]
 1791 010a 4FF00104 		mov	r4, #1
 1792 010e 04FA02F2 		lsl	r2, r4, r2
 1793 0112 0243     		orrs	r2, r2, r0
 1794 0114 0A43     		orrs	r2, r2, r1
 1795 0116 1A61     		str	r2, [r3, #16]
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1796              		.loc 1 870 0
 1797 0118 07F12807 		add	r7, r7, #40
 1798 011c BD46     		mov	sp, r7
 1799 011e 90BC     		pop	{r4, r7}
 1800 0120 7047     		bx	lr
 1801              	.L59:
 1802 0122 00BF     		.align	2
 1803              	.L58:
 1804 0124 0000C842 		.word	1120403456
 1805              		.cfi_endproc
 1806              	.LFE123:
 1808              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1809              		.align	2
 1810              		.global	PWMSP001_lSetDutyCenterAlign
 1811              		.thumb
 1812              		.thumb_func
 1814              	PWMSP001_lSetDutyCenterAlign:
 1815              	.LFB124:
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1816              		.loc 1 881 0
 1817              		.cfi_startproc
 1818              		@ args = 0, pretend = 0, frame = 32
 1819              		@ frame_needed = 1, uses_anonymous_args = 0
 1820              		@ link register save eliminated.
 1821 0000 80B4     		push	{r7}
 1822              	.LCFI36:
 1823              		.cfi_def_cfa_offset 4
 1824              		.cfi_offset 7, -4
 1825 0002 89B0     		sub	sp, sp, #36
 1826              	.LCFI37:
 1827              		.cfi_def_cfa_offset 40
 1828 0004 00AF     		add	r7, sp, #0
 1829              	.LCFI38:
 1830              		.cfi_def_cfa_register 7
 1831 0006 7860     		str	r0, [r7, #4]
 1832 0008 3960     		str	r1, [r7, #0]	@ float
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1833              		.loc 1 883 0
 1834 000a 4FF00003 		mov	r3, #0
 1835 000e FB61     		str	r3, [r7, #28]
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1836              		.loc 1 886 0
 1837 0010 7B68     		ldr	r3, [r7, #4]
 1838 0012 BB61     		str	r3, [r7, #24]
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1839              		.loc 1 887 0
 1840 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1841 0016 7B61     		str	r3, [r7, #20]	@ float
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1842              		.loc 1 889 0
 1843 0018 9FED1E7A 		flds	s14, .L61
 1844 001c D7ED057A 		flds	s15, [r7, #20]
 1845 0020 37EE677A 		fsubs	s14, s14, s15
 1846 0024 DFED1B7A 		flds	s15, .L61
 1847 0028 C7EE277A 		fdivs	s15, s14, s15
 1848 002c C7ED057A 		fsts	s15, [r7, #20]
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1849              		.loc 1 890 0
 1850 0030 BB69     		ldr	r3, [r7, #24]
 1851 0032 9B69     		ldr	r3, [r3, #24]
 1852 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 1853 0038 F8EE677A 		fuitos	s15, s15
 1854 003c C7ED047A 		fsts	s15, [r7, #16]
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1855              		.loc 1 891 0
 1856 0040 97ED047A 		flds	s14, [r7, #16]
 1857 0044 D7ED057A 		flds	s15, [r7, #20]
 1858 0048 67EE277A 		fmuls	s15, s14, s15
 1859 004c FCEEE77A 		ftouizs	s15, s15
 1860 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1861              		.loc 1 892 0
 1862 0054 BB69     		ldr	r3, [r7, #24]
 1863 0056 9A69     		ldr	r2, [r3, #24]
 1864 0058 FB69     		ldr	r3, [r7, #28]
 1865 005a 4FEA0343 		lsl	r3, r3, #16
 1866 005e 4FEA1343 		lsr	r3, r3, #16
 1867 0062 D363     		str	r3, [r2, #60]
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1868              		.loc 1 895 0
 1869 0064 BB69     		ldr	r3, [r7, #24]
 1870 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1871 006a 4FEA8303 		lsl	r3, r3, #2
 1872 006e FB60     		str	r3, [r7, #12]
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1873              		.loc 1 896 0
 1874 0070 BB69     		ldr	r3, [r7, #24]
 1875 0072 5B69     		ldr	r3, [r3, #20]
 1876 0074 BA69     		ldr	r2, [r7, #24]
 1877 0076 5269     		ldr	r2, [r2, #20]
 1878 0078 1169     		ldr	r1, [r2, #16]
 1879 007a FA68     		ldr	r2, [r7, #12]
 1880 007c 4FF00100 		mov	r0, #1
 1881 0080 00FA02F2 		lsl	r2, r0, r2
 1882 0084 0A43     		orrs	r2, r2, r1
 1883 0086 1A61     		str	r2, [r3, #16]
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1884              		.loc 1 897 0
 1885 0088 07F12407 		add	r7, r7, #36
 1886 008c BD46     		mov	sp, r7
 1887 008e 80BC     		pop	{r7}
 1888 0090 7047     		bx	lr
 1889              	.L62:
 1890 0092 00BF     		.align	2
 1891              	.L61:
 1892 0094 0000C842 		.word	1120403456
 1893              		.cfi_endproc
 1894              	.LFE124:
 1896              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1897              		.align	2
 1898              		.global	PWMSP001_SetPeriodAndCompare
 1899              		.thumb
 1900              		.thumb_func
 1902              	PWMSP001_SetPeriodAndCompare:
 1903              	.LFB125:
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1904              		.loc 1 910 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 24
 1907              		@ frame_needed = 1, uses_anonymous_args = 0
 1908 0000 80B5     		push	{r7, lr}
 1909              	.LCFI39:
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 7, -8
 1912              		.cfi_offset 14, -4
 1913 0002 86B0     		sub	sp, sp, #24
 1914              	.LCFI40:
 1915              		.cfi_def_cfa_offset 32
 1916 0004 00AF     		add	r7, sp, #0
 1917              	.LCFI41:
 1918              		.cfi_def_cfa_register 7
 1919 0006 F860     		str	r0, [r7, #12]
 1920 0008 B960     		str	r1, [r7, #8]
 1921 000a 7A60     		str	r2, [r7, #4]
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1922              		.loc 1 911 0
 1923 000c 4FF00103 		mov	r3, #1
 1924 0010 7B61     		str	r3, [r7, #20]
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 1925              		.loc 1 912 0
 1926 0012 4FF00003 		mov	r3, #0
 1927 0016 3B61     		str	r3, [r7, #16]
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1928              		.loc 1 914 0
 1929 0018 FB68     		ldr	r3, [r7, #12]
 1930 001a DB6B     		ldr	r3, [r3, #60]
 1931 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1932 001e 002B     		cmp	r3, #0
 1933 0020 3BD0     		beq	.L64
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1934              		.loc 1 916 0
 1935 0022 BB68     		ldr	r3, [r7, #8]
 1936 0024 002B     		cmp	r3, #0
 1937 0026 09D0     		beq	.L65
 1938              		.loc 1 916 0 is_stmt 0 discriminator 1
 1939 0028 FB68     		ldr	r3, [r7, #12]
 1940 002a DA6A     		ldr	r2, [r3, #44]
 1941 002c 7B68     		ldr	r3, [r7, #4]
 1942 002e 9A42     		cmp	r2, r3
 1943 0030 08D2     		bcs	.L66
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 1944              		.loc 1 917 0 is_stmt 1 discriminator 1
 1945 0032 FB68     		ldr	r3, [r7, #12]
 1946 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1947              		.loc 1 916 0 discriminator 1
 1948 0038 002B     		cmp	r3, #0
 1949 003a 03D1     		bne	.L66
 1950              	.L65:
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1951              		.loc 1 919 0
 1952 003c 4FF00203 		mov	r3, #2
 1953 0040 7B61     		str	r3, [r7, #20]
 1954 0042 2AE0     		b	.L64
 1955              	.L66:
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1956              		.loc 1 923 0
 1957 0044 FB68     		ldr	r3, [r7, #12]
 1958 0046 DA6A     		ldr	r2, [r3, #44]
 1959 0048 BB68     		ldr	r3, [r7, #8]
 1960 004a 9A42     		cmp	r2, r3
 1961 004c 08D2     		bcs	.L67
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 1962              		.loc 1 924 0 discriminator 1
 1963 004e FB68     		ldr	r3, [r7, #12]
 1964 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1965              		.loc 1 923 0 discriminator 1
 1966 0054 012B     		cmp	r3, #1
 1967 0056 03D0     		beq	.L67
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1968              		.loc 1 927 0
 1969 0058 4FF00203 		mov	r3, #2
 1970 005c 7B61     		str	r3, [r7, #20]
 1971 005e 1CE0     		b	.L64
 1972              	.L67:
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 1973              		.loc 1 931 0
 1974 0060 BB68     		ldr	r3, [r7, #8]
 1975 0062 3B61     		str	r3, [r7, #16]
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1976              		.loc 1 932 0
 1977 0064 FB68     		ldr	r3, [r7, #12]
 1978 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1979 006a 012B     		cmp	r3, #1
 1980 006c 05D1     		bne	.L68
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 1981              		.loc 1 934 0
 1982 006e FB68     		ldr	r3, [r7, #12]
 1983 0070 DB69     		ldr	r3, [r3, #28]
 1984 0072 3A69     		ldr	r2, [r7, #16]
 1985 0074 4FEA1242 		lsr	r2, r2, #16
 1986 0078 5A63     		str	r2, [r3, #52]
 1987              	.L68:
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1988              		.loc 1 937 0
 1989 007a FB68     		ldr	r3, [r7, #12]
 1990 007c 9A69     		ldr	r2, [r3, #24]
 1991 007e 3B69     		ldr	r3, [r7, #16]
 1992 0080 4FEA0343 		lsl	r3, r3, #16
 1993 0084 4FEA1343 		lsr	r3, r3, #16
 1994 0088 5363     		str	r3, [r2, #52]
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1995              		.loc 1 939 0
 1996 008a FB68     		ldr	r3, [r7, #12]
 1997 008c 1B6C     		ldr	r3, [r3, #64]
 1998 008e F868     		ldr	r0, [r7, #12]
 1999 0090 7968     		ldr	r1, [r7, #4]
 2000 0092 9847     		blx	r3
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2001              		.loc 1 940 0
 2002 0094 4FF00003 		mov	r3, #0
 2003 0098 7B61     		str	r3, [r7, #20]
 2004              	.L64:
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2005              		.loc 1 944 0
 2006 009a 7B69     		ldr	r3, [r7, #20]
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2007              		.loc 1 945 0
 2008 009c 1846     		mov	r0, r3
 2009 009e 07F11807 		add	r7, r7, #24
 2010 00a2 BD46     		mov	sp, r7
 2011 00a4 80BD     		pop	{r7, pc}
 2012              		.cfi_endproc
 2013              	.LFE125:
 2015 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2016              		.align	2
 2017              		.global	PWMSP001_SetPeriod
 2018              		.thumb
 2019              		.thumb_func
 2021              	PWMSP001_SetPeriod:
 2022              	.LFB126:
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2023              		.loc 1 956 0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 24
 2026              		@ frame_needed = 1, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
 2028 0000 80B4     		push	{r7}
 2029              	.LCFI42:
 2030              		.cfi_def_cfa_offset 4
 2031              		.cfi_offset 7, -4
 2032 0002 87B0     		sub	sp, sp, #28
 2033              	.LCFI43:
 2034              		.cfi_def_cfa_offset 32
 2035 0004 00AF     		add	r7, sp, #0
 2036              	.LCFI44:
 2037              		.cfi_def_cfa_register 7
 2038 0006 7860     		str	r0, [r7, #4]
 2039 0008 3960     		str	r1, [r7, #0]
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2040              		.loc 1 957 0
 2041 000a 4FF00103 		mov	r3, #1
 2042 000e 7B61     		str	r3, [r7, #20]
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2043              		.loc 1 958 0
 2044 0010 4FF00003 		mov	r3, #0
 2045 0014 3B61     		str	r3, [r7, #16]
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2046              		.loc 1 962 0
 2047 0016 7B68     		ldr	r3, [r7, #4]
 2048 0018 DB6B     		ldr	r3, [r3, #60]
 2049 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2050 001c 002B     		cmp	r3, #0
 2051 001e 55D0     		beq	.L71
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2052              		.loc 1 964 0
 2053 0020 3B68     		ldr	r3, [r7, #0]
 2054 0022 002B     		cmp	r3, #0
 2055 0024 03D1     		bne	.L72
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2056              		.loc 1 966 0
 2057 0026 4FF00203 		mov	r3, #2
 2058 002a 7B61     		str	r3, [r7, #20]
 2059 002c 4EE0     		b	.L71
 2060              	.L72:
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2061              		.loc 1 970 0
 2062 002e 7B68     		ldr	r3, [r7, #4]
 2063 0030 DA6A     		ldr	r2, [r3, #44]
 2064 0032 3B68     		ldr	r3, [r7, #0]
 2065 0034 9A42     		cmp	r2, r3
 2066 0036 08D2     		bcs	.L73
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2067              		.loc 1 971 0 discriminator 1
 2068 0038 7B68     		ldr	r3, [r7, #4]
 2069 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2070              		.loc 1 970 0 discriminator 1
 2071 003e 012B     		cmp	r3, #1
 2072 0040 03D0     		beq	.L73
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2073              		.loc 1 973 0
 2074 0042 4FF00203 		mov	r3, #2
 2075 0046 7B61     		str	r3, [r7, #20]
 2076 0048 40E0     		b	.L71
 2077              	.L73:
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2078              		.loc 1 977 0
 2079 004a 3B68     		ldr	r3, [r7, #0]
 2080 004c 3B61     		str	r3, [r7, #16]
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2081              		.loc 1 978 0
 2082 004e 7B68     		ldr	r3, [r7, #4]
 2083 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2084 0054 012B     		cmp	r3, #1
 2085 0056 05D1     		bne	.L74
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2086              		.loc 1 980 0
 2087 0058 7B68     		ldr	r3, [r7, #4]
 2088 005a DB69     		ldr	r3, [r3, #28]
 2089 005c 3A69     		ldr	r2, [r7, #16]
 2090 005e 4FEA1242 		lsr	r2, r2, #16
 2091 0062 5A63     		str	r2, [r3, #52]
 2092              	.L74:
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2093              		.loc 1 982 0
 2094 0064 7B68     		ldr	r3, [r7, #4]
 2095 0066 9A69     		ldr	r2, [r3, #24]
 2096 0068 3B69     		ldr	r3, [r7, #16]
 2097 006a 4FEA0343 		lsl	r3, r3, #16
 2098 006e 4FEA1343 		lsr	r3, r3, #16
 2099 0072 5363     		str	r3, [r2, #52]
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2100              		.loc 1 984 0
 2101 0074 7B68     		ldr	r3, [r7, #4]
 2102 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2103 007a 4FEA8303 		lsl	r3, r3, #2
 2104 007e FB60     		str	r3, [r7, #12]
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2105              		.loc 1 985 0
 2106 0080 7B68     		ldr	r3, [r7, #4]
 2107 0082 5B69     		ldr	r3, [r3, #20]
 2108 0084 7A68     		ldr	r2, [r7, #4]
 2109 0086 5269     		ldr	r2, [r2, #20]
 2110 0088 1169     		ldr	r1, [r2, #16]
 2111 008a FA68     		ldr	r2, [r7, #12]
 2112 008c 4FF00100 		mov	r0, #1
 2113 0090 00FA02F2 		lsl	r2, r0, r2
 2114 0094 0A43     		orrs	r2, r2, r1
 2115 0096 1A61     		str	r2, [r3, #16]
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2116              		.loc 1 986 0
 2117 0098 7B68     		ldr	r3, [r7, #4]
 2118 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2119 009e 012B     		cmp	r3, #1
 2120 00a0 11D1     		bne	.L75
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2121              		.loc 1 989 0
 2122 00a2 7B68     		ldr	r3, [r7, #4]
 2123 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2124 00a8 4FEA8303 		lsl	r3, r3, #2
 2125 00ac FB60     		str	r3, [r7, #12]
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2126              		.loc 1 990 0
 2127 00ae 7B68     		ldr	r3, [r7, #4]
 2128 00b0 5B69     		ldr	r3, [r3, #20]
 2129 00b2 7A68     		ldr	r2, [r7, #4]
 2130 00b4 5269     		ldr	r2, [r2, #20]
 2131 00b6 1169     		ldr	r1, [r2, #16]
 2132 00b8 FA68     		ldr	r2, [r7, #12]
 2133 00ba 4FF00100 		mov	r0, #1
 2134 00be 00FA02F2 		lsl	r2, r0, r2
 2135 00c2 0A43     		orrs	r2, r2, r1
 2136 00c4 1A61     		str	r2, [r3, #16]
 2137              	.L75:
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2138              		.loc 1 992 0
 2139 00c6 4FF00003 		mov	r3, #0
 2140 00ca 7B61     		str	r3, [r7, #20]
 2141              	.L71:
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2142              		.loc 1 996 0
 2143 00cc 7B69     		ldr	r3, [r7, #20]
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2144              		.loc 1 997 0
 2145 00ce 1846     		mov	r0, r3
 2146 00d0 07F11C07 		add	r7, r7, #28
 2147 00d4 BD46     		mov	sp, r7
 2148 00d6 80BC     		pop	{r7}
 2149 00d8 7047     		bx	lr
 2150              		.cfi_endproc
 2151              	.LFE126:
 2153 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2154              		.align	2
 2155              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2156              		.thumb
 2157              		.thumb_func
 2159              	PWMSP001_SetPwmFreqAndDutyCycle:
 2160              	.LFB127:
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2161              		.loc 1 1010 0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 32
 2164              		@ frame_needed = 1, uses_anonymous_args = 0
 2165 0000 80B5     		push	{r7, lr}
 2166              	.LCFI45:
 2167              		.cfi_def_cfa_offset 8
 2168              		.cfi_offset 7, -8
 2169              		.cfi_offset 14, -4
 2170 0002 88B0     		sub	sp, sp, #32
 2171              	.LCFI46:
 2172              		.cfi_def_cfa_offset 40
 2173 0004 00AF     		add	r7, sp, #0
 2174              	.LCFI47:
 2175              		.cfi_def_cfa_register 7
 2176 0006 F860     		str	r0, [r7, #12]
 2177 0008 B960     		str	r1, [r7, #8]	@ float
 2178 000a 7A60     		str	r2, [r7, #4]	@ float
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2179              		.loc 1 1011 0
 2180 000c 4FF00103 		mov	r3, #1
 2181 0010 FB61     		str	r3, [r7, #28]
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2182              		.loc 1 1012 0
 2183 0012 4FF00003 		mov	r3, #0
 2184 0016 BB61     		str	r3, [r7, #24]
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2185              		.loc 1 1015 0
 2186 0018 FB68     		ldr	r3, [r7, #12]
 2187 001a DB6B     		ldr	r3, [r3, #60]
 2188 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2189 001e 002B     		cmp	r3, #0
 2190 0020 70D0     		beq	.L78
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2191              		.loc 1 1017 0
 2192 0022 D7ED027A 		flds	s15, [r7, #8]
 2193 0026 F5EE407A 		fcmpzs	s15
 2194 002a F1EE10FA 		fmstat
 2195 002e 0FD0     		beq	.L79
 2196              		.loc 1 1017 0 is_stmt 0 discriminator 1
 2197 0030 97ED017A 		flds	s14, [r7, #4]
 2198 0034 DFED367A 		flds	s15, .L90
 2199 0038 B4EEE77A 		fcmpes	s14, s15
 2200 003c F1EE10FA 		fmstat
 2201 0040 06DC     		bgt	.L79
 2202 0042 D7ED017A 		flds	s15, [r7, #4]
 2203 0046 F5EEC07A 		fcmpezs	s15
 2204 004a F1EE10FA 		fmstat
 2205 004e 03D5     		bpl	.L89
 2206              	.L79:
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2207              		.loc 1 1019 0 is_stmt 1
 2208 0050 4FF00203 		mov	r3, #2
 2209 0054 FB61     		str	r3, [r7, #28]
 2210 0056 55E0     		b	.L78
 2211              	.L89:
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2212              		.loc 1 1023 0
 2213 0058 FB68     		ldr	r3, [r7, #12]
 2214 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2215 005c 7B61     		str	r3, [r7, #20]	@ float
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2216              		.loc 1 1024 0
 2217 005e 97ED057A 		flds	s14, [r7, #20]
 2218 0062 D7ED027A 		flds	s15, [r7, #8]
 2219 0066 67EE277A 		fmuls	s15, s14, s15
 2220 006a C7ED057A 		fsts	s15, [r7, #20]
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2221              		.loc 1 1025 0
 2222 006e 9FED297A 		flds	s14, .L90+4
 2223 0072 D7ED057A 		flds	s15, [r7, #20]
 2224 0076 C7EE277A 		fdivs	s15, s14, s15
 2225 007a FCEEE77A 		ftouizs	s15, s15
 2226 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2227              		.loc 1 1027 0
 2228 0082 FB68     		ldr	r3, [r7, #12]
 2229 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2230 0088 002B     		cmp	r3, #0
 2231 008a 20D1     		bne	.L82
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2232              		.loc 1 1029 0
 2233 008c BA69     		ldr	r2, [r7, #24]
 2234 008e 4FF6FF73 		movw	r3, #65535
 2235 0092 9A42     		cmp	r2, r3
 2236 0094 03D9     		bls	.L83
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2237              		.loc 1 1031 0
 2238 0096 4FF00203 		mov	r3, #2
 2239 009a FB61     		str	r3, [r7, #28]
 2240 009c 2AE0     		b	.L84
 2241              	.L83:
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2242              		.loc 1 1035 0
 2243 009e FB68     		ldr	r3, [r7, #12]
 2244 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2245 00a4 002B     		cmp	r3, #0
 2246 00a6 06D1     		bne	.L85
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2247              		.loc 1 1037 0
 2248 00a8 FB68     		ldr	r3, [r7, #12]
 2249 00aa 9B69     		ldr	r3, [r3, #24]
 2250 00ac BA69     		ldr	r2, [r7, #24]
 2251 00ae 02F1FF32 		add	r2, r2, #-1
 2252 00b2 5A63     		str	r2, [r3, #52]
 2253 00b4 07E0     		b	.L86
 2254              	.L85:
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2255              		.loc 1 1041 0
 2256 00b6 FB68     		ldr	r3, [r7, #12]
 2257 00b8 9B69     		ldr	r3, [r3, #24]
 2258 00ba BA69     		ldr	r2, [r7, #24]
 2259 00bc 02F1FF32 		add	r2, r2, #-1
 2260 00c0 4FEA5202 		lsr	r2, r2, #1
 2261 00c4 5A63     		str	r2, [r3, #52]
 2262              	.L86:
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2263              		.loc 1 1043 0
 2264 00c6 4FF00003 		mov	r3, #0
 2265 00ca FB61     		str	r3, [r7, #28]
 2266 00cc 12E0     		b	.L84
 2267              	.L82:
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2268              		.loc 1 1046 0
 2269 00ce FB68     		ldr	r3, [r7, #12]
 2270 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2271 00d4 012B     		cmp	r3, #1
 2272 00d6 08D1     		bne	.L87
 2273              		.loc 1 1046 0 is_stmt 0 discriminator 1
 2274 00d8 BA69     		ldr	r2, [r7, #24]
 2275 00da 4FF6FF73 		movw	r3, #65535
 2276 00de 9A42     		cmp	r2, r3
 2277 00e0 03D8     		bhi	.L87
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2278              		.loc 1 1049 0 is_stmt 1
 2279 00e2 4FF00203 		mov	r3, #2
 2280 00e6 FB61     		str	r3, [r7, #28]
 2281 00e8 04E0     		b	.L84
 2282              	.L87:
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2283              		.loc 1 1054 0
 2284 00ea F868     		ldr	r0, [r7, #12]
 2285 00ec B969     		ldr	r1, [r7, #24]
 2286 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2287 00f2 F861     		str	r0, [r7, #28]
 2288              	.L84:
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2289              		.loc 1 1056 0
 2290 00f4 FB69     		ldr	r3, [r7, #28]
 2291 00f6 002B     		cmp	r3, #0
 2292 00f8 04D1     		bne	.L78
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2293              		.loc 1 1059 0
 2294 00fa FB68     		ldr	r3, [r7, #12]
 2295 00fc 5B6C     		ldr	r3, [r3, #68]
 2296 00fe F868     		ldr	r0, [r7, #12]
 2297 0100 7968     		ldr	r1, [r7, #4]	@ float
 2298 0102 9847     		blx	r3
 2299              	.L78:
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2300              		.loc 1 1063 0
 2301 0104 FB69     		ldr	r3, [r7, #28]
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2302              		.loc 1 1064 0
 2303 0106 1846     		mov	r0, r3
 2304 0108 07F12007 		add	r7, r7, #32
 2305 010c BD46     		mov	sp, r7
 2306 010e 80BD     		pop	{r7, pc}
 2307              	.L91:
 2308              		.align	2
 2309              	.L90:
 2310 0110 0000C842 		.word	1120403456
 2311 0114 286B6E4E 		.word	1315859240
 2312              		.cfi_endproc
 2313              	.LFE127:
 2315              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2316              		.align	2
 2317              		.global	PWMSP001_SetPwmFreq
 2318              		.thumb
 2319              		.thumb_func
 2321              	PWMSP001_SetPwmFreq:
 2322              	.LFB128:
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2323              		.loc 1 1076 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 32
 2326              		@ frame_needed = 1, uses_anonymous_args = 0
 2327 0000 90B5     		push	{r4, r7, lr}
 2328              	.LCFI48:
 2329              		.cfi_def_cfa_offset 12
 2330              		.cfi_offset 4, -12
 2331              		.cfi_offset 7, -8
 2332              		.cfi_offset 14, -4
 2333 0002 89B0     		sub	sp, sp, #36
 2334              	.LCFI49:
 2335              		.cfi_def_cfa_offset 48
 2336 0004 00AF     		add	r7, sp, #0
 2337              	.LCFI50:
 2338              		.cfi_def_cfa_register 7
 2339 0006 7860     		str	r0, [r7, #4]
 2340 0008 3960     		str	r1, [r7, #0]	@ float
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2341              		.loc 1 1077 0
 2342 000a 4FF00103 		mov	r3, #1
 2343 000e FB61     		str	r3, [r7, #28]
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2344              		.loc 1 1078 0
 2345 0010 4FF00003 		mov	r3, #0
 2346 0014 BB61     		str	r3, [r7, #24]
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2347              		.loc 1 1083 0
 2348 0016 7B68     		ldr	r3, [r7, #4]
 2349 0018 DB6B     		ldr	r3, [r3, #60]
 2350 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2351 001c 002B     		cmp	r3, #0
 2352 001e 7DD0     		beq	.L93
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2353              		.loc 1 1085 0
 2354 0020 D7ED007A 		flds	s15, [r7, #0]
 2355 0024 F5EE407A 		fcmpzs	s15
 2356 0028 F1EE10FA 		fmstat
 2357 002c 03D1     		bne	.L94
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2358              		.loc 1 1087 0
 2359 002e 4FF00203 		mov	r3, #2
 2360 0032 FB61     		str	r3, [r7, #28]
 2361 0034 72E0     		b	.L93
 2362              	.L94:
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2363              		.loc 1 1091 0
 2364 0036 7B68     		ldr	r3, [r7, #4]
 2365 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2366 003a 7B61     		str	r3, [r7, #20]	@ float
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2367              		.loc 1 1092 0
 2368 003c 97ED057A 		flds	s14, [r7, #20]
 2369 0040 D7ED007A 		flds	s15, [r7, #0]
 2370 0044 67EE277A 		fmuls	s15, s14, s15
 2371 0048 C7ED057A 		fsts	s15, [r7, #20]
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2372              		.loc 1 1093 0
 2373 004c 9FED367A 		flds	s14, .L100
 2374 0050 D7ED057A 		flds	s15, [r7, #20]
 2375 0054 C7EE277A 		fdivs	s15, s14, s15
 2376 0058 FCEEE77A 		ftouizs	s15, s15
 2377 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2378              		.loc 1 1095 0
 2379 0060 7B68     		ldr	r3, [r7, #4]
 2380 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2381 0066 002B     		cmp	r3, #0
 2382 0068 32D1     		bne	.L95
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2383              		.loc 1 1097 0
 2384 006a BA69     		ldr	r2, [r7, #24]
 2385 006c 4FF6FF73 		movw	r3, #65535
 2386 0070 9A42     		cmp	r2, r3
 2387 0072 03D9     		bls	.L96
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2388              		.loc 1 1099 0
 2389 0074 4FF00203 		mov	r3, #2
 2390 0078 FB61     		str	r3, [r7, #28]
 2391 007a 4FE0     		b	.L93
 2392              	.L96:
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2393              		.loc 1 1103 0
 2394 007c 7B68     		ldr	r3, [r7, #4]
 2395 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2396 0082 002B     		cmp	r3, #0
 2397 0084 06D1     		bne	.L97
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2398              		.loc 1 1105 0
 2399 0086 7B68     		ldr	r3, [r7, #4]
 2400 0088 9B69     		ldr	r3, [r3, #24]
 2401 008a BA69     		ldr	r2, [r7, #24]
 2402 008c 02F1FF32 		add	r2, r2, #-1
 2403 0090 5A63     		str	r2, [r3, #52]
 2404 0092 07E0     		b	.L98
 2405              	.L97:
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2406              		.loc 1 1109 0
 2407 0094 7B68     		ldr	r3, [r7, #4]
 2408 0096 9B69     		ldr	r3, [r3, #24]
 2409 0098 BA69     		ldr	r2, [r7, #24]
 2410 009a 02F1FF32 		add	r2, r2, #-1
 2411 009e 4FEA5202 		lsr	r2, r2, #1
 2412 00a2 5A63     		str	r2, [r3, #52]
 2413              	.L98:
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2414              		.loc 1 1112 0
 2415 00a4 7B68     		ldr	r3, [r7, #4]
 2416 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2417 00aa 4FEA8303 		lsl	r3, r3, #2
 2418 00ae 3B61     		str	r3, [r7, #16]
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2419              		.loc 1 1113 0
 2420 00b0 7B68     		ldr	r3, [r7, #4]
 2421 00b2 5B69     		ldr	r3, [r3, #20]
 2422 00b4 7A68     		ldr	r2, [r7, #4]
 2423 00b6 5269     		ldr	r2, [r2, #20]
 2424 00b8 1169     		ldr	r1, [r2, #16]
 2425 00ba 3A69     		ldr	r2, [r7, #16]
 2426 00bc 4FF00100 		mov	r0, #1
 2427 00c0 00FA02F2 		lsl	r2, r0, r2
 2428 00c4 0A43     		orrs	r2, r2, r1
 2429 00c6 1A61     		str	r2, [r3, #16]
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2430              		.loc 1 1114 0
 2431 00c8 4FF00003 		mov	r3, #0
 2432 00cc FB61     		str	r3, [r7, #28]
 2433 00ce 25E0     		b	.L93
 2434              	.L95:
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2435              		.loc 1 1120 0
 2436 00d0 7868     		ldr	r0, [r7, #4]
 2437 00d2 B969     		ldr	r1, [r7, #24]
 2438 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2439 00d8 F861     		str	r0, [r7, #28]
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2440              		.loc 1 1121 0
 2441 00da FB69     		ldr	r3, [r7, #28]
 2442 00dc 002B     		cmp	r3, #0
 2443 00de 1DD1     		bne	.L93
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2444              		.loc 1 1123 0
 2445 00e0 7B68     		ldr	r3, [r7, #4]
 2446 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2447 00e6 4FEA8303 		lsl	r3, r3, #2
 2448 00ea FB60     		str	r3, [r7, #12]
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2449              		.loc 1 1124 0
 2450 00ec 7B68     		ldr	r3, [r7, #4]
 2451 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2452 00f2 4FEA8303 		lsl	r3, r3, #2
 2453 00f6 BB60     		str	r3, [r7, #8]
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2454              		.loc 1 1125 0
 2455 00f8 7B68     		ldr	r3, [r7, #4]
 2456 00fa 5B69     		ldr	r3, [r3, #20]
 2457 00fc 7A68     		ldr	r2, [r7, #4]
 2458 00fe 5269     		ldr	r2, [r2, #20]
 2459 0100 1169     		ldr	r1, [r2, #16]
 2460 0102 FA68     		ldr	r2, [r7, #12]
 2461 0104 4FF00100 		mov	r0, #1
 2462 0108 00FA02F0 		lsl	r0, r0, r2
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2463              		.loc 1 1126 0
 2464 010c BA68     		ldr	r2, [r7, #8]
 2465 010e 4FF00104 		mov	r4, #1
 2466 0112 04FA02F2 		lsl	r2, r4, r2
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2467              		.loc 1 1125 0
 2468 0116 0243     		orrs	r2, r2, r0
 2469 0118 0A43     		orrs	r2, r2, r1
 2470 011a 1A61     		str	r2, [r3, #16]
 2471              	.L93:
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2472              		.loc 1 1131 0
 2473 011c FB69     		ldr	r3, [r7, #28]
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2474              		.loc 1 1132 0
 2475 011e 1846     		mov	r0, r3
 2476 0120 07F12407 		add	r7, r7, #36
 2477 0124 BD46     		mov	sp, r7
 2478 0126 90BD     		pop	{r4, r7, pc}
 2479              	.L101:
 2480              		.align	2
 2481              	.L100:
 2482 0128 286B6E4E 		.word	1315859240
 2483              		.cfi_endproc
 2484              	.LFE128:
 2486              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2487              		.align	2
 2488              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2489              		.thumb
 2490              		.thumb_func
 2492              	PWMSP001_lSetPwmFreqTimerConcat:
 2493              	.LFB129:
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2494              		.loc 1 1142 0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 32
 2497              		@ frame_needed = 1, uses_anonymous_args = 0
 2498              		@ link register save eliminated.
 2499 0000 80B4     		push	{r7}
 2500              	.LCFI51:
 2501              		.cfi_def_cfa_offset 4
 2502              		.cfi_offset 7, -4
 2503 0002 89B0     		sub	sp, sp, #36
 2504              	.LCFI52:
 2505              		.cfi_def_cfa_offset 40
 2506 0004 00AF     		add	r7, sp, #0
 2507              	.LCFI53:
 2508              		.cfi_def_cfa_register 7
 2509 0006 7860     		str	r0, [r7, #4]
 2510 0008 3960     		str	r1, [r7, #0]
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2511              		.loc 1 1143 0
 2512 000a 3B68     		ldr	r3, [r7, #0]
 2513 000c FB61     		str	r3, [r7, #28]
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2514              		.loc 1 1145 0
 2515 000e 4FF00003 		mov	r3, #0
 2516 0012 FB74     		strb	r3, [r7, #19]
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2517              		.loc 1 1146 0
 2518 0014 4FF00103 		mov	r3, #1
 2519 0018 FB60     		str	r3, [r7, #12]
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2520              		.loc 1 1148 0
 2521 001a 3B68     		ldr	r3, [r7, #0]
 2522 001c B3F1FF3F 		cmp	r3, #-1
 2523 0020 03D1     		bne	.L103
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2524              		.loc 1 1150 0
 2525 0022 4FF00203 		mov	r3, #2
 2526 0026 FB60     		str	r3, [r7, #12]
 2527 0028 41E0     		b	.L104
 2528              	.L103:
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2529              		.loc 1 1156 0
 2530 002a 3A68     		ldr	r2, [r7, #0]
 2531 002c 4FF6FF73 		movw	r3, #65535
 2532 0030 9A42     		cmp	r2, r3
 2533 0032 17D9     		bls	.L105
 2534              	.L106:
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2535              		.loc 1 1160 0 discriminator 1
 2536 0034 FB69     		ldr	r3, [r7, #28]
 2537 0036 4FEA5303 		lsr	r3, r3, #1
 2538 003a FB61     		str	r3, [r7, #28]
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2539              		.loc 1 1161 0 discriminator 1
 2540 003c FB7C     		ldrb	r3, [r7, #19]
 2541 003e 03F10103 		add	r3, r3, #1
 2542 0042 FB74     		strb	r3, [r7, #19]
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2543              		.loc 1 1162 0 discriminator 1
 2544 0044 FA69     		ldr	r2, [r7, #28]
 2545 0046 4FF6FE73 		movw	r3, #65534
 2546 004a 9A42     		cmp	r2, r3
 2547 004c F2D8     		bhi	.L106
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2548              		.loc 1 1164 0
 2549 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2550 0050 4FF00102 		mov	r2, #1
 2551 0054 02FA03F3 		lsl	r3, r2, r3
 2552 0058 03F1FF33 		add	r3, r3, #-1
 2553 005c BB61     		str	r3, [r7, #24]
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2554              		.loc 1 1165 0
 2555 005e FB69     		ldr	r3, [r7, #28]
 2556 0060 7B61     		str	r3, [r7, #20]
 2557 0062 04E0     		b	.L107
 2558              	.L105:
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2559              		.loc 1 1169 0
 2560 0064 3B68     		ldr	r3, [r7, #0]
 2561 0066 7B61     		str	r3, [r7, #20]
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2562              		.loc 1 1170 0
 2563 0068 4FF00003 		mov	r3, #0
 2564 006c BB61     		str	r3, [r7, #24]
 2565              	.L107:
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2566              		.loc 1 1174 0
 2567 006e 7B68     		ldr	r3, [r7, #4]
 2568 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2569 0074 012B     		cmp	r3, #1
 2570 0076 07D1     		bne	.L108
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2571              		.loc 1 1176 0
 2572 0078 BB69     		ldr	r3, [r7, #24]
 2573 007a 4FEA5303 		lsr	r3, r3, #1
 2574 007e BB61     		str	r3, [r7, #24]
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2575              		.loc 1 1177 0
 2576 0080 7B69     		ldr	r3, [r7, #20]
 2577 0082 4FEA5303 		lsr	r3, r3, #1
 2578 0086 7B61     		str	r3, [r7, #20]
 2579              	.L108:
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2580              		.loc 1 1180 0
 2581 0088 7B68     		ldr	r3, [r7, #4]
 2582 008a 9A69     		ldr	r2, [r3, #24]
 2583 008c 7B69     		ldr	r3, [r7, #20]
 2584 008e 4FEA0343 		lsl	r3, r3, #16
 2585 0092 4FEA1343 		lsr	r3, r3, #16
 2586 0096 5363     		str	r3, [r2, #52]
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2587              		.loc 1 1181 0
 2588 0098 7B68     		ldr	r3, [r7, #4]
 2589 009a DA69     		ldr	r2, [r3, #28]
 2590 009c BB69     		ldr	r3, [r7, #24]
 2591 009e 4FEA0343 		lsl	r3, r3, #16
 2592 00a2 4FEA1343 		lsr	r3, r3, #16
 2593 00a6 5363     		str	r3, [r2, #52]
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2594              		.loc 1 1184 0
 2595 00a8 4FF00003 		mov	r3, #0
 2596 00ac FB60     		str	r3, [r7, #12]
 2597              	.L104:
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2598              		.loc 1 1186 0
 2599 00ae FB68     		ldr	r3, [r7, #12]
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2600              		.loc 1 1187 0
 2601 00b0 1846     		mov	r0, r3
 2602 00b2 07F12407 		add	r7, r7, #36
 2603 00b6 BD46     		mov	sp, r7
 2604 00b8 80BC     		pop	{r7}
 2605 00ba 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE129:
 2609              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2610              		.align	2
 2611              		.global	PWMSP001_SetTimerVal
 2612              		.thumb
 2613              		.thumb_func
 2615              	PWMSP001_SetTimerVal:
 2616              	.LFB130:
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2617              		.loc 1 1200 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 16
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 2622 0000 80B4     		push	{r7}
 2623              	.LCFI54:
 2624              		.cfi_def_cfa_offset 4
 2625              		.cfi_offset 7, -4
 2626 0002 85B0     		sub	sp, sp, #20
 2627              	.LCFI55:
 2628              		.cfi_def_cfa_offset 24
 2629 0004 00AF     		add	r7, sp, #0
 2630              	.LCFI56:
 2631              		.cfi_def_cfa_register 7
 2632 0006 7860     		str	r0, [r7, #4]
 2633 0008 3960     		str	r1, [r7, #0]
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2634              		.loc 1 1201 0
 2635 000a 4FF00103 		mov	r3, #1
 2636 000e FB60     		str	r3, [r7, #12]
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2637              		.loc 1 1203 0
 2638 0010 7B68     		ldr	r3, [r7, #4]
 2639 0012 DB6B     		ldr	r3, [r3, #60]
 2640 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2641 0016 012B     		cmp	r3, #1
 2642 0018 04D0     		beq	.L111
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2643              		.loc 1 1204 0 discriminator 1
 2644 001a 7B68     		ldr	r3, [r7, #4]
 2645 001c DB6B     		ldr	r3, [r3, #60]
 2646 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2647              		.loc 1 1203 0 discriminator 1
 2648 0020 032B     		cmp	r3, #3
 2649 0022 15D1     		bne	.L112
 2650              	.L111:
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2651              		.loc 1 1211 0
 2652 0024 7B68     		ldr	r3, [r7, #4]
 2653 0026 9A69     		ldr	r2, [r3, #24]
 2654 0028 3B68     		ldr	r3, [r7, #0]
 2655 002a 4FEA0343 		lsl	r3, r3, #16
 2656 002e 4FEA1343 		lsr	r3, r3, #16
 2657 0032 1367     		str	r3, [r2, #112]
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2658              		.loc 1 1212 0
 2659 0034 7B68     		ldr	r3, [r7, #4]
 2660 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2661 003a 012B     		cmp	r3, #1
 2662 003c 05D1     		bne	.L113
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2663              		.loc 1 1214 0
 2664 003e 7B68     		ldr	r3, [r7, #4]
 2665 0040 DB69     		ldr	r3, [r3, #28]
 2666 0042 3A68     		ldr	r2, [r7, #0]
 2667 0044 4FEA1242 		lsr	r2, r2, #16
 2668 0048 1A67     		str	r2, [r3, #112]
 2669              	.L113:
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2670              		.loc 1 1216 0
 2671 004a 4FF00003 		mov	r3, #0
 2672 004e FB60     		str	r3, [r7, #12]
 2673              	.L112:
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2674              		.loc 1 1218 0
 2675 0050 FB68     		ldr	r3, [r7, #12]
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2676              		.loc 1 1219 0
 2677 0052 1846     		mov	r0, r3
 2678 0054 07F11407 		add	r7, r7, #20
 2679 0058 BD46     		mov	sp, r7
 2680 005a 80BC     		pop	{r7}
 2681 005c 7047     		bx	lr
 2682              		.cfi_endproc
 2683              	.LFE130:
 2685 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2686              		.align	2
 2687              		.global	PWMSP001_GetTimerStatus
 2688              		.thumb
 2689              		.thumb_func
 2691              	PWMSP001_GetTimerStatus:
 2692              	.LFB131:
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2693              		.loc 1 1230 0
 2694              		.cfi_startproc
 2695              		@ args = 0, pretend = 0, frame = 16
 2696              		@ frame_needed = 1, uses_anonymous_args = 0
 2697              		@ link register save eliminated.
 2698 0000 80B4     		push	{r7}
 2699              	.LCFI57:
 2700              		.cfi_def_cfa_offset 4
 2701              		.cfi_offset 7, -4
 2702 0002 85B0     		sub	sp, sp, #20
 2703              	.LCFI58:
 2704              		.cfi_def_cfa_offset 24
 2705 0004 00AF     		add	r7, sp, #0
 2706              	.LCFI59:
 2707              		.cfi_def_cfa_register 7
 2708 0006 7860     		str	r0, [r7, #4]
 2709 0008 3960     		str	r1, [r7, #0]
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2710              		.loc 1 1231 0
 2711 000a 4FF00103 		mov	r3, #1
 2712 000e FB60     		str	r3, [r7, #12]
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2713              		.loc 1 1232 0
 2714 0010 4FF00003 		mov	r3, #0
 2715 0014 BB60     		str	r3, [r7, #8]
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2716              		.loc 1 1234 0
 2717 0016 7B68     		ldr	r3, [r7, #4]
 2718 0018 DB6B     		ldr	r3, [r3, #60]
 2719 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2720 001c 002B     		cmp	r3, #0
 2721 001e 1ED0     		beq	.L116
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2722              		.loc 1 1241 0
 2723 0020 7B68     		ldr	r3, [r7, #4]
 2724 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2725 0026 012B     		cmp	r3, #1
 2726 0028 0FD1     		bne	.L117
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2727              		.loc 1 1243 0
 2728 002a 7B68     		ldr	r3, [r7, #4]
 2729 002c DB69     		ldr	r3, [r3, #28]
 2730 002e 9B68     		ldr	r3, [r3, #8]
 2731 0030 03F00103 		and	r3, r3, #1
 2732 0034 BB60     		str	r3, [r7, #8]
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2733              		.loc 1 1245 0
 2734 0036 7B68     		ldr	r3, [r7, #4]
 2735 0038 9B69     		ldr	r3, [r3, #24]
 2736 003a 9A68     		ldr	r2, [r3, #8]
 2737 003c BB68     		ldr	r3, [r7, #8]
 2738 003e 1340     		ands	r3, r3, r2
 2739 0040 03F00102 		and	r2, r3, #1
 2740 0044 3B68     		ldr	r3, [r7, #0]
 2741 0046 1A60     		str	r2, [r3, #0]
 2742 0048 06E0     		b	.L118
 2743              	.L117:
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2744              		.loc 1 1252 0
 2745 004a 7B68     		ldr	r3, [r7, #4]
 2746 004c 9B69     		ldr	r3, [r3, #24]
 2747 004e 9B68     		ldr	r3, [r3, #8]
 2748 0050 03F00102 		and	r2, r3, #1
 2749 0054 3B68     		ldr	r3, [r7, #0]
 2750 0056 1A60     		str	r2, [r3, #0]
 2751              	.L118:
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2752              		.loc 1 1255 0
 2753 0058 4FF00003 		mov	r3, #0
 2754 005c FB60     		str	r3, [r7, #12]
 2755              	.L116:
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2756              		.loc 1 1257 0
 2757 005e FB68     		ldr	r3, [r7, #12]
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2758              		.loc 1 1258 0
 2759 0060 1846     		mov	r0, r3
 2760 0062 07F11407 		add	r7, r7, #20
 2761 0066 BD46     		mov	sp, r7
 2762 0068 80BC     		pop	{r7}
 2763 006a 7047     		bx	lr
 2764              		.cfi_endproc
 2765              	.LFE131:
 2767              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2768              		.align	2
 2769              		.global	PWMSP001_GetTimerRegsVal
 2770              		.thumb
 2771              		.thumb_func
 2773              	PWMSP001_GetTimerRegsVal:
 2774              	.LFB132:
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2775              		.loc 1 1269 0
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 16
 2778              		@ frame_needed = 1, uses_anonymous_args = 0
 2779              		@ link register save eliminated.
 2780 0000 80B4     		push	{r7}
 2781              	.LCFI60:
 2782              		.cfi_def_cfa_offset 4
 2783              		.cfi_offset 7, -4
 2784 0002 85B0     		sub	sp, sp, #20
 2785              	.LCFI61:
 2786              		.cfi_def_cfa_offset 24
 2787 0004 00AF     		add	r7, sp, #0
 2788              	.LCFI62:
 2789              		.cfi_def_cfa_register 7
 2790 0006 7860     		str	r0, [r7, #4]
 2791 0008 3960     		str	r1, [r7, #0]
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2792              		.loc 1 1270 0
 2793 000a 4FF00103 		mov	r3, #1
 2794 000e FB60     		str	r3, [r7, #12]
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2795              		.loc 1 1271 0
 2796 0010 4FF00003 		mov	r3, #0
 2797 0014 BB60     		str	r3, [r7, #8]
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2798              		.loc 1 1274 0
 2799 0016 7B68     		ldr	r3, [r7, #4]
 2800 0018 DB6B     		ldr	r3, [r3, #60]
 2801 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2802 001c 002B     		cmp	r3, #0
 2803 001e 5ED0     		beq	.L121
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2804              		.loc 1 1281 0
 2805 0020 7B68     		ldr	r3, [r7, #4]
 2806 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2807 0026 012B     		cmp	r3, #1
 2808 0028 43D1     		bne	.L122
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2809              		.loc 1 1283 0
 2810 002a 7B68     		ldr	r3, [r7, #4]
 2811 002c DB69     		ldr	r3, [r3, #28]
 2812 002e 1B6F     		ldr	r3, [r3, #112]
 2813 0030 4FEA0343 		lsl	r3, r3, #16
 2814 0034 BB60     		str	r3, [r7, #8]
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2815              		.loc 1 1287 0
 2816 0036 7B68     		ldr	r3, [r7, #4]
 2817 0038 9B69     		ldr	r3, [r3, #24]
 2818 003a 1B6F     		ldr	r3, [r3, #112]
 2819 003c 4FEA0343 		lsl	r3, r3, #16
 2820 0040 4FEA1343 		lsr	r3, r3, #16
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2821              		.loc 1 1286 0
 2822 0044 BA68     		ldr	r2, [r7, #8]
 2823 0046 1A43     		orrs	r2, r2, r3
 2824 0048 3B68     		ldr	r3, [r7, #0]
 2825 004a 9A60     		str	r2, [r3, #8]
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2826              		.loc 1 1290 0
 2827 004c 7B68     		ldr	r3, [r7, #4]
 2828 004e DB69     		ldr	r3, [r3, #28]
 2829 0050 DA6B     		ldr	r2, [r3, #60]
 2830 0052 3B68     		ldr	r3, [r7, #0]
 2831 0054 1A60     		str	r2, [r3, #0]
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2832              		.loc 1 1291 0
 2833 0056 3B68     		ldr	r3, [r7, #0]
 2834 0058 1B68     		ldr	r3, [r3, #0]
 2835 005a 7A68     		ldr	r2, [r7, #4]
 2836 005c 9269     		ldr	r2, [r2, #24]
 2837 005e 526B     		ldr	r2, [r2, #52]
 2838 0060 02FB03F2 		mul	r2, r2, r3
 2839 0064 3B68     		ldr	r3, [r7, #0]
 2840 0066 1A60     		str	r2, [r3, #0]
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2841              		.loc 1 1292 0
 2842 0068 3B68     		ldr	r3, [r7, #0]
 2843 006a 1A68     		ldr	r2, [r3, #0]
 2844 006c 7B68     		ldr	r3, [r7, #4]
 2845 006e 9B69     		ldr	r3, [r3, #24]
 2846 0070 DB6B     		ldr	r3, [r3, #60]
 2847 0072 D218     		adds	r2, r2, r3
 2848 0074 3B68     		ldr	r3, [r7, #0]
 2849 0076 1A60     		str	r2, [r3, #0]
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2850              		.loc 1 1293 0
 2851 0078 7B68     		ldr	r3, [r7, #4]
 2852 007a DB69     		ldr	r3, [r3, #28]
 2853 007c 5B6B     		ldr	r3, [r3, #52]
 2854 007e 03F10102 		add	r2, r3, #1
 2855 0082 3B68     		ldr	r3, [r7, #0]
 2856 0084 5A60     		str	r2, [r3, #4]
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2857              		.loc 1 1294 0
 2858 0086 3B68     		ldr	r3, [r7, #0]
 2859 0088 5A68     		ldr	r2, [r3, #4]
 2860 008a 7B68     		ldr	r3, [r7, #4]
 2861 008c 9B69     		ldr	r3, [r3, #24]
 2862 008e 5B6B     		ldr	r3, [r3, #52]
 2863 0090 4FEA0343 		lsl	r3, r3, #16
 2864 0094 4FEA1343 		lsr	r3, r3, #16
 2865 0098 03F10103 		add	r3, r3, #1
 2866 009c 03FB02F2 		mul	r2, r3, r2
 2867 00a0 3B68     		ldr	r3, [r7, #0]
 2868 00a2 5A60     		str	r2, [r3, #4]
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2869              		.loc 1 1295 0
 2870 00a4 3B68     		ldr	r3, [r7, #0]
 2871 00a6 5B68     		ldr	r3, [r3, #4]
 2872 00a8 03F10102 		add	r2, r3, #1
 2873 00ac 3B68     		ldr	r3, [r7, #0]
 2874 00ae 5A60     		str	r2, [r3, #4]
 2875 00b0 12E0     		b	.L123
 2876              	.L122:
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2877              		.loc 1 1300 0
 2878 00b2 7B68     		ldr	r3, [r7, #4]
 2879 00b4 9B69     		ldr	r3, [r3, #24]
 2880 00b6 1B6F     		ldr	r3, [r3, #112]
 2881 00b8 4FEA0343 		lsl	r3, r3, #16
 2882 00bc 4FEA1343 		lsr	r3, r3, #16
 2883 00c0 3A68     		ldr	r2, [r7, #0]
 2884 00c2 9360     		str	r3, [r2, #8]
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 2885              		.loc 1 1303 0
 2886 00c4 7B68     		ldr	r3, [r7, #4]
 2887 00c6 9B69     		ldr	r3, [r3, #24]
 2888 00c8 DA6B     		ldr	r2, [r3, #60]
 2889 00ca 3B68     		ldr	r3, [r7, #0]
 2890 00cc 1A60     		str	r2, [r3, #0]
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2891              		.loc 1 1304 0
 2892 00ce 7B68     		ldr	r3, [r7, #4]
 2893 00d0 9B69     		ldr	r3, [r3, #24]
 2894 00d2 5A6B     		ldr	r2, [r3, #52]
 2895 00d4 3B68     		ldr	r3, [r7, #0]
 2896 00d6 5A60     		str	r2, [r3, #4]
 2897              	.L123:
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2898              		.loc 1 1307 0
 2899 00d8 4FF00003 		mov	r3, #0
 2900 00dc FB60     		str	r3, [r7, #12]
 2901              	.L121:
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2902              		.loc 1 1309 0
 2903 00de FB68     		ldr	r3, [r7, #12]
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2904              		.loc 1 1310 0
 2905 00e0 1846     		mov	r0, r3
 2906 00e2 07F11407 		add	r7, r7, #20
 2907 00e6 BD46     		mov	sp, r7
 2908 00e8 80BC     		pop	{r7}
 2909 00ea 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE132:
 2913              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 2914              		.align	2
 2915              		.global	PWMSP001_GetPeriodReg
 2916              		.thumb
 2917              		.thumb_func
 2919              	PWMSP001_GetPeriodReg:
 2920              	.LFB133:
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2921              		.loc 1 1321 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 16
 2924              		@ frame_needed = 1, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926 0000 80B4     		push	{r7}
 2927              	.LCFI63:
 2928              		.cfi_def_cfa_offset 4
 2929              		.cfi_offset 7, -4
 2930 0002 85B0     		sub	sp, sp, #20
 2931              	.LCFI64:
 2932              		.cfi_def_cfa_offset 24
 2933 0004 00AF     		add	r7, sp, #0
 2934              	.LCFI65:
 2935              		.cfi_def_cfa_register 7
 2936 0006 7860     		str	r0, [r7, #4]
 2937 0008 3960     		str	r1, [r7, #0]
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2938              		.loc 1 1322 0
 2939 000a 4FF00103 		mov	r3, #1
 2940 000e FB60     		str	r3, [r7, #12]
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2941              		.loc 1 1325 0
 2942 0010 7B68     		ldr	r3, [r7, #4]
 2943 0012 DB6B     		ldr	r3, [r3, #60]
 2944 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2945 0016 002B     		cmp	r3, #0
 2946 0018 29D0     		beq	.L126
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2947              		.loc 1 1331 0
 2948 001a 7B68     		ldr	r3, [r7, #4]
 2949 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2950 0020 012B     		cmp	r3, #1
 2951 0022 1CD1     		bne	.L127
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 2952              		.loc 1 1333 0
 2953 0024 7B68     		ldr	r3, [r7, #4]
 2954 0026 DB69     		ldr	r3, [r3, #28]
 2955 0028 5B6B     		ldr	r3, [r3, #52]
 2956 002a 03F10102 		add	r2, r3, #1
 2957 002e 3B68     		ldr	r3, [r7, #0]
 2958 0030 1A60     		str	r2, [r3, #0]
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2959              		.loc 1 1334 0
 2960 0032 3B68     		ldr	r3, [r7, #0]
 2961 0034 1A68     		ldr	r2, [r3, #0]
 2962 0036 7B68     		ldr	r3, [r7, #4]
 2963 0038 9B69     		ldr	r3, [r3, #24]
 2964 003a 5B6B     		ldr	r3, [r3, #52]
 2965 003c 4FEA0343 		lsl	r3, r3, #16
 2966 0040 4FEA1343 		lsr	r3, r3, #16
 2967 0044 03F10103 		add	r3, r3, #1
 2968 0048 03FB02F2 		mul	r2, r3, r2
 2969 004c 3B68     		ldr	r3, [r7, #0]
 2970 004e 1A60     		str	r2, [r3, #0]
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 2971              		.loc 1 1335 0
 2972 0050 3B68     		ldr	r3, [r7, #0]
 2973 0052 1B68     		ldr	r3, [r3, #0]
 2974 0054 03F10102 		add	r2, r3, #1
 2975 0058 3B68     		ldr	r3, [r7, #0]
 2976 005a 1A60     		str	r2, [r3, #0]
 2977 005c 04E0     		b	.L128
 2978              	.L127:
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2979              		.loc 1 1339 0
 2980 005e 7B68     		ldr	r3, [r7, #4]
 2981 0060 9B69     		ldr	r3, [r3, #24]
 2982 0062 5A6B     		ldr	r2, [r3, #52]
 2983 0064 3B68     		ldr	r3, [r7, #0]
 2984 0066 1A60     		str	r2, [r3, #0]
 2985              	.L128:
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2986              		.loc 1 1341 0
 2987 0068 4FF00003 		mov	r3, #0
 2988 006c FB60     		str	r3, [r7, #12]
 2989              	.L126:
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2990              		.loc 1 1343 0
 2991 006e FB68     		ldr	r3, [r7, #12]
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2992              		.loc 1 1344 0
 2993 0070 1846     		mov	r0, r3
 2994 0072 07F11407 		add	r7, r7, #20
 2995 0076 BD46     		mov	sp, r7
 2996 0078 80BC     		pop	{r7}
 2997 007a 7047     		bx	lr
 2998              		.cfi_endproc
 2999              	.LFE133:
 3001              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3002              		.align	2
 3003              		.global	PWMSP001_SWRequestShadowTransfer
 3004              		.thumb
 3005              		.thumb_func
 3007              	PWMSP001_SWRequestShadowTransfer:
 3008              	.LFB134:
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3009              		.loc 1 1354 0
 3010              		.cfi_startproc
 3011              		@ args = 0, pretend = 0, frame = 24
 3012              		@ frame_needed = 1, uses_anonymous_args = 0
 3013              		@ link register save eliminated.
 3014 0000 90B4     		push	{r4, r7}
 3015              	.LCFI66:
 3016              		.cfi_def_cfa_offset 8
 3017              		.cfi_offset 4, -8
 3018              		.cfi_offset 7, -4
 3019 0002 86B0     		sub	sp, sp, #24
 3020              	.LCFI67:
 3021              		.cfi_def_cfa_offset 32
 3022 0004 00AF     		add	r7, sp, #0
 3023              	.LCFI68:
 3024              		.cfi_def_cfa_register 7
 3025 0006 7860     		str	r0, [r7, #4]
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3026              		.loc 1 1355 0
 3027 0008 4FF00103 		mov	r3, #1
 3028 000c 7B61     		str	r3, [r7, #20]
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3029              		.loc 1 1361 0
 3030 000e 7B68     		ldr	r3, [r7, #4]
 3031 0010 DB6B     		ldr	r3, [r3, #60]
 3032 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3033 0014 002B     		cmp	r3, #0
 3034 0016 38D0     		beq	.L131
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3035              		.loc 1 1369 0
 3036 0018 7B68     		ldr	r3, [r7, #4]
 3037 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3038 001e 012B     		cmp	r3, #1
 3039 0020 1ED1     		bne	.L132
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3040              		.loc 1 1372 0
 3041 0022 7B68     		ldr	r3, [r7, #4]
 3042 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3043 0028 4FEA8303 		lsl	r3, r3, #2
 3044 002c 3B61     		str	r3, [r7, #16]
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3045              		.loc 1 1373 0
 3046 002e 7B68     		ldr	r3, [r7, #4]
 3047 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3048 0034 4FEA8303 		lsl	r3, r3, #2
 3049 0038 FB60     		str	r3, [r7, #12]
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3050              		.loc 1 1374 0
 3051 003a 7B68     		ldr	r3, [r7, #4]
 3052 003c 5B69     		ldr	r3, [r3, #20]
 3053 003e 7A68     		ldr	r2, [r7, #4]
 3054 0040 5269     		ldr	r2, [r2, #20]
 3055 0042 1169     		ldr	r1, [r2, #16]
 3056 0044 3A69     		ldr	r2, [r7, #16]
 3057 0046 4FF00100 		mov	r0, #1
 3058 004a 00FA02F0 		lsl	r0, r0, r2
 3059 004e FA68     		ldr	r2, [r7, #12]
 3060 0050 4FF00104 		mov	r4, #1
 3061 0054 04FA02F2 		lsl	r2, r4, r2
 3062 0058 0243     		orrs	r2, r2, r0
 3063 005a 0A43     		orrs	r2, r2, r1
 3064 005c 1A61     		str	r2, [r3, #16]
 3065 005e 11E0     		b	.L133
 3066              	.L132:
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3067              		.loc 1 1378 0
 3068 0060 7B68     		ldr	r3, [r7, #4]
 3069 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3070 0066 4FEA8303 		lsl	r3, r3, #2
 3071 006a BB60     		str	r3, [r7, #8]
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3072              		.loc 1 1379 0
 3073 006c 7B68     		ldr	r3, [r7, #4]
 3074 006e 5B69     		ldr	r3, [r3, #20]
 3075 0070 7A68     		ldr	r2, [r7, #4]
 3076 0072 5269     		ldr	r2, [r2, #20]
 3077 0074 1169     		ldr	r1, [r2, #16]
 3078 0076 BA68     		ldr	r2, [r7, #8]
 3079 0078 4FF00100 		mov	r0, #1
 3080 007c 00FA02F2 		lsl	r2, r0, r2
 3081 0080 0A43     		orrs	r2, r2, r1
 3082 0082 1A61     		str	r2, [r3, #16]
 3083              	.L133:
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3084              		.loc 1 1381 0
 3085 0084 4FF00003 		mov	r3, #0
 3086 0088 7B61     		str	r3, [r7, #20]
 3087              	.L131:
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3088              		.loc 1 1383 0
 3089 008a 7B69     		ldr	r3, [r7, #20]
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3090              		.loc 1 1384 0
 3091 008c 1846     		mov	r0, r3
 3092 008e 07F11807 		add	r7, r7, #24
 3093 0092 BD46     		mov	sp, r7
 3094 0094 90BC     		pop	{r4, r7}
 3095 0096 7047     		bx	lr
 3096              		.cfi_endproc
 3097              	.LFE134:
 3099              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3100              		.align	2
 3101              		.global	PWMSP001_ResetTrapFlag
 3102              		.thumb
 3103              		.thumb_func
 3105              	PWMSP001_ResetTrapFlag:
 3106              	.LFB135:
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3107              		.loc 1 1391 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 8
 3110              		@ frame_needed = 1, uses_anonymous_args = 0
 3111              		@ link register save eliminated.
 3112 0000 80B4     		push	{r7}
 3113              	.LCFI69:
 3114              		.cfi_def_cfa_offset 4
 3115              		.cfi_offset 7, -4
 3116 0002 83B0     		sub	sp, sp, #12
 3117              	.LCFI70:
 3118              		.cfi_def_cfa_offset 16
 3119 0004 00AF     		add	r7, sp, #0
 3120              	.LCFI71:
 3121              		.cfi_def_cfa_register 7
 3122 0006 7860     		str	r0, [r7, #4]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3123              		.loc 1 1392 0
 3124 0008 7B68     		ldr	r3, [r7, #4]
 3125 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3126 000c 012B     		cmp	r3, #1
 3127 000e 18D1     		bne	.L136
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3128              		.loc 1 1394 0
 3129 0010 7B68     		ldr	r3, [r7, #4]
 3130 0012 9B69     		ldr	r3, [r3, #24]
 3131 0014 7A68     		ldr	r2, [r7, #4]
 3132 0016 9269     		ldr	r2, [r2, #24]
 3133 0018 D2F8B020 		ldr	r2, [r2, #176]
 3134 001c 42F48062 		orr	r2, r2, #1024
 3135 0020 C3F8B020 		str	r2, [r3, #176]
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3136              		.loc 1 1395 0
 3137 0024 7B68     		ldr	r3, [r7, #4]
 3138 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3139 002a 012B     		cmp	r3, #1
 3140 002c 09D1     		bne	.L136
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3141              		.loc 1 1397 0
 3142 002e 7B68     		ldr	r3, [r7, #4]
 3143 0030 DB69     		ldr	r3, [r3, #28]
 3144 0032 7A68     		ldr	r2, [r7, #4]
 3145 0034 D269     		ldr	r2, [r2, #28]
 3146 0036 D2F8B020 		ldr	r2, [r2, #176]
 3147 003a 42F48062 		orr	r2, r2, #1024
 3148 003e C3F8B020 		str	r2, [r3, #176]
 3149              	.L136:
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3150              		.loc 1 1400 0
 3151 0042 7B68     		ldr	r3, [r7, #4]
 3152 0044 9B69     		ldr	r3, [r3, #24]
 3153 0046 7A68     		ldr	r2, [r7, #4]
 3154 0048 9269     		ldr	r2, [r2, #24]
 3155 004a D2F8B020 		ldr	r2, [r2, #176]
 3156 004e 42F40062 		orr	r2, r2, #2048
 3157 0052 C3F8B020 		str	r2, [r3, #176]
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3158              		.loc 1 1401 0
 3159 0056 7B68     		ldr	r3, [r7, #4]
 3160 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3161 005c 012B     		cmp	r3, #1
 3162 005e 09D1     		bne	.L135
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3163              		.loc 1 1403 0
 3164 0060 7B68     		ldr	r3, [r7, #4]
 3165 0062 DB69     		ldr	r3, [r3, #28]
 3166 0064 7A68     		ldr	r2, [r7, #4]
 3167 0066 D269     		ldr	r2, [r2, #28]
 3168 0068 D2F8B020 		ldr	r2, [r2, #176]
 3169 006c 42F40062 		orr	r2, r2, #2048
 3170 0070 C3F8B020 		str	r2, [r3, #176]
 3171              	.L135:
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3172              		.loc 1 1405 0
 3173 0074 07F10C07 		add	r7, r7, #12
 3174 0078 BD46     		mov	sp, r7
 3175 007a 80BC     		pop	{r7}
 3176 007c 7047     		bx	lr
 3177              		.cfi_endproc
 3178              	.LFE135:
 3180 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3181              		.align	2
 3182              		.global	PWMSP001_lConfigureSecondSlice
 3183              		.thumb
 3184              		.thumb_func
 3186              	PWMSP001_lConfigureSecondSlice:
 3187              	.LFB136:
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3188              		.loc 1 1413 0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 8
 3191              		@ frame_needed = 1, uses_anonymous_args = 0
 3192              		@ link register save eliminated.
 3193 0000 90B4     		push	{r4, r7}
 3194              	.LCFI72:
 3195              		.cfi_def_cfa_offset 8
 3196              		.cfi_offset 4, -8
 3197              		.cfi_offset 7, -4
 3198 0002 82B0     		sub	sp, sp, #8
 3199              	.LCFI73:
 3200              		.cfi_def_cfa_offset 16
 3201 0004 00AF     		add	r7, sp, #0
 3202              	.LCFI74:
 3203              		.cfi_def_cfa_register 7
 3204 0006 7860     		str	r0, [r7, #4]
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3205              		.loc 1 1414 0
 3206 0008 7B68     		ldr	r3, [r7, #4]
 3207 000a DB69     		ldr	r3, [r3, #28]
 3208 000c 4FF00702 		mov	r2, #7
 3209 0010 1A61     		str	r2, [r3, #16]
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3210              		.loc 1 1417 0
 3211 0012 7B68     		ldr	r3, [r7, #4]
 3212 0014 DB69     		ldr	r3, [r3, #28]
 3213 0016 7A68     		ldr	r2, [r7, #4]
 3214 0018 926A     		ldr	r2, [r2, #40]
 3215 001a 4FEA1242 		lsr	r2, r2, #16
 3216 001e 5A63     		str	r2, [r3, #52]
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3217              		.loc 1 1419 0
 3218 0020 7B68     		ldr	r3, [r7, #4]
 3219 0022 DB69     		ldr	r3, [r3, #28]
 3220 0024 7A68     		ldr	r2, [r7, #4]
 3221 0026 9268     		ldr	r2, [r2, #8]
 3222 0028 4FEA1242 		lsr	r2, r2, #16
 3223 002c DA63     		str	r2, [r3, #60]
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3224              		.loc 1 1422 0
 3225 002e 7B68     		ldr	r3, [r7, #4]
 3226 0030 DB69     		ldr	r3, [r3, #28]
 3227 0032 7A68     		ldr	r2, [r7, #4]
 3228 0034 D269     		ldr	r2, [r2, #28]
 3229 0036 5268     		ldr	r2, [r2, #4]
 3230 0038 42F48012 		orr	r2, r2, #1048576
 3231 003c 5A60     		str	r2, [r3, #4]
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3232              		.loc 1 1425 0
 3233 003e 7B68     		ldr	r3, [r7, #4]
 3234 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3235 0042 012B     		cmp	r3, #1
 3236 0044 27D1     		bne	.L139
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3237              		.loc 1 1427 0
 3238 0046 7B68     		ldr	r3, [r7, #4]
 3239 0048 DA69     		ldr	r2, [r3, #28]
 3240 004a 7B68     		ldr	r3, [r7, #4]
 3241 004c DB69     		ldr	r3, [r3, #28]
 3242 004e 1B68     		ldr	r3, [r3, #0]
 3243 0050 23F0C053 		bic	r3, r3, #402653184
 3244 0054 23F44023 		bic	r3, r3, #786432
 3245 0058 1360     		str	r3, [r2, #0]
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3246              		.loc 1 1428 0
 3247 005a 7B68     		ldr	r3, [r7, #4]
 3248 005c DB69     		ldr	r3, [r3, #28]
 3249 005e 7A68     		ldr	r2, [r7, #4]
 3250 0060 D269     		ldr	r2, [r2, #28]
 3251 0062 5268     		ldr	r2, [r2, #4]
 3252 0064 22F00C02 		bic	r2, r2, #12
 3253 0068 5A60     		str	r2, [r3, #4]
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3254              		.loc 1 1429 0
 3255 006a 7B68     		ldr	r3, [r7, #4]
 3256 006c DB69     		ldr	r3, [r3, #28]
 3257 006e 7A68     		ldr	r2, [r7, #4]
 3258 0070 D269     		ldr	r2, [r2, #28]
 3259 0072 1168     		ldr	r1, [r2, #0]
 3260 0074 7A68     		ldr	r2, [r7, #4]
 3261 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3262 007a 4FEA8242 		lsl	r2, r2, #18
 3263 007e 02F44022 		and	r2, r2, #786432
 3264 0082 0A43     		orrs	r2, r2, r1
 3265 0084 1A60     		str	r2, [r3, #0]
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3266              		.loc 1 1433 0
 3267 0086 7B68     		ldr	r3, [r7, #4]
 3268 0088 DB69     		ldr	r3, [r3, #28]
 3269 008a 7A68     		ldr	r2, [r7, #4]
 3270 008c D269     		ldr	r2, [r2, #28]
 3271 008e 5268     		ldr	r2, [r2, #4]
 3272 0090 42F00802 		orr	r2, r2, #8
 3273 0094 5A60     		str	r2, [r3, #4]
 3274              	.L139:
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3275              		.loc 1 1438 0
 3276 0096 7B68     		ldr	r3, [r7, #4]
 3277 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3278 009a 012B     		cmp	r3, #1
 3279 009c 26D1     		bne	.L140
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3280              		.loc 1 1440 0
 3281 009e 7B68     		ldr	r3, [r7, #4]
 3282 00a0 DA69     		ldr	r2, [r3, #28]
 3283 00a2 7B68     		ldr	r3, [r7, #4]
 3284 00a4 DB69     		ldr	r3, [r3, #28]
 3285 00a6 1B68     		ldr	r3, [r3, #0]
 3286 00a8 23F0C243 		bic	r3, r3, #1627389952
 3287 00ac 23F44013 		bic	r3, r3, #3145728
 3288 00b0 1360     		str	r3, [r2, #0]
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3289              		.loc 1 1442 0
 3290 00b2 7B68     		ldr	r3, [r7, #4]
 3291 00b4 DB69     		ldr	r3, [r3, #28]
 3292 00b6 7A68     		ldr	r2, [r7, #4]
 3293 00b8 D269     		ldr	r2, [r2, #28]
 3294 00ba 5268     		ldr	r2, [r2, #4]
 3295 00bc 22F40032 		bic	r2, r2, #131072
 3296 00c0 5A60     		str	r2, [r3, #4]
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3297              		.loc 1 1443 0
 3298 00c2 7B68     		ldr	r3, [r7, #4]
 3299 00c4 DB69     		ldr	r3, [r3, #28]
 3300 00c6 7A68     		ldr	r2, [r7, #4]
 3301 00c8 D269     		ldr	r2, [r2, #28]
 3302 00ca 1168     		ldr	r1, [r2, #0]
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3303              		.loc 1 1445 0
 3304 00cc 7A68     		ldr	r2, [r7, #4]
 3305 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3306 00d0 4FEA0262 		lsl	r2, r2, #24
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3307              		.loc 1 1443 0
 3308 00d4 02F08072 		and	r2, r2, #16777216
 3309 00d8 0A43     		orrs	r2, r2, r1
 3310 00da 1A60     		str	r2, [r3, #0]
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3311              		.loc 1 1448 0
 3312 00dc 7B68     		ldr	r3, [r7, #4]
 3313 00de DB69     		ldr	r3, [r3, #28]
 3314 00e0 7A68     		ldr	r2, [r7, #4]
 3315 00e2 D269     		ldr	r2, [r2, #28]
 3316 00e4 5268     		ldr	r2, [r2, #4]
 3317 00e6 42F40032 		orr	r2, r2, #131072
 3318 00ea 5A60     		str	r2, [r3, #4]
 3319              	.L140:
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3320              		.loc 1 1451 0
 3321 00ec 7B68     		ldr	r3, [r7, #4]
 3322 00ee DA69     		ldr	r2, [r3, #28]
 3323 00f0 7B68     		ldr	r3, [r7, #4]
 3324 00f2 DB69     		ldr	r3, [r3, #28]
 3325 00f4 5B69     		ldr	r3, [r3, #20]
 3326 00f6 23F4CE43 		bic	r3, r3, #26368
 3327 00fa 23F00B03 		bic	r3, r3, #11
 3328 00fe 5361     		str	r3, [r2, #20]
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3329              		.loc 1 1454 0
 3330 0100 7B68     		ldr	r3, [r7, #4]
 3331 0102 DB69     		ldr	r3, [r3, #28]
 3332 0104 7A68     		ldr	r2, [r7, #4]
 3333 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3334              		.loc 1 1455 0
 3335 010a 02F00101 		and	r1, r2, #1
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3336              		.loc 1 1456 0
 3337 010e 7A68     		ldr	r2, [r7, #4]
 3338 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3339 0112 4FEA4202 		lsl	r2, r2, #1
 3340 0116 02F00202 		and	r2, r2, #2
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3341              		.loc 1 1457 0
 3342 011a 1143     		orrs	r1, r1, r2
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3343              		.loc 1 1459 0
 3344 011c 7A68     		ldr	r2, [r7, #4]
 3345 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3346 0122 4FEA8222 		lsl	r2, r2, #10
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3347              		.loc 1 1460 0
 3348 0126 02F48062 		and	r2, r2, #1024
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3349              		.loc 1 1458 0
 3350 012a 1143     		orrs	r1, r1, r2
 3351              		.loc 1 1460 0
 3352 012c 7A68     		ldr	r2, [r7, #4]
 3353 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3354 0132 4FEA0222 		lsl	r2, r2, #8
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3355              		.loc 1 1461 0
 3356 0136 02F44072 		and	r2, r2, #768
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3357              		.loc 1 1460 0
 3358 013a 0A43     		orrs	r2, r2, r1
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3359              		.loc 1 1454 0
 3360 013c 5A61     		str	r2, [r3, #20]
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3361              		.loc 1 1464 0
 3362 013e 7B68     		ldr	r3, [r7, #4]
 3363 0140 DB69     		ldr	r3, [r3, #28]
 3364 0142 7A68     		ldr	r2, [r7, #4]
 3365 0144 D269     		ldr	r2, [r2, #28]
 3366 0146 5169     		ldr	r1, [r2, #20]
 3367 0148 7A68     		ldr	r2, [r7, #4]
 3368 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3369 014e 4FEA4232 		lsl	r2, r2, #13
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3370              		.loc 1 1465 0
 3371 0152 02F4C042 		and	r2, r2, #24576
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3372              		.loc 1 1464 0
 3373 0156 0A43     		orrs	r2, r2, r1
 3374 0158 5A61     		str	r2, [r3, #20]
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3375              		.loc 1 1466 0
 3376 015a 7B68     		ldr	r3, [r7, #4]
 3377 015c DB69     		ldr	r3, [r3, #28]
 3378 015e 7A68     		ldr	r2, [r7, #4]
 3379 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3380 0162 02F00F01 		and	r1, r2, #15
 3381 0166 7A68     		ldr	r2, [r7, #4]
 3382 0168 D269     		ldr	r2, [r2, #28]
 3383 016a 126A     		ldr	r2, [r2, #32]
 3384 016c 22F00F02 		bic	r2, r2, #15
 3385 0170 0A43     		orrs	r2, r2, r1
 3386 0172 1A62     		str	r2, [r3, #32]
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3387              		.loc 1 1470 0
 3388 0174 7B68     		ldr	r3, [r7, #4]
 3389 0176 DB69     		ldr	r3, [r3, #28]
 3390 0178 7A68     		ldr	r2, [r7, #4]
 3391 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3392 017c 4FEA4252 		lsl	r2, r2, #21
 3393 0180 02F40011 		and	r1, r2, #2097152
 3394 0184 7A68     		ldr	r2, [r7, #4]
 3395 0186 D269     		ldr	r2, [r2, #28]
 3396 0188 5269     		ldr	r2, [r2, #20]
 3397 018a 22F40012 		bic	r2, r2, #2097152
 3398 018e 0A43     		orrs	r2, r2, r1
 3399 0190 5A61     		str	r2, [r3, #20]
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3400              		.loc 1 1473 0
 3401 0192 7B68     		ldr	r3, [r7, #4]
 3402 0194 DB69     		ldr	r3, [r3, #28]
 3403 0196 7A68     		ldr	r2, [r7, #4]
 3404 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3405 019a 4FEA8252 		lsl	r2, r2, #22
 3406 019e 02F48001 		and	r1, r2, #4194304
 3407 01a2 7A68     		ldr	r2, [r7, #4]
 3408 01a4 D269     		ldr	r2, [r2, #28]
 3409 01a6 5269     		ldr	r2, [r2, #20]
 3410 01a8 22F48002 		bic	r2, r2, #4194304
 3411 01ac 0A43     		orrs	r2, r2, r1
 3412 01ae 5A61     		str	r2, [r3, #20]
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3413              		.loc 1 1476 0
 3414 01b0 7B68     		ldr	r3, [r7, #4]
 3415 01b2 DB69     		ldr	r3, [r3, #28]
 3416 01b4 7A68     		ldr	r2, [r7, #4]
 3417 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3418 01b8 4FEA4242 		lsl	r2, r2, #17
 3419 01bc 02F40031 		and	r1, r2, #131072
 3420 01c0 7A68     		ldr	r2, [r7, #4]
 3421 01c2 D269     		ldr	r2, [r2, #28]
 3422 01c4 5269     		ldr	r2, [r2, #20]
 3423 01c6 22F40032 		bic	r2, r2, #131072
 3424 01ca 0A43     		orrs	r2, r2, r1
 3425 01cc 5A61     		str	r2, [r3, #20]
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3426              		.loc 1 1479 0
 3427 01ce 7B68     		ldr	r3, [r7, #4]
 3428 01d0 DB69     		ldr	r3, [r3, #28]
 3429 01d2 7A68     		ldr	r2, [r7, #4]
 3430 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3431 01d8 02F00F01 		and	r1, r2, #15
 3432 01dc 7A68     		ldr	r2, [r7, #4]
 3433 01de D269     		ldr	r2, [r2, #28]
 3434 01e0 526A     		ldr	r2, [r2, #36]
 3435 01e2 22F00F02 		bic	r2, r2, #15
 3436 01e6 0A43     		orrs	r2, r2, r1
 3437 01e8 5A62     		str	r2, [r3, #36]
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3438              		.loc 1 1482 0
 3439 01ea 7B68     		ldr	r3, [r7, #4]
 3440 01ec DB69     		ldr	r3, [r3, #28]
 3441 01ee 7A68     		ldr	r2, [r7, #4]
 3442 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3443 01f2 9A61     		str	r2, [r3, #24]
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3444              		.loc 1 1484 0
 3445 01f4 7B68     		ldr	r3, [r7, #4]
 3446 01f6 5B69     		ldr	r3, [r3, #20]
 3447 01f8 7A68     		ldr	r2, [r7, #4]
 3448 01fa 5269     		ldr	r2, [r2, #20]
 3449 01fc 1169     		ldr	r1, [r2, #16]
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3450              		.loc 1 1485 0
 3451 01fe 7A68     		ldr	r2, [r7, #4]
 3452 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3453 0204 4FEA8202 		lsl	r2, r2, #2
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3454              		.loc 1 1484 0
 3455 0208 4FF00100 		mov	r0, #1
 3456 020c 00FA02F0 		lsl	r0, r0, r2
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3457              		.loc 1 1487 0
 3458 0210 7A68     		ldr	r2, [r7, #4]
 3459 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3460              		.loc 1 1486 0
 3461 0216 4FEA8202 		lsl	r2, r2, #2
 3462              		.loc 1 1487 0
 3463 021a 02F10102 		add	r2, r2, #1
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3464              		.loc 1 1486 0
 3465 021e 4FF00104 		mov	r4, #1
 3466 0222 04FA02F2 		lsl	r2, r4, r2
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3467              		.loc 1 1485 0
 3468 0226 1043     		orrs	r0, r0, r2
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3469              		.loc 1 1489 0
 3470 0228 7A68     		ldr	r2, [r7, #4]
 3471 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3472              		.loc 1 1488 0
 3473 022e 4FEA8202 		lsl	r2, r2, #2
 3474              		.loc 1 1489 0
 3475 0232 02F10202 		add	r2, r2, #2
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3476              		.loc 1 1488 0
 3477 0236 4FF00104 		mov	r4, #1
 3478 023a 04FA02F2 		lsl	r2, r4, r2
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3479              		.loc 1 1484 0
 3480 023e 0243     		orrs	r2, r2, r0
 3481 0240 0A43     		orrs	r2, r2, r1
 3482 0242 1A61     		str	r2, [r3, #16]
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3483              		.loc 1 1490 0
 3484 0244 07F10807 		add	r7, r7, #8
 3485 0248 BD46     		mov	sp, r7
 3486 024a 90BC     		pop	{r4, r7}
 3487 024c 7047     		bx	lr
 3488              		.cfi_endproc
 3489              	.LFE136:
 3491 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3492              		.align	2
 3493              		.global	PWMSP001_EnableEvent
 3494              		.thumb
 3495              		.thumb_func
 3497              	PWMSP001_EnableEvent:
 3498              	.LFB137:
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3499              		.loc 1 1500 0
 3500              		.cfi_startproc
 3501              		@ args = 0, pretend = 0, frame = 16
 3502              		@ frame_needed = 1, uses_anonymous_args = 0
 3503              		@ link register save eliminated.
 3504 0000 80B4     		push	{r7}
 3505              	.LCFI75:
 3506              		.cfi_def_cfa_offset 4
 3507              		.cfi_offset 7, -4
 3508 0002 85B0     		sub	sp, sp, #20
 3509              	.LCFI76:
 3510              		.cfi_def_cfa_offset 24
 3511 0004 00AF     		add	r7, sp, #0
 3512              	.LCFI77:
 3513              		.cfi_def_cfa_register 7
 3514 0006 7860     		str	r0, [r7, #4]
 3515 0008 0B46     		mov	r3, r1
 3516 000a FB70     		strb	r3, [r7, #3]
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3517              		.loc 1 1501 0
 3518 000c 4FF00103 		mov	r3, #1
 3519 0010 FB60     		str	r3, [r7, #12]
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3520              		.loc 1 1503 0
 3521 0012 7B68     		ldr	r3, [r7, #4]
 3522 0014 DB6B     		ldr	r3, [r3, #60]
 3523 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3524 0018 002B     		cmp	r3, #0
 3525 001a 03D1     		bne	.L142
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3526              		.loc 1 1505 0
 3527 001c 4FF00103 		mov	r3, #1
 3528 0020 FB60     		str	r3, [r7, #12]
 3529 0022 24E0     		b	.L143
 3530              	.L142:
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3531              		.loc 1 1510 0
 3532 0024 7B68     		ldr	r3, [r7, #4]
 3533 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3534 002a 012B     		cmp	r3, #1
 3535 002c 0ED1     		bne	.L144
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3536              		.loc 1 1512 0
 3537 002e 7B68     		ldr	r3, [r7, #4]
 3538 0030 DB69     		ldr	r3, [r3, #28]
 3539 0032 7A68     		ldr	r2, [r7, #4]
 3540 0034 D269     		ldr	r2, [r2, #28]
 3541 0036 D2F8A410 		ldr	r1, [r2, #164]
 3542 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3543 003c 4FF00100 		mov	r0, #1
 3544 0040 00FA02F2 		lsl	r2, r0, r2
 3545 0044 0A43     		orrs	r2, r2, r1
 3546 0046 C3F8A420 		str	r2, [r3, #164]
 3547 004a 0DE0     		b	.L145
 3548              	.L144:
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3549              		.loc 1 1516 0
 3550 004c 7B68     		ldr	r3, [r7, #4]
 3551 004e 9B69     		ldr	r3, [r3, #24]
 3552 0050 7A68     		ldr	r2, [r7, #4]
 3553 0052 9269     		ldr	r2, [r2, #24]
 3554 0054 D2F8A410 		ldr	r1, [r2, #164]
 3555 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3556 005a 4FF00100 		mov	r0, #1
 3557 005e 00FA02F2 		lsl	r2, r0, r2
 3558 0062 0A43     		orrs	r2, r2, r1
 3559 0064 C3F8A420 		str	r2, [r3, #164]
 3560              	.L145:
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3561              		.loc 1 1518 0
 3562 0068 4FF00003 		mov	r3, #0
 3563 006c FB60     		str	r3, [r7, #12]
 3564              	.L143:
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3565              		.loc 1 1520 0
 3566 006e FB68     		ldr	r3, [r7, #12]
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3567              		.loc 1 1521 0
 3568 0070 1846     		mov	r0, r3
 3569 0072 07F11407 		add	r7, r7, #20
 3570 0076 BD46     		mov	sp, r7
 3571 0078 80BC     		pop	{r7}
 3572 007a 7047     		bx	lr
 3573              		.cfi_endproc
 3574              	.LFE137:
 3576              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3577              		.align	2
 3578              		.global	PWMSP001_DisableEvent
 3579              		.thumb
 3580              		.thumb_func
 3582              	PWMSP001_DisableEvent:
 3583              	.LFB138:
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3584              		.loc 1 1531 0
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 16
 3587              		@ frame_needed = 1, uses_anonymous_args = 0
 3588              		@ link register save eliminated.
 3589 0000 80B4     		push	{r7}
 3590              	.LCFI78:
 3591              		.cfi_def_cfa_offset 4
 3592              		.cfi_offset 7, -4
 3593 0002 85B0     		sub	sp, sp, #20
 3594              	.LCFI79:
 3595              		.cfi_def_cfa_offset 24
 3596 0004 00AF     		add	r7, sp, #0
 3597              	.LCFI80:
 3598              		.cfi_def_cfa_register 7
 3599 0006 7860     		str	r0, [r7, #4]
 3600 0008 0B46     		mov	r3, r1
 3601 000a FB70     		strb	r3, [r7, #3]
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3602              		.loc 1 1532 0
 3603 000c 4FF00103 		mov	r3, #1
 3604 0010 FB60     		str	r3, [r7, #12]
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3605              		.loc 1 1534 0
 3606 0012 7B68     		ldr	r3, [r7, #4]
 3607 0014 DB6B     		ldr	r3, [r3, #60]
 3608 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3609 0018 002B     		cmp	r3, #0
 3610 001a 03D1     		bne	.L148
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3611              		.loc 1 1536 0
 3612 001c 4FF00103 		mov	r3, #1
 3613 0020 FB60     		str	r3, [r7, #12]
 3614 0022 28E0     		b	.L149
 3615              	.L148:
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3616              		.loc 1 1541 0
 3617 0024 7B68     		ldr	r3, [r7, #4]
 3618 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3619 002a 012B     		cmp	r3, #1
 3620 002c 10D1     		bne	.L150
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3621              		.loc 1 1543 0
 3622 002e 7B68     		ldr	r3, [r7, #4]
 3623 0030 DB69     		ldr	r3, [r3, #28]
 3624 0032 7A68     		ldr	r2, [r7, #4]
 3625 0034 D269     		ldr	r2, [r2, #28]
 3626 0036 D2F8A410 		ldr	r1, [r2, #164]
 3627 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3628 003c 4FF00100 		mov	r0, #1
 3629 0040 00FA02F2 		lsl	r2, r0, r2
 3630 0044 6FEA0202 		mvn	r2, r2
 3631 0048 0A40     		ands	r2, r2, r1
 3632 004a C3F8A420 		str	r2, [r3, #164]
 3633 004e 0FE0     		b	.L151
 3634              	.L150:
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3635              		.loc 1 1547 0
 3636 0050 7B68     		ldr	r3, [r7, #4]
 3637 0052 9B69     		ldr	r3, [r3, #24]
 3638 0054 7A68     		ldr	r2, [r7, #4]
 3639 0056 9269     		ldr	r2, [r2, #24]
 3640 0058 D2F8A410 		ldr	r1, [r2, #164]
 3641 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3642 005e 4FF00100 		mov	r0, #1
 3643 0062 00FA02F2 		lsl	r2, r0, r2
 3644 0066 6FEA0202 		mvn	r2, r2
 3645 006a 0A40     		ands	r2, r2, r1
 3646 006c C3F8A420 		str	r2, [r3, #164]
 3647              	.L151:
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3648              		.loc 1 1549 0
 3649 0070 4FF00003 		mov	r3, #0
 3650 0074 FB60     		str	r3, [r7, #12]
 3651              	.L149:
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3652              		.loc 1 1551 0
 3653 0076 FB68     		ldr	r3, [r7, #12]
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3654              		.loc 1 1552 0
 3655 0078 1846     		mov	r0, r3
 3656 007a 07F11407 		add	r7, r7, #20
 3657 007e BD46     		mov	sp, r7
 3658 0080 80BC     		pop	{r7}
 3659 0082 7047     		bx	lr
 3660              		.cfi_endproc
 3661              	.LFE138:
 3663              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3664              		.align	2
 3665              		.global	PWMSP001_ClearPendingEvent
 3666              		.thumb
 3667              		.thumb_func
 3669              	PWMSP001_ClearPendingEvent:
 3670              	.LFB139:
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3671              		.loc 1 1562 0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 16
 3674              		@ frame_needed = 1, uses_anonymous_args = 0
 3675              		@ link register save eliminated.
 3676 0000 80B4     		push	{r7}
 3677              	.LCFI81:
 3678              		.cfi_def_cfa_offset 4
 3679              		.cfi_offset 7, -4
 3680 0002 85B0     		sub	sp, sp, #20
 3681              	.LCFI82:
 3682              		.cfi_def_cfa_offset 24
 3683 0004 00AF     		add	r7, sp, #0
 3684              	.LCFI83:
 3685              		.cfi_def_cfa_register 7
 3686 0006 7860     		str	r0, [r7, #4]
 3687 0008 0B46     		mov	r3, r1
 3688 000a FB70     		strb	r3, [r7, #3]
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3689              		.loc 1 1563 0
 3690 000c 4FF00103 		mov	r3, #1
 3691 0010 FB60     		str	r3, [r7, #12]
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3692              		.loc 1 1565 0
 3693 0012 7B68     		ldr	r3, [r7, #4]
 3694 0014 DB6B     		ldr	r3, [r3, #60]
 3695 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3696 0018 002B     		cmp	r3, #0
 3697 001a 03D1     		bne	.L154
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3698              		.loc 1 1567 0
 3699 001c 4FF00103 		mov	r3, #1
 3700 0020 FB60     		str	r3, [r7, #12]
 3701 0022 24E0     		b	.L155
 3702              	.L154:
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3703              		.loc 1 1572 0
 3704 0024 7B68     		ldr	r3, [r7, #4]
 3705 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3706 002a 012B     		cmp	r3, #1
 3707 002c 0ED1     		bne	.L156
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3708              		.loc 1 1574 0
 3709 002e 7B68     		ldr	r3, [r7, #4]
 3710 0030 DB69     		ldr	r3, [r3, #28]
 3711 0032 7A68     		ldr	r2, [r7, #4]
 3712 0034 D269     		ldr	r2, [r2, #28]
 3713 0036 D2F8B010 		ldr	r1, [r2, #176]
 3714 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3715 003c 4FF00100 		mov	r0, #1
 3716 0040 00FA02F2 		lsl	r2, r0, r2
 3717 0044 0A43     		orrs	r2, r2, r1
 3718 0046 C3F8B020 		str	r2, [r3, #176]
 3719 004a 0DE0     		b	.L157
 3720              	.L156:
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3721              		.loc 1 1578 0
 3722 004c 7B68     		ldr	r3, [r7, #4]
 3723 004e 9B69     		ldr	r3, [r3, #24]
 3724 0050 7A68     		ldr	r2, [r7, #4]
 3725 0052 9269     		ldr	r2, [r2, #24]
 3726 0054 D2F8B010 		ldr	r1, [r2, #176]
 3727 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3728 005a 4FF00100 		mov	r0, #1
 3729 005e 00FA02F2 		lsl	r2, r0, r2
 3730 0062 0A43     		orrs	r2, r2, r1
 3731 0064 C3F8B020 		str	r2, [r3, #176]
 3732              	.L157:
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3733              		.loc 1 1580 0
 3734 0068 4FF00003 		mov	r3, #0
 3735 006c FB60     		str	r3, [r7, #12]
 3736              	.L155:
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3737              		.loc 1 1582 0
 3738 006e FB68     		ldr	r3, [r7, #12]
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3739              		.loc 1 1583 0
 3740 0070 1846     		mov	r0, r3
 3741 0072 07F11407 		add	r7, r7, #20
 3742 0076 BD46     		mov	sp, r7
 3743 0078 80BC     		pop	{r7}
 3744 007a 7047     		bx	lr
 3745              		.cfi_endproc
 3746              	.LFE139:
 3748              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3749              		.align	2
 3750              		.global	PWMSP001_SetPendingEvent
 3751              		.thumb
 3752              		.thumb_func
 3754              	PWMSP001_SetPendingEvent:
 3755              	.LFB140:
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3756              		.loc 1 1594 0
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 16
 3759              		@ frame_needed = 1, uses_anonymous_args = 0
 3760              		@ link register save eliminated.
 3761 0000 80B4     		push	{r7}
 3762              	.LCFI84:
 3763              		.cfi_def_cfa_offset 4
 3764              		.cfi_offset 7, -4
 3765 0002 85B0     		sub	sp, sp, #20
 3766              	.LCFI85:
 3767              		.cfi_def_cfa_offset 24
 3768 0004 00AF     		add	r7, sp, #0
 3769              	.LCFI86:
 3770              		.cfi_def_cfa_register 7
 3771 0006 7860     		str	r0, [r7, #4]
 3772 0008 0B46     		mov	r3, r1
 3773 000a FB70     		strb	r3, [r7, #3]
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3774              		.loc 1 1595 0
 3775 000c 4FF00103 		mov	r3, #1
 3776 0010 FB60     		str	r3, [r7, #12]
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3777              		.loc 1 1597 0
 3778 0012 7B68     		ldr	r3, [r7, #4]
 3779 0014 DB6B     		ldr	r3, [r3, #60]
 3780 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3781 0018 002B     		cmp	r3, #0
 3782 001a 03D1     		bne	.L160
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3783              		.loc 1 1599 0
 3784 001c 4FF00103 		mov	r3, #1
 3785 0020 FB60     		str	r3, [r7, #12]
 3786 0022 24E0     		b	.L161
 3787              	.L160:
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3788              		.loc 1 1604 0
 3789 0024 7B68     		ldr	r3, [r7, #4]
 3790 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3791 002a 012B     		cmp	r3, #1
 3792 002c 0ED1     		bne	.L162
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3793              		.loc 1 1606 0
 3794 002e 7B68     		ldr	r3, [r7, #4]
 3795 0030 DB69     		ldr	r3, [r3, #28]
 3796 0032 7A68     		ldr	r2, [r7, #4]
 3797 0034 D269     		ldr	r2, [r2, #28]
 3798 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3799 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3800 003c 4FF00100 		mov	r0, #1
 3801 0040 00FA02F2 		lsl	r2, r0, r2
 3802 0044 0A43     		orrs	r2, r2, r1
 3803 0046 C3F8AC20 		str	r2, [r3, #172]
 3804 004a 0DE0     		b	.L163
 3805              	.L162:
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3806              		.loc 1 1610 0
 3807 004c 7B68     		ldr	r3, [r7, #4]
 3808 004e 9B69     		ldr	r3, [r3, #24]
 3809 0050 7A68     		ldr	r2, [r7, #4]
 3810 0052 9269     		ldr	r2, [r2, #24]
 3811 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3812 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3813 005a 4FF00100 		mov	r0, #1
 3814 005e 00FA02F2 		lsl	r2, r0, r2
 3815 0062 0A43     		orrs	r2, r2, r1
 3816 0064 C3F8AC20 		str	r2, [r3, #172]
 3817              	.L163:
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3818              		.loc 1 1612 0
 3819 0068 4FF00003 		mov	r3, #0
 3820 006c FB60     		str	r3, [r7, #12]
 3821              	.L161:
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3822              		.loc 1 1614 0
 3823 006e FB68     		ldr	r3, [r7, #12]
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3824              		.loc 1 1615 0
 3825 0070 1846     		mov	r0, r3
 3826 0072 07F11407 		add	r7, r7, #20
 3827 0076 BD46     		mov	sp, r7
 3828 0078 80BC     		pop	{r7}
 3829 007a 7047     		bx	lr
 3830              		.cfi_endproc
 3831              	.LFE140:
 3833              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 3834              		.align	2
 3835              		.global	PWMSP001_GetPendingEvent
 3836              		.thumb
 3837              		.thumb_func
 3839              	PWMSP001_GetPendingEvent:
 3840              	.LFB141:
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3841              		.loc 1 1626 0
 3842              		.cfi_startproc
 3843              		@ args = 0, pretend = 0, frame = 24
 3844              		@ frame_needed = 1, uses_anonymous_args = 0
 3845              		@ link register save eliminated.
 3846 0000 80B4     		push	{r7}
 3847              	.LCFI87:
 3848              		.cfi_def_cfa_offset 4
 3849              		.cfi_offset 7, -4
 3850 0002 87B0     		sub	sp, sp, #28
 3851              	.LCFI88:
 3852              		.cfi_def_cfa_offset 32
 3853 0004 00AF     		add	r7, sp, #0
 3854              	.LCFI89:
 3855              		.cfi_def_cfa_register 7
 3856 0006 F860     		str	r0, [r7, #12]
 3857 0008 0B46     		mov	r3, r1
 3858 000a 7A60     		str	r2, [r7, #4]
 3859 000c FB72     		strb	r3, [r7, #11]
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3860              		.loc 1 1627 0
 3861 000e 4FF00103 		mov	r3, #1
 3862 0012 7B61     		str	r3, [r7, #20]
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3863              		.loc 1 1629 0
 3864 0014 FB68     		ldr	r3, [r7, #12]
 3865 0016 DB6B     		ldr	r3, [r3, #60]
 3866 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3867 001a 002B     		cmp	r3, #0
 3868 001c 03D1     		bne	.L166
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3869              		.loc 1 1631 0
 3870 001e 4FF00103 		mov	r3, #1
 3871 0022 7B61     		str	r3, [r7, #20]
 3872 0024 38E0     		b	.L167
 3873              	.L166:
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3874              		.loc 1 1636 0
 3875 0026 FB68     		ldr	r3, [r7, #12]
 3876 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3877 002c 012B     		cmp	r3, #1
 3878 002e 18D1     		bne	.L168
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 3879              		.loc 1 1639 0
 3880 0030 FB68     		ldr	r3, [r7, #12]
 3881 0032 DB69     		ldr	r3, [r3, #28]
 3882 0034 D3F8A020 		ldr	r2, [r3, #160]
 3883 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3884 003a 4FF00101 		mov	r1, #1
 3885 003e 01FA03F3 		lsl	r3, r1, r3
 3886 0042 1A40     		ands	r2, r2, r3
 3887 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3888 0046 22FA03F3 		lsr	r3, r2, r3
 3889 004a 002B     		cmp	r3, #0
 3890 004c 04D0     		beq	.L169
1640:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1641:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 3891              		.loc 1 1641 0
 3892 004e 7B68     		ldr	r3, [r7, #4]
 3893 0050 4FF00102 		mov	r2, #1
 3894 0054 1A70     		strb	r2, [r3, #0]
 3895 0056 1CE0     		b	.L170
 3896              	.L169:
1642:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1643:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1644:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1645:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 3897              		.loc 1 1645 0
 3898 0058 7B68     		ldr	r3, [r7, #4]
 3899 005a 4FF00002 		mov	r2, #0
 3900 005e 1A70     		strb	r2, [r3, #0]
 3901 0060 17E0     		b	.L170
 3902              	.L168:
1646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 3903              		.loc 1 1650 0
 3904 0062 FB68     		ldr	r3, [r7, #12]
 3905 0064 9B69     		ldr	r3, [r3, #24]
 3906 0066 D3F8A020 		ldr	r2, [r3, #160]
 3907 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3908 006c 4FF00101 		mov	r1, #1
 3909 0070 01FA03F3 		lsl	r3, r1, r3
 3910 0074 1A40     		ands	r2, r2, r3
 3911 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3912 0078 22FA03F3 		lsr	r3, r2, r3
 3913 007c 002B     		cmp	r3, #0
 3914 007e 04D0     		beq	.L171
1651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 3915              		.loc 1 1652 0
 3916 0080 7B68     		ldr	r3, [r7, #4]
 3917 0082 4FF00102 		mov	r2, #1
 3918 0086 1A70     		strb	r2, [r3, #0]
 3919 0088 03E0     		b	.L170
 3920              	.L171:
1653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 3921              		.loc 1 1656 0
 3922 008a 7B68     		ldr	r3, [r7, #4]
 3923 008c 4FF00002 		mov	r2, #0
 3924 0090 1A70     		strb	r2, [r3, #0]
 3925              	.L170:
1657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3926              		.loc 1 1661 0
 3927 0092 4FF00003 		mov	r3, #0
 3928 0096 7B61     		str	r3, [r7, #20]
 3929              	.L167:
1662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3930              		.loc 1 1663 0
 3931 0098 7B69     		ldr	r3, [r7, #20]
1664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3932              		.loc 1 1664 0
 3933 009a 1846     		mov	r0, r3
 3934 009c 07F11C07 		add	r7, r7, #28
 3935 00a0 BD46     		mov	sp, r7
 3936 00a2 80BC     		pop	{r7}
 3937 00a4 7047     		bx	lr
 3938              		.cfi_endproc
 3939              	.LFE141:
 3941 00a6 00BF     		.text
 3942              	.Letext0:
 3943              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3944              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3945              		.file 4 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 3946              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 3947              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3948              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:214    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:824    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:209    .text.PWMSP001_lInit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3186   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:607    .text.PWMSP001_Deinit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:612    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:819    .text.PWMSP001_Start:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1051   .text.PWMSP001_Stop:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1056   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1165   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1170   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1269   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1274   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1331   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1336   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1434   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1439   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1493   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1498   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1563   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1568   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1573   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1653   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1658   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1663   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1804   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1809   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1814   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1892   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1897   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:1902   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2016   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2021   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2154   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2159   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2492   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2310   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2316   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2321   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2482   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2487   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2610   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2615   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2686   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2691   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2768   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2773   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2914   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:2919   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3002   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3007   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3100   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3105   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3181   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3492   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3497   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3577   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3582   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3664   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3669   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3749   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3754   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3834   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccixay7D.s:3839   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
PWMSP001_Handle2
