   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	configuration,15,4
  20              		.comm	data_R,5,4
  21              		.section	.text.main,"ax",%progbits
  22              		.align	2
  23              		.global	main
  24              		.thumb
  25              		.thumb_func
  27              	main:
  28              	.LFB112:
  29              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     ****  BIT 0: BLAH2
  10:../Main.c     ****  BIT 1: BUZINA
  11:../Main.c     ****  BIT 2: ENABLE
  12:../Main.c     ****  BIT 3: ALBH2
  13:../Main.c     ****  BIT 4: BLAH1
  14:../Main.c     ****  BIT 5: ALBH1
  15:../Main.c     ****  */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 4 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 60
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_RECEIVE 5
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0		//LEFT-BACK
  52:../Main.c     **** #define	BUZINA		1		//USELESS
  53:../Main.c     **** #define	ENABLE		2		//USELESS
  54:../Main.c     **** #define	ALBH2		3		//LEFT-FRONT
  55:../Main.c     **** #define	BLAH1		4		//RIGHT-BACK
  56:../Main.c     **** #define	ALBH1		5		//RIGHT-FRONT
  57:../Main.c     **** #define	LEFT_BACK	BLAH2
  58:../Main.c     **** #define	LEFT_FRONT	ALBH2
  59:../Main.c     **** #define	RIGHT_BACK	BLAH1
  60:../Main.c     **** #define	RIGHT_FRONT	ALBH1
  61:../Main.c     **** 
  62:../Main.c     **** //Defines referentes ao transceptor
  63:../Main.c     **** #define CS	 	IO004_Handle1
  64:../Main.c     **** #define CLK1 	IO004_Handle2
  65:../Main.c     **** #define DATA 	IO004_Handle4
  66:../Main.c     **** #define DR1		IO004_Handle5
  67:../Main.c     **** #define CE 		IO004_Handle6
  68:../Main.c     **** 
  69:../Main.c     **** // Defines referentes aos sinais PWM para os ESCs
  70:../Main.c     **** #define PWM_MOTOR_RIGHT &PWMSP001_Handle0
  71:../Main.c     **** #define FREQ_MOTOR_LOCOMOTION 60 //Hz
  72:../Main.c     **** #define PER_MOTOR_LOCOMOTION (1.0f/FREQ_MOTOR_LOCOMOTION) //s
  73:../Main.c     **** #define MAX_PER_MOTOR_LOCOMOTION 0.002f //s
  74:../Main.c     **** #define MIN_PER_MOTOR_LOCOMOTION 0.001f //s
  75:../Main.c     **** #define ZERO_PER_MOTOR_LOCOMOTION 0.0015f //s
  76:../Main.c     **** #define FREQ_MOTOR_WEAPON 60 //Hz
  77:../Main.c     **** #define PER_MOTOR_WEAPON (1.0f/FREQ_MOTOR_WEAPON) //s
  78:../Main.c     **** #define MAX_PER_MOTOR_WEAPON 0.002f //s
  79:../Main.c     **** #define MIN_PER_MOTOR_WEAPON 0.001f //s
  80:../Main.c     **** #define ZERO_PER_MOTOR_WEAPON 0.001f //s
  81:../Main.c     **** #define PWM_MOTOR_LEFT &PWMSP001_Handle1
  82:../Main.c     **** #define PWM_MOTOR_WEAPON &PWMSP001_Handle2
  83:../Main.c     **** #define PWM_MOTOR_CUT_OFF 20
  84:../Main.c     **** //==============================
  85:../Main.c     **** 
  86:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
  87:../Main.c     **** //#include
  88:../Main.c     **** 
  89:../Main.c     **** /***************************************************/
  90:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
  91:../Main.c     **** /***************************************************/
  92:../Main.c     **** 
  93:../Main.c     **** void delay(long unsigned int i);
  94:../Main.c     **** void pulse_R();
  95:../Main.c     **** void configure_R();
  96:../Main.c     **** void read_R();
  97:../Main.c     **** void delay(long unsigned int i);
  98:../Main.c     **** void updateButtonStates();
  99:../Main.c     **** void start_PWM_signals(void);
 100:../Main.c     **** void start_PWM_signals_test(void);
 101:../Main.c     **** void update_PWM_signals(void);
 102:../Main.c     **** void update_PWM_signals_test(float per_teste);
 103:../Main.c     **** 
 104:../Main.c     **** /***************************************************/
 105:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 106:../Main.c     **** /***************************************************/
 107:../Main.c     **** 
 108:../Main.c     **** char configuration[15];
 109:../Main.c     **** unsigned char data_R[BYTES_TO_RECEIVE];
 110:../Main.c     **** 
 111:../Main.c     **** /***************************************************/
 112:../Main.c     **** /***********************MAIN************************/
 113:../Main.c     **** /***************************************************/
 114:../Main.c     **** 
 115:../Main.c     **** int main(void) {
  30              		.loc 1 115 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
 116:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 117:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
  45              		.loc 1 117 0
  46 0006 FFF7FEFF 		bl	DAVE_Init
 118:../Main.c     **** 	/*Etapa de inicializacao*/
 119:../Main.c     **** 	configure_R(); //Configura transceptor como receptor
  47              		.loc 1 119 0
  48 000a FFF7FEFF 		bl	configure_R
 120:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 121:../Main.c     **** 	//IO004_SetPin(LED2);
 122:../Main.c     **** 
 123:../Main.c     **** 	start_PWM_signals();
  49              		.loc 1 123 0
  50 000e FFF7FEFF 		bl	start_PWM_signals
 124:../Main.c     **** //	start_PWM_signals_test();
 125:../Main.c     **** 
 126:../Main.c     **** 	float per_teste = MIN_PER_MOTOR_LOCOMOTION;
  51              		.loc 1 126 0
  52 0012 41F26F23 		movw	r3, #4719
  53 0016 C3F68323 		movt	r3, 14979
  54 001a 7B60     		str	r3, [r7, #4]	@ float
 127:../Main.c     **** 	int status = 0;
  55              		.loc 1 127 0
  56 001c 4FF00003 		mov	r3, #0
  57 0020 3B60     		str	r3, [r7, #0]
  58 0022 00E0     		b	.L3
  59              	.L4:
 128:../Main.c     **** 
 129:../Main.c     **** 	/*Loop do codigo*/
 130:../Main.c     **** 	while (1) {
 131:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 132:../Main.c     **** 			read_R();
 133:../Main.c     **** 			update_PWM_signals();
 134:../Main.c     **** 		}
 135:../Main.c     **** 
 136:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 137:../Main.c     **** //				100.0f * 0.0016f / PER_MOTOR_LOCOMOTION);
 138:../Main.c     **** //
 139:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 140:../Main.c     **** //				100.0f * 0.0016f / PER_MOTOR_LOCOMOTION);
 141:../Main.c     **** //
 142:../Main.c     **** //		int teste = 30000;
 143:../Main.c     **** //		while (teste--)
 144:../Main.c     **** //			delay(1000000);
 145:../Main.c     **** //
 146:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 147:../Main.c     **** //				100.0f * 0.0014f / PER_MOTOR_LOCOMOTION);
 148:../Main.c     **** //
 149:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 150:../Main.c     **** //				100.0f * 0.0014f / PER_MOTOR_LOCOMOTION);
 151:../Main.c     **** //
 152:../Main.c     **** //		teste = 30000;
 153:../Main.c     **** //		while (teste--)
 154:../Main.c     **** //			delay(1000000);
 155:../Main.c     **** 
 156:../Main.c     **** //		if (IO004_ReadPin(IO004_Handle7) == 0) {
 157:../Main.c     **** //					while (IO004_ReadPin(IO004_Handle7) == 0)
 158:../Main.c     **** //						;
 159:../Main.c     **** //
 160:../Main.c     **** //					if(per_teste >= MAX_PER_MOTOR_LOCOMOTION)
 161:../Main.c     **** //						status = 1;
 162:../Main.c     **** //
 163:../Main.c     **** //					if(per_teste <= MIN_PER_MOTOR_LOCOMOTION)
 164:../Main.c     **** //						status = 0;
 165:../Main.c     **** //
 166:../Main.c     **** //					if(status)
 167:../Main.c     **** //						per_teste -= 0.00005;
 168:../Main.c     **** //					else
 169:../Main.c     **** //						per_teste += 0.00005;
 170:../Main.c     **** //
 171:../Main.c     **** //					update_PWM_signals_test( per_teste);
 172:../Main.c     **** //		}
 173:../Main.c     **** 	}
  60              		.loc 1 173 0
  61 0024 00BF     		nop
  62              	.L3:
 131:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
  63              		.loc 1 131 0
  64 0026 40F20003 		movw	r3, #:lower16:IO004_Handle5
  65 002a C0F20003 		movt	r3, #:upper16:IO004_Handle5
  66 002e 5B68     		ldr	r3, [r3, #4]
  67 0030 5A6A     		ldr	r2, [r3, #36]
  68 0032 40F20003 		movw	r3, #:lower16:IO004_Handle5
  69 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle5
  70 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  71 003c 22FA03F3 		lsr	r3, r2, r3
  72 0040 03F00103 		and	r3, r3, #1
  73 0044 002B     		cmp	r3, #0
  74 0046 EDD0     		beq	.L4
 132:../Main.c     **** 			read_R();
  75              		.loc 1 132 0
  76 0048 FFF7FEFF 		bl	read_R
 133:../Main.c     **** 			update_PWM_signals();
  77              		.loc 1 133 0
  78 004c FFF7FEFF 		bl	update_PWM_signals
  79              		.loc 1 173 0
  80 0050 E8E7     		b	.L4
  81              		.cfi_endproc
  82              	.LFE112:
  84 0052 00BF     		.section	.text.start_PWM_signals_test,"ax",%progbits
  85              		.align	2
  86              		.global	start_PWM_signals_test
  87              		.thumb
  88              		.thumb_func
  90              	start_PWM_signals_test:
  91              	.LFB113:
 174:../Main.c     **** 	return 0;
 175:../Main.c     **** }
 176:../Main.c     **** 
 177:../Main.c     **** void start_PWM_signals_test(void) {
  92              		.loc 1 177 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              	.LCFI3:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 00AF     		add	r7, sp, #0
 102              	.LCFI4:
 103              		.cfi_def_cfa_register 7
 178:../Main.c     **** 
 179:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 104              		.loc 1 179 0
 105 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 106 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 107 000c FFF7FEFF 		bl	PWMSP001_Start
 180:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 108              		.loc 1 180 0
 109 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 110 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 111 0018 4FF00001 		mov	r1, #0
 112 001c C4F27021 		movt	r1, 17008
 113 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 181:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 114              		.loc 1 181 0
 115 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 116 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 117 002c 4FF00001 		mov	r1, #0
 118 0030 C4F21011 		movt	r1, 16656
 119 0034 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 182:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 183:../Main.c     **** 
 184:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 120              		.loc 1 184 0
 121 0038 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 122 003c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 123 0040 FFF7FEFF 		bl	PWMSP001_Start
 185:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 124              		.loc 1 185 0
 125 0044 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 126 0048 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 127 004c 4FF00001 		mov	r1, #0
 128 0050 C4F27021 		movt	r1, 17008
 129 0054 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 186:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 130              		.loc 1 186 0
 131 0058 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 132 005c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 133 0060 4FF00001 		mov	r1, #0
 134 0064 C4F21011 		movt	r1, 16656
 135 0068 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 187:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 188:../Main.c     **** 
 189:../Main.c     **** }
 136              		.loc 1 189 0
 137 006c 80BD     		pop	{r7, pc}
 138              		.cfi_endproc
 139              	.LFE113:
 141 006e 00BF     		.section	.text.update_PWM_signals_test,"ax",%progbits
 142              		.align	2
 143              		.global	update_PWM_signals_test
 144              		.thumb
 145              		.thumb_func
 147              	update_PWM_signals_test:
 148              	.LFB114:
 190:../Main.c     **** void update_PWM_signals_test(float per_teste) {
 149              		.loc 1 190 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 8
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153 0000 80B5     		push	{r7, lr}
 154              	.LCFI5:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 82B0     		sub	sp, sp, #8
 159              	.LCFI6:
 160              		.cfi_def_cfa_offset 16
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI7:
 163              		.cfi_def_cfa_register 7
 164 0006 7860     		str	r0, [r7, #4]	@ float
 191:../Main.c     **** 
 192:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 193:../Main.c     **** 			100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 165              		.loc 1 193 0
 166 0008 97ED017A 		flds	s14, [r7, #4]
 167 000c DFED127A 		flds	s15, .L7
 168 0010 27EE277A 		fmuls	s14, s14, s15
 192:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 169              		.loc 1 192 0
 170 0014 DFED117A 		flds	s15, .L7+4
 171 0018 C7EE277A 		fdivs	s15, s14, s15
 172 001c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 173 0020 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 174 0024 17EE901A 		fmrs	r1, s15
 175 0028 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 194:../Main.c     **** 
 195:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 196:../Main.c     **** 			100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 176              		.loc 1 196 0
 177 002c 97ED017A 		flds	s14, [r7, #4]
 178 0030 DFED097A 		flds	s15, .L7
 179 0034 27EE277A 		fmuls	s14, s14, s15
 195:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 180              		.loc 1 195 0
 181 0038 DFED087A 		flds	s15, .L7+4
 182 003c C7EE277A 		fdivs	s15, s14, s15
 183 0040 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 184 0044 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 185 0048 17EE901A 		fmrs	r1, s15
 186 004c FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 197:../Main.c     **** }
 187              		.loc 1 197 0
 188 0050 07F10807 		add	r7, r7, #8
 189 0054 BD46     		mov	sp, r7
 190 0056 80BD     		pop	{r7, pc}
 191              	.L8:
 192              		.align	2
 193              	.L7:
 194 0058 0000C842 		.word	1120403456
 195 005c 8988883C 		.word	1015580809
 196              		.cfi_endproc
 197              	.LFE114:
 199              		.section	.text.start_PWM_signals,"ax",%progbits
 200              		.align	2
 201              		.global	start_PWM_signals
 202              		.thumb
 203              		.thumb_func
 205              	start_PWM_signals:
 206              	.LFB115:
 198:../Main.c     **** 
 199:../Main.c     **** /***************************************************/
 200:../Main.c     **** /**********INICIALIZA OS SINAIS DE PWM COM *********/
 201:../Main.c     **** /****PERIODOS CORRETOS E CICLOS PARA MOTOR PARADO***/
 202:../Main.c     **** /***************************************************/
 203:../Main.c     **** 
 204:../Main.c     **** void start_PWM_signals(void) {
 207              		.loc 1 204 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 80B5     		push	{r7, lr}
 212              	.LCFI8:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 00AF     		add	r7, sp, #0
 217              	.LCFI9:
 218              		.cfi_def_cfa_register 7
 205:../Main.c     **** 
 206:../Main.c     **** //	TODO: Pinos dos motores
 207:../Main.c     **** 
 208:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 219              		.loc 1 208 0
 220 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 221 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 222 000c FFF7FEFF 		bl	PWMSP001_Start
 209:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 223              		.loc 1 209 0
 224 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 225 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 226 0018 4FF00001 		mov	r1, #0
 227 001c C4F27021 		movt	r1, 17008
 228 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 210:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 229              		.loc 1 210 0
 230 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 231 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 232 002c 4FF00001 		mov	r1, #0
 233 0030 C4F21011 		movt	r1, 16656
 234 0034 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 211:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 212:../Main.c     **** 
 213:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 235              		.loc 1 213 0
 236 0038 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 237 003c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 238 0040 FFF7FEFF 		bl	PWMSP001_Start
 214:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 239              		.loc 1 214 0
 240 0044 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 241 0048 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 242 004c 4FF00001 		mov	r1, #0
 243 0050 C4F27021 		movt	r1, 17008
 244 0054 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 215:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 245              		.loc 1 215 0
 246 0058 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 247 005c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 248 0060 4FF00001 		mov	r1, #0
 249 0064 C4F21011 		movt	r1, 16656
 250 0068 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 216:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 217:../Main.c     **** 
 218:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_WEAPON);
 251              		.loc 1 218 0
 252 006c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 253 0070 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 254 0074 FFF7FEFF 		bl	PWMSP001_Start
 219:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_WEAPON, FREQ_MOTOR_WEAPON);
 255              		.loc 1 219 0
 256 0078 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 257 007c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 258 0080 4FF00001 		mov	r1, #0
 259 0084 C4F27021 		movt	r1, 17008
 260 0088 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 220:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 261              		.loc 1 220 0
 262 008c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 263 0090 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 264 0094 4FF00001 		mov	r1, #0
 265 0098 C4F2C001 		movt	r1, 16576
 266 009c FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 221:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_WEAPON / PER_MOTOR_WEAPON);
 222:../Main.c     **** 
 223:../Main.c     **** }
 267              		.loc 1 223 0
 268 00a0 80BD     		pop	{r7, pc}
 269              		.cfi_endproc
 270              	.LFE115:
 272 00a2 00BF     		.section	.text.update_PWM_signals,"ax",%progbits
 273              		.align	2
 274              		.global	update_PWM_signals
 275              		.thumb
 276              		.thumb_func
 278              	update_PWM_signals:
 279              	.LFB116:
 224:../Main.c     **** 
 225:../Main.c     **** void update_PWM_signals(void) {
 280              		.loc 1 225 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 16
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI10:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 84B0     		sub	sp, sp, #16
 290              	.LCFI11:
 291              		.cfi_def_cfa_offset 24
 292 0004 00AF     		add	r7, sp, #0
 293              	.LCFI12:
 294              		.cfi_def_cfa_register 7
 226:../Main.c     **** 
 227:../Main.c     **** //	TODO: Verificar valor de data_R co direita e esquerda
 228:../Main.c     **** 
 229:../Main.c     **** 	//Esquerda data[1]
 230:../Main.c     **** 	//Direita data[2]
 231:../Main.c     **** 
 232:../Main.c     **** 	float per_motor_right = ZERO_PER_MOTOR_LOCOMOTION;
 295              		.loc 1 232 0
 296 0006 49F6A633 		movw	r3, #39846
 297 000a C3F6C423 		movt	r3, 15044
 298 000e FB60     		str	r3, [r7, #12]	@ float
 233:../Main.c     **** 	float per_motor_left = ZERO_PER_MOTOR_LOCOMOTION;
 299              		.loc 1 233 0
 300 0010 49F6A633 		movw	r3, #39846
 301 0014 C3F6C423 		movt	r3, 15044
 302 0018 BB60     		str	r3, [r7, #8]	@ float
 234:../Main.c     **** 	unsigned char direction = data_R[3];
 303              		.loc 1 234 0
 304 001a 40F20003 		movw	r3, #:lower16:data_R
 305 001e C0F20003 		movt	r3, #:upper16:data_R
 306 0022 DB78     		ldrb	r3, [r3, #3]
 307 0024 FB71     		strb	r3, [r7, #7]
 235:../Main.c     **** 	float per_weapon = (data_R[4])
 308              		.loc 1 235 0
 309 0026 40F20003 		movw	r3, #:lower16:data_R
 310 002a C0F20003 		movt	r3, #:upper16:data_R
 311 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 236:../Main.c     **** 			* (MAX_PER_MOTOR_WEAPON - MIN_PER_MOTOR_WEAPON)
 312              		.loc 1 236 0
 313 0030 07EE903A 		fmsr	s15, r3	@ int
 314 0034 B8EEE77A 		fsitos	s14, s15
 315 0038 DFED6A7A 		flds	s15, .L15
 316 003c 27EE277A 		fmuls	s14, s14, s15
 237:../Main.c     **** 			/ 255+ MIN_PER_MOTOR_WEAPON;
 317              		.loc 1 237 0
 318 0040 DFED697A 		flds	s15, .L15+4
 319 0044 87EE277A 		fdivs	s14, s14, s15
 235:../Main.c     **** 	float per_weapon = (data_R[4])
 320              		.loc 1 235 0
 321 0048 DFED667A 		flds	s15, .L15
 322 004c 77EE277A 		fadds	s15, s14, s15
 323 0050 C7ED007A 		fsts	s15, [r7, #0]
 238:../Main.c     **** 
 239:../Main.c     **** 	if (direction & (1 << LEFT_FRONT)) {
 324              		.loc 1 239 0
 325 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326 0056 03F00803 		and	r3, r3, #8
 327 005a 002B     		cmp	r3, #0
 328 005c 1ED0     		beq	.L11
 240:../Main.c     **** 
 241:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 329              		.loc 1 241 0
 330 005e 40F20003 		movw	r3, #:lower16:data_R
 331 0062 C0F20003 		movt	r3, #:upper16:data_R
 332 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 333 0068 142B     		cmp	r3, #20
 334 006a 3AD9     		bls	.L12
 242:../Main.c     **** 			per_motor_left =
 243:../Main.c     **** 					(((float) data_R[1]) / 255)
 335              		.loc 1 243 0
 336 006c 40F20003 		movw	r3, #:lower16:data_R
 337 0070 C0F20003 		movt	r3, #:upper16:data_R
 338 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 339 0076 07EE903A 		fmsr	s15, r3	@ int
 340 007a B8EE677A 		fuitos	s14, s15
 341 007e DFED5A7A 		flds	s15, .L15+4
 342 0082 87EE277A 		fdivs	s14, s14, s15
 244:../Main.c     **** 							* (MAX_PER_MOTOR_LOCOMOTION
 343              		.loc 1 244 0
 344 0086 DFED597A 		flds	s15, .L15+8
 345 008a 27EE277A 		fmuls	s14, s14, s15
 242:../Main.c     **** 			per_motor_left =
 346              		.loc 1 242 0
 347 008e DFED587A 		flds	s15, .L15+12
 348 0092 77EE277A 		fadds	s15, s14, s15
 349 0096 C7ED027A 		fsts	s15, [r7, #8]
 350 009a 22E0     		b	.L12
 351              	.L11:
 245:../Main.c     **** 									- ZERO_PER_MOTOR_LOCOMOTION)+ ZERO_PER_MOTOR_LOCOMOTION;
 246:../Main.c     **** 
 247:../Main.c     **** 	} else if (direction & (1 << LEFT_BACK)) {
 352              		.loc 1 247 0
 353 009c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 354 009e 03F00103 		and	r3, r3, #1
 355 00a2 002B     		cmp	r3, #0
 356 00a4 1DD0     		beq	.L12
 248:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 357              		.loc 1 248 0
 358 00a6 40F20003 		movw	r3, #:lower16:data_R
 359 00aa C0F20003 		movt	r3, #:upper16:data_R
 360 00ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 361 00b0 142B     		cmp	r3, #20
 362 00b2 16D9     		bls	.L12
 249:../Main.c     **** 			per_motor_left =
 250:../Main.c     **** 					(((float) data_R[1]) / 255)
 363              		.loc 1 250 0
 364 00b4 40F20003 		movw	r3, #:lower16:data_R
 365 00b8 C0F20003 		movt	r3, #:upper16:data_R
 366 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 367 00be 07EE903A 		fmsr	s15, r3	@ int
 368 00c2 B8EE677A 		fuitos	s14, s15
 369 00c6 DFED487A 		flds	s15, .L15+4
 370 00ca 87EE277A 		fdivs	s14, s14, s15
 251:../Main.c     **** 							* (ZERO_PER_MOTOR_LOCOMOTION
 371              		.loc 1 251 0
 372 00ce DFED497A 		flds	s15, .L15+16
 373 00d2 27EE277A 		fmuls	s14, s14, s15
 249:../Main.c     **** 			per_motor_left =
 374              		.loc 1 249 0
 375 00d6 DFED437A 		flds	s15, .L15
 376 00da 77EE277A 		fadds	s15, s14, s15
 377 00de C7ED027A 		fsts	s15, [r7, #8]
 378              	.L12:
 252:../Main.c     **** 									- MIN_PER_MOTOR_LOCOMOTION)+ MIN_PER_MOTOR_LOCOMOTION;
 253:../Main.c     **** 	}
 254:../Main.c     **** 
 255:../Main.c     **** 	if (direction & (1 << RIGHT_FRONT)) {
 379              		.loc 1 255 0
 380 00e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 381 00e4 03F02003 		and	r3, r3, #32
 382 00e8 002B     		cmp	r3, #0
 383 00ea 1ED0     		beq	.L13
 256:../Main.c     **** 
 257:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 384              		.loc 1 257 0
 385 00ec 40F20003 		movw	r3, #:lower16:data_R
 386 00f0 C0F20003 		movt	r3, #:upper16:data_R
 387 00f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 388 00f6 142B     		cmp	r3, #20
 389 00f8 3AD9     		bls	.L14
 258:../Main.c     **** 			per_motor_right =
 259:../Main.c     **** 					(((float) data_R[2]) / 255)
 390              		.loc 1 259 0
 391 00fa 40F20003 		movw	r3, #:lower16:data_R
 392 00fe C0F20003 		movt	r3, #:upper16:data_R
 393 0102 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 394 0104 07EE903A 		fmsr	s15, r3	@ int
 395 0108 B8EE677A 		fuitos	s14, s15
 396 010c DFED367A 		flds	s15, .L15+4
 397 0110 87EE277A 		fdivs	s14, s14, s15
 260:../Main.c     **** 							* (MAX_PER_MOTOR_LOCOMOTION
 398              		.loc 1 260 0
 399 0114 DFED357A 		flds	s15, .L15+8
 400 0118 27EE277A 		fmuls	s14, s14, s15
 258:../Main.c     **** 			per_motor_right =
 401              		.loc 1 258 0
 402 011c DFED347A 		flds	s15, .L15+12
 403 0120 77EE277A 		fadds	s15, s14, s15
 404 0124 C7ED037A 		fsts	s15, [r7, #12]
 405 0128 22E0     		b	.L14
 406              	.L13:
 261:../Main.c     **** 									- ZERO_PER_MOTOR_LOCOMOTION)+ ZERO_PER_MOTOR_LOCOMOTION;
 262:../Main.c     **** 
 263:../Main.c     **** 	} else if (direction & (1 << RIGHT_BACK)) {
 407              		.loc 1 263 0
 408 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 409 012c 03F01003 		and	r3, r3, #16
 410 0130 002B     		cmp	r3, #0
 411 0132 1DD0     		beq	.L14
 264:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 412              		.loc 1 264 0
 413 0134 40F20003 		movw	r3, #:lower16:data_R
 414 0138 C0F20003 		movt	r3, #:upper16:data_R
 415 013c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 416 013e 142B     		cmp	r3, #20
 417 0140 16D9     		bls	.L14
 265:../Main.c     **** 			per_motor_right =
 266:../Main.c     **** 					(((float) data_R[2]) / 255)
 418              		.loc 1 266 0
 419 0142 40F20003 		movw	r3, #:lower16:data_R
 420 0146 C0F20003 		movt	r3, #:upper16:data_R
 421 014a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 422 014c 07EE903A 		fmsr	s15, r3	@ int
 423 0150 B8EE677A 		fuitos	s14, s15
 424 0154 DFED247A 		flds	s15, .L15+4
 425 0158 87EE277A 		fdivs	s14, s14, s15
 267:../Main.c     **** 							* (ZERO_PER_MOTOR_LOCOMOTION
 426              		.loc 1 267 0
 427 015c DFED257A 		flds	s15, .L15+16
 428 0160 27EE277A 		fmuls	s14, s14, s15
 265:../Main.c     **** 			per_motor_right =
 429              		.loc 1 265 0
 430 0164 DFED1F7A 		flds	s15, .L15
 431 0168 77EE277A 		fadds	s15, s14, s15
 432 016c C7ED037A 		fsts	s15, [r7, #12]
 433              	.L14:
 268:../Main.c     **** 									- MIN_PER_MOTOR_LOCOMOTION)+ MIN_PER_MOTOR_LOCOMOTION;
 269:../Main.c     **** 	}
 270:../Main.c     **** 
 271:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 272:../Main.c     **** 			100.0f * per_motor_right / PER_MOTOR_LOCOMOTION);
 434              		.loc 1 272 0
 435 0170 97ED037A 		flds	s14, [r7, #12]
 436 0174 DFED207A 		flds	s15, .L15+20
 437 0178 27EE277A 		fmuls	s14, s14, s15
 271:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 438              		.loc 1 271 0
 439 017c DFED1F7A 		flds	s15, .L15+24
 440 0180 C7EE277A 		fdivs	s15, s14, s15
 441 0184 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 442 0188 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 443 018c 17EE901A 		fmrs	r1, s15
 444 0190 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 273:../Main.c     **** 
 274:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 275:../Main.c     **** 			100.0f * per_motor_left / PER_MOTOR_LOCOMOTION);
 445              		.loc 1 275 0
 446 0194 97ED027A 		flds	s14, [r7, #8]
 447 0198 DFED177A 		flds	s15, .L15+20
 448 019c 27EE277A 		fmuls	s14, s14, s15
 274:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 449              		.loc 1 274 0
 450 01a0 DFED167A 		flds	s15, .L15+24
 451 01a4 C7EE277A 		fdivs	s15, s14, s15
 452 01a8 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 453 01ac C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 454 01b0 17EE901A 		fmrs	r1, s15
 455 01b4 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 276:../Main.c     **** 
 277:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 278:../Main.c     **** 			100.0f * per_weapon / PER_MOTOR_WEAPON);
 456              		.loc 1 278 0
 457 01b8 97ED007A 		flds	s14, [r7, #0]
 458 01bc DFED0E7A 		flds	s15, .L15+20
 459 01c0 27EE277A 		fmuls	s14, s14, s15
 277:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 460              		.loc 1 277 0
 461 01c4 DFED0D7A 		flds	s15, .L15+24
 462 01c8 C7EE277A 		fdivs	s15, s14, s15
 463 01cc 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 464 01d0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 465 01d4 17EE901A 		fmrs	r1, s15
 466 01d8 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 279:../Main.c     **** 
 280:../Main.c     **** //	float per_teste = (data_R[4])
 281:../Main.c     **** //				* (MAX_PER_MOTOR_LOCOMOTION - MIN_PER_MOTOR_LOCOMOTION)
 282:../Main.c     **** //				/ 255+ MIN_PER_MOTOR_LOCOMOTION;
 283:../Main.c     **** //
 284:../Main.c     **** //	PWMSP001_Start(PWM_MOTOR_RIGHT);
 285:../Main.c     **** //		PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 286:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 287:../Main.c     **** //				100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 288:../Main.c     **** //
 289:../Main.c     **** //		PWMSP001_Start(PWM_MOTOR_LEFT);
 290:../Main.c     **** //			PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 291:../Main.c     **** //			PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 292:../Main.c     **** //					100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 293:../Main.c     **** 
 294:../Main.c     **** }
 467              		.loc 1 294 0
 468 01dc 07F11007 		add	r7, r7, #16
 469 01e0 BD46     		mov	sp, r7
 470 01e2 80BD     		pop	{r7, pc}
 471              	.L16:
 472              		.align	2
 473              	.L15:
 474 01e4 6F12833A 		.word	981668463
 475 01e8 00007F43 		.word	1132396544
 476 01ec 7012033A 		.word	973279856
 477 01f0 A69BC43A 		.word	985963430
 478 01f4 6E12033A 		.word	973279854
 479 01f8 0000C842 		.word	1120403456
 480 01fc 8988883C 		.word	1015580809
 481              		.cfi_endproc
 482              	.LFE116:
 484              		.section	.text.read_R,"ax",%progbits
 485              		.align	2
 486              		.global	read_R
 487              		.thumb
 488              		.thumb_func
 490              	read_R:
 491              	.LFB117:
 295:../Main.c     **** 
 296:../Main.c     **** /***************************************************/
 297:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 298:../Main.c     **** /***************************************************/
 299:../Main.c     **** 
 300:../Main.c     **** void read_R() {
 492              		.loc 1 300 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 16
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              	.LCFI13:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 84B0     		sub	sp, sp, #16
 502              	.LCFI14:
 503              		.cfi_def_cfa_offset 24
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI15:
 506              		.cfi_def_cfa_register 7
 301:../Main.c     **** 	int i, j;
 302:../Main.c     **** 	IO004_ResetPin(CE);
 507              		.loc 1 302 0
 508 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 509 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 510 000e 5A68     		ldr	r2, [r3, #4]
 511 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 512 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 513 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 514 001a 4FF48031 		mov	r1, #65536
 515 001e 01FA03F3 		lsl	r3, r1, r3
 516 0022 5360     		str	r3, [r2, #4]
 303:../Main.c     **** 	delay(50000);
 517              		.loc 1 303 0
 518 0024 4CF25030 		movw	r0, #50000
 519 0028 FFF7FEFF 		bl	delay
 304:../Main.c     **** 	uint8_t temp = 0;
 520              		.loc 1 304 0
 521 002c 4FF00003 		mov	r3, #0
 522 0030 FB71     		strb	r3, [r7, #7]
 305:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 523              		.loc 1 305 0
 524 0032 4FF00003 		mov	r3, #0
 525 0036 BB60     		str	r3, [r7, #8]
 526 0038 36E0     		b	.L18
 527              	.L22:
 306:../Main.c     **** 		for (i = 7; i > -1; i--) {
 528              		.loc 1 306 0
 529 003a 4FF00703 		mov	r3, #7
 530 003e FB60     		str	r3, [r7, #12]
 531 0040 20E0     		b	.L19
 532              	.L21:
 307:../Main.c     **** 			if (IO004_ReadPin(DATA))
 533              		.loc 1 307 0
 534 0042 40F20003 		movw	r3, #:lower16:IO004_Handle4
 535 0046 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 536 004a 5B68     		ldr	r3, [r3, #4]
 537 004c 5A6A     		ldr	r2, [r3, #36]
 538 004e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 539 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 540 0056 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 541 0058 22FA03F3 		lsr	r3, r2, r3
 542 005c 03F00103 		and	r3, r3, #1
 543 0060 002B     		cmp	r3, #0
 544 0062 09D0     		beq	.L20
 308:../Main.c     **** 				temp |= (1 << i);
 545              		.loc 1 308 0
 546 0064 4FF00102 		mov	r2, #1
 547 0068 FB68     		ldr	r3, [r7, #12]
 548 006a 02FA03F3 		lsl	r3, r2, r3
 549 006e DAB2     		uxtb	r2, r3
 550 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 551 0072 1343     		orrs	r3, r3, r2
 552 0074 DBB2     		uxtb	r3, r3
 553 0076 FB71     		strb	r3, [r7, #7]
 554              	.L20:
 309:../Main.c     **** 			pulse_R();
 555              		.loc 1 309 0
 556 0078 FFF7FEFF 		bl	pulse_R
 306:../Main.c     **** 		for (i = 7; i > -1; i--) {
 557              		.loc 1 306 0
 558 007c FB68     		ldr	r3, [r7, #12]
 559 007e 03F1FF33 		add	r3, r3, #-1
 560 0082 FB60     		str	r3, [r7, #12]
 561              	.L19:
 306:../Main.c     **** 		for (i = 7; i > -1; i--) {
 562              		.loc 1 306 0 is_stmt 0 discriminator 1
 563 0084 FB68     		ldr	r3, [r7, #12]
 564 0086 002B     		cmp	r3, #0
 565 0088 DBDA     		bge	.L21
 310:../Main.c     **** 		}
 311:../Main.c     **** 		data_R[j] = temp;
 566              		.loc 1 311 0 is_stmt 1
 567 008a 40F20003 		movw	r3, #:lower16:data_R
 568 008e C0F20003 		movt	r3, #:upper16:data_R
 569 0092 BA68     		ldr	r2, [r7, #8]
 570 0094 9B18     		adds	r3, r3, r2
 571 0096 FA79     		ldrb	r2, [r7, #7]
 572 0098 1A70     		strb	r2, [r3, #0]
 312:../Main.c     **** 		temp = 0;
 573              		.loc 1 312 0
 574 009a 4FF00003 		mov	r3, #0
 575 009e FB71     		strb	r3, [r7, #7]
 305:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 576              		.loc 1 305 0
 577 00a0 BB68     		ldr	r3, [r7, #8]
 578 00a2 03F10103 		add	r3, r3, #1
 579 00a6 BB60     		str	r3, [r7, #8]
 580              	.L18:
 305:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 581              		.loc 1 305 0 is_stmt 0 discriminator 1
 582 00a8 BB68     		ldr	r3, [r7, #8]
 583 00aa 042B     		cmp	r3, #4
 584 00ac C5DD     		ble	.L22
 313:../Main.c     **** 	}
 314:../Main.c     **** 	IO004_SetPin(CE);
 585              		.loc 1 314 0 is_stmt 1
 586 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle6
 587 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 588 00b6 5A68     		ldr	r2, [r3, #4]
 589 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 590 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 591 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 592 00c2 4FF00101 		mov	r1, #1
 593 00c6 01FA03F3 		lsl	r3, r1, r3
 594 00ca 5360     		str	r3, [r2, #4]
 315:../Main.c     **** 	delay(50000);
 595              		.loc 1 315 0
 596 00cc 4CF25030 		movw	r0, #50000
 597 00d0 FFF7FEFF 		bl	delay
 316:../Main.c     **** }
 598              		.loc 1 316 0
 599 00d4 07F11007 		add	r7, r7, #16
 600 00d8 BD46     		mov	sp, r7
 601 00da 80BD     		pop	{r7, pc}
 602              		.cfi_endproc
 603              	.LFE117:
 605              		.section	.text.pulse_R,"ax",%progbits
 606              		.align	2
 607              		.global	pulse_R
 608              		.thumb
 609              		.thumb_func
 611              	pulse_R:
 612              	.LFB118:
 317:../Main.c     **** 
 318:../Main.c     **** void pulse_R() {
 613              		.loc 1 318 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 0000 80B5     		push	{r7, lr}
 618              	.LCFI16:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 00AF     		add	r7, sp, #0
 623              	.LCFI17:
 624              		.cfi_def_cfa_register 7
 319:../Main.c     **** 	delay(300);
 625              		.loc 1 319 0
 626 0004 4FF49670 		mov	r0, #300
 627 0008 FFF7FEFF 		bl	delay
 320:../Main.c     **** 	IO004_SetPin(CLK1);
 628              		.loc 1 320 0
 629 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 630 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 631 0014 5A68     		ldr	r2, [r3, #4]
 632 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 633 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 634 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 635 0020 4FF00101 		mov	r1, #1
 636 0024 01FA03F3 		lsl	r3, r1, r3
 637 0028 5360     		str	r3, [r2, #4]
 321:../Main.c     **** 	delay(300);
 638              		.loc 1 321 0
 639 002a 4FF49670 		mov	r0, #300
 640 002e FFF7FEFF 		bl	delay
 322:../Main.c     **** 	IO004_ResetPin(CLK1);
 641              		.loc 1 322 0
 642 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 643 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 644 003a 5A68     		ldr	r2, [r3, #4]
 645 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 646 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 647 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 648 0046 4FF48031 		mov	r1, #65536
 649 004a 01FA03F3 		lsl	r3, r1, r3
 650 004e 5360     		str	r3, [r2, #4]
 323:../Main.c     **** }
 651              		.loc 1 323 0
 652 0050 80BD     		pop	{r7, pc}
 653              		.cfi_endproc
 654              	.LFE118:
 656 0052 00BF     		.section	.text.configure_R,"ax",%progbits
 657              		.align	2
 658              		.global	configure_R
 659              		.thumb
 660              		.thumb_func
 662              	configure_R:
 663              	.LFB119:
 324:../Main.c     **** 
 325:../Main.c     **** void configure_R() {
 664              		.loc 1 325 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 8
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 0000 80B5     		push	{r7, lr}
 669              	.LCFI18:
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673 0002 82B0     		sub	sp, sp, #8
 674              	.LCFI19:
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              	.LCFI20:
 678              		.cfi_def_cfa_register 7
 326:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 327:../Main.c     **** 	configuration[0] = 0xC5; //RF_CH# e OP_MODE 0b11000101
 679              		.loc 1 327 0
 680 0006 40F20003 		movw	r3, #:lower16:configuration
 681 000a C0F20003 		movt	r3, #:upper16:configuration
 682 000e 4FF0C502 		mov	r2, #197
 683 0012 1A70     		strb	r2, [r3, #0]
 328:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 684              		.loc 1 328 0
 685 0014 40F20003 		movw	r3, #:lower16:configuration
 686 0018 C0F20003 		movt	r3, #:upper16:configuration
 687 001c 4FF04F02 		mov	r2, #79
 688 0020 5A70     		strb	r2, [r3, #1]
 329:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 689              		.loc 1 329 0
 690 0022 40F20003 		movw	r3, #:lower16:configuration
 691 0026 C0F20003 		movt	r3, #:upper16:configuration
 692 002a 4FF0A302 		mov	r2, #163
 693 002e 9A70     		strb	r2, [r3, #2]
 330:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 694              		.loc 1 330 0
 695 0030 40F20003 		movw	r3, #:lower16:configuration
 696 0034 C0F20003 		movt	r3, #:upper16:configuration
 697 0038 4FF0EE02 		mov	r2, #238
 698 003c DA70     		strb	r2, [r3, #3]
 331:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 699              		.loc 1 331 0
 700 003e 40F20003 		movw	r3, #:lower16:configuration
 701 0042 C0F20003 		movt	r3, #:upper16:configuration
 702 0046 4FF0DD02 		mov	r2, #221
 703 004a 1A71     		strb	r2, [r3, #4]
 332:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 704              		.loc 1 332 0
 705 004c 40F20003 		movw	r3, #:lower16:configuration
 706 0050 C0F20003 		movt	r3, #:upper16:configuration
 707 0054 4FF0CC02 		mov	r2, #204
 708 0058 5A71     		strb	r2, [r3, #5]
 333:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 709              		.loc 1 333 0
 710 005a 40F20003 		movw	r3, #:lower16:configuration
 711 005e C0F20003 		movt	r3, #:upper16:configuration
 712 0062 4FF0BB02 		mov	r2, #187
 713 0066 9A71     		strb	r2, [r3, #6]
 334:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 714              		.loc 1 334 0
 715 0068 40F20003 		movw	r3, #:lower16:configuration
 716 006c C0F20003 		movt	r3, #:upper16:configuration
 717 0070 4FF0AA02 		mov	r2, #170
 718 0074 DA71     		strb	r2, [r3, #7]
 335:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 719              		.loc 1 335 0
 720 0076 40F20003 		movw	r3, #:lower16:configuration
 721 007a C0F20003 		movt	r3, #:upper16:configuration
 722 007e 4FF00002 		mov	r2, #0
 723 0082 1A72     		strb	r2, [r3, #8]
 336:../Main.c     **** 	configuration[9] = 0b00000000;
 724              		.loc 1 336 0
 725 0084 40F20003 		movw	r3, #:lower16:configuration
 726 0088 C0F20003 		movt	r3, #:upper16:configuration
 727 008c 4FF00002 		mov	r2, #0
 728 0090 5A72     		strb	r2, [r3, #9]
 337:../Main.c     **** 	configuration[10] = 0b00000000;
 729              		.loc 1 337 0
 730 0092 40F20003 		movw	r3, #:lower16:configuration
 731 0096 C0F20003 		movt	r3, #:upper16:configuration
 732 009a 4FF00002 		mov	r2, #0
 733 009e 9A72     		strb	r2, [r3, #10]
 338:../Main.c     **** 	configuration[11] = 0b00000000;
 734              		.loc 1 338 0
 735 00a0 40F20003 		movw	r3, #:lower16:configuration
 736 00a4 C0F20003 		movt	r3, #:upper16:configuration
 737 00a8 4FF00002 		mov	r2, #0
 738 00ac DA72     		strb	r2, [r3, #11]
 339:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 739              		.loc 1 339 0
 740 00ae 40F20003 		movw	r3, #:lower16:configuration
 741 00b2 C0F20003 		movt	r3, #:upper16:configuration
 742 00b6 4FF00002 		mov	r2, #0
 743 00ba 1A73     		strb	r2, [r3, #12]
 340:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 744              		.loc 1 340 0
 745 00bc 40F20003 		movw	r3, #:lower16:configuration
 746 00c0 C0F20003 		movt	r3, #:upper16:configuration
 747 00c4 4FF02802 		mov	r2, #40
 748 00c8 5A73     		strb	r2, [r3, #13]
 341:../Main.c     **** 	configuration[14] = 0b00000000;
 749              		.loc 1 341 0
 750 00ca 40F20003 		movw	r3, #:lower16:configuration
 751 00ce C0F20003 		movt	r3, #:upper16:configuration
 752 00d2 4FF00002 		mov	r2, #0
 753 00d6 9A73     		strb	r2, [r3, #14]
 342:../Main.c     **** 
 343:../Main.c     **** 	IO004_ResetPin(CE);
 754              		.loc 1 343 0
 755 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 756 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 757 00e0 5A68     		ldr	r2, [r3, #4]
 758 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 759 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 760 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 761 00ec 4FF48031 		mov	r1, #65536
 762 00f0 01FA03F3 		lsl	r3, r1, r3
 763 00f4 5360     		str	r3, [r2, #4]
 344:../Main.c     **** 	IO004_SetPin(CS);
 764              		.loc 1 344 0
 765 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 766 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 767 00fe 5A68     		ldr	r2, [r3, #4]
 768 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 769 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 770 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 771 010a 4FF00101 		mov	r1, #1
 772 010e 01FA03F3 		lsl	r3, r1, r3
 773 0112 5360     		str	r3, [r2, #4]
 345:../Main.c     **** 	int i, j;
 346:../Main.c     **** 	for (i = 14; i > -1; i--) {
 774              		.loc 1 346 0
 775 0114 4FF00E03 		mov	r3, #14
 776 0118 7B60     		str	r3, [r7, #4]
 777 011a 3FE0     		b	.L25
 778              	.L30:
 347:../Main.c     **** 		for (j = 7; j > -1; j--) {
 779              		.loc 1 347 0
 780 011c 4FF00703 		mov	r3, #7
 781 0120 3B60     		str	r3, [r7, #0]
 782 0122 34E0     		b	.L26
 783              	.L29:
 348:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 784              		.loc 1 348 0
 785 0124 40F20003 		movw	r3, #:lower16:configuration
 786 0128 C0F20003 		movt	r3, #:upper16:configuration
 787 012c 7A68     		ldr	r2, [r7, #4]
 788 012e 9B18     		adds	r3, r3, r2
 789 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 790 0132 1A46     		mov	r2, r3
 791 0134 4FF00101 		mov	r1, #1
 792 0138 3B68     		ldr	r3, [r7, #0]
 793 013a 01FA03F3 		lsl	r3, r1, r3
 794 013e 1340     		ands	r3, r3, r2
 795 0140 002B     		cmp	r3, #0
 796 0142 0FDD     		ble	.L27
 349:../Main.c     **** 				IO004_SetPin(DATA);
 797              		.loc 1 349 0
 798 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 799 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 800 014c 5A68     		ldr	r2, [r3, #4]
 801 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 802 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 803 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 804 0158 4FF00101 		mov	r1, #1
 805 015c 01FA03F3 		lsl	r3, r1, r3
 806 0160 5360     		str	r3, [r2, #4]
 807 0162 0EE0     		b	.L28
 808              	.L27:
 350:../Main.c     **** 			else
 351:../Main.c     **** 				IO004_ResetPin(DATA);
 809              		.loc 1 351 0
 810 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 811 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 812 016c 5A68     		ldr	r2, [r3, #4]
 813 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 814 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 815 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 816 0178 4FF48031 		mov	r1, #65536
 817 017c 01FA03F3 		lsl	r3, r1, r3
 818 0180 5360     		str	r3, [r2, #4]
 819              	.L28:
 352:../Main.c     **** 			;
 353:../Main.c     **** 			pulse_R();
 820              		.loc 1 353 0
 821 0182 FFF7FEFF 		bl	pulse_R
 347:../Main.c     **** 		for (j = 7; j > -1; j--) {
 822              		.loc 1 347 0
 823 0186 3B68     		ldr	r3, [r7, #0]
 824 0188 03F1FF33 		add	r3, r3, #-1
 825 018c 3B60     		str	r3, [r7, #0]
 826              	.L26:
 347:../Main.c     **** 		for (j = 7; j > -1; j--) {
 827              		.loc 1 347 0 is_stmt 0 discriminator 1
 828 018e 3B68     		ldr	r3, [r7, #0]
 829 0190 002B     		cmp	r3, #0
 830 0192 C7DA     		bge	.L29
 346:../Main.c     **** 	for (i = 14; i > -1; i--) {
 831              		.loc 1 346 0 is_stmt 1
 832 0194 7B68     		ldr	r3, [r7, #4]
 833 0196 03F1FF33 		add	r3, r3, #-1
 834 019a 7B60     		str	r3, [r7, #4]
 835              	.L25:
 346:../Main.c     **** 	for (i = 14; i > -1; i--) {
 836              		.loc 1 346 0 is_stmt 0 discriminator 1
 837 019c 7B68     		ldr	r3, [r7, #4]
 838 019e 002B     		cmp	r3, #0
 839 01a0 BCDA     		bge	.L30
 354:../Main.c     **** 		}
 355:../Main.c     **** 	}
 356:../Main.c     **** 	IO004_DisableOutputDriver(&DATA, IO004_CONT_POLLING);
 840              		.loc 1 356 0 is_stmt 1
 841 01a2 40F20000 		movw	r0, #:lower16:IO004_Handle4
 842 01a6 C0F20000 		movt	r0, #:upper16:IO004_Handle4
 843 01aa 4FF00301 		mov	r1, #3
 844 01ae FFF7FEFF 		bl	IO004_DisableOutputDriver
 357:../Main.c     **** 	IO004_ResetPin(CS);
 845              		.loc 1 357 0
 846 01b2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 847 01b6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 848 01ba 5A68     		ldr	r2, [r3, #4]
 849 01bc 40F20003 		movw	r3, #:lower16:IO004_Handle1
 850 01c0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 851 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 852 01c6 4FF48031 		mov	r1, #65536
 853 01ca 01FA03F3 		lsl	r3, r1, r3
 854 01ce 5360     		str	r3, [r2, #4]
 358:../Main.c     **** 	IO004_SetPin(CE);
 855              		.loc 1 358 0
 856 01d0 40F20003 		movw	r3, #:lower16:IO004_Handle6
 857 01d4 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 858 01d8 5A68     		ldr	r2, [r3, #4]
 859 01da 40F20003 		movw	r3, #:lower16:IO004_Handle6
 860 01de C0F20003 		movt	r3, #:upper16:IO004_Handle6
 861 01e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 862 01e4 4FF00101 		mov	r1, #1
 863 01e8 01FA03F3 		lsl	r3, r1, r3
 864 01ec 5360     		str	r3, [r2, #4]
 359:../Main.c     **** 	delay(50000);
 865              		.loc 1 359 0
 866 01ee 4CF25030 		movw	r0, #50000
 867 01f2 FFF7FEFF 		bl	delay
 360:../Main.c     **** }
 868              		.loc 1 360 0
 869 01f6 07F10807 		add	r7, r7, #8
 870 01fa BD46     		mov	sp, r7
 871 01fc 80BD     		pop	{r7, pc}
 872              		.cfi_endproc
 873              	.LFE119:
 875 01fe 00BF     		.section	.text.delay,"ax",%progbits
 876              		.align	2
 877              		.global	delay
 878              		.thumb
 879              		.thumb_func
 881              	delay:
 882              	.LFB120:
 361:../Main.c     **** 
 362:../Main.c     **** /***************************************************/
 363:../Main.c     **** /*****************FUNCOES GERAIS********************/
 364:../Main.c     **** /***************************************************/
 365:../Main.c     **** 
 366:../Main.c     **** void delay(long unsigned int i) {
 883              		.loc 1 366 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 8
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 80B4     		push	{r7}
 889              	.LCFI21:
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 7, -4
 892 0002 83B0     		sub	sp, sp, #12
 893              	.LCFI22:
 894              		.cfi_def_cfa_offset 16
 895 0004 00AF     		add	r7, sp, #0
 896              	.LCFI23:
 897              		.cfi_def_cfa_register 7
 898 0006 7860     		str	r0, [r7, #4]
 367:../Main.c     **** 	while (i--) {
 899              		.loc 1 367 0
 900 0008 00E0     		b	.L32
 901              	.L33:
 902              	.LBB4:
 903              	.LBB5:
 904              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 905              		.loc 2 327 0
 906              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 907 000a 00BF     		nop
 908              	@ 0 "" 2
 909              		.thumb
 910              	.L32:
 911              	.LBE5:
 912              	.LBE4:
 913              		.loc 1 367 0 discriminator 1
 914 000c 7B68     		ldr	r3, [r7, #4]
 915 000e 002B     		cmp	r3, #0
 916 0010 0CBF     		ite	eq
 917 0012 0023     		moveq	r3, #0
 918 0014 0123     		movne	r3, #1
 919 0016 DBB2     		uxtb	r3, r3
 920 0018 7A68     		ldr	r2, [r7, #4]
 921 001a 02F1FF32 		add	r2, r2, #-1
 922 001e 7A60     		str	r2, [r7, #4]
 923 0020 002B     		cmp	r3, #0
 924 0022 F2D1     		bne	.L33
 368:../Main.c     **** 
 369:../Main.c     **** 		__NOP();
 370:../Main.c     **** 	}
 371:../Main.c     **** }
 925              		.loc 1 371 0
 926 0024 07F10C07 		add	r7, r7, #12
 927 0028 BD46     		mov	sp, r7
 928 002a 80BC     		pop	{r7}
 929 002c 7047     		bx	lr
 930              		.cfi_endproc
 931              	.LFE120:
 933 002e 00BF     		.text
 934              	.Letext0:
 935              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 936              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 937              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 938              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 939              		.file 7 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 940              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 941              		.file 9 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000f configuration
                            *COM*:00000005 data_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:22     .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:27     .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:662    .text.configure_R:00000000 configure_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:205    .text.start_PWM_signals:00000000 start_PWM_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:490    .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:278    .text.update_PWM_signals:00000000 update_PWM_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:85     .text.start_PWM_signals_test:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:90     .text.start_PWM_signals_test:00000000 start_PWM_signals_test
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:142    .text.update_PWM_signals_test:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:147    .text.update_PWM_signals_test:00000000 update_PWM_signals_test
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:194    .text.update_PWM_signals_test:00000058 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:200    .text.start_PWM_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:273    .text.update_PWM_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:474    .text.update_PWM_signals:000001e4 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:485    .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:881    .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:611    .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:606    .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:657    .text.configure_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccgWhdYf.s:876    .text.delay:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle5
PWMSP001_Handle0
PWMSP001_Start
PWMSP001_SetPwmFreq
PWMSP001_SetDutyCycle
PWMSP001_Handle1
PWMSP001_Handle2
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_DisableOutputDriver
