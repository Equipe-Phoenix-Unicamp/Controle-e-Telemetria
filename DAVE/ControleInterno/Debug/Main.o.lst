   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	configuration,15,4
  20              		.comm	data_R,5,4
  21              		.comm	status_ticks,4,4
  22              		.global	ticks
  23              		.bss
  24              		.align	2
  27              	ticks:
  28 0000 00000000 		.space	4
  29              		.comm	block_pwm_update_tick_left,4,4
  30              		.comm	block_pwm_update_tick_right,4,4
  31              		.global	last_direction_right
  32              		.data
  35              	last_direction_right:
  36 0000 02       		.byte	2
  37              		.global	last_direction_left
  40              	last_direction_left:
  41 0001 02       		.byte	2
  42              		.global	block_left
  43              		.bss
  46              	block_left:
  47 0004 00       		.space	1
  48              		.global	block_right
  51              	block_right:
  52 0005 00       		.space	1
  53              		.global	status_block_left
  54 0006 0000     		.data
  57              	status_block_left:
  58 0002 02       		.byte	2
  59              		.global	status_block_right
  62              	status_block_right:
  63 0003 02       		.byte	2
  64              		.section	.text.main,"ax",%progbits
  65              		.align	2
  66              		.global	main
  67              		.thumb
  68              		.thumb_func
  70              	main:
  71              	.LFB112:
  72              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     ****  BIT 0: BLAH2
  10:../Main.c     ****  BIT 1: BUZINA
  11:../Main.c     ****  BIT 2: ENABLE
  12:../Main.c     ****  BIT 3: ALBH2
  13:../Main.c     ****  BIT 4: BLAH1
  14:../Main.c     ****  BIT 5: ALBH1
  15:../Main.c     ****  */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 4 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** 
  40:../Main.c     **** #include <DAVE3.h>
  41:../Main.c     **** 
  42:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  43:../Main.c     **** /***************************************************/
  44:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  45:../Main.c     **** /***************************************************/
  46:../Main.c     **** 
  47:../Main.c     **** #define NULL 0
  48:../Main.c     **** #define _TRUE 1
  49:../Main.c     **** #define _FALSE 0
  50:../Main.c     **** //Defines referentes aos limites
  51:../Main.c     **** #define PWM_LIM 60
  52:../Main.c     **** 
  53:../Main.c     **** //Defines referentes ao protocolo
  54:../Main.c     **** #define BYTES_TO_RECEIVE 5
  55:../Main.c     **** //Defines referentes ao byte DADO 3
  56:../Main.c     **** #define	BLAH2		0		//LEFT-BACK
  57:../Main.c     **** #define	BUZINA		1		//USELESS
  58:../Main.c     **** #define	ENABLE		2		//USELESS
  59:../Main.c     **** #define	ALBH2		3		//LEFT-FRONT
  60:../Main.c     **** #define	BLAH1		4		//RIGHT-BACK
  61:../Main.c     **** #define	ALBH1		5		//RIGHT-FRONT
  62:../Main.c     **** #define	LEFT_BACK	BLAH2
  63:../Main.c     **** #define	LEFT_FRONT	ALBH2
  64:../Main.c     **** #define	RIGHT_BACK	BLAH1
  65:../Main.c     **** #define	RIGHT_FRONT	ALBH1
  66:../Main.c     **** 
  67:../Main.c     **** //Defines referentes ao transceptor
  68:../Main.c     **** #define CS	 	IO004_Handle1
  69:../Main.c     **** #define CLK1 	IO004_Handle2
  70:../Main.c     **** #define DATA 	IO004_Handle4
  71:../Main.c     **** #define DR1		IO004_Handle5
  72:../Main.c     **** #define CE 		IO004_Handle6
  73:../Main.c     **** 
  74:../Main.c     **** // Defines referentes aos sinais PWM para os ESCs
  75:../Main.c     **** #define PWM_MOTOR_RIGHT &PWMSP001_Handle0
  76:../Main.c     **** #define FREQ_MOTOR_LOCOMOTION 60 //Hz
  77:../Main.c     **** #define PER_MOTOR_LOCOMOTION (1.0f/FREQ_MOTOR_LOCOMOTION) //s
  78:../Main.c     **** #define MAX_PER_MOTOR_LOCOMOTION 0.002f //s
  79:../Main.c     **** #define MIN_PER_MOTOR_LOCOMOTION 0.001f //s
  80:../Main.c     **** #define ZERO_PER_MOTOR_LOCOMOTION 0.0015f //s
  81:../Main.c     **** #define FREQ_MOTOR_WEAPON 60 //Hz
  82:../Main.c     **** #define PER_MOTOR_WEAPON (1.0f/FREQ_MOTOR_WEAPON) //s
  83:../Main.c     **** #define MAX_PER_MOTOR_WEAPON 0.002f //s
  84:../Main.c     **** #define MIN_PER_MOTOR_WEAPON 0.001f //s
  85:../Main.c     **** #define ZERO_PER_MOTOR_WEAPON 0.001f //s
  86:../Main.c     **** #define PWM_MOTOR_LEFT &PWMSP001_Handle1
  87:../Main.c     **** #define PWM_MOTOR_WEAPON &PWMSP001_Handle2
  88:../Main.c     **** #define PWM_MOTOR_CUT_OFF 20
  89:../Main.c     **** 
  90:../Main.c     **** //Defines referentes ao fail safe
  91:../Main.c     **** #define RUNNING 1
  92:../Main.c     **** #define FAIL 0
  93:../Main.c     **** #define TICK_FAIL_SAFE 5000 //0.5s
  94:../Main.c     **** //defines referentes ao controle de direcao locomocao
  95:../Main.c     **** #define DIR_NULL 2
  96:../Main.c     **** #define DIR_FRONT 1
  97:../Main.c     **** #define DIR_BACK 0
  98:../Main.c     **** #define TICK_BREAK_PWM 50000 //150ms
  99:../Main.c     **** #define TICK_ZERO_PWM 50000 //500ms
 100:../Main.c     **** #define STATUS_BREAK 0
 101:../Main.c     **** #define STATUS_ZERO 1
 102:../Main.c     **** #define STATUS_NORMAL 2
 103:../Main.c     **** //==============================
 104:../Main.c     **** 
 105:../Main.c     **** /***************************************************/
 106:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 107:../Main.c     **** /***************************************************/
 108:../Main.c     **** 
 109:../Main.c     **** void delay(long unsigned int i);
 110:../Main.c     **** void pulse_R();
 111:../Main.c     **** void configure_R();
 112:../Main.c     **** void read_R();
 113:../Main.c     **** void delay(long unsigned int i);
 114:../Main.c     **** void updateButtonStates();
 115:../Main.c     **** void start_PWM_signals(void);
 116:../Main.c     **** void start_PWM_signals_test(void);
 117:../Main.c     **** void update_PWM_signals(void);
 118:../Main.c     **** void update_PWM_signals_test(float per_teste);
 119:../Main.c     **** void Tick_Handler(void);
 120:../Main.c     **** void delayms(uint32_t delay_ms);
 121:../Main.c     **** void delayus(uint32_t delay_us);
 122:../Main.c     **** void Software_Timers_Init();
 123:../Main.c     **** 
 124:../Main.c     **** /***************************************************/
 125:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 126:../Main.c     **** /***************************************************/
 127:../Main.c     **** 
 128:../Main.c     **** char configuration[15];
 129:../Main.c     **** unsigned char data_R[BYTES_TO_RECEIVE];
 130:../Main.c     **** int status_ticks;
 131:../Main.c     **** uint32_t ticks = 0UL;
 132:../Main.c     **** int block_pwm_update_tick_left;
 133:../Main.c     **** int block_pwm_update_tick_right;
 134:../Main.c     **** unsigned char last_direction_right = DIR_NULL;
 135:../Main.c     **** unsigned char last_direction_left = DIR_NULL;
 136:../Main.c     **** unsigned char block_left = 0;
 137:../Main.c     **** unsigned char block_right = 0;
 138:../Main.c     **** unsigned char status_block_left = STATUS_NORMAL;
 139:../Main.c     **** unsigned char status_block_right = STATUS_NORMAL;
 140:../Main.c     **** 
 141:../Main.c     **** /***************************************************/
 142:../Main.c     **** /***********************MAIN************************/
 143:../Main.c     **** /***************************************************/
 144:../Main.c     **** 
 145:../Main.c     **** int main(void) {
  73              		.loc 1 145 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              	.LCFI0:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 82B0     		sub	sp, sp, #8
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 16
  85 0004 00AF     		add	r7, sp, #0
  86              	.LCFI2:
  87              		.cfi_def_cfa_register 7
 146:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 147:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
  88              		.loc 1 147 0
  89 0006 FFF7FEFF 		bl	DAVE_Init
 148:../Main.c     **** 	/*Etapa de inicializacao*/
 149:../Main.c     **** 	configure_R(); //Configura transceptor como receptor
  90              		.loc 1 149 0
  91 000a FFF7FEFF 		bl	configure_R
 150:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 151:../Main.c     **** 	//IO004_SetPin(LED2);
 152:../Main.c     **** 
 153:../Main.c     **** 	start_PWM_signals();
  92              		.loc 1 153 0
  93 000e FFF7FEFF 		bl	start_PWM_signals
 154:../Main.c     **** //	start_PWM_signals_test();
 155:../Main.c     **** 
 156:../Main.c     **** 	float per_teste = MIN_PER_MOTOR_LOCOMOTION;
  94              		.loc 1 156 0
  95 0012 41F26F23 		movw	r3, #4719
  96 0016 C3F68323 		movt	r3, 14979
  97 001a 7B60     		str	r3, [r7, #4]	@ float
 157:../Main.c     **** 	char status = RUNNING;
  98              		.loc 1 157 0
  99 001c 4FF00103 		mov	r3, #1
 100 0020 FB70     		strb	r3, [r7, #3]
 158:../Main.c     **** 	status_ticks = 0;
 101              		.loc 1 158 0
 102 0022 40F20003 		movw	r3, #:lower16:status_ticks
 103 0026 C0F20003 		movt	r3, #:upper16:status_ticks
 104 002a 4FF00002 		mov	r2, #0
 105 002e 1A60     		str	r2, [r3, #0]
 159:../Main.c     **** 	ticks = 0;
 106              		.loc 1 159 0
 107 0030 40F20003 		movw	r3, #:lower16:ticks
 108 0034 C0F20003 		movt	r3, #:upper16:ticks
 109 0038 4FF00002 		mov	r2, #0
 110 003c 1A60     		str	r2, [r3, #0]
 160:../Main.c     **** 	block_pwm_update_tick_left = 0;
 111              		.loc 1 160 0
 112 003e 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 113 0042 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 114 0046 4FF00002 		mov	r2, #0
 115 004a 1A60     		str	r2, [r3, #0]
 161:../Main.c     **** 	block_pwm_update_tick_right = 0;
 116              		.loc 1 161 0
 117 004c 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 118 0050 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 119 0054 4FF00002 		mov	r2, #0
 120 0058 1A60     		str	r2, [r3, #0]
 162:../Main.c     **** 	Software_Timers_Init();
 121              		.loc 1 162 0
 122 005a FFF7FEFF 		bl	Software_Timers_Init
 123 005e 00E0     		b	.L4
 124              	.L5:
 163:../Main.c     **** 
 164:../Main.c     **** 	/*Loop do codigo*/
 165:../Main.c     **** 	while (1) {
 166:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 167:../Main.c     **** 			status_ticks = 0;
 168:../Main.c     **** 			read_R();
 169:../Main.c     **** 			update_PWM_signals();
 170:../Main.c     **** 		} else {
 171:../Main.c     **** 			if (status_ticks > TICK_FAIL_SAFE) { //0.5s
 172:../Main.c     **** 				status = FAIL;
 173:../Main.c     **** 				start_PWM_signals();
 174:../Main.c     **** 			}
 175:../Main.c     **** 		}
 176:../Main.c     **** 
 177:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 178:../Main.c     **** //				100.0f * 0.0016f / PER_MOTOR_LOCOMOTION);
 179:../Main.c     **** //
 180:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 181:../Main.c     **** //				100.0f * 0.0016f / PER_MOTOR_LOCOMOTION);
 182:../Main.c     **** //
 183:../Main.c     **** //		int teste = 30000;
 184:../Main.c     **** //		while (teste--)
 185:../Main.c     **** //			delay(1000000);
 186:../Main.c     **** //
 187:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 188:../Main.c     **** //				100.0f * 0.0014f / PER_MOTOR_LOCOMOTION);
 189:../Main.c     **** //
 190:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 191:../Main.c     **** //				100.0f * 0.0014f / PER_MOTOR_LOCOMOTION);
 192:../Main.c     **** //
 193:../Main.c     **** //		teste = 30000;
 194:../Main.c     **** //		while (teste--)
 195:../Main.c     **** //			delay(1000000);
 196:../Main.c     **** 
 197:../Main.c     **** //		if (IO004_ReadPin(IO004_Handle7) == 0) {
 198:../Main.c     **** //					while (IO004_ReadPin(IO004_Handle7) == 0)
 199:../Main.c     **** //						;
 200:../Main.c     **** //
 201:../Main.c     **** //					if(per_teste >= MAX_PER_MOTOR_LOCOMOTION)
 202:../Main.c     **** //						status = 1;
 203:../Main.c     **** //
 204:../Main.c     **** //					if(per_teste <= MIN_PER_MOTOR_LOCOMOTION)
 205:../Main.c     **** //						status = 0;
 206:../Main.c     **** //
 207:../Main.c     **** //					if(status)
 208:../Main.c     **** //						per_teste -= 0.00005;
 209:../Main.c     **** //					else
 210:../Main.c     **** //						per_teste += 0.00005;
 211:../Main.c     **** //
 212:../Main.c     **** //					update_PWM_signals_test( per_teste);
 213:../Main.c     **** //		}
 214:../Main.c     **** 	}
 125              		.loc 1 214 0
 126 0060 00BF     		nop
 127              	.L4:
 166:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 128              		.loc 1 166 0
 129 0062 40F20003 		movw	r3, #:lower16:IO004_Handle5
 130 0066 C0F20003 		movt	r3, #:upper16:IO004_Handle5
 131 006a 5B68     		ldr	r3, [r3, #4]
 132 006c 5A6A     		ldr	r2, [r3, #36]
 133 006e 40F20003 		movw	r3, #:lower16:IO004_Handle5
 134 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle5
 135 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 136 0078 22FA03F3 		lsr	r3, r2, r3
 137 007c 03F00103 		and	r3, r3, #1
 138 0080 002B     		cmp	r3, #0
 139 0082 0BD0     		beq	.L2
 167:../Main.c     **** 			status_ticks = 0;
 140              		.loc 1 167 0
 141 0084 40F20003 		movw	r3, #:lower16:status_ticks
 142 0088 C0F20003 		movt	r3, #:upper16:status_ticks
 143 008c 4FF00002 		mov	r2, #0
 144 0090 1A60     		str	r2, [r3, #0]
 168:../Main.c     **** 			read_R();
 145              		.loc 1 168 0
 146 0092 FFF7FEFF 		bl	read_R
 169:../Main.c     **** 			update_PWM_signals();
 147              		.loc 1 169 0
 148 0096 FFF7FEFF 		bl	update_PWM_signals
 149              		.loc 1 214 0
 150 009a E1E7     		b	.L5
 151              	.L2:
 171:../Main.c     **** 			if (status_ticks > TICK_FAIL_SAFE) { //0.5s
 152              		.loc 1 171 0
 153 009c 40F20003 		movw	r3, #:lower16:status_ticks
 154 00a0 C0F20003 		movt	r3, #:upper16:status_ticks
 155 00a4 1A68     		ldr	r2, [r3, #0]
 156 00a6 41F28833 		movw	r3, #5000
 157 00aa 9A42     		cmp	r2, r3
 158 00ac D8DD     		ble	.L5
 172:../Main.c     **** 				status = FAIL;
 159              		.loc 1 172 0
 160 00ae 4FF00003 		mov	r3, #0
 161 00b2 FB70     		strb	r3, [r7, #3]
 173:../Main.c     **** 				start_PWM_signals();
 162              		.loc 1 173 0
 163 00b4 FFF7FEFF 		bl	start_PWM_signals
 164              		.loc 1 214 0
 165 00b8 D2E7     		b	.L5
 166              		.cfi_endproc
 167              	.LFE112:
 169 00ba 00BF     		.section	.text.start_PWM_signals,"ax",%progbits
 170              		.align	2
 171              		.global	start_PWM_signals
 172              		.thumb
 173              		.thumb_func
 175              	start_PWM_signals:
 176              	.LFB113:
 215:../Main.c     **** 	return 0;
 216:../Main.c     **** }
 217:../Main.c     **** 
 218:../Main.c     **** //void start_PWM_signals_test(void) {
 219:../Main.c     **** //
 220:../Main.c     **** //	PWMSP001_Start(PWM_MOTOR_RIGHT);
 221:../Main.c     **** //	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 222:../Main.c     **** //	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 223:../Main.c     **** //			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 224:../Main.c     **** //
 225:../Main.c     **** //	PWMSP001_Start(PWM_MOTOR_LEFT);
 226:../Main.c     **** //	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 227:../Main.c     **** //	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 228:../Main.c     **** //			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 229:../Main.c     **** //
 230:../Main.c     **** //}
 231:../Main.c     **** //void update_PWM_signals_test(float per_teste) {
 232:../Main.c     **** //
 233:../Main.c     **** //	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 234:../Main.c     **** //			100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 235:../Main.c     **** //
 236:../Main.c     **** //	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 237:../Main.c     **** //			100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 238:../Main.c     **** //}
 239:../Main.c     **** 
 240:../Main.c     **** /***************************************************/
 241:../Main.c     **** /**********INICIALIZA OS SINAIS DE PWM COM *********/
 242:../Main.c     **** /****PERIODOS CORRETOS E CICLOS PARA MOTOR PARADO***/
 243:../Main.c     **** /***************************************************/
 244:../Main.c     **** 
 245:../Main.c     **** void start_PWM_signals(void) {
 177              		.loc 1 245 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 00AF     		add	r7, sp, #0
 187              	.LCFI4:
 188              		.cfi_def_cfa_register 7
 246:../Main.c     **** 
 247:../Main.c     **** //	TODO: Pinos dos motores
 248:../Main.c     **** 
 249:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 189              		.loc 1 249 0
 190 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 191 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 192 000c FFF7FEFF 		bl	PWMSP001_Start
 250:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 193              		.loc 1 250 0
 194 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 195 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 196 0018 4FF00001 		mov	r1, #0
 197 001c C4F27021 		movt	r1, 17008
 198 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 251:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 199              		.loc 1 251 0
 200 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 201 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 202 002c 4FF00001 		mov	r1, #0
 203 0030 C4F21011 		movt	r1, 16656
 204 0034 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 252:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 253:../Main.c     **** 
 254:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 205              		.loc 1 254 0
 206 0038 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 207 003c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 208 0040 FFF7FEFF 		bl	PWMSP001_Start
 255:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 209              		.loc 1 255 0
 210 0044 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 211 0048 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 212 004c 4FF00001 		mov	r1, #0
 213 0050 C4F27021 		movt	r1, 17008
 214 0054 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 256:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 215              		.loc 1 256 0
 216 0058 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 217 005c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 218 0060 4FF00001 		mov	r1, #0
 219 0064 C4F21011 		movt	r1, 16656
 220 0068 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 257:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_LOCOMOTION / PER_MOTOR_LOCOMOTION);
 258:../Main.c     **** 
 259:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_WEAPON);
 221              		.loc 1 259 0
 222 006c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 223 0070 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 224 0074 FFF7FEFF 		bl	PWMSP001_Start
 260:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_WEAPON, FREQ_MOTOR_WEAPON);
 225              		.loc 1 260 0
 226 0078 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 227 007c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 228 0080 4FF00001 		mov	r1, #0
 229 0084 C4F27021 		movt	r1, 17008
 230 0088 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 261:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 231              		.loc 1 261 0
 232 008c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 233 0090 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 234 0094 4FF00001 		mov	r1, #0
 235 0098 C4F2C001 		movt	r1, 16576
 236 009c FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 262:../Main.c     **** 			100.0f * ZERO_PER_MOTOR_WEAPON / PER_MOTOR_WEAPON);
 263:../Main.c     **** 
 264:../Main.c     **** }
 237              		.loc 1 264 0
 238 00a0 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE113:
 242 00a2 00BF     		.section	.text.update_PWM_signals,"ax",%progbits
 243              		.align	2
 244              		.global	update_PWM_signals
 245              		.thumb
 246              		.thumb_func
 248              	update_PWM_signals:
 249              	.LFB114:
 265:../Main.c     **** 
 266:../Main.c     **** void update_PWM_signals(void) {
 250              		.loc 1 266 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 16
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 80B5     		push	{r7, lr}
 255              	.LCFI5:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 84B0     		sub	sp, sp, #16
 260              	.LCFI6:
 261              		.cfi_def_cfa_offset 24
 262 0004 00AF     		add	r7, sp, #0
 263              	.LCFI7:
 264              		.cfi_def_cfa_register 7
 267:../Main.c     **** 
 268:../Main.c     **** //	TODO: Verificar valor de data_R co direita e esquerda
 269:../Main.c     **** 
 270:../Main.c     **** 	//Esquerda data[1]
 271:../Main.c     **** 	//Direita data[2]
 272:../Main.c     **** 
 273:../Main.c     **** 	float per_motor_right = ZERO_PER_MOTOR_LOCOMOTION;
 265              		.loc 1 273 0
 266 0006 49F6A633 		movw	r3, #39846
 267 000a C3F6C423 		movt	r3, 15044
 268 000e FB60     		str	r3, [r7, #12]	@ float
 274:../Main.c     **** 	float per_motor_left = ZERO_PER_MOTOR_LOCOMOTION;
 269              		.loc 1 274 0
 270 0010 49F6A633 		movw	r3, #39846
 271 0014 C3F6C423 		movt	r3, 15044
 272 0018 BB60     		str	r3, [r7, #8]	@ float
 275:../Main.c     **** 	unsigned char direction = data_R[3];
 273              		.loc 1 275 0
 274 001a 40F20003 		movw	r3, #:lower16:data_R
 275 001e C0F20003 		movt	r3, #:upper16:data_R
 276 0022 DB78     		ldrb	r3, [r3, #3]
 277 0024 FB71     		strb	r3, [r7, #7]
 276:../Main.c     **** 	float per_weapon = (data_R[4])
 278              		.loc 1 276 0
 279 0026 40F20003 		movw	r3, #:lower16:data_R
 280 002a C0F20003 		movt	r3, #:upper16:data_R
 281 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 277:../Main.c     **** 			* (MAX_PER_MOTOR_WEAPON - MIN_PER_MOTOR_WEAPON)
 282              		.loc 1 277 0
 283 0030 07EE903A 		fmsr	s15, r3	@ int
 284 0034 B8EEE77A 		fsitos	s14, s15
 285 0038 DFEDD27A 		flds	s15, .L30
 286 003c 27EE277A 		fmuls	s14, s14, s15
 278:../Main.c     **** 			/ 255+ MIN_PER_MOTOR_WEAPON;
 287              		.loc 1 278 0
 288 0040 DFEDD17A 		flds	s15, .L30+4
 289 0044 87EE277A 		fdivs	s14, s14, s15
 276:../Main.c     **** 	float per_weapon = (data_R[4])
 290              		.loc 1 276 0
 291 0048 DFEDCE7A 		flds	s15, .L30
 292 004c 77EE277A 		fadds	s15, s14, s15
 293 0050 C7ED007A 		fsts	s15, [r7, #0]
 279:../Main.c     **** 
 280:../Main.c     **** 	if (((direction & (1 << LEFT_FRONT)) && last_direction_left == DIR_BACK)
 294              		.loc 1 280 0
 295 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 0056 03F00803 		and	r3, r3, #8
 297 005a 002B     		cmp	r3, #0
 298 005c 06D0     		beq	.L8
 299              		.loc 1 280 0 is_stmt 0 discriminator 1
 300 005e 40F20003 		movw	r3, #:lower16:last_direction_left
 301 0062 C0F20003 		movt	r3, #:upper16:last_direction_left
 302 0066 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 303 0068 002B     		cmp	r3, #0
 304 006a 0BD0     		beq	.L9
 305              	.L8:
 281:../Main.c     **** 			|| ((direction & (1 << LEFT_BACK))
 306              		.loc 1 281 0 is_stmt 1
 307 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 308 006e 03F00103 		and	r3, r3, #1
 309 0072 002B     		cmp	r3, #0
 310 0074 36D0     		beq	.L10
 282:../Main.c     **** 					&& last_direction_left == DIR_FRONT)) {
 311              		.loc 1 282 0
 312 0076 40F20003 		movw	r3, #:lower16:last_direction_left
 313 007a C0F20003 		movt	r3, #:upper16:last_direction_left
 314 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 315 0080 012B     		cmp	r3, #1
 316 0082 2FD1     		bne	.L10
 317              	.L9:
 283:../Main.c     **** 		if (!block_left) {
 318              		.loc 1 283 0
 319 0084 40F20003 		movw	r3, #:lower16:block_left
 320 0088 C0F20003 		movt	r3, #:upper16:block_left
 321 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 322 008e 002B     		cmp	r3, #0
 323 0090 1AD1     		bne	.L11
 284:../Main.c     **** 			block_left = _TRUE;
 324              		.loc 1 284 0
 325 0092 40F20003 		movw	r3, #:lower16:block_left
 326 0096 C0F20003 		movt	r3, #:upper16:block_left
 327 009a 4FF00102 		mov	r2, #1
 328 009e 1A70     		strb	r2, [r3, #0]
 285:../Main.c     **** 			block_pwm_update_tick_left = TICK_BREAK_PWM;
 329              		.loc 1 285 0
 330 00a0 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 331 00a4 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 332 00a8 4CF25032 		movw	r2, #50000
 333 00ac 1A60     		str	r2, [r3, #0]
 286:../Main.c     **** 			per_motor_left = MIN_PER_MOTOR_LOCOMOTION;
 334              		.loc 1 286 0
 335 00ae 41F26F23 		movw	r3, #4719
 336 00b2 C3F68323 		movt	r3, 14979
 337 00b6 BB60     		str	r3, [r7, #8]	@ float
 287:../Main.c     **** 			status_block_left = STATUS_BREAK;
 338              		.loc 1 287 0
 339 00b8 40F20003 		movw	r3, #:lower16:status_block_left
 340 00bc C0F20003 		movt	r3, #:upper16:status_block_left
 341 00c0 4FF00002 		mov	r2, #0
 342 00c4 1A70     		strb	r2, [r3, #0]
 343 00c6 0DE0     		b	.L10
 344              	.L11:
 288:../Main.c     **** 		} else {
 289:../Main.c     **** 			block_left = _FALSE;
 345              		.loc 1 289 0
 346 00c8 40F20003 		movw	r3, #:lower16:block_left
 347 00cc C0F20003 		movt	r3, #:upper16:block_left
 348 00d0 4FF00002 		mov	r2, #0
 349 00d4 1A70     		strb	r2, [r3, #0]
 290:../Main.c     **** 			status_block_left = STATUS_NORMAL;
 350              		.loc 1 290 0
 351 00d6 40F20003 		movw	r3, #:lower16:status_block_left
 352 00da C0F20003 		movt	r3, #:upper16:status_block_left
 353 00de 4FF00202 		mov	r2, #2
 354 00e2 1A70     		strb	r2, [r3, #0]
 355              	.L10:
 291:../Main.c     **** 		}
 292:../Main.c     **** 
 293:../Main.c     **** 	}
 294:../Main.c     **** 
 295:../Main.c     **** 	if (((direction & (1 << RIGHT_FRONT)) && last_direction_right == DIR_BACK)
 356              		.loc 1 295 0
 357 00e4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 00e6 03F02003 		and	r3, r3, #32
 359 00ea 002B     		cmp	r3, #0
 360 00ec 06D0     		beq	.L12
 361              		.loc 1 295 0 is_stmt 0 discriminator 1
 362 00ee 40F20003 		movw	r3, #:lower16:last_direction_right
 363 00f2 C0F20003 		movt	r3, #:upper16:last_direction_right
 364 00f6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 365 00f8 002B     		cmp	r3, #0
 366 00fa 0BD0     		beq	.L13
 367              	.L12:
 296:../Main.c     **** 			|| ((direction & (1 << RIGHT_BACK))
 368              		.loc 1 296 0 is_stmt 1
 369 00fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 370 00fe 03F01003 		and	r3, r3, #16
 371 0102 002B     		cmp	r3, #0
 372 0104 36D0     		beq	.L14
 297:../Main.c     **** 					&& last_direction_right == DIR_FRONT)) {
 373              		.loc 1 297 0
 374 0106 40F20003 		movw	r3, #:lower16:last_direction_right
 375 010a C0F20003 		movt	r3, #:upper16:last_direction_right
 376 010e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 377 0110 012B     		cmp	r3, #1
 378 0112 2FD1     		bne	.L14
 379              	.L13:
 298:../Main.c     **** 		if (!block_right) {
 380              		.loc 1 298 0
 381 0114 40F20003 		movw	r3, #:lower16:block_right
 382 0118 C0F20003 		movt	r3, #:upper16:block_right
 383 011c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 384 011e 002B     		cmp	r3, #0
 385 0120 1AD1     		bne	.L15
 299:../Main.c     **** 			block_right = _TRUE;
 386              		.loc 1 299 0
 387 0122 40F20003 		movw	r3, #:lower16:block_right
 388 0126 C0F20003 		movt	r3, #:upper16:block_right
 389 012a 4FF00102 		mov	r2, #1
 390 012e 1A70     		strb	r2, [r3, #0]
 300:../Main.c     **** 			block_pwm_update_tick_right = TICK_BREAK_PWM;
 391              		.loc 1 300 0
 392 0130 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 393 0134 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 394 0138 4CF25032 		movw	r2, #50000
 395 013c 1A60     		str	r2, [r3, #0]
 301:../Main.c     **** 			status_block_right = STATUS_BREAK;
 396              		.loc 1 301 0
 397 013e 40F20003 		movw	r3, #:lower16:status_block_right
 398 0142 C0F20003 		movt	r3, #:upper16:status_block_right
 399 0146 4FF00002 		mov	r2, #0
 400 014a 1A70     		strb	r2, [r3, #0]
 302:../Main.c     **** 			per_motor_right = MIN_PER_MOTOR_LOCOMOTION;
 401              		.loc 1 302 0
 402 014c 41F26F23 		movw	r3, #4719
 403 0150 C3F68323 		movt	r3, 14979
 404 0154 FB60     		str	r3, [r7, #12]	@ float
 405 0156 0DE0     		b	.L14
 406              	.L15:
 303:../Main.c     **** 		} else {
 304:../Main.c     **** 			block_right = _FALSE;
 407              		.loc 1 304 0
 408 0158 40F20003 		movw	r3, #:lower16:block_right
 409 015c C0F20003 		movt	r3, #:upper16:block_right
 410 0160 4FF00002 		mov	r2, #0
 411 0164 1A70     		strb	r2, [r3, #0]
 305:../Main.c     **** 			status_block_right = STATUS_NORMAL;
 412              		.loc 1 305 0
 413 0166 40F20003 		movw	r3, #:lower16:status_block_right
 414 016a C0F20003 		movt	r3, #:upper16:status_block_right
 415 016e 4FF00202 		mov	r2, #2
 416 0172 1A70     		strb	r2, [r3, #0]
 417              	.L14:
 306:../Main.c     **** 		}
 307:../Main.c     **** 	}
 308:../Main.c     **** 
 309:../Main.c     **** 	if (!block_left) {
 418              		.loc 1 309 0
 419 0174 40F20003 		movw	r3, #:lower16:block_left
 420 0178 C0F20003 		movt	r3, #:upper16:block_left
 421 017c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 422 017e 002B     		cmp	r3, #0
 423 0180 55D1     		bne	.L16
 310:../Main.c     **** 		//caso normal
 311:../Main.c     **** 		if (direction & (1 << LEFT_FRONT)) {
 424              		.loc 1 311 0
 425 0182 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 426 0184 03F00803 		and	r3, r3, #8
 427 0188 002B     		cmp	r3, #0
 428 018a 25D0     		beq	.L17
 312:../Main.c     **** 
 313:../Main.c     **** 			if (data_R[1] > PWM_MOTOR_CUT_OFF)
 429              		.loc 1 313 0
 430 018c 40F20003 		movw	r3, #:lower16:data_R
 431 0190 C0F20003 		movt	r3, #:upper16:data_R
 432 0194 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 433 0196 142B     		cmp	r3, #20
 434 0198 16D9     		bls	.L18
 314:../Main.c     **** 				per_motor_left =
 315:../Main.c     **** 						(((float) data_R[1]) / 255)
 435              		.loc 1 315 0
 436 019a 40F20003 		movw	r3, #:lower16:data_R
 437 019e C0F20003 		movt	r3, #:upper16:data_R
 438 01a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 439 01a4 07EE903A 		fmsr	s15, r3	@ int
 440 01a8 B8EE677A 		fuitos	s14, s15
 441 01ac DFED767A 		flds	s15, .L30+4
 442 01b0 87EE277A 		fdivs	s14, s14, s15
 316:../Main.c     **** 								* (MAX_PER_MOTOR_LOCOMOTION
 443              		.loc 1 316 0
 444 01b4 DFED757A 		flds	s15, .L30+8
 445 01b8 27EE277A 		fmuls	s14, s14, s15
 314:../Main.c     **** 				per_motor_left =
 446              		.loc 1 314 0
 447 01bc DFED747A 		flds	s15, .L30+12
 448 01c0 77EE277A 		fadds	s15, s14, s15
 449 01c4 C7ED027A 		fsts	s15, [r7, #8]
 450              	.L18:
 317:../Main.c     **** 										- ZERO_PER_MOTOR_LOCOMOTION)+ ZERO_PER_MOTOR_LOCOMOTION;
 318:../Main.c     **** 
 319:../Main.c     **** 			last_direction_left = DIR_FRONT;
 451              		.loc 1 319 0
 452 01c8 40F20003 		movw	r3, #:lower16:last_direction_left
 453 01cc C0F20003 		movt	r3, #:upper16:last_direction_left
 454 01d0 4FF00102 		mov	r2, #1
 455 01d4 1A70     		strb	r2, [r3, #0]
 456 01d6 77E0     		b	.L19
 457              	.L17:
 320:../Main.c     **** 		} else if (direction & (1 << LEFT_BACK)) {
 458              		.loc 1 320 0
 459 01d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 01da 03F00103 		and	r3, r3, #1
 461 01de 002B     		cmp	r3, #0
 462 01e0 72D0     		beq	.L19
 321:../Main.c     **** 			if (data_R[1] > PWM_MOTOR_CUT_OFF)
 463              		.loc 1 321 0
 464 01e2 40F20003 		movw	r3, #:lower16:data_R
 465 01e6 C0F20003 		movt	r3, #:upper16:data_R
 466 01ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 467 01ec 142B     		cmp	r3, #20
 468 01ee 16D9     		bls	.L20
 322:../Main.c     **** 				per_motor_left =
 323:../Main.c     **** 						(((float) data_R[1]) / 255)
 469              		.loc 1 323 0
 470 01f0 40F20003 		movw	r3, #:lower16:data_R
 471 01f4 C0F20003 		movt	r3, #:upper16:data_R
 472 01f8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 473 01fa 07EE903A 		fmsr	s15, r3	@ int
 474 01fe B8EE677A 		fuitos	s14, s15
 475 0202 DFED617A 		flds	s15, .L30+4
 476 0206 87EE277A 		fdivs	s14, s14, s15
 324:../Main.c     **** 								* (ZERO_PER_MOTOR_LOCOMOTION
 477              		.loc 1 324 0
 478 020a DFED627A 		flds	s15, .L30+16
 479 020e 27EE277A 		fmuls	s14, s14, s15
 322:../Main.c     **** 				per_motor_left =
 480              		.loc 1 322 0
 481 0212 DFED5C7A 		flds	s15, .L30
 482 0216 77EE277A 		fadds	s15, s14, s15
 483 021a C7ED027A 		fsts	s15, [r7, #8]
 484              	.L20:
 325:../Main.c     **** 										- MIN_PER_MOTOR_LOCOMOTION)+ MIN_PER_MOTOR_LOCOMOTION;
 326:../Main.c     **** 			last_direction_left = DIR_BACK;
 485              		.loc 1 326 0
 486 021e 40F20003 		movw	r3, #:lower16:last_direction_left
 487 0222 C0F20003 		movt	r3, #:upper16:last_direction_left
 488 0226 4FF00002 		mov	r2, #0
 489 022a 1A70     		strb	r2, [r3, #0]
 490 022c 4CE0     		b	.L19
 491              	.L16:
 327:../Main.c     **** 		}
 328:../Main.c     **** 	} else {
 329:../Main.c     **** 
 330:../Main.c     **** 		if (direction & (1 << LEFT_FRONT)) {
 492              		.loc 1 330 0
 493 022e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 494 0230 03F00803 		and	r3, r3, #8
 495 0234 002B     		cmp	r3, #0
 496 0236 07D0     		beq	.L21
 331:../Main.c     **** 			last_direction_left = DIR_FRONT;
 497              		.loc 1 331 0
 498 0238 40F20003 		movw	r3, #:lower16:last_direction_left
 499 023c C0F20003 		movt	r3, #:upper16:last_direction_left
 500 0240 4FF00102 		mov	r2, #1
 501 0244 1A70     		strb	r2, [r3, #0]
 502 0246 06E0     		b	.L22
 503              	.L21:
 332:../Main.c     **** 		}else{
 333:../Main.c     **** 			last_direction_left = DIR_BACK;
 504              		.loc 1 333 0
 505 0248 40F20003 		movw	r3, #:lower16:last_direction_left
 506 024c C0F20003 		movt	r3, #:upper16:last_direction_left
 507 0250 4FF00002 		mov	r2, #0
 508 0254 1A70     		strb	r2, [r3, #0]
 509              	.L22:
 334:../Main.c     **** 		}
 335:../Main.c     **** 
 336:../Main.c     **** 		if (block_pwm_update_tick_left <= 0 && status_block_left == STATUS_BREAK) {
 510              		.loc 1 336 0
 511 0256 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 512 025a C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 513 025e 1B68     		ldr	r3, [r3, #0]
 514 0260 002B     		cmp	r3, #0
 515 0262 15DC     		bgt	.L23
 516              		.loc 1 336 0 is_stmt 0 discriminator 1
 517 0264 40F20003 		movw	r3, #:lower16:status_block_left
 518 0268 C0F20003 		movt	r3, #:upper16:status_block_left
 519 026c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 520 026e 002B     		cmp	r3, #0
 521 0270 0ED1     		bne	.L23
 337:../Main.c     **** 			block_pwm_update_tick_left = TICK_ZERO_PWM;
 522              		.loc 1 337 0 is_stmt 1
 523 0272 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 524 0276 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 525 027a 4CF25032 		movw	r2, #50000
 526 027e 1A60     		str	r2, [r3, #0]
 338:../Main.c     **** 			status_block_left = STATUS_ZERO;
 527              		.loc 1 338 0
 528 0280 40F20003 		movw	r3, #:lower16:status_block_left
 529 0284 C0F20003 		movt	r3, #:upper16:status_block_left
 530 0288 4FF00102 		mov	r2, #1
 531 028c 1A70     		strb	r2, [r3, #0]
 532 028e 1BE0     		b	.L19
 533              	.L23:
 339:../Main.c     **** 		} else if (block_pwm_update_tick_left
 340:../Main.c     **** 				<= 0&& status_block_left == STATUS_ZERO) {
 534              		.loc 1 340 0
 535 0290 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 536 0294 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 537 0298 1B68     		ldr	r3, [r3, #0]
 339:../Main.c     **** 		} else if (block_pwm_update_tick_left
 538              		.loc 1 339 0
 539 029a 002B     		cmp	r3, #0
 540 029c 14DC     		bgt	.L19
 541              		.loc 1 340 0
 542 029e 40F20003 		movw	r3, #:lower16:status_block_left
 543 02a2 C0F20003 		movt	r3, #:upper16:status_block_left
 544 02a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 545 02a8 012B     		cmp	r3, #1
 546 02aa 0DD1     		bne	.L19
 341:../Main.c     **** 			status_block_left = STATUS_NORMAL;
 547              		.loc 1 341 0
 548 02ac 40F20003 		movw	r3, #:lower16:status_block_left
 549 02b0 C0F20003 		movt	r3, #:upper16:status_block_left
 550 02b4 4FF00202 		mov	r2, #2
 551 02b8 1A70     		strb	r2, [r3, #0]
 342:../Main.c     **** 			block_left = _FALSE;
 552              		.loc 1 342 0
 553 02ba 40F20003 		movw	r3, #:lower16:block_left
 554 02be C0F20003 		movt	r3, #:upper16:block_left
 555 02c2 4FF00002 		mov	r2, #0
 556 02c6 1A70     		strb	r2, [r3, #0]
 557              	.L19:
 343:../Main.c     **** 		}
 344:../Main.c     **** 	}
 345:../Main.c     **** 
 346:../Main.c     **** 	if (!block_right) {
 558              		.loc 1 346 0
 559 02c8 40F20003 		movw	r3, #:lower16:block_right
 560 02cc C0F20003 		movt	r3, #:upper16:block_right
 561 02d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 562 02d2 002B     		cmp	r3, #0
 563 02d4 66D1     		bne	.L24
 347:../Main.c     **** 		//caso normal
 348:../Main.c     **** 		if (direction & (1 << RIGHT_FRONT)) {
 564              		.loc 1 348 0
 565 02d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 566 02d8 03F02003 		and	r3, r3, #32
 567 02dc 002B     		cmp	r3, #0
 568 02de 25D0     		beq	.L25
 349:../Main.c     **** 
 350:../Main.c     **** 			if (data_R[2] > PWM_MOTOR_CUT_OFF)
 569              		.loc 1 350 0
 570 02e0 40F20003 		movw	r3, #:lower16:data_R
 571 02e4 C0F20003 		movt	r3, #:upper16:data_R
 572 02e8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 573 02ea 142B     		cmp	r3, #20
 574 02ec 16D9     		bls	.L26
 351:../Main.c     **** 				per_motor_right =
 352:../Main.c     **** 						(((float) data_R[2]) / 255)
 575              		.loc 1 352 0
 576 02ee 40F20003 		movw	r3, #:lower16:data_R
 577 02f2 C0F20003 		movt	r3, #:upper16:data_R
 578 02f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 579 02f8 07EE903A 		fmsr	s15, r3	@ int
 580 02fc B8EE677A 		fuitos	s14, s15
 581 0300 DFED217A 		flds	s15, .L30+4
 582 0304 87EE277A 		fdivs	s14, s14, s15
 353:../Main.c     **** 								* (MAX_PER_MOTOR_LOCOMOTION
 583              		.loc 1 353 0
 584 0308 DFED207A 		flds	s15, .L30+8
 585 030c 27EE277A 		fmuls	s14, s14, s15
 351:../Main.c     **** 				per_motor_right =
 586              		.loc 1 351 0
 587 0310 DFED1F7A 		flds	s15, .L30+12
 588 0314 77EE277A 		fadds	s15, s14, s15
 589 0318 C7ED037A 		fsts	s15, [r7, #12]
 590              	.L26:
 354:../Main.c     **** 										- ZERO_PER_MOTOR_LOCOMOTION)+ ZERO_PER_MOTOR_LOCOMOTION;
 355:../Main.c     **** 
 356:../Main.c     **** 			last_direction_right = DIR_FRONT;
 591              		.loc 1 356 0
 592 031c 40F20003 		movw	r3, #:lower16:last_direction_right
 593 0320 C0F20003 		movt	r3, #:upper16:last_direction_right
 594 0324 4FF00102 		mov	r2, #1
 595 0328 1A70     		strb	r2, [r3, #0]
 596 032a 74E0     		b	.L27
 597              	.L25:
 357:../Main.c     **** 		} else if (direction & (1 << RIGHT_BACK)) {
 598              		.loc 1 357 0
 599 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 600 032e 03F01003 		and	r3, r3, #16
 601 0332 002B     		cmp	r3, #0
 602 0334 6FD0     		beq	.L27
 358:../Main.c     **** 			if (data_R[2] > PWM_MOTOR_CUT_OFF)
 603              		.loc 1 358 0
 604 0336 40F20003 		movw	r3, #:lower16:data_R
 605 033a C0F20003 		movt	r3, #:upper16:data_R
 606 033e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 607 0340 142B     		cmp	r3, #20
 608 0342 16D9     		bls	.L28
 359:../Main.c     **** 				per_motor_right =
 360:../Main.c     **** 						(((float) data_R[2]) / 255)
 609              		.loc 1 360 0
 610 0344 40F20003 		movw	r3, #:lower16:data_R
 611 0348 C0F20003 		movt	r3, #:upper16:data_R
 612 034c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 613 034e 07EE903A 		fmsr	s15, r3	@ int
 614 0352 B8EE677A 		fuitos	s14, s15
 615 0356 DFED0C7A 		flds	s15, .L30+4
 616 035a 87EE277A 		fdivs	s14, s14, s15
 361:../Main.c     **** 								* (ZERO_PER_MOTOR_LOCOMOTION
 617              		.loc 1 361 0
 618 035e DFED0D7A 		flds	s15, .L30+16
 619 0362 27EE277A 		fmuls	s14, s14, s15
 359:../Main.c     **** 				per_motor_right =
 620              		.loc 1 359 0
 621 0366 DFED077A 		flds	s15, .L30
 622 036a 77EE277A 		fadds	s15, s14, s15
 623 036e C7ED037A 		fsts	s15, [r7, #12]
 624              	.L28:
 362:../Main.c     **** 										- MIN_PER_MOTOR_LOCOMOTION)+ MIN_PER_MOTOR_LOCOMOTION;
 363:../Main.c     **** 			last_direction_right = DIR_BACK;
 625              		.loc 1 363 0
 626 0372 40F20003 		movw	r3, #:lower16:last_direction_right
 627 0376 C0F20003 		movt	r3, #:upper16:last_direction_right
 628 037a 4FF00002 		mov	r2, #0
 629 037e 1A70     		strb	r2, [r3, #0]
 630 0380 49E0     		b	.L27
 631              	.L31:
 632 0382 00BF     		.align	2
 633              	.L30:
 634 0384 6F12833A 		.word	981668463
 635 0388 00007F43 		.word	1132396544
 636 038c 7012033A 		.word	973279856
 637 0390 A69BC43A 		.word	985963430
 638 0394 6E12033A 		.word	973279854
 639 0398 A69B443B 		.word	994352038
 640 039c 0000C842 		.word	1120403456
 641 03a0 8988883C 		.word	1015580809
 642              	.L24:
 364:../Main.c     **** 		}
 365:../Main.c     **** 	} else {
 366:../Main.c     **** 
 367:../Main.c     **** 		if (block_pwm_update_tick_right
 368:../Main.c     **** 				<= 0&& status_block_right == STATUS_BREAK) {
 643              		.loc 1 368 0
 644 03a4 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 645 03a8 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 646 03ac 1B68     		ldr	r3, [r3, #0]
 367:../Main.c     **** 		if (block_pwm_update_tick_right
 647              		.loc 1 367 0
 648 03ae 002B     		cmp	r3, #0
 649 03b0 15DC     		bgt	.L29
 650              		.loc 1 368 0
 651 03b2 40F20003 		movw	r3, #:lower16:status_block_right
 652 03b6 C0F20003 		movt	r3, #:upper16:status_block_right
 653 03ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 654 03bc 002B     		cmp	r3, #0
 655 03be 0ED1     		bne	.L29
 369:../Main.c     **** 			block_pwm_update_tick_right = TICK_ZERO_PWM;
 656              		.loc 1 369 0
 657 03c0 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 658 03c4 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 659 03c8 4CF25032 		movw	r2, #50000
 660 03cc 1A60     		str	r2, [r3, #0]
 370:../Main.c     **** 			status_block_right = STATUS_ZERO;
 661              		.loc 1 370 0
 662 03ce 40F20003 		movw	r3, #:lower16:status_block_right
 663 03d2 C0F20003 		movt	r3, #:upper16:status_block_right
 664 03d6 4FF00102 		mov	r2, #1
 665 03da 1A70     		strb	r2, [r3, #0]
 666 03dc 1BE0     		b	.L27
 667              	.L29:
 371:../Main.c     **** 		} else if (block_pwm_update_tick_right
 372:../Main.c     **** 				<= 0&& status_block_right == STATUS_ZERO) {
 668              		.loc 1 372 0
 669 03de 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 670 03e2 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 671 03e6 1B68     		ldr	r3, [r3, #0]
 371:../Main.c     **** 		} else if (block_pwm_update_tick_right
 672              		.loc 1 371 0
 673 03e8 002B     		cmp	r3, #0
 674 03ea 14DC     		bgt	.L27
 675              		.loc 1 372 0
 676 03ec 40F20003 		movw	r3, #:lower16:status_block_right
 677 03f0 C0F20003 		movt	r3, #:upper16:status_block_right
 678 03f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 679 03f6 012B     		cmp	r3, #1
 680 03f8 0DD1     		bne	.L27
 373:../Main.c     **** 			status_block_right = STATUS_NORMAL;
 681              		.loc 1 373 0
 682 03fa 40F20003 		movw	r3, #:lower16:status_block_right
 683 03fe C0F20003 		movt	r3, #:upper16:status_block_right
 684 0402 4FF00202 		mov	r2, #2
 685 0406 1A70     		strb	r2, [r3, #0]
 374:../Main.c     **** 			block_right = _FALSE;
 686              		.loc 1 374 0
 687 0408 40F20003 		movw	r3, #:lower16:block_right
 688 040c C0F20003 		movt	r3, #:upper16:block_right
 689 0410 4FF00002 		mov	r2, #0
 690 0414 1A70     		strb	r2, [r3, #0]
 691              	.L27:
 375:../Main.c     **** 		}
 376:../Main.c     **** 	}
 377:../Main.c     **** 
 378:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 379:../Main.c     **** 			100.0f *(0.003f - per_motor_right) / PER_MOTOR_LOCOMOTION);
 692              		.loc 1 379 0
 693 0416 1FED207A 		flds	s14, .L30+20
 694 041a D7ED037A 		flds	s15, [r7, #12]
 695 041e 37EE677A 		fsubs	s14, s14, s15
 696 0422 5FED227A 		flds	s15, .L30+24
 697 0426 27EE277A 		fmuls	s14, s14, s15
 378:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 698              		.loc 1 378 0
 699 042a 5FED237A 		flds	s15, .L30+28
 700 042e C7EE277A 		fdivs	s15, s14, s15
 701 0432 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 702 0436 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 703 043a 17EE901A 		fmrs	r1, s15
 704 043e FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 380:../Main.c     **** 
 381:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 382:../Main.c     **** 			100.0f * per_motor_left / PER_MOTOR_LOCOMOTION);
 705              		.loc 1 382 0
 706 0442 97ED027A 		flds	s14, [r7, #8]
 707 0446 5FED2B7A 		flds	s15, .L30+24
 708 044a 27EE277A 		fmuls	s14, s14, s15
 381:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 709              		.loc 1 381 0
 710 044e 5FED2C7A 		flds	s15, .L30+28
 711 0452 C7EE277A 		fdivs	s15, s14, s15
 712 0456 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 713 045a C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 714 045e 17EE901A 		fmrs	r1, s15
 715 0462 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 383:../Main.c     **** 
 384:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 385:../Main.c     **** 			100.0f * per_weapon / PER_MOTOR_WEAPON);
 716              		.loc 1 385 0
 717 0466 97ED007A 		flds	s14, [r7, #0]
 718 046a 5FED347A 		flds	s15, .L30+24
 719 046e 27EE277A 		fmuls	s14, s14, s15
 384:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_WEAPON,
 720              		.loc 1 384 0
 721 0472 5FED357A 		flds	s15, .L30+28
 722 0476 C7EE277A 		fdivs	s15, s14, s15
 723 047a 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 724 047e C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 725 0482 17EE901A 		fmrs	r1, s15
 726 0486 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 386:../Main.c     **** 
 387:../Main.c     **** //	float per_teste = (data_R[4])
 388:../Main.c     **** //				* (MAX_PER_MOTOR_LOCOMOTION - MIN_PER_MOTOR_LOCOMOTION)
 389:../Main.c     **** //				/ 255+ MIN_PER_MOTOR_LOCOMOTION;
 390:../Main.c     **** //
 391:../Main.c     **** //	PWMSP001_Start(PWM_MOTOR_RIGHT);
 392:../Main.c     **** //		PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 393:../Main.c     **** //		PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT,
 394:../Main.c     **** //				100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 395:../Main.c     **** //
 396:../Main.c     **** //		PWMSP001_Start(PWM_MOTOR_LEFT);
 397:../Main.c     **** //			PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 398:../Main.c     **** //			PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT,
 399:../Main.c     **** //					100.0f * per_teste / PER_MOTOR_LOCOMOTION);
 400:../Main.c     **** 
 401:../Main.c     **** }
 727              		.loc 1 401 0
 728 048a 07F11007 		add	r7, r7, #16
 729 048e BD46     		mov	sp, r7
 730 0490 80BD     		pop	{r7, pc}
 731              		.cfi_endproc
 732              	.LFE114:
 734 0492 00BF     		.section	.text.read_R,"ax",%progbits
 735              		.align	2
 736              		.global	read_R
 737              		.thumb
 738              		.thumb_func
 740              	read_R:
 741              	.LFB115:
 402:../Main.c     **** 
 403:../Main.c     **** /***************************************************/
 404:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 405:../Main.c     **** /***************************************************/
 406:../Main.c     **** 
 407:../Main.c     **** void read_R() {
 742              		.loc 1 407 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 16
 745              		@ frame_needed = 1, uses_anonymous_args = 0
 746 0000 80B5     		push	{r7, lr}
 747              	.LCFI8:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 7, -8
 750              		.cfi_offset 14, -4
 751 0002 84B0     		sub	sp, sp, #16
 752              	.LCFI9:
 753              		.cfi_def_cfa_offset 24
 754 0004 00AF     		add	r7, sp, #0
 755              	.LCFI10:
 756              		.cfi_def_cfa_register 7
 408:../Main.c     **** 	int i, j;
 409:../Main.c     **** 	IO004_ResetPin(CE);
 757              		.loc 1 409 0
 758 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 759 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 760 000e 5A68     		ldr	r2, [r3, #4]
 761 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 762 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 763 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 764 001a 4FF48031 		mov	r1, #65536
 765 001e 01FA03F3 		lsl	r3, r1, r3
 766 0022 5360     		str	r3, [r2, #4]
 410:../Main.c     **** 	delay(50000);
 767              		.loc 1 410 0
 768 0024 4CF25030 		movw	r0, #50000
 769 0028 FFF7FEFF 		bl	delay
 411:../Main.c     **** 	uint8_t temp = 0;
 770              		.loc 1 411 0
 771 002c 4FF00003 		mov	r3, #0
 772 0030 FB71     		strb	r3, [r7, #7]
 412:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 773              		.loc 1 412 0
 774 0032 4FF00003 		mov	r3, #0
 775 0036 BB60     		str	r3, [r7, #8]
 776 0038 36E0     		b	.L33
 777              	.L37:
 413:../Main.c     **** 		for (i = 7; i > -1; i--) {
 778              		.loc 1 413 0
 779 003a 4FF00703 		mov	r3, #7
 780 003e FB60     		str	r3, [r7, #12]
 781 0040 20E0     		b	.L34
 782              	.L36:
 414:../Main.c     **** 			if (IO004_ReadPin(DATA))
 783              		.loc 1 414 0
 784 0042 40F20003 		movw	r3, #:lower16:IO004_Handle4
 785 0046 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 786 004a 5B68     		ldr	r3, [r3, #4]
 787 004c 5A6A     		ldr	r2, [r3, #36]
 788 004e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 789 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 790 0056 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 791 0058 22FA03F3 		lsr	r3, r2, r3
 792 005c 03F00103 		and	r3, r3, #1
 793 0060 002B     		cmp	r3, #0
 794 0062 09D0     		beq	.L35
 415:../Main.c     **** 				temp |= (1 << i);
 795              		.loc 1 415 0
 796 0064 4FF00102 		mov	r2, #1
 797 0068 FB68     		ldr	r3, [r7, #12]
 798 006a 02FA03F3 		lsl	r3, r2, r3
 799 006e DAB2     		uxtb	r2, r3
 800 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 801 0072 1343     		orrs	r3, r3, r2
 802 0074 DBB2     		uxtb	r3, r3
 803 0076 FB71     		strb	r3, [r7, #7]
 804              	.L35:
 416:../Main.c     **** 			pulse_R();
 805              		.loc 1 416 0
 806 0078 FFF7FEFF 		bl	pulse_R
 413:../Main.c     **** 		for (i = 7; i > -1; i--) {
 807              		.loc 1 413 0
 808 007c FB68     		ldr	r3, [r7, #12]
 809 007e 03F1FF33 		add	r3, r3, #-1
 810 0082 FB60     		str	r3, [r7, #12]
 811              	.L34:
 413:../Main.c     **** 		for (i = 7; i > -1; i--) {
 812              		.loc 1 413 0 is_stmt 0 discriminator 1
 813 0084 FB68     		ldr	r3, [r7, #12]
 814 0086 002B     		cmp	r3, #0
 815 0088 DBDA     		bge	.L36
 417:../Main.c     **** 		}
 418:../Main.c     **** 		data_R[j] = temp;
 816              		.loc 1 418 0 is_stmt 1
 817 008a 40F20003 		movw	r3, #:lower16:data_R
 818 008e C0F20003 		movt	r3, #:upper16:data_R
 819 0092 BA68     		ldr	r2, [r7, #8]
 820 0094 9B18     		adds	r3, r3, r2
 821 0096 FA79     		ldrb	r2, [r7, #7]
 822 0098 1A70     		strb	r2, [r3, #0]
 419:../Main.c     **** 		temp = 0;
 823              		.loc 1 419 0
 824 009a 4FF00003 		mov	r3, #0
 825 009e FB71     		strb	r3, [r7, #7]
 412:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 826              		.loc 1 412 0
 827 00a0 BB68     		ldr	r3, [r7, #8]
 828 00a2 03F10103 		add	r3, r3, #1
 829 00a6 BB60     		str	r3, [r7, #8]
 830              	.L33:
 412:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 831              		.loc 1 412 0 is_stmt 0 discriminator 1
 832 00a8 BB68     		ldr	r3, [r7, #8]
 833 00aa 042B     		cmp	r3, #4
 834 00ac C5DD     		ble	.L37
 420:../Main.c     **** 	}
 421:../Main.c     **** 	IO004_SetPin(CE);
 835              		.loc 1 421 0 is_stmt 1
 836 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle6
 837 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 838 00b6 5A68     		ldr	r2, [r3, #4]
 839 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 840 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 841 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 842 00c2 4FF00101 		mov	r1, #1
 843 00c6 01FA03F3 		lsl	r3, r1, r3
 844 00ca 5360     		str	r3, [r2, #4]
 422:../Main.c     **** 	delay(50000);
 845              		.loc 1 422 0
 846 00cc 4CF25030 		movw	r0, #50000
 847 00d0 FFF7FEFF 		bl	delay
 423:../Main.c     **** }
 848              		.loc 1 423 0
 849 00d4 07F11007 		add	r7, r7, #16
 850 00d8 BD46     		mov	sp, r7
 851 00da 80BD     		pop	{r7, pc}
 852              		.cfi_endproc
 853              	.LFE115:
 855              		.section	.text.pulse_R,"ax",%progbits
 856              		.align	2
 857              		.global	pulse_R
 858              		.thumb
 859              		.thumb_func
 861              	pulse_R:
 862              	.LFB116:
 424:../Main.c     **** 
 425:../Main.c     **** void pulse_R() {
 863              		.loc 1 425 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              	.LCFI11:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 00AF     		add	r7, sp, #0
 873              	.LCFI12:
 874              		.cfi_def_cfa_register 7
 426:../Main.c     **** 	delay(300);
 875              		.loc 1 426 0
 876 0004 4FF49670 		mov	r0, #300
 877 0008 FFF7FEFF 		bl	delay
 427:../Main.c     **** 	IO004_SetPin(CLK1);
 878              		.loc 1 427 0
 879 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 880 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 881 0014 5A68     		ldr	r2, [r3, #4]
 882 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 883 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 884 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 885 0020 4FF00101 		mov	r1, #1
 886 0024 01FA03F3 		lsl	r3, r1, r3
 887 0028 5360     		str	r3, [r2, #4]
 428:../Main.c     **** 	delay(300);
 888              		.loc 1 428 0
 889 002a 4FF49670 		mov	r0, #300
 890 002e FFF7FEFF 		bl	delay
 429:../Main.c     **** 	IO004_ResetPin(CLK1);
 891              		.loc 1 429 0
 892 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 893 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 894 003a 5A68     		ldr	r2, [r3, #4]
 895 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 896 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 897 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 898 0046 4FF48031 		mov	r1, #65536
 899 004a 01FA03F3 		lsl	r3, r1, r3
 900 004e 5360     		str	r3, [r2, #4]
 430:../Main.c     **** }
 901              		.loc 1 430 0
 902 0050 80BD     		pop	{r7, pc}
 903              		.cfi_endproc
 904              	.LFE116:
 906 0052 00BF     		.section	.text.configure_R,"ax",%progbits
 907              		.align	2
 908              		.global	configure_R
 909              		.thumb
 910              		.thumb_func
 912              	configure_R:
 913              	.LFB117:
 431:../Main.c     **** 
 432:../Main.c     **** void configure_R() {
 914              		.loc 1 432 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 8
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 80B5     		push	{r7, lr}
 919              	.LCFI13:
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 82B0     		sub	sp, sp, #8
 924              	.LCFI14:
 925              		.cfi_def_cfa_offset 16
 926 0004 00AF     		add	r7, sp, #0
 927              	.LCFI15:
 928              		.cfi_def_cfa_register 7
 433:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 434:../Main.c     **** 	configuration[0] = 0xC5; //RF_CH# e OP_MODE 0b11000101
 929              		.loc 1 434 0
 930 0006 40F20003 		movw	r3, #:lower16:configuration
 931 000a C0F20003 		movt	r3, #:upper16:configuration
 932 000e 4FF0C502 		mov	r2, #197
 933 0012 1A70     		strb	r2, [r3, #0]
 435:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 934              		.loc 1 435 0
 935 0014 40F20003 		movw	r3, #:lower16:configuration
 936 0018 C0F20003 		movt	r3, #:upper16:configuration
 937 001c 4FF04F02 		mov	r2, #79
 938 0020 5A70     		strb	r2, [r3, #1]
 436:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 939              		.loc 1 436 0
 940 0022 40F20003 		movw	r3, #:lower16:configuration
 941 0026 C0F20003 		movt	r3, #:upper16:configuration
 942 002a 4FF0A302 		mov	r2, #163
 943 002e 9A70     		strb	r2, [r3, #2]
 437:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 944              		.loc 1 437 0
 945 0030 40F20003 		movw	r3, #:lower16:configuration
 946 0034 C0F20003 		movt	r3, #:upper16:configuration
 947 0038 4FF0EE02 		mov	r2, #238
 948 003c DA70     		strb	r2, [r3, #3]
 438:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 949              		.loc 1 438 0
 950 003e 40F20003 		movw	r3, #:lower16:configuration
 951 0042 C0F20003 		movt	r3, #:upper16:configuration
 952 0046 4FF0DD02 		mov	r2, #221
 953 004a 1A71     		strb	r2, [r3, #4]
 439:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 954              		.loc 1 439 0
 955 004c 40F20003 		movw	r3, #:lower16:configuration
 956 0050 C0F20003 		movt	r3, #:upper16:configuration
 957 0054 4FF0CC02 		mov	r2, #204
 958 0058 5A71     		strb	r2, [r3, #5]
 440:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 959              		.loc 1 440 0
 960 005a 40F20003 		movw	r3, #:lower16:configuration
 961 005e C0F20003 		movt	r3, #:upper16:configuration
 962 0062 4FF0BB02 		mov	r2, #187
 963 0066 9A71     		strb	r2, [r3, #6]
 441:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 964              		.loc 1 441 0
 965 0068 40F20003 		movw	r3, #:lower16:configuration
 966 006c C0F20003 		movt	r3, #:upper16:configuration
 967 0070 4FF0AA02 		mov	r2, #170
 968 0074 DA71     		strb	r2, [r3, #7]
 442:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 969              		.loc 1 442 0
 970 0076 40F20003 		movw	r3, #:lower16:configuration
 971 007a C0F20003 		movt	r3, #:upper16:configuration
 972 007e 4FF00002 		mov	r2, #0
 973 0082 1A72     		strb	r2, [r3, #8]
 443:../Main.c     **** 	configuration[9] = 0b00000000;
 974              		.loc 1 443 0
 975 0084 40F20003 		movw	r3, #:lower16:configuration
 976 0088 C0F20003 		movt	r3, #:upper16:configuration
 977 008c 4FF00002 		mov	r2, #0
 978 0090 5A72     		strb	r2, [r3, #9]
 444:../Main.c     **** 	configuration[10] = 0b00000000;
 979              		.loc 1 444 0
 980 0092 40F20003 		movw	r3, #:lower16:configuration
 981 0096 C0F20003 		movt	r3, #:upper16:configuration
 982 009a 4FF00002 		mov	r2, #0
 983 009e 9A72     		strb	r2, [r3, #10]
 445:../Main.c     **** 	configuration[11] = 0b00000000;
 984              		.loc 1 445 0
 985 00a0 40F20003 		movw	r3, #:lower16:configuration
 986 00a4 C0F20003 		movt	r3, #:upper16:configuration
 987 00a8 4FF00002 		mov	r2, #0
 988 00ac DA72     		strb	r2, [r3, #11]
 446:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 989              		.loc 1 446 0
 990 00ae 40F20003 		movw	r3, #:lower16:configuration
 991 00b2 C0F20003 		movt	r3, #:upper16:configuration
 992 00b6 4FF00002 		mov	r2, #0
 993 00ba 1A73     		strb	r2, [r3, #12]
 447:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 994              		.loc 1 447 0
 995 00bc 40F20003 		movw	r3, #:lower16:configuration
 996 00c0 C0F20003 		movt	r3, #:upper16:configuration
 997 00c4 4FF02802 		mov	r2, #40
 998 00c8 5A73     		strb	r2, [r3, #13]
 448:../Main.c     **** 	configuration[14] = 0b00000000;
 999              		.loc 1 448 0
 1000 00ca 40F20003 		movw	r3, #:lower16:configuration
 1001 00ce C0F20003 		movt	r3, #:upper16:configuration
 1002 00d2 4FF00002 		mov	r2, #0
 1003 00d6 9A73     		strb	r2, [r3, #14]
 449:../Main.c     **** 
 450:../Main.c     **** 	IO004_ResetPin(CE);
 1004              		.loc 1 450 0
 1005 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1006 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1007 00e0 5A68     		ldr	r2, [r3, #4]
 1008 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1009 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1010 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1011 00ec 4FF48031 		mov	r1, #65536
 1012 00f0 01FA03F3 		lsl	r3, r1, r3
 1013 00f4 5360     		str	r3, [r2, #4]
 451:../Main.c     **** 	IO004_SetPin(CS);
 1014              		.loc 1 451 0
 1015 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1016 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1017 00fe 5A68     		ldr	r2, [r3, #4]
 1018 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1019 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1020 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1021 010a 4FF00101 		mov	r1, #1
 1022 010e 01FA03F3 		lsl	r3, r1, r3
 1023 0112 5360     		str	r3, [r2, #4]
 452:../Main.c     **** 	int i, j;
 453:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1024              		.loc 1 453 0
 1025 0114 4FF00E03 		mov	r3, #14
 1026 0118 7B60     		str	r3, [r7, #4]
 1027 011a 3FE0     		b	.L40
 1028              	.L45:
 454:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1029              		.loc 1 454 0
 1030 011c 4FF00703 		mov	r3, #7
 1031 0120 3B60     		str	r3, [r7, #0]
 1032 0122 34E0     		b	.L41
 1033              	.L44:
 455:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1034              		.loc 1 455 0
 1035 0124 40F20003 		movw	r3, #:lower16:configuration
 1036 0128 C0F20003 		movt	r3, #:upper16:configuration
 1037 012c 7A68     		ldr	r2, [r7, #4]
 1038 012e 9B18     		adds	r3, r3, r2
 1039 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1040 0132 1A46     		mov	r2, r3
 1041 0134 4FF00101 		mov	r1, #1
 1042 0138 3B68     		ldr	r3, [r7, #0]
 1043 013a 01FA03F3 		lsl	r3, r1, r3
 1044 013e 1340     		ands	r3, r3, r2
 1045 0140 002B     		cmp	r3, #0
 1046 0142 0FDD     		ble	.L42
 456:../Main.c     **** 				IO004_SetPin(DATA);
 1047              		.loc 1 456 0
 1048 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1049 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1050 014c 5A68     		ldr	r2, [r3, #4]
 1051 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1052 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1053 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1054 0158 4FF00101 		mov	r1, #1
 1055 015c 01FA03F3 		lsl	r3, r1, r3
 1056 0160 5360     		str	r3, [r2, #4]
 1057 0162 0EE0     		b	.L43
 1058              	.L42:
 457:../Main.c     **** 			else
 458:../Main.c     **** 				IO004_ResetPin(DATA);
 1059              		.loc 1 458 0
 1060 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1061 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1062 016c 5A68     		ldr	r2, [r3, #4]
 1063 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1064 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1065 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1066 0178 4FF48031 		mov	r1, #65536
 1067 017c 01FA03F3 		lsl	r3, r1, r3
 1068 0180 5360     		str	r3, [r2, #4]
 1069              	.L43:
 459:../Main.c     **** 			;
 460:../Main.c     **** 			pulse_R();
 1070              		.loc 1 460 0
 1071 0182 FFF7FEFF 		bl	pulse_R
 454:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1072              		.loc 1 454 0
 1073 0186 3B68     		ldr	r3, [r7, #0]
 1074 0188 03F1FF33 		add	r3, r3, #-1
 1075 018c 3B60     		str	r3, [r7, #0]
 1076              	.L41:
 454:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1077              		.loc 1 454 0 is_stmt 0 discriminator 1
 1078 018e 3B68     		ldr	r3, [r7, #0]
 1079 0190 002B     		cmp	r3, #0
 1080 0192 C7DA     		bge	.L44
 453:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1081              		.loc 1 453 0 is_stmt 1
 1082 0194 7B68     		ldr	r3, [r7, #4]
 1083 0196 03F1FF33 		add	r3, r3, #-1
 1084 019a 7B60     		str	r3, [r7, #4]
 1085              	.L40:
 453:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1086              		.loc 1 453 0 is_stmt 0 discriminator 1
 1087 019c 7B68     		ldr	r3, [r7, #4]
 1088 019e 002B     		cmp	r3, #0
 1089 01a0 BCDA     		bge	.L45
 461:../Main.c     **** 		}
 462:../Main.c     **** 	}
 463:../Main.c     **** 	IO004_DisableOutputDriver(&DATA, IO004_CONT_POLLING);
 1090              		.loc 1 463 0 is_stmt 1
 1091 01a2 40F20000 		movw	r0, #:lower16:IO004_Handle4
 1092 01a6 C0F20000 		movt	r0, #:upper16:IO004_Handle4
 1093 01aa 4FF00301 		mov	r1, #3
 1094 01ae FFF7FEFF 		bl	IO004_DisableOutputDriver
 464:../Main.c     **** 	IO004_ResetPin(CS);
 1095              		.loc 1 464 0
 1096 01b2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1097 01b6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1098 01ba 5A68     		ldr	r2, [r3, #4]
 1099 01bc 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1100 01c0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1101 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1102 01c6 4FF48031 		mov	r1, #65536
 1103 01ca 01FA03F3 		lsl	r3, r1, r3
 1104 01ce 5360     		str	r3, [r2, #4]
 465:../Main.c     **** 	IO004_SetPin(CE);
 1105              		.loc 1 465 0
 1106 01d0 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1107 01d4 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1108 01d8 5A68     		ldr	r2, [r3, #4]
 1109 01da 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1110 01de C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1111 01e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1112 01e4 4FF00101 		mov	r1, #1
 1113 01e8 01FA03F3 		lsl	r3, r1, r3
 1114 01ec 5360     		str	r3, [r2, #4]
 466:../Main.c     **** 	delay(50000);
 1115              		.loc 1 466 0
 1116 01ee 4CF25030 		movw	r0, #50000
 1117 01f2 FFF7FEFF 		bl	delay
 467:../Main.c     **** }
 1118              		.loc 1 467 0
 1119 01f6 07F10807 		add	r7, r7, #8
 1120 01fa BD46     		mov	sp, r7
 1121 01fc 80BD     		pop	{r7, pc}
 1122              		.cfi_endproc
 1123              	.LFE117:
 1125 01fe 00BF     		.section	.text.Software_Timers_Init,"ax",%progbits
 1126              		.align	2
 1127              		.global	Software_Timers_Init
 1128              		.thumb
 1129              		.thumb_func
 1131              	Software_Timers_Init:
 1132              	.LFB118:
 468:../Main.c     **** 
 469:../Main.c     **** /***************************************************/
 470:../Main.c     **** /****************FUNCOES TEMPORAIS******************/
 471:../Main.c     **** /***************************************************/
 472:../Main.c     **** 
 473:../Main.c     **** void Software_Timers_Init() {
 1133              		.loc 1 473 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 8
 1136              		@ frame_needed = 1, uses_anonymous_args = 0
 1137 0000 80B5     		push	{r7, lr}
 1138              	.LCFI16:
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 7, -8
 1141              		.cfi_offset 14, -4
 1142 0002 82B0     		sub	sp, sp, #8
 1143              	.LCFI17:
 1144              		.cfi_def_cfa_offset 16
 1145 0004 00AF     		add	r7, sp, #0
 1146              	.LCFI18:
 1147              		.cfi_def_cfa_register 7
 474:../Main.c     **** 	handle_t TaskTimerId;
 475:../Main.c     **** 
 476:../Main.c     **** 	TaskTimerId = SYSTM002_CreateTimer(SYSTM002_SYSTICK_INTERVAL,
 1148              		.loc 1 476 0
 1149 0006 4FF06400 		mov	r0, #100
 1150 000a 4FF00101 		mov	r1, #1
 1151 000e 40F20002 		movw	r2, #:lower16:Tick_Handler
 1152 0012 C0F20002 		movt	r2, #:upper16:Tick_Handler
 1153 0016 4FF00003 		mov	r3, #0
 1154 001a FFF7FEFF 		bl	SYSTM002_CreateTimer
 1155 001e 7860     		str	r0, [r7, #4]
 477:../Main.c     **** 			SYSTM002_PERIODIC, &Tick_Handler, NULL);
 478:../Main.c     **** 	if (TaskTimerId != 0) {
 1156              		.loc 1 478 0
 1157 0020 7B68     		ldr	r3, [r7, #4]
 1158 0022 002B     		cmp	r3, #0
 1159 0024 02D0     		beq	.L46
 479:../Main.c     **** //Timer created successfully so start it
 480:../Main.c     **** 		SYSTM002_StartTimer(TaskTimerId);
 1160              		.loc 1 480 0
 1161 0026 7868     		ldr	r0, [r7, #4]
 1162 0028 FFF7FEFF 		bl	SYSTM002_StartTimer
 1163              	.L46:
 481:../Main.c     **** 	}
 482:../Main.c     **** }
 1164              		.loc 1 482 0
 1165 002c 07F10807 		add	r7, r7, #8
 1166 0030 BD46     		mov	sp, r7
 1167 0032 80BD     		pop	{r7, pc}
 1168              		.cfi_endproc
 1169              	.LFE118:
 1171              		.section	.text.delayus,"ax",%progbits
 1172              		.align	2
 1173              		.global	delayus
 1174              		.thumb
 1175              		.thumb_func
 1177              	delayus:
 1178              	.LFB119:
 483:../Main.c     **** 
 484:../Main.c     **** void delayus(uint32_t delay_us) {
 1179              		.loc 1 484 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 16
 1182              		@ frame_needed = 1, uses_anonymous_args = 0
 1183              		@ link register save eliminated.
 1184 0000 80B4     		push	{r7}
 1185              	.LCFI19:
 1186              		.cfi_def_cfa_offset 4
 1187              		.cfi_offset 7, -4
 1188 0002 85B0     		sub	sp, sp, #20
 1189              	.LCFI20:
 1190              		.cfi_def_cfa_offset 24
 1191 0004 00AF     		add	r7, sp, #0
 1192              	.LCFI21:
 1193              		.cfi_def_cfa_register 7
 1194 0006 7860     		str	r0, [r7, #4]
 485:../Main.c     **** 	uint32_t currenttick = ticks;
 1195              		.loc 1 485 0
 1196 0008 40F20003 		movw	r3, #:lower16:ticks
 1197 000c C0F20003 		movt	r3, #:upper16:ticks
 1198 0010 1B68     		ldr	r3, [r3, #0]
 1199 0012 FB60     		str	r3, [r7, #12]
 486:../Main.c     **** 	while (ticks - currenttick < (delay_us / SYSTM002_SYSTICK_INTERVAL))
 1200              		.loc 1 486 0
 1201 0014 00BF     		nop
 1202              	.L49:
 1203              		.loc 1 486 0 is_stmt 0 discriminator 1
 1204 0016 40F20003 		movw	r3, #:lower16:ticks
 1205 001a C0F20003 		movt	r3, #:upper16:ticks
 1206 001e 1A68     		ldr	r2, [r3, #0]
 1207 0020 FB68     		ldr	r3, [r7, #12]
 1208 0022 D21A     		subs	r2, r2, r3
 1209 0024 7968     		ldr	r1, [r7, #4]
 1210 0026 48F21F53 		movw	r3, #34079
 1211 002a C5F2EB13 		movt	r3, 20971
 1212 002e A3FB0103 		umull	r0, r3, r3, r1
 1213 0032 4FEA5313 		lsr	r3, r3, #5
 1214 0036 9A42     		cmp	r2, r3
 1215 0038 EDD3     		bcc	.L49
 487:../Main.c     **** 		;
 488:../Main.c     **** 	ticks = 0;
 1216              		.loc 1 488 0 is_stmt 1
 1217 003a 40F20003 		movw	r3, #:lower16:ticks
 1218 003e C0F20003 		movt	r3, #:upper16:ticks
 1219 0042 4FF00002 		mov	r2, #0
 1220 0046 1A60     		str	r2, [r3, #0]
 489:../Main.c     **** }
 1221              		.loc 1 489 0
 1222 0048 07F11407 		add	r7, r7, #20
 1223 004c BD46     		mov	sp, r7
 1224 004e 80BC     		pop	{r7}
 1225 0050 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE119:
 1229 0052 00BF     		.section	.text.delayms,"ax",%progbits
 1230              		.align	2
 1231              		.global	delayms
 1232              		.thumb
 1233              		.thumb_func
 1235              	delayms:
 1236              	.LFB120:
 490:../Main.c     **** 
 491:../Main.c     **** void delayms(uint32_t delay_ms) {
 1237              		.loc 1 491 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 8
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241 0000 80B5     		push	{r7, lr}
 1242              	.LCFI22:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 7, -8
 1245              		.cfi_offset 14, -4
 1246 0002 82B0     		sub	sp, sp, #8
 1247              	.LCFI23:
 1248              		.cfi_def_cfa_offset 16
 1249 0004 00AF     		add	r7, sp, #0
 1250              	.LCFI24:
 1251              		.cfi_def_cfa_register 7
 1252 0006 7860     		str	r0, [r7, #4]
 492:../Main.c     **** 	delayus(1000 * delay_ms);
 1253              		.loc 1 492 0
 1254 0008 7B68     		ldr	r3, [r7, #4]
 1255 000a 4FF47A72 		mov	r2, #1000
 1256 000e 02FB03F3 		mul	r3, r2, r3
 1257 0012 1846     		mov	r0, r3
 1258 0014 FFF7FEFF 		bl	delayus
 493:../Main.c     **** }
 1259              		.loc 1 493 0
 1260 0018 07F10807 		add	r7, r7, #8
 1261 001c BD46     		mov	sp, r7
 1262 001e 80BD     		pop	{r7, pc}
 1263              		.cfi_endproc
 1264              	.LFE120:
 1266              		.section	.text.Tick_Handler,"ax",%progbits
 1267              		.align	2
 1268              		.global	Tick_Handler
 1269              		.thumb
 1270              		.thumb_func
 1272              	Tick_Handler:
 1273              	.LFB121:
 494:../Main.c     **** 
 495:../Main.c     **** void Tick_Handler(void) {
 1274              		.loc 1 495 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 1, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 1279 0000 80B4     		push	{r7}
 1280              	.LCFI25:
 1281              		.cfi_def_cfa_offset 4
 1282              		.cfi_offset 7, -4
 1283 0002 00AF     		add	r7, sp, #0
 1284              	.LCFI26:
 1285              		.cfi_def_cfa_register 7
 496:../Main.c     **** 	ticks++;
 1286              		.loc 1 496 0
 1287 0004 40F20003 		movw	r3, #:lower16:ticks
 1288 0008 C0F20003 		movt	r3, #:upper16:ticks
 1289 000c 1B68     		ldr	r3, [r3, #0]
 1290 000e 03F10102 		add	r2, r3, #1
 1291 0012 40F20003 		movw	r3, #:lower16:ticks
 1292 0016 C0F20003 		movt	r3, #:upper16:ticks
 1293 001a 1A60     		str	r2, [r3, #0]
 497:../Main.c     **** 	status_ticks++;
 1294              		.loc 1 497 0
 1295 001c 40F20003 		movw	r3, #:lower16:status_ticks
 1296 0020 C0F20003 		movt	r3, #:upper16:status_ticks
 1297 0024 1B68     		ldr	r3, [r3, #0]
 1298 0026 03F10102 		add	r2, r3, #1
 1299 002a 40F20003 		movw	r3, #:lower16:status_ticks
 1300 002e C0F20003 		movt	r3, #:upper16:status_ticks
 1301 0032 1A60     		str	r2, [r3, #0]
 498:../Main.c     **** 	block_pwm_update_tick_left--;
 1302              		.loc 1 498 0
 1303 0034 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 1304 0038 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 1305 003c 1B68     		ldr	r3, [r3, #0]
 1306 003e 03F1FF32 		add	r2, r3, #-1
 1307 0042 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_left
 1308 0046 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_left
 1309 004a 1A60     		str	r2, [r3, #0]
 499:../Main.c     **** 	block_pwm_update_tick_right--;
 1310              		.loc 1 499 0
 1311 004c 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 1312 0050 C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 1313 0054 1B68     		ldr	r3, [r3, #0]
 1314 0056 03F1FF32 		add	r2, r3, #-1
 1315 005a 40F20003 		movw	r3, #:lower16:block_pwm_update_tick_right
 1316 005e C0F20003 		movt	r3, #:upper16:block_pwm_update_tick_right
 1317 0062 1A60     		str	r2, [r3, #0]
 500:../Main.c     **** }
 1318              		.loc 1 500 0
 1319 0064 BD46     		mov	sp, r7
 1320 0066 80BC     		pop	{r7}
 1321 0068 7047     		bx	lr
 1322              		.cfi_endproc
 1323              	.LFE121:
 1325 006a 00BF     		.section	.text.delay,"ax",%progbits
 1326              		.align	2
 1327              		.global	delay
 1328              		.thumb
 1329              		.thumb_func
 1331              	delay:
 1332              	.LFB122:
 501:../Main.c     **** 
 502:../Main.c     **** void delay(long unsigned int i) {
 1333              		.loc 1 502 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 8
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337              		@ link register save eliminated.
 1338 0000 80B4     		push	{r7}
 1339              	.LCFI27:
 1340              		.cfi_def_cfa_offset 4
 1341              		.cfi_offset 7, -4
 1342 0002 83B0     		sub	sp, sp, #12
 1343              	.LCFI28:
 1344              		.cfi_def_cfa_offset 16
 1345 0004 00AF     		add	r7, sp, #0
 1346              	.LCFI29:
 1347              		.cfi_def_cfa_register 7
 1348 0006 7860     		str	r0, [r7, #4]
 503:../Main.c     **** 	while (i--) {
 1349              		.loc 1 503 0
 1350 0008 00E0     		b	.L53
 1351              	.L54:
 1352              	.LBB4:
 1353              	.LBB5:
 1354              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1355              		.loc 2 327 0
 1356              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1357 000a 00BF     		nop
 1358              	@ 0 "" 2
 1359              		.thumb
 1360              	.L53:
 1361              	.LBE5:
 1362              	.LBE4:
 1363              		.loc 1 503 0 discriminator 1
 1364 000c 7B68     		ldr	r3, [r7, #4]
 1365 000e 002B     		cmp	r3, #0
 1366 0010 0CBF     		ite	eq
 1367 0012 0023     		moveq	r3, #0
 1368 0014 0123     		movne	r3, #1
 1369 0016 DBB2     		uxtb	r3, r3
 1370 0018 7A68     		ldr	r2, [r7, #4]
 1371 001a 02F1FF32 		add	r2, r2, #-1
 1372 001e 7A60     		str	r2, [r7, #4]
 1373 0020 002B     		cmp	r3, #0
 1374 0022 F2D1     		bne	.L54
 504:../Main.c     **** 
 505:../Main.c     **** 		__NOP();
 506:../Main.c     **** 	}
 507:../Main.c     **** }
 1375              		.loc 1 507 0
 1376 0024 07F10C07 		add	r7, r7, #12
 1377 0028 BD46     		mov	sp, r7
 1378 002a 80BC     		pop	{r7}
 1379 002c 7047     		bx	lr
 1380              		.cfi_endproc
 1381              	.LFE122:
 1383 002e 00BF     		.text
 1384              	.Letext0:
 1385              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1386              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1387              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1388              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1389              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1390              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1391              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1392              		.file 10 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
 1393              		.file 11 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000f configuration
                            *COM*:00000005 data_R
                            *COM*:00000004 status_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:27     .bss:00000000 ticks
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:24     .bss:00000000 $d
                            *COM*:00000004 block_pwm_update_tick_left
                            *COM*:00000004 block_pwm_update_tick_right
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:35     .data:00000000 last_direction_right
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:40     .data:00000001 last_direction_left
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:46     .bss:00000004 block_left
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:51     .bss:00000005 block_right
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:57     .data:00000002 status_block_left
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:62     .data:00000003 status_block_right
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:65     .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:70     .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:912    .text.configure_R:00000000 configure_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:175    .text.start_PWM_signals:00000000 start_PWM_signals
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1131   .text.Software_Timers_Init:00000000 Software_Timers_Init
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:740    .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:248    .text.update_PWM_signals:00000000 update_PWM_signals
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:170    .text.start_PWM_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:243    .text.update_PWM_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:634    .text.update_PWM_signals:00000384 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:644    .text.update_PWM_signals:000003a4 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:735    .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1331   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:861    .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:856    .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:907    .text.configure_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1126   .text.Software_Timers_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1272   .text.Tick_Handler:00000000 Tick_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1172   .text.delayus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1177   .text.delayus:00000000 delayus
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1230   .text.delayms:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1235   .text.delayms:00000000 delayms
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1267   .text.Tick_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc8odPjO.s:1326   .text.delay:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle5
PWMSP001_Handle0
PWMSP001_Start
PWMSP001_SetPwmFreq
PWMSP001_SetDutyCycle
PWMSP001_Handle1
PWMSP001_Handle2
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_DisableOutputDriver
SYSTM002_CreateTimer
SYSTM002_StartTimer
