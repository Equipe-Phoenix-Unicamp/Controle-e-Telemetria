   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB117:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 0.12 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->PDR1 &= (uint32_t)(~(PORT0_PDR1_PD12_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40043 		mov	r3, #32768
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40042 		mov	r2, #32768
  73 004c C4F60202 		movt	r2, 18434
  74 0050 526C     		ldr	r2, [r2, #68]
  75 0052 22F4E022 		bic	r2, r2, #458752
  76 0056 5A64     		str	r2, [r3, #68]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->PDR1 |= (((uint32_t)0 << (uint32_t)PORT0_PDR1_PD12_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40043 		mov	r3, #32768
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40042 		mov	r2, #32768
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 526C     		ldr	r2, [r2, #68]
  83 006a 5A64     		str	r2, [r3, #68]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT0_PDR1_PD12_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->IOCR12  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40043 		mov	r3, #32768
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40042 		mov	r2, #32768
  88 0078 C4F60202 		movt	r2, 18434
  89 007c D269     		ldr	r2, [r2, #28]
  90 007e 22F04002 		bic	r2, r2, #64
  91 0082 DA61     		str	r2, [r3, #28]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->IOCR12  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40043 		mov	r3, #32768
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40042 		mov	r2, #32768
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 D269     		ldr	r2, [r2, #28]
  98 0096 DA61     		str	r2, [r3, #28]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
  99              		.loc 1 296 0
 100 0098 07F10807 		add	r7, r7, #8
 101 009c BD46     		mov	sp, r7
 102 009e 80BD     		pop	{r7, pc}
 103              		.cfi_endproc
 104              	.LFE117:
 106              		.section	.text.PWMSP001_lInit,"ax",%progbits
 107              		.align	2
 108              		.global	PWMSP001_lInit
 109              		.thumb
 110              		.thumb_func
 112              	PWMSP001_lInit:
 113              	.LFB118:
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 114              		.loc 1 301 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 90B5     		push	{r4, r7, lr}
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 12
 121              		.cfi_offset 4, -12
 122              		.cfi_offset 7, -8
 123              		.cfi_offset 14, -4
 124 0002 85B0     		sub	sp, sp, #20
 125              	.LCFI4:
 126              		.cfi_def_cfa_offset 32
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI5:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 131              		.loc 1 302 0
 132 0008 4FF00103 		mov	r3, #1
 133 000c FB60     		str	r3, [r7, #12]
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 134              		.loc 1 307 0
 135 000e 7B68     		ldr	r3, [r7, #4]
 136 0010 DB6B     		ldr	r3, [r3, #60]
 137 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 138 0014 002B     		cmp	r3, #0
 139 0016 40F06981 		bne	.L13
 140              	.L4:
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 141              		.loc 1 311 0
 142 001a 7B68     		ldr	r3, [r7, #4]
 143 001c 9B69     		ldr	r3, [r3, #24]
 144 001e 4FF00702 		mov	r2, #7
 145 0022 1A61     		str	r2, [r3, #16]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 146              		.loc 1 315 0
 147 0024 7B68     		ldr	r3, [r7, #4]
 148 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 149 0028 012B     		cmp	r3, #1
 150 002a 27D1     		bne	.L6
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 151              		.loc 1 317 0
 152 002c 7B68     		ldr	r3, [r7, #4]
 153 002e 9A69     		ldr	r2, [r3, #24]
 154 0030 7B68     		ldr	r3, [r7, #4]
 155 0032 9B69     		ldr	r3, [r3, #24]
 156 0034 1B68     		ldr	r3, [r3, #0]
 157 0036 23F0C053 		bic	r3, r3, #402653184
 158 003a 23F44023 		bic	r3, r3, #786432
 159 003e 1360     		str	r3, [r2, #0]
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 160              		.loc 1 318 0
 161 0040 7B68     		ldr	r3, [r7, #4]
 162 0042 9B69     		ldr	r3, [r3, #24]
 163 0044 7A68     		ldr	r2, [r7, #4]
 164 0046 9269     		ldr	r2, [r2, #24]
 165 0048 5268     		ldr	r2, [r2, #4]
 166 004a 22F00C02 		bic	r2, r2, #12
 167 004e 5A60     		str	r2, [r3, #4]
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 168              		.loc 1 319 0
 169 0050 7B68     		ldr	r3, [r7, #4]
 170 0052 9B69     		ldr	r3, [r3, #24]
 171 0054 7A68     		ldr	r2, [r7, #4]
 172 0056 9269     		ldr	r2, [r2, #24]
 173 0058 1168     		ldr	r1, [r2, #0]
 174 005a 7A68     		ldr	r2, [r7, #4]
 175 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 176 0060 4FEA8242 		lsl	r2, r2, #18
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 177              		.loc 1 320 0
 178 0064 02F44022 		and	r2, r2, #786432
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 179              		.loc 1 319 0
 180 0068 0A43     		orrs	r2, r2, r1
 181 006a 1A60     		str	r2, [r3, #0]
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 182              		.loc 1 323 0
 183 006c 7B68     		ldr	r3, [r7, #4]
 184 006e 9B69     		ldr	r3, [r3, #24]
 185 0070 7A68     		ldr	r2, [r7, #4]
 186 0072 9269     		ldr	r2, [r2, #24]
 187 0074 5268     		ldr	r2, [r2, #4]
 188 0076 42F00802 		orr	r2, r2, #8
 189 007a 5A60     		str	r2, [r3, #4]
 190              	.L6:
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 191              		.loc 1 329 0
 192 007c 7B68     		ldr	r3, [r7, #4]
 193 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 194 0080 012B     		cmp	r3, #1
 195 0082 2BD1     		bne	.L7
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 196              		.loc 1 330 0 discriminator 1
 197 0084 7B68     		ldr	r3, [r7, #4]
 198 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 199              		.loc 1 329 0 discriminator 1
 200 008a 012B     		cmp	r3, #1
 201 008c 26D0     		beq	.L7
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 202              		.loc 1 333 0
 203 008e 7B68     		ldr	r3, [r7, #4]
 204 0090 9A69     		ldr	r2, [r3, #24]
 205 0092 7B68     		ldr	r3, [r7, #4]
 206 0094 9B69     		ldr	r3, [r3, #24]
 207 0096 1B68     		ldr	r3, [r3, #0]
 208 0098 23F0C243 		bic	r3, r3, #1627389952
 209 009c 23F44013 		bic	r3, r3, #3145728
 210 00a0 1360     		str	r3, [r2, #0]
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 211              		.loc 1 335 0
 212 00a2 7B68     		ldr	r3, [r7, #4]
 213 00a4 9B69     		ldr	r3, [r3, #24]
 214 00a6 7A68     		ldr	r2, [r7, #4]
 215 00a8 9269     		ldr	r2, [r2, #24]
 216 00aa 5268     		ldr	r2, [r2, #4]
 217 00ac 22F40032 		bic	r2, r2, #131072
 218 00b0 5A60     		str	r2, [r3, #4]
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 219              		.loc 1 336 0
 220 00b2 7B68     		ldr	r3, [r7, #4]
 221 00b4 9B69     		ldr	r3, [r3, #24]
 222 00b6 7A68     		ldr	r2, [r7, #4]
 223 00b8 9269     		ldr	r2, [r2, #24]
 224 00ba 1168     		ldr	r1, [r2, #0]
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 225              		.loc 1 337 0
 226 00bc 7A68     		ldr	r2, [r7, #4]
 227 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 228 00c0 4FEA0262 		lsl	r2, r2, #24
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 229              		.loc 1 338 0
 230 00c4 02F08072 		and	r2, r2, #16777216
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 231              		.loc 1 336 0
 232 00c8 0A43     		orrs	r2, r2, r1
 233 00ca 1A60     		str	r2, [r3, #0]
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 234              		.loc 1 342 0
 235 00cc 7B68     		ldr	r3, [r7, #4]
 236 00ce 9B69     		ldr	r3, [r3, #24]
 237 00d0 7A68     		ldr	r2, [r7, #4]
 238 00d2 9269     		ldr	r2, [r2, #24]
 239 00d4 5268     		ldr	r2, [r2, #4]
 240 00d6 42F40032 		orr	r2, r2, #131072
 241 00da 5A60     		str	r2, [r3, #4]
 242              	.L7:
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 243              		.loc 1 345 0
 244 00dc 7B68     		ldr	r3, [r7, #4]
 245 00de 9A69     		ldr	r2, [r3, #24]
 246 00e0 7B68     		ldr	r3, [r7, #4]
 247 00e2 9B69     		ldr	r3, [r3, #24]
 248 00e4 5B69     		ldr	r3, [r3, #20]
 249 00e6 23F4CE43 		bic	r3, r3, #26368
 250 00ea 23F00903 		bic	r3, r3, #9
 251 00ee 5361     		str	r3, [r2, #20]
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 252              		.loc 1 349 0
 253 00f0 7B68     		ldr	r3, [r7, #4]
 254 00f2 9B69     		ldr	r3, [r3, #24]
 255 00f4 7A68     		ldr	r2, [r7, #4]
 256 00f6 9269     		ldr	r2, [r2, #24]
 257 00f8 5169     		ldr	r1, [r2, #20]
 258 00fa 7A68     		ldr	r2, [r7, #4]
 259 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 260              		.loc 1 350 0
 261 0100 02F00100 		and	r0, r2, #1
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 262              		.loc 1 353 0
 263 0104 7A68     		ldr	r2, [r7, #4]
 264 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 265 010a 4FEA8222 		lsl	r2, r2, #10
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 266              		.loc 1 354 0
 267 010e 02F48062 		and	r2, r2, #1024
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 268              		.loc 1 352 0
 269 0112 1043     		orrs	r0, r0, r2
 270              		.loc 1 354 0
 271 0114 7A68     		ldr	r2, [r7, #4]
 272 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 273 011a 4FEA0222 		lsl	r2, r2, #8
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 274              		.loc 1 355 0
 275 011e 02F44072 		and	r2, r2, #768
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 276              		.loc 1 354 0
 277 0122 0243     		orrs	r2, r2, r0
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 278              		.loc 1 349 0
 279 0124 0A43     		orrs	r2, r2, r1
 280 0126 5A61     		str	r2, [r3, #20]
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 281              		.loc 1 360 0
 282 0128 7B68     		ldr	r3, [r7, #4]
 283 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 284 012e 012B     		cmp	r3, #1
 285 0130 0ED0     		beq	.L8
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 286              		.loc 1 362 0
 287 0132 7B68     		ldr	r3, [r7, #4]
 288 0134 9B69     		ldr	r3, [r3, #24]
 289 0136 7A68     		ldr	r2, [r7, #4]
 290 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 291 013a 4FEA4202 		lsl	r2, r2, #1
 292 013e 02F00201 		and	r1, r2, #2
 293 0142 7A68     		ldr	r2, [r7, #4]
 294 0144 9269     		ldr	r2, [r2, #24]
 295 0146 5269     		ldr	r2, [r2, #20]
 296 0148 22F00202 		bic	r2, r2, #2
 297 014c 0A43     		orrs	r2, r2, r1
 298 014e 5A61     		str	r2, [r3, #20]
 299              	.L8:
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 300              		.loc 1 367 0
 301 0150 7B68     		ldr	r3, [r7, #4]
 302 0152 9B69     		ldr	r3, [r3, #24]
 303 0154 7A68     		ldr	r2, [r7, #4]
 304 0156 9269     		ldr	r2, [r2, #24]
 305 0158 5169     		ldr	r1, [r2, #20]
 306 015a 7A68     		ldr	r2, [r7, #4]
 307 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 308 0160 4FEA4232 		lsl	r2, r2, #13
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 309              		.loc 1 368 0
 310 0164 02F4C042 		and	r2, r2, #24576
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 311              		.loc 1 367 0
 312 0168 0A43     		orrs	r2, r2, r1
 313 016a 5A61     		str	r2, [r3, #20]
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 314              		.loc 1 370 0
 315 016c 7B68     		ldr	r3, [r7, #4]
 316 016e 9B69     		ldr	r3, [r3, #24]
 317 0170 7A68     		ldr	r2, [r7, #4]
 318 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 319 0174 02F00F01 		and	r1, r2, #15
 320 0178 7A68     		ldr	r2, [r7, #4]
 321 017a 9269     		ldr	r2, [r2, #24]
 322 017c 126A     		ldr	r2, [r2, #32]
 323 017e 22F00F02 		bic	r2, r2, #15
 324 0182 0A43     		orrs	r2, r2, r1
 325 0184 1A62     		str	r2, [r3, #32]
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 326              		.loc 1 374 0
 327 0186 7B68     		ldr	r3, [r7, #4]
 328 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 329 018c 012B     		cmp	r3, #1
 330 018e 2CD0     		beq	.L9
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 331              		.loc 1 377 0
 332 0190 7B68     		ldr	r3, [r7, #4]
 333 0192 9B69     		ldr	r3, [r3, #24]
 334 0194 7A68     		ldr	r2, [r7, #4]
 335 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 336 0198 4FEA4252 		lsl	r2, r2, #21
 337 019c 02F40011 		and	r1, r2, #2097152
 338 01a0 7A68     		ldr	r2, [r7, #4]
 339 01a2 9269     		ldr	r2, [r2, #24]
 340 01a4 5269     		ldr	r2, [r2, #20]
 341 01a6 22F40012 		bic	r2, r2, #2097152
 342 01aa 0A43     		orrs	r2, r2, r1
 343 01ac 5A61     		str	r2, [r3, #20]
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 344              		.loc 1 380 0
 345 01ae 7B68     		ldr	r3, [r7, #4]
 346 01b0 9B69     		ldr	r3, [r3, #24]
 347 01b2 7A68     		ldr	r2, [r7, #4]
 348 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 349 01b6 4FEA8252 		lsl	r2, r2, #22
 350 01ba 02F48001 		and	r1, r2, #4194304
 351 01be 7A68     		ldr	r2, [r7, #4]
 352 01c0 9269     		ldr	r2, [r2, #24]
 353 01c2 5269     		ldr	r2, [r2, #20]
 354 01c4 22F48002 		bic	r2, r2, #4194304
 355 01c8 0A43     		orrs	r2, r2, r1
 356 01ca 5A61     		str	r2, [r3, #20]
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 357              		.loc 1 383 0
 358 01cc 7B68     		ldr	r3, [r7, #4]
 359 01ce 9B69     		ldr	r3, [r3, #24]
 360 01d0 7A68     		ldr	r2, [r7, #4]
 361 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 362 01d4 4FEA4242 		lsl	r2, r2, #17
 363 01d8 02F40031 		and	r1, r2, #131072
 364 01dc 7A68     		ldr	r2, [r7, #4]
 365 01de 9269     		ldr	r2, [r2, #24]
 366 01e0 5269     		ldr	r2, [r2, #20]
 367 01e2 22F40032 		bic	r2, r2, #131072
 368 01e6 0A43     		orrs	r2, r2, r1
 369 01e8 5A61     		str	r2, [r3, #20]
 370              	.L9:
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 371              		.loc 1 387 0
 372 01ea 7B68     		ldr	r3, [r7, #4]
 373 01ec 9B69     		ldr	r3, [r3, #24]
 374 01ee 7A68     		ldr	r2, [r7, #4]
 375 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 376 01f4 02F00F01 		and	r1, r2, #15
 377 01f8 7A68     		ldr	r2, [r7, #4]
 378 01fa 9269     		ldr	r2, [r2, #24]
 379 01fc 526A     		ldr	r2, [r2, #36]
 380 01fe 22F00F02 		bic	r2, r2, #15
 381 0202 0A43     		orrs	r2, r2, r1
 382 0204 5A62     		str	r2, [r3, #36]
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 383              		.loc 1 389 0
 384 0206 7B68     		ldr	r3, [r7, #4]
 385 0208 9B69     		ldr	r3, [r3, #24]
 386 020a 7A68     		ldr	r2, [r7, #4]
 387 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 388 020e 9A61     		str	r2, [r3, #24]
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 389              		.loc 1 393 0
 390 0210 7B68     		ldr	r3, [r7, #4]
 391 0212 9A69     		ldr	r2, [r3, #24]
 392 0214 7B68     		ldr	r3, [r7, #4]
 393 0216 9B6A     		ldr	r3, [r3, #40]
 394 0218 4FEA0343 		lsl	r3, r3, #16
 395 021c 4FEA1343 		lsr	r3, r3, #16
 396 0220 5363     		str	r3, [r2, #52]
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 397              		.loc 1 395 0
 398 0222 7B68     		ldr	r3, [r7, #4]
 399 0224 9A69     		ldr	r2, [r3, #24]
 400 0226 7B68     		ldr	r3, [r7, #4]
 401 0228 9B68     		ldr	r3, [r3, #8]
 402 022a 4FEA0343 		lsl	r3, r3, #16
 403 022e 4FEA1343 		lsr	r3, r3, #16
 404 0232 D363     		str	r3, [r2, #60]
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 405              		.loc 1 396 0
 406 0234 7B68     		ldr	r3, [r7, #4]
 407 0236 9A69     		ldr	r2, [r3, #24]
 408 0238 7B68     		ldr	r3, [r7, #4]
 409 023a 9B69     		ldr	r3, [r3, #24]
 410 023c D3F8B030 		ldr	r3, [r3, #176]
 411 0240 43F47063 		orr	r3, r3, #3840
 412 0244 43F00F03 		orr	r3, r3, #15
 413 0248 C2F8B030 		str	r3, [r2, #176]
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 414              		.loc 1 400 0
 415 024c 7B68     		ldr	r3, [r7, #4]
 416 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 417 0252 012B     		cmp	r3, #1
 418 0254 0ED1     		bne	.L10
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 419              		.loc 1 402 0
 420 0256 7868     		ldr	r0, [r7, #4]
 421 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 422              		.loc 1 403 0
 423 025c 7B68     		ldr	r3, [r7, #4]
 424 025e DB69     		ldr	r3, [r3, #28]
 425 0260 7A68     		ldr	r2, [r7, #4]
 426 0262 D269     		ldr	r2, [r2, #28]
 427 0264 D2F8A410 		ldr	r1, [r2, #164]
 428 0268 7A68     		ldr	r2, [r7, #4]
 429 026a 126B     		ldr	r2, [r2, #48]
 430 026c 0A43     		orrs	r2, r2, r1
 431 026e C3F8A420 		str	r2, [r3, #164]
 432 0272 0AE0     		b	.L11
 433              	.L10:
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 434              		.loc 1 408 0
 435 0274 7B68     		ldr	r3, [r7, #4]
 436 0276 9B69     		ldr	r3, [r3, #24]
 437 0278 7A68     		ldr	r2, [r7, #4]
 438 027a 9269     		ldr	r2, [r2, #24]
 439 027c D2F8A410 		ldr	r1, [r2, #164]
 440 0280 7A68     		ldr	r2, [r7, #4]
 441 0282 126B     		ldr	r2, [r2, #48]
 442 0284 0A43     		orrs	r2, r2, r1
 443 0286 C3F8A420 		str	r2, [r3, #164]
 444              	.L11:
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 445              		.loc 1 413 0
 446 028a 7B68     		ldr	r3, [r7, #4]
 447 028c 5B69     		ldr	r3, [r3, #20]
 448 028e 7A68     		ldr	r2, [r7, #4]
 449 0290 5269     		ldr	r2, [r2, #20]
 450 0292 1169     		ldr	r1, [r2, #16]
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 451              		.loc 1 414 0
 452 0294 7A68     		ldr	r2, [r7, #4]
 453 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 454              		.loc 1 413 0
 455 029a 4FEA8202 		lsl	r2, r2, #2
 456 029e 4FF00100 		mov	r0, #1
 457 02a2 00FA02F0 		lsl	r0, r0, r2
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 458              		.loc 1 415 0
 459 02a6 7A68     		ldr	r2, [r7, #4]
 460 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 461              		.loc 1 414 0
 462 02ac 4FEA8202 		lsl	r2, r2, #2
 463              		.loc 1 415 0
 464 02b0 02F10102 		add	r2, r2, #1
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 465              		.loc 1 414 0
 466 02b4 4FF00104 		mov	r4, #1
 467 02b8 04FA02F2 		lsl	r2, r4, r2
 468 02bc 1043     		orrs	r0, r0, r2
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 469              		.loc 1 416 0
 470 02be 7A68     		ldr	r2, [r7, #4]
 471 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 472 02c4 4FEA8202 		lsl	r2, r2, #2
 473 02c8 02F10202 		add	r2, r2, #2
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 474              		.loc 1 415 0
 475 02cc 4FF00104 		mov	r4, #1
 476 02d0 04FA02F2 		lsl	r2, r4, r2
 477 02d4 0243     		orrs	r2, r2, r0
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 478              		.loc 1 413 0
 479 02d6 0A43     		orrs	r2, r2, r1
 480 02d8 1A61     		str	r2, [r3, #16]
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 481              		.loc 1 418 0
 482 02da 4FF00003 		mov	r3, #0
 483 02de FB60     		str	r3, [r7, #12]
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 484              		.loc 1 419 0
 485 02e0 7B68     		ldr	r3, [r7, #4]
 486 02e2 DB6B     		ldr	r3, [r3, #60]
 487 02e4 4FF00102 		mov	r2, #1
 488 02e8 1A70     		strb	r2, [r3, #0]
 489 02ea 00E0     		b	.L5
 490              	.L13:
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 491              		.loc 1 309 0
 492 02ec 00BF     		nop
 493              	.L5:
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 494              		.loc 1 426 0
 495 02ee FB68     		ldr	r3, [r7, #12]
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 496              		.loc 1 427 0
 497 02f0 1846     		mov	r0, r3
 498 02f2 07F11407 		add	r7, r7, #20
 499 02f6 BD46     		mov	sp, r7
 500 02f8 90BD     		pop	{r4, r7, pc}
 501              		.cfi_endproc
 502              	.LFE118:
 504 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 505              		.align	2
 506              		.global	PWMSP001_Deinit
 507              		.thumb
 508              		.thumb_func
 510              	PWMSP001_Deinit:
 511              	.LFB119:
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 512              		.loc 1 432 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 32
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517 0000 80B4     		push	{r7}
 518              	.LCFI6:
 519              		.cfi_def_cfa_offset 4
 520              		.cfi_offset 7, -4
 521 0002 89B0     		sub	sp, sp, #36
 522              	.LCFI7:
 523              		.cfi_def_cfa_offset 40
 524 0004 00AF     		add	r7, sp, #0
 525              	.LCFI8:
 526              		.cfi_def_cfa_register 7
 527 0006 7860     		str	r0, [r7, #4]
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 528              		.loc 1 433 0
 529 0008 4FF00103 		mov	r3, #1
 530 000c FB61     		str	r3, [r7, #28]
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 531              		.loc 1 440 0
 532 000e 7B68     		ldr	r3, [r7, #4]
 533 0010 DB6B     		ldr	r3, [r3, #60]
 534 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 535 0014 002B     		cmp	r3, #0
 536 0016 00F0AB80 		beq	.L15
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 537              		.loc 1 443 0
 538 001a 7B68     		ldr	r3, [r7, #4]
 539 001c 9B69     		ldr	r3, [r3, #24]
 540 001e 4FF00702 		mov	r2, #7
 541 0022 1A61     		str	r2, [r3, #16]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 542              		.loc 1 444 0
 543 0024 7B68     		ldr	r3, [r7, #4]
 544 0026 9B69     		ldr	r3, [r3, #24]
 545 0028 40F60F72 		movw	r2, #3855
 546 002c C3F8B020 		str	r2, [r3, #176]
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 547              		.loc 1 445 0
 548 0030 7B68     		ldr	r3, [r7, #4]
 549 0032 9B69     		ldr	r3, [r3, #24]
 550 0034 4FF00002 		mov	r2, #0
 551 0038 C3F8A420 		str	r2, [r3, #164]
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 552              		.loc 1 448 0
 553 003c 7B68     		ldr	r3, [r7, #4]
 554 003e 5B69     		ldr	r3, [r3, #20]
 555 0040 7A68     		ldr	r2, [r7, #4]
 556 0042 5269     		ldr	r2, [r2, #20]
 557 0044 9168     		ldr	r1, [r2, #8]
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 558              		.loc 1 449 0
 559 0046 7A68     		ldr	r2, [r7, #4]
 560 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 561              		.loc 1 448 0
 562 004c 4FF00100 		mov	r0, #1
 563 0050 00FA02F2 		lsl	r2, r0, r2
 564 0054 0A43     		orrs	r2, r2, r1
 565 0056 42F44072 		orr	r2, r2, #768
 566 005a 9A60     		str	r2, [r3, #8]
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 567              		.loc 1 453 0
 568 005c 7B68     		ldr	r3, [r7, #4]
 569 005e 9B69     		ldr	r3, [r3, #24]
 570 0060 4FF00002 		mov	r2, #0
 571 0064 1A60     		str	r2, [r3, #0]
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 572              		.loc 1 454 0
 573 0066 7B68     		ldr	r3, [r7, #4]
 574 0068 9B69     		ldr	r3, [r3, #24]
 575 006a 4FF00002 		mov	r2, #0
 576 006e 5A60     		str	r2, [r3, #4]
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 577              		.loc 1 455 0
 578 0070 7B68     		ldr	r3, [r7, #4]
 579 0072 9B69     		ldr	r3, [r3, #24]
 580 0074 4FF00002 		mov	r2, #0
 581 0078 5A61     		str	r2, [r3, #20]
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 582              		.loc 1 456 0
 583 007a 7B68     		ldr	r3, [r7, #4]
 584 007c 9B69     		ldr	r3, [r3, #24]
 585 007e 4FF00002 		mov	r2, #0
 586 0082 5A62     		str	r2, [r3, #36]
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 587              		.loc 1 457 0
 588 0084 7B68     		ldr	r3, [r7, #4]
 589 0086 9B69     		ldr	r3, [r3, #24]
 590 0088 4FF00002 		mov	r2, #0
 591 008c 9A61     		str	r2, [r3, #24]
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 592              		.loc 1 458 0
 593 008e 7B68     		ldr	r3, [r7, #4]
 594 0090 9B69     		ldr	r3, [r3, #24]
 595 0092 4FF00002 		mov	r2, #0
 596 0096 1A62     		str	r2, [r3, #32]
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 597              		.loc 1 459 0
 598 0098 7B68     		ldr	r3, [r7, #4]
 599 009a 9B69     		ldr	r3, [r3, #24]
 600 009c 4FF00002 		mov	r2, #0
 601 00a0 DA63     		str	r2, [r3, #60]
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 602              		.loc 1 460 0
 603 00a2 7B68     		ldr	r3, [r7, #4]
 604 00a4 9B69     		ldr	r3, [r3, #24]
 605 00a6 4FF00002 		mov	r2, #0
 606 00aa 5A63     		str	r2, [r3, #52]
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 607              		.loc 1 463 0
 608 00ac 7B68     		ldr	r3, [r7, #4]
 609 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 610 00b2 012B     		cmp	r3, #1
 611 00b4 54D1     		bne	.L16
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 612              		.loc 1 466 0
 613 00b6 7B68     		ldr	r3, [r7, #4]
 614 00b8 DB69     		ldr	r3, [r3, #28]
 615 00ba 4FF00702 		mov	r2, #7
 616 00be 1A61     		str	r2, [r3, #16]
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 617              		.loc 1 467 0
 618 00c0 7B68     		ldr	r3, [r7, #4]
 619 00c2 DB69     		ldr	r3, [r3, #28]
 620 00c4 40F60F72 		movw	r2, #3855
 621 00c8 C3F8B020 		str	r2, [r3, #176]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 622              		.loc 1 468 0
 623 00cc 7B68     		ldr	r3, [r7, #4]
 624 00ce DB69     		ldr	r3, [r3, #28]
 625 00d0 4FF00002 		mov	r2, #0
 626 00d4 C3F8A420 		str	r2, [r3, #164]
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 627              		.loc 1 471 0
 628 00d8 4FF40073 		mov	r3, #512
 629 00dc BB61     		str	r3, [r7, #24]
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 630              		.loc 1 472 0
 631 00de 4FF48073 		mov	r3, #256
 632 00e2 7B61     		str	r3, [r7, #20]
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 633              		.loc 1 473 0
 634 00e4 7B68     		ldr	r3, [r7, #4]
 635 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 636 00ea 3B61     		str	r3, [r7, #16]
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 637              		.loc 1 474 0
 638 00ec 7A69     		ldr	r2, [r7, #20]
 639 00ee BB69     		ldr	r3, [r7, #24]
 640 00f0 1343     		orrs	r3, r3, r2
 641 00f2 FB60     		str	r3, [r7, #12]
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 642              		.loc 1 475 0
 643 00f4 7B68     		ldr	r3, [r7, #4]
 644 00f6 5B69     		ldr	r3, [r3, #20]
 645 00f8 7A68     		ldr	r2, [r7, #4]
 646 00fa 5269     		ldr	r2, [r2, #20]
 647 00fc 9168     		ldr	r1, [r2, #8]
 648 00fe 3A69     		ldr	r2, [r7, #16]
 649 0100 4FF00100 		mov	r0, #1
 650 0104 00FA02F0 		lsl	r0, r0, r2
 651 0108 FA68     		ldr	r2, [r7, #12]
 652 010a 0243     		orrs	r2, r2, r0
 653 010c 0A43     		orrs	r2, r2, r1
 654 010e 9A60     		str	r2, [r3, #8]
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 655              		.loc 1 479 0
 656 0110 7B68     		ldr	r3, [r7, #4]
 657 0112 DB69     		ldr	r3, [r3, #28]
 658 0114 4FF00002 		mov	r2, #0
 659 0118 1A60     		str	r2, [r3, #0]
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 660              		.loc 1 480 0
 661 011a 7B68     		ldr	r3, [r7, #4]
 662 011c DB69     		ldr	r3, [r3, #28]
 663 011e 4FF00002 		mov	r2, #0
 664 0122 5A60     		str	r2, [r3, #4]
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 665              		.loc 1 481 0
 666 0124 7B68     		ldr	r3, [r7, #4]
 667 0126 DB69     		ldr	r3, [r3, #28]
 668 0128 4FF00002 		mov	r2, #0
 669 012c 5A61     		str	r2, [r3, #20]
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 670              		.loc 1 482 0
 671 012e 7B68     		ldr	r3, [r7, #4]
 672 0130 DB69     		ldr	r3, [r3, #28]
 673 0132 4FF00002 		mov	r2, #0
 674 0136 5A62     		str	r2, [r3, #36]
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 675              		.loc 1 483 0
 676 0138 7B68     		ldr	r3, [r7, #4]
 677 013a DB69     		ldr	r3, [r3, #28]
 678 013c 4FF00002 		mov	r2, #0
 679 0140 9A61     		str	r2, [r3, #24]
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 680              		.loc 1 484 0
 681 0142 7B68     		ldr	r3, [r7, #4]
 682 0144 DB69     		ldr	r3, [r3, #28]
 683 0146 4FF00002 		mov	r2, #0
 684 014a 1A62     		str	r2, [r3, #32]
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 685              		.loc 1 485 0
 686 014c 7B68     		ldr	r3, [r7, #4]
 687 014e DB69     		ldr	r3, [r3, #28]
 688 0150 4FF00002 		mov	r2, #0
 689 0154 DA63     		str	r2, [r3, #60]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 690              		.loc 1 486 0
 691 0156 7B68     		ldr	r3, [r7, #4]
 692 0158 DB69     		ldr	r3, [r3, #28]
 693 015a 4FF00002 		mov	r2, #0
 694 015e 5A63     		str	r2, [r3, #52]
 695              	.L16:
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 696              		.loc 1 489 0
 697 0160 7B68     		ldr	r3, [r7, #4]
 698 0162 DB6B     		ldr	r3, [r3, #60]
 699 0164 4FF00002 		mov	r2, #0
 700 0168 1A70     		strb	r2, [r3, #0]
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 701              		.loc 1 491 0
 702 016a 4FF00003 		mov	r3, #0
 703 016e FB61     		str	r3, [r7, #28]
 704              	.L15:
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 705              		.loc 1 498 0
 706 0170 FB69     		ldr	r3, [r7, #28]
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 707              		.loc 1 499 0
 708 0172 1846     		mov	r0, r3
 709 0174 07F12407 		add	r7, r7, #36
 710 0178 BD46     		mov	sp, r7
 711 017a 80BC     		pop	{r7}
 712 017c 7047     		bx	lr
 713              		.cfi_endproc
 714              	.LFE119:
 716 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 717              		.align	2
 718              		.global	PWMSP001_Start
 719              		.thumb
 720              		.thumb_func
 722              	PWMSP001_Start:
 723              	.LFB120:
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 724              		.loc 1 505 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 16
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729 0000 80B4     		push	{r7}
 730              	.LCFI9:
 731              		.cfi_def_cfa_offset 4
 732              		.cfi_offset 7, -4
 733 0002 85B0     		sub	sp, sp, #20
 734              	.LCFI10:
 735              		.cfi_def_cfa_offset 24
 736 0004 00AF     		add	r7, sp, #0
 737              	.LCFI11:
 738              		.cfi_def_cfa_register 7
 739 0006 7860     		str	r0, [r7, #4]
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 740              		.loc 1 506 0
 741 0008 4FF00103 		mov	r3, #1
 742 000c FB60     		str	r3, [r7, #12]
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 743              		.loc 1 511 0
 744 000e 7B68     		ldr	r3, [r7, #4]
 745 0010 DB6B     		ldr	r3, [r3, #60]
 746 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 747 0014 012B     		cmp	r3, #1
 748 0016 05D0     		beq	.L19
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 749              		.loc 1 512 0 discriminator 1
 750 0018 7B68     		ldr	r3, [r7, #4]
 751 001a DB6B     		ldr	r3, [r3, #60]
 752 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 753              		.loc 1 511 0 discriminator 1
 754 001e 032B     		cmp	r3, #3
 755 0020 40F0A780 		bne	.L26
 756              	.L19:
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 757              		.loc 1 518 0
 758 0024 7B68     		ldr	r3, [r7, #4]
 759 0026 9B69     		ldr	r3, [r3, #24]
 760 0028 40F60F72 		movw	r2, #3855
 761 002c C3F8B020 		str	r2, [r3, #176]
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 762              		.loc 1 521 0
 763 0030 7B68     		ldr	r3, [r7, #4]
 764 0032 5B69     		ldr	r3, [r3, #20]
 765 0034 7A68     		ldr	r2, [r7, #4]
 766 0036 5269     		ldr	r2, [r2, #20]
 767 0038 D168     		ldr	r1, [r2, #12]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 768              		.loc 1 523 0
 769 003a 7A68     		ldr	r2, [r7, #4]
 770 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 771              		.loc 1 522 0
 772 0040 4FF00100 		mov	r0, #1
 773 0044 00FA02F2 		lsl	r2, r0, r2
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 774              		.loc 1 521 0
 775 0048 0A43     		orrs	r2, r2, r1
 776 004a DA60     		str	r2, [r3, #12]
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 777              		.loc 1 524 0
 778 004c 7B68     		ldr	r3, [r7, #4]
 779 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 780 0052 012B     		cmp	r3, #1
 781 0054 0DD1     		bne	.L21
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 782              		.loc 1 526 0
 783 0056 7B68     		ldr	r3, [r7, #4]
 784 0058 5B69     		ldr	r3, [r3, #20]
 785 005a 7A68     		ldr	r2, [r7, #4]
 786 005c 5269     		ldr	r2, [r2, #20]
 787 005e D168     		ldr	r1, [r2, #12]
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 788              		.loc 1 528 0
 789 0060 7A68     		ldr	r2, [r7, #4]
 790 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 791              		.loc 1 527 0
 792 0066 4FF00100 		mov	r0, #1
 793 006a 00FA02F2 		lsl	r2, r0, r2
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 794              		.loc 1 526 0
 795 006e 0A43     		orrs	r2, r2, r1
 796 0070 DA60     		str	r2, [r3, #12]
 797              	.L21:
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 798              		.loc 1 532 0
 799 0072 7B68     		ldr	r3, [r7, #4]
 800 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 801 0076 002B     		cmp	r3, #0
 802 0078 15D1     		bne	.L22
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 803              		.loc 1 534 0
 804 007a 7B68     		ldr	r3, [r7, #4]
 805 007c 9B69     		ldr	r3, [r3, #24]
 806 007e 7A68     		ldr	r2, [r7, #4]
 807 0080 9269     		ldr	r2, [r2, #24]
 808 0082 D268     		ldr	r2, [r2, #12]
 809 0084 42F00102 		orr	r2, r2, #1
 810 0088 DA60     		str	r2, [r3, #12]
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 811              		.loc 1 535 0
 812 008a 7B68     		ldr	r3, [r7, #4]
 813 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 814 0090 012B     		cmp	r3, #1
 815 0092 65D1     		bne	.L23
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 816              		.loc 1 537 0
 817 0094 7B68     		ldr	r3, [r7, #4]
 818 0096 DB69     		ldr	r3, [r3, #28]
 819 0098 7A68     		ldr	r2, [r7, #4]
 820 009a D269     		ldr	r2, [r2, #28]
 821 009c D268     		ldr	r2, [r2, #12]
 822 009e 42F00102 		orr	r2, r2, #1
 823 00a2 DA60     		str	r2, [r3, #12]
 824 00a4 5CE0     		b	.L23
 825              	.L22:
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 826              		.loc 1 543 0
 827 00a6 7B68     		ldr	r3, [r7, #4]
 828 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 829 00aa 012B     		cmp	r3, #1
 830 00ac 27D1     		bne	.L24
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 831              		.loc 1 545 0
 832 00ae 7B68     		ldr	r3, [r7, #4]
 833 00b0 9A69     		ldr	r2, [r3, #24]
 834 00b2 7B68     		ldr	r3, [r7, #4]
 835 00b4 9B69     		ldr	r3, [r3, #24]
 836 00b6 1B68     		ldr	r3, [r3, #0]
 837 00b8 23F0C063 		bic	r3, r3, #100663296
 838 00bc 23F44033 		bic	r3, r3, #196608
 839 00c0 1360     		str	r3, [r2, #0]
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 840              		.loc 1 547 0
 841 00c2 7B68     		ldr	r3, [r7, #4]
 842 00c4 9B69     		ldr	r3, [r3, #24]
 843 00c6 7A68     		ldr	r2, [r7, #4]
 844 00c8 9269     		ldr	r2, [r2, #24]
 845 00ca 5268     		ldr	r2, [r2, #4]
 846 00cc 22F00302 		bic	r2, r2, #3
 847 00d0 5A60     		str	r2, [r3, #4]
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 848              		.loc 1 548 0
 849 00d2 7B68     		ldr	r3, [r7, #4]
 850 00d4 9B69     		ldr	r3, [r3, #24]
 851 00d6 7A68     		ldr	r2, [r7, #4]
 852 00d8 9269     		ldr	r2, [r2, #24]
 853 00da 1168     		ldr	r1, [r2, #0]
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 854              		.loc 1 549 0
 855 00dc 7A68     		ldr	r2, [r7, #4]
 856 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 857 00e2 4FEA0242 		lsl	r2, r2, #16
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 858              		.loc 1 550 0
 859 00e6 02F44032 		and	r2, r2, #196608
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 860              		.loc 1 548 0
 861 00ea 0A43     		orrs	r2, r2, r1
 862 00ec 1A60     		str	r2, [r3, #0]
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 863              		.loc 1 552 0
 864 00ee 7B68     		ldr	r3, [r7, #4]
 865 00f0 9B69     		ldr	r3, [r3, #24]
 866 00f2 7A68     		ldr	r2, [r7, #4]
 867 00f4 9269     		ldr	r2, [r2, #24]
 868 00f6 5268     		ldr	r2, [r2, #4]
 869 00f8 42F00102 		orr	r2, r2, #1
 870 00fc 5A60     		str	r2, [r3, #4]
 871              	.L24:
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 872              		.loc 1 556 0
 873 00fe 7B68     		ldr	r3, [r7, #4]
 874 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 875 0102 012B     		cmp	r3, #1
 876 0104 2CD1     		bne	.L23
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 877              		.loc 1 557 0 discriminator 1
 878 0106 7B68     		ldr	r3, [r7, #4]
 879 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 880              		.loc 1 556 0 discriminator 1
 881 010c 012B     		cmp	r3, #1
 882 010e 27D1     		bne	.L23
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 883              		.loc 1 560 0
 884 0110 7B68     		ldr	r3, [r7, #4]
 885 0112 DA69     		ldr	r2, [r3, #28]
 886 0114 7B68     		ldr	r3, [r7, #4]
 887 0116 DB69     		ldr	r3, [r3, #28]
 888 0118 1B68     		ldr	r3, [r3, #0]
 889 011a 23F0C063 		bic	r3, r3, #100663296
 890 011e 23F44033 		bic	r3, r3, #196608
 891 0122 1360     		str	r3, [r2, #0]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 892              		.loc 1 561 0
 893 0124 7B68     		ldr	r3, [r7, #4]
 894 0126 DB69     		ldr	r3, [r3, #28]
 895 0128 7A68     		ldr	r2, [r7, #4]
 896 012a D269     		ldr	r2, [r2, #28]
 897 012c 5268     		ldr	r2, [r2, #4]
 898 012e 22F00302 		bic	r2, r2, #3
 899 0132 5A60     		str	r2, [r3, #4]
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 900              		.loc 1 562 0
 901 0134 7B68     		ldr	r3, [r7, #4]
 902 0136 DB69     		ldr	r3, [r3, #28]
 903 0138 7A68     		ldr	r2, [r7, #4]
 904 013a D269     		ldr	r2, [r2, #28]
 905 013c 1168     		ldr	r1, [r2, #0]
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 906              		.loc 1 563 0
 907 013e 7A68     		ldr	r2, [r7, #4]
 908 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 909 0144 4FEA0242 		lsl	r2, r2, #16
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 910              		.loc 1 564 0
 911 0148 02F44032 		and	r2, r2, #196608
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 912              		.loc 1 562 0
 913 014c 0A43     		orrs	r2, r2, r1
 914 014e 1A60     		str	r2, [r3, #0]
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 915              		.loc 1 566 0
 916 0150 7B68     		ldr	r3, [r7, #4]
 917 0152 DB69     		ldr	r3, [r3, #28]
 918 0154 7A68     		ldr	r2, [r7, #4]
 919 0156 D269     		ldr	r2, [r2, #28]
 920 0158 5268     		ldr	r2, [r2, #4]
 921 015a 42F00102 		orr	r2, r2, #1
 922 015e 5A60     		str	r2, [r3, #4]
 923              	.L23:
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 924              		.loc 1 571 0
 925 0160 7B68     		ldr	r3, [r7, #4]
 926 0162 DB6B     		ldr	r3, [r3, #60]
 927 0164 4FF00202 		mov	r2, #2
 928 0168 1A70     		strb	r2, [r3, #0]
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 929              		.loc 1 572 0
 930 016a 4FF00003 		mov	r3, #0
 931 016e FB60     		str	r3, [r7, #12]
 932 0170 00E0     		b	.L20
 933              	.L26:
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 934              		.loc 1 515 0
 935 0172 00BF     		nop
 936              	.L20:
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 937              		.loc 1 574 0
 938 0174 FB68     		ldr	r3, [r7, #12]
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 939              		.loc 1 575 0
 940 0176 1846     		mov	r0, r3
 941 0178 07F11407 		add	r7, r7, #20
 942 017c BD46     		mov	sp, r7
 943 017e 80BC     		pop	{r7}
 944 0180 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE120:
 948 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 949              		.align	2
 950              		.global	PWMSP001_Stop
 951              		.thumb
 952              		.thumb_func
 954              	PWMSP001_Stop:
 955              	.LFB121:
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 956              		.loc 1 580 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 24
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961 0000 80B4     		push	{r7}
 962              	.LCFI12:
 963              		.cfi_def_cfa_offset 4
 964              		.cfi_offset 7, -4
 965 0002 87B0     		sub	sp, sp, #28
 966              	.LCFI13:
 967              		.cfi_def_cfa_offset 32
 968 0004 00AF     		add	r7, sp, #0
 969              	.LCFI14:
 970              		.cfi_def_cfa_register 7
 971 0006 7860     		str	r0, [r7, #4]
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 972              		.loc 1 581 0
 973 0008 4FF00103 		mov	r3, #1
 974 000c 7B61     		str	r3, [r7, #20]
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 975              		.loc 1 588 0
 976 000e 7B68     		ldr	r3, [r7, #4]
 977 0010 DB6B     		ldr	r3, [r3, #60]
 978 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 979 0014 022B     		cmp	r3, #2
 980 0016 41D1     		bne	.L32
 981              	.L28:
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 982              		.loc 1 594 0
 983 0018 7B68     		ldr	r3, [r7, #4]
 984 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 985 001e 3B61     		str	r3, [r7, #16]
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 986              		.loc 1 595 0
 987 0020 4FF40073 		mov	r3, #512
 988 0024 FB60     		str	r3, [r7, #12]
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 989              		.loc 1 596 0
 990 0026 7B68     		ldr	r3, [r7, #4]
 991 0028 9B69     		ldr	r3, [r3, #24]
 992 002a 4FF00702 		mov	r2, #7
 993 002e 1A61     		str	r2, [r3, #16]
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 994              		.loc 1 597 0
 995 0030 7B68     		ldr	r3, [r7, #4]
 996 0032 5B69     		ldr	r3, [r3, #20]
 997 0034 7A68     		ldr	r2, [r7, #4]
 998 0036 5269     		ldr	r2, [r2, #20]
 999 0038 9168     		ldr	r1, [r2, #8]
 1000 003a 3A69     		ldr	r2, [r7, #16]
 1001 003c 4FF00100 		mov	r0, #1
 1002 0040 00FA02F0 		lsl	r0, r0, r2
 1003 0044 FA68     		ldr	r2, [r7, #12]
 1004 0046 0243     		orrs	r2, r2, r0
 1005 0048 0A43     		orrs	r2, r2, r1
 1006 004a 9A60     		str	r2, [r3, #8]
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1007              		.loc 1 599 0
 1008 004c 7B68     		ldr	r3, [r7, #4]
 1009 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1010 0052 012B     		cmp	r3, #1
 1011 0054 19D1     		bne	.L30
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1012              		.loc 1 601 0
 1013 0056 7B68     		ldr	r3, [r7, #4]
 1014 0058 DB69     		ldr	r3, [r3, #28]
 1015 005a 4FF00702 		mov	r2, #7
 1016 005e 1A61     		str	r2, [r3, #16]
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1017              		.loc 1 602 0
 1018 0060 7B68     		ldr	r3, [r7, #4]
 1019 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1020 0066 3B61     		str	r3, [r7, #16]
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1021              		.loc 1 603 0
 1022 0068 4FF40073 		mov	r3, #512
 1023 006c FB60     		str	r3, [r7, #12]
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1024              		.loc 1 604 0
 1025 006e 7B68     		ldr	r3, [r7, #4]
 1026 0070 5B69     		ldr	r3, [r3, #20]
 1027 0072 7A68     		ldr	r2, [r7, #4]
 1028 0074 5269     		ldr	r2, [r2, #20]
 1029 0076 9168     		ldr	r1, [r2, #8]
 1030 0078 3A69     		ldr	r2, [r7, #16]
 1031 007a 4FF00100 		mov	r0, #1
 1032 007e 00FA02F0 		lsl	r0, r0, r2
 1033 0082 FA68     		ldr	r2, [r7, #12]
 1034 0084 0243     		orrs	r2, r2, r0
 1035 0086 0A43     		orrs	r2, r2, r1
 1036 0088 9A60     		str	r2, [r3, #8]
 1037              	.L30:
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1038              		.loc 1 607 0
 1039 008a 7B68     		ldr	r3, [r7, #4]
 1040 008c DB6B     		ldr	r3, [r3, #60]
 1041 008e 4FF00302 		mov	r2, #3
 1042 0092 1A70     		strb	r2, [r3, #0]
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1043              		.loc 1 608 0
 1044 0094 4FF00003 		mov	r3, #0
 1045 0098 7B61     		str	r3, [r7, #20]
 1046 009a 00E0     		b	.L29
 1047              	.L32:
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1048              		.loc 1 590 0
 1049 009c 00BF     		nop
 1050              	.L29:
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1051              		.loc 1 616 0
 1052 009e 7B69     		ldr	r3, [r7, #20]
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1053              		.loc 1 617 0
 1054 00a0 1846     		mov	r0, r3
 1055 00a2 07F11C07 		add	r7, r7, #28
 1056 00a6 BD46     		mov	sp, r7
 1057 00a8 80BC     		pop	{r7}
 1058 00aa 7047     		bx	lr
 1059              		.cfi_endproc
 1060              	.LFE121:
 1062              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1063              		.align	2
 1064              		.global	PWMSP001_SetCompare
 1065              		.thumb
 1066              		.thumb_func
 1068              	PWMSP001_SetCompare:
 1069              	.LFB122:
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1070              		.loc 1 626 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 16
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074 0000 80B5     		push	{r7, lr}
 1075              	.LCFI15:
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 1079 0002 84B0     		sub	sp, sp, #16
 1080              	.LCFI16:
 1081              		.cfi_def_cfa_offset 24
 1082 0004 00AF     		add	r7, sp, #0
 1083              	.LCFI17:
 1084              		.cfi_def_cfa_register 7
 1085 0006 7860     		str	r0, [r7, #4]
 1086 0008 3960     		str	r1, [r7, #0]
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1087              		.loc 1 627 0
 1088 000a 4FF00103 		mov	r3, #1
 1089 000e FB60     		str	r3, [r7, #12]
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1090              		.loc 1 630 0
 1091 0010 7B68     		ldr	r3, [r7, #4]
 1092 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1093 0016 012B     		cmp	r3, #1
 1094 0018 0AD1     		bne	.L34
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1095              		.loc 1 631 0
 1096 001a 7B68     		ldr	r3, [r7, #4]
 1097 001c DB69     		ldr	r3, [r3, #28]
 1098 001e 5B6B     		ldr	r3, [r3, #52]
 1099 0020 4FEA0342 		lsl	r2, r3, #16
 1100 0024 7B68     		ldr	r3, [r7, #4]
 1101 0026 9B69     		ldr	r3, [r3, #24]
 1102 0028 5B6B     		ldr	r3, [r3, #52]
 1103 002a 1343     		orrs	r3, r3, r2
 1104 002c BB60     		str	r3, [r7, #8]
 1105 002e 03E0     		b	.L35
 1106              	.L34:
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1107              		.loc 1 633 0
 1108 0030 7B68     		ldr	r3, [r7, #4]
 1109 0032 9B69     		ldr	r3, [r3, #24]
 1110 0034 5B6B     		ldr	r3, [r3, #52]
 1111 0036 BB60     		str	r3, [r7, #8]
 1112              	.L35:
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1113              		.loc 1 636 0
 1114 0038 7B68     		ldr	r3, [r7, #4]
 1115 003a DB6B     		ldr	r3, [r3, #60]
 1116 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1117 003e 002B     		cmp	r3, #0
 1118 0040 1DD0     		beq	.L36
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1119              		.loc 1 638 0
 1120 0042 7B68     		ldr	r3, [r7, #4]
 1121 0044 DA6A     		ldr	r2, [r3, #44]
 1122 0046 3B68     		ldr	r3, [r7, #0]
 1123 0048 9A42     		cmp	r2, r3
 1124 004a 08D2     		bcs	.L37
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1125              		.loc 1 639 0 discriminator 1
 1126 004c 7B68     		ldr	r3, [r7, #4]
 1127 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1128              		.loc 1 638 0 discriminator 1
 1129 0052 002B     		cmp	r3, #0
 1130 0054 03D1     		bne	.L37
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1131              		.loc 1 641 0
 1132 0056 4FF00203 		mov	r3, #2
 1133 005a FB60     		str	r3, [r7, #12]
 1134 005c 0FE0     		b	.L36
 1135              	.L37:
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1136              		.loc 1 647 0
 1137 005e 3A68     		ldr	r2, [r7, #0]
 1138 0060 BB68     		ldr	r3, [r7, #8]
 1139 0062 9A42     		cmp	r2, r3
 1140 0064 03D3     		bcc	.L38
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1141              		.loc 1 649 0
 1142 0066 BB68     		ldr	r3, [r7, #8]
 1143 0068 03F10103 		add	r3, r3, #1
 1144 006c 3B60     		str	r3, [r7, #0]
 1145              	.L38:
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1146              		.loc 1 652 0
 1147 006e 7B68     		ldr	r3, [r7, #4]
 1148 0070 1B6C     		ldr	r3, [r3, #64]
 1149 0072 7868     		ldr	r0, [r7, #4]
 1150 0074 3968     		ldr	r1, [r7, #0]
 1151 0076 9847     		blx	r3
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1152              		.loc 1 653 0
 1153 0078 4FF00003 		mov	r3, #0
 1154 007c FB60     		str	r3, [r7, #12]
 1155              	.L36:
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1156              		.loc 1 656 0
 1157 007e FB68     		ldr	r3, [r7, #12]
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1158              		.loc 1 657 0
 1159 0080 1846     		mov	r0, r3
 1160 0082 07F11007 		add	r7, r7, #16
 1161 0086 BD46     		mov	sp, r7
 1162 0088 80BD     		pop	{r7, pc}
 1163              		.cfi_endproc
 1164              	.LFE122:
 1166 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1167              		.align	2
 1168              		.global	PWMSP001_lSetCompareEdgeAlign
 1169              		.thumb
 1170              		.thumb_func
 1172              	PWMSP001_lSetCompareEdgeAlign:
 1173              	.LFB123:
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1174              		.loc 1 668 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 24
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 1179 0000 80B4     		push	{r7}
 1180              	.LCFI18:
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 7, -4
 1183 0002 87B0     		sub	sp, sp, #28
 1184              	.LCFI19:
 1185              		.cfi_def_cfa_offset 32
 1186 0004 00AF     		add	r7, sp, #0
 1187              	.LCFI20:
 1188              		.cfi_def_cfa_register 7
 1189 0006 7860     		str	r0, [r7, #4]
 1190 0008 3960     		str	r1, [r7, #0]
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1191              		.loc 1 671 0
 1192 000a 7B68     		ldr	r3, [r7, #4]
 1193 000c 7B61     		str	r3, [r7, #20]
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1194              		.loc 1 672 0
 1195 000e 7B69     		ldr	r3, [r7, #20]
 1196 0010 9A69     		ldr	r2, [r3, #24]
 1197 0012 3B68     		ldr	r3, [r7, #0]
 1198 0014 4FEA0343 		lsl	r3, r3, #16
 1199 0018 4FEA1343 		lsr	r3, r3, #16
 1200 001c D363     		str	r3, [r2, #60]
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1201              		.loc 1 675 0
 1202 001e 7B69     		ldr	r3, [r7, #20]
 1203 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1204 0024 4FEA8303 		lsl	r3, r3, #2
 1205 0028 3B61     		str	r3, [r7, #16]
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1206              		.loc 1 676 0
 1207 002a 3B69     		ldr	r3, [r7, #16]
 1208 002c FB60     		str	r3, [r7, #12]
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1209              		.loc 1 677 0
 1210 002e 7B69     		ldr	r3, [r7, #20]
 1211 0030 5B69     		ldr	r3, [r3, #20]
 1212 0032 7A69     		ldr	r2, [r7, #20]
 1213 0034 5269     		ldr	r2, [r2, #20]
 1214 0036 1169     		ldr	r1, [r2, #16]
 1215 0038 FA68     		ldr	r2, [r7, #12]
 1216 003a 4FF00100 		mov	r0, #1
 1217 003e 00FA02F2 		lsl	r2, r0, r2
 1218 0042 0A43     		orrs	r2, r2, r1
 1219 0044 1A61     		str	r2, [r3, #16]
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1220              		.loc 1 678 0
 1221 0046 07F11C07 		add	r7, r7, #28
 1222 004a BD46     		mov	sp, r7
 1223 004c 80BC     		pop	{r7}
 1224 004e 7047     		bx	lr
 1225              		.cfi_endproc
 1226              	.LFE123:
 1228              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1229              		.align	2
 1230              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1231              		.thumb
 1232              		.thumb_func
 1234              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1235              	.LFB124:
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1236              		.loc 1 689 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 32
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 1241 0000 90B4     		push	{r4, r7}
 1242              	.LCFI21:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 7, -4
 1246 0002 88B0     		sub	sp, sp, #32
 1247              	.LCFI22:
 1248              		.cfi_def_cfa_offset 40
 1249 0004 00AF     		add	r7, sp, #0
 1250              	.LCFI23:
 1251              		.cfi_def_cfa_register 7
 1252 0006 7860     		str	r0, [r7, #4]
 1253 0008 3960     		str	r1, [r7, #0]
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1254              		.loc 1 690 0
 1255 000a 4FF00003 		mov	r3, #0
 1256 000e FB61     		str	r3, [r7, #28]
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1257              		.loc 1 691 0
 1258 0010 4FF00003 		mov	r3, #0
 1259 0014 BB61     		str	r3, [r7, #24]
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1260              		.loc 1 694 0
 1261 0016 7B68     		ldr	r3, [r7, #4]
 1262 0018 7B61     		str	r3, [r7, #20]
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1263              		.loc 1 704 0
 1264 001a 7B69     		ldr	r3, [r7, #20]
 1265 001c 9B69     		ldr	r3, [r3, #24]
 1266 001e 5B6B     		ldr	r3, [r3, #52]
 1267 0020 9BB2     		uxth	r3, r3
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1268              		.loc 1 703 0
 1269 0022 1A46     		mov	r2, r3
 1270 0024 3B68     		ldr	r3, [r7, #0]
 1271 0026 B3FBF2F1 		udiv	r1, r3, r2
 1272 002a 02FB01F2 		mul	r2, r2, r1
 1273 002e 9B1A     		subs	r3, r3, r2
 1274 0030 FB61     		str	r3, [r7, #28]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1275              		.loc 1 706 0
 1276 0032 7B69     		ldr	r3, [r7, #20]
 1277 0034 9B69     		ldr	r3, [r3, #24]
 1278 0036 5B6B     		ldr	r3, [r3, #52]
 1279 0038 9BB2     		uxth	r3, r3
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1280              		.loc 1 705 0
 1281 003a 3A68     		ldr	r2, [r7, #0]
 1282 003c B2FBF3F3 		udiv	r3, r2, r3
 1283 0040 BB61     		str	r3, [r7, #24]
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1284              		.loc 1 708 0
 1285 0042 7B69     		ldr	r3, [r7, #20]
 1286 0044 9A69     		ldr	r2, [r3, #24]
 1287 0046 FB69     		ldr	r3, [r7, #28]
 1288 0048 4FEA0343 		lsl	r3, r3, #16
 1289 004c 4FEA1343 		lsr	r3, r3, #16
 1290 0050 D363     		str	r3, [r2, #60]
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1291              		.loc 1 709 0
 1292 0052 7B69     		ldr	r3, [r7, #20]
 1293 0054 DA69     		ldr	r2, [r3, #28]
 1294 0056 BB69     		ldr	r3, [r7, #24]
 1295 0058 4FEA0343 		lsl	r3, r3, #16
 1296 005c 4FEA1343 		lsr	r3, r3, #16
 1297 0060 D363     		str	r3, [r2, #60]
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1298              		.loc 1 711 0
 1299 0062 7B69     		ldr	r3, [r7, #20]
 1300 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1301 0068 4FEA8303 		lsl	r3, r3, #2
 1302 006c 3B61     		str	r3, [r7, #16]
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1303              		.loc 1 712 0
 1304 006e 7B69     		ldr	r3, [r7, #20]
 1305 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1306 0074 4FEA8303 		lsl	r3, r3, #2
 1307 0078 FB60     		str	r3, [r7, #12]
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1308              		.loc 1 713 0
 1309 007a 7B69     		ldr	r3, [r7, #20]
 1310 007c 5B69     		ldr	r3, [r3, #20]
 1311 007e 7A69     		ldr	r2, [r7, #20]
 1312 0080 5269     		ldr	r2, [r2, #20]
 1313 0082 1169     		ldr	r1, [r2, #16]
 1314 0084 FA68     		ldr	r2, [r7, #12]
 1315 0086 4FF00100 		mov	r0, #1
 1316 008a 00FA02F0 		lsl	r0, r0, r2
 1317 008e 3A69     		ldr	r2, [r7, #16]
 1318 0090 4FF00104 		mov	r4, #1
 1319 0094 04FA02F2 		lsl	r2, r4, r2
 1320 0098 0243     		orrs	r2, r2, r0
 1321 009a 0A43     		orrs	r2, r2, r1
 1322 009c 1A61     		str	r2, [r3, #16]
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1323              		.loc 1 714 0
 1324 009e 07F12007 		add	r7, r7, #32
 1325 00a2 BD46     		mov	sp, r7
 1326 00a4 90BC     		pop	{r4, r7}
 1327 00a6 7047     		bx	lr
 1328              		.cfi_endproc
 1329              	.LFE124:
 1331              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1332              		.align	2
 1333              		.global	PWMSP001_lSetCompareCenterAlign
 1334              		.thumb
 1335              		.thumb_func
 1337              	PWMSP001_lSetCompareCenterAlign:
 1338              	.LFB125:
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1339              		.loc 1 725 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 16
 1342              		@ frame_needed = 1, uses_anonymous_args = 0
 1343              		@ link register save eliminated.
 1344 0000 80B4     		push	{r7}
 1345              	.LCFI24:
 1346              		.cfi_def_cfa_offset 4
 1347              		.cfi_offset 7, -4
 1348 0002 85B0     		sub	sp, sp, #20
 1349              	.LCFI25:
 1350              		.cfi_def_cfa_offset 24
 1351 0004 00AF     		add	r7, sp, #0
 1352              	.LCFI26:
 1353              		.cfi_def_cfa_register 7
 1354 0006 7860     		str	r0, [r7, #4]
 1355 0008 3960     		str	r1, [r7, #0]
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1356              		.loc 1 728 0
 1357 000a 7B68     		ldr	r3, [r7, #4]
 1358 000c FB60     		str	r3, [r7, #12]
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1359              		.loc 1 729 0
 1360 000e FB68     		ldr	r3, [r7, #12]
 1361 0010 9A69     		ldr	r2, [r3, #24]
 1362 0012 3B68     		ldr	r3, [r7, #0]
 1363 0014 4FEA0343 		lsl	r3, r3, #16
 1364 0018 4FEA1343 		lsr	r3, r3, #16
 1365 001c D363     		str	r3, [r2, #60]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1366              		.loc 1 732 0
 1367 001e FB68     		ldr	r3, [r7, #12]
 1368 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1369 0024 4FEA8303 		lsl	r3, r3, #2
 1370 0028 BB60     		str	r3, [r7, #8]
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1371              		.loc 1 733 0
 1372 002a FB68     		ldr	r3, [r7, #12]
 1373 002c 5B69     		ldr	r3, [r3, #20]
 1374 002e FA68     		ldr	r2, [r7, #12]
 1375 0030 5269     		ldr	r2, [r2, #20]
 1376 0032 1169     		ldr	r1, [r2, #16]
 1377 0034 BA68     		ldr	r2, [r7, #8]
 1378 0036 4FF00100 		mov	r0, #1
 1379 003a 00FA02F2 		lsl	r2, r0, r2
 1380 003e 0A43     		orrs	r2, r2, r1
 1381 0040 1A61     		str	r2, [r3, #16]
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1382              		.loc 1 734 0
 1383 0042 07F11407 		add	r7, r7, #20
 1384 0046 BD46     		mov	sp, r7
 1385 0048 80BC     		pop	{r7}
 1386 004a 7047     		bx	lr
 1387              		.cfi_endproc
 1388              	.LFE125:
 1390              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1391              		.align	2
 1392              		.global	PWMSP001_SetDutyCycle
 1393              		.thumb
 1394              		.thumb_func
 1396              	PWMSP001_SetDutyCycle:
 1397              	.LFB126:
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1398              		.loc 1 746 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 16
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402 0000 80B5     		push	{r7, lr}
 1403              	.LCFI27:
 1404              		.cfi_def_cfa_offset 8
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 14, -4
 1407 0002 84B0     		sub	sp, sp, #16
 1408              	.LCFI28:
 1409              		.cfi_def_cfa_offset 24
 1410 0004 00AF     		add	r7, sp, #0
 1411              	.LCFI29:
 1412              		.cfi_def_cfa_register 7
 1413 0006 7860     		str	r0, [r7, #4]
 1414 0008 3960     		str	r1, [r7, #0]	@ float
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1415              		.loc 1 747 0
 1416 000a 4FF00103 		mov	r3, #1
 1417 000e FB60     		str	r3, [r7, #12]
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1418              		.loc 1 749 0
 1419 0010 7B68     		ldr	r3, [r7, #4]
 1420 0012 DB6B     		ldr	r3, [r3, #60]
 1421 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1422 0016 002B     		cmp	r3, #0
 1423 0018 1BD0     		beq	.L44
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1424              		.loc 1 751 0
 1425 001a 97ED007A 		flds	s14, [r7, #0]
 1426 001e DFED107A 		flds	s15, .L50
 1427 0022 B4EEE77A 		fcmpes	s14, s15
 1428 0026 F1EE10FA 		fmstat
 1429 002a 06DC     		bgt	.L45
 1430              		.loc 1 751 0 is_stmt 0 discriminator 1
 1431 002c D7ED007A 		flds	s15, [r7, #0]
 1432 0030 F5EEC07A 		fcmpezs	s15
 1433 0034 F1EE10FA 		fmstat
 1434 0038 03D5     		bpl	.L49
 1435              	.L45:
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1436              		.loc 1 753 0 is_stmt 1
 1437 003a 4FF00203 		mov	r3, #2
 1438 003e FB60     		str	r3, [r7, #12]
 1439 0040 07E0     		b	.L44
 1440              	.L49:
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1441              		.loc 1 758 0
 1442 0042 7B68     		ldr	r3, [r7, #4]
 1443 0044 5B6C     		ldr	r3, [r3, #68]
 1444 0046 7868     		ldr	r0, [r7, #4]
 1445 0048 3968     		ldr	r1, [r7, #0]	@ float
 1446 004a 9847     		blx	r3
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1447              		.loc 1 759 0
 1448 004c 4FF00003 		mov	r3, #0
 1449 0050 FB60     		str	r3, [r7, #12]
 1450              	.L44:
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1451              		.loc 1 762 0
 1452 0052 FB68     		ldr	r3, [r7, #12]
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1453              		.loc 1 763 0
 1454 0054 1846     		mov	r0, r3
 1455 0056 07F11007 		add	r7, r7, #16
 1456 005a BD46     		mov	sp, r7
 1457 005c 80BD     		pop	{r7, pc}
 1458              	.L51:
 1459 005e 00BF     		.align	2
 1460              	.L50:
 1461 0060 0000C842 		.word	1120403456
 1462              		.cfi_endproc
 1463              	.LFE126:
 1465              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1466              		.align	2
 1467              		.global	PWMSP001_lSetDutyEdgeAlign
 1468              		.thumb
 1469              		.thumb_func
 1471              	PWMSP001_lSetDutyEdgeAlign:
 1472              	.LFB127:
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1473              		.loc 1 774 0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 32
 1476              		@ frame_needed = 1, uses_anonymous_args = 0
 1477              		@ link register save eliminated.
 1478 0000 80B4     		push	{r7}
 1479              	.LCFI30:
 1480              		.cfi_def_cfa_offset 4
 1481              		.cfi_offset 7, -4
 1482 0002 89B0     		sub	sp, sp, #36
 1483              	.LCFI31:
 1484              		.cfi_def_cfa_offset 40
 1485 0004 00AF     		add	r7, sp, #0
 1486              	.LCFI32:
 1487              		.cfi_def_cfa_register 7
 1488 0006 7860     		str	r0, [r7, #4]
 1489 0008 3960     		str	r1, [r7, #0]	@ float
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1490              		.loc 1 775 0
 1491 000a 4FF00003 		mov	r3, #0
 1492 000e FB61     		str	r3, [r7, #28]
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1493              		.loc 1 778 0
 1494 0010 7B68     		ldr	r3, [r7, #4]
 1495 0012 BB61     		str	r3, [r7, #24]
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1496              		.loc 1 779 0
 1497 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1498 0016 7B61     		str	r3, [r7, #20]	@ float
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1499              		.loc 1 783 0
 1500 0018 9FED1F7A 		flds	s14, .L53
 1501 001c D7ED057A 		flds	s15, [r7, #20]
 1502 0020 37EE677A 		fsubs	s14, s14, s15
 1503 0024 DFED1C7A 		flds	s15, .L53
 1504 0028 C7EE277A 		fdivs	s15, s14, s15
 1505 002c C7ED057A 		fsts	s15, [r7, #20]
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1506              		.loc 1 784 0
 1507 0030 BB69     		ldr	r3, [r7, #24]
 1508 0032 9B69     		ldr	r3, [r3, #24]
 1509 0034 5B6B     		ldr	r3, [r3, #52]
 1510 0036 03F10103 		add	r3, r3, #1
 1511 003a 07EE103A 		fmsr	s14, r3	@ int
 1512 003e F8EE477A 		fuitos	s15, s14
 1513 0042 C7ED047A 		fsts	s15, [r7, #16]
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1514              		.loc 1 785 0
 1515 0046 97ED047A 		flds	s14, [r7, #16]
 1516 004a D7ED057A 		flds	s15, [r7, #20]
 1517 004e 67EE277A 		fmuls	s15, s14, s15
 1518 0052 FCEEE77A 		ftouizs	s15, s15
 1519 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1520              		.loc 1 786 0
 1521 005a BB69     		ldr	r3, [r7, #24]
 1522 005c 9A69     		ldr	r2, [r3, #24]
 1523 005e FB69     		ldr	r3, [r7, #28]
 1524 0060 4FEA0343 		lsl	r3, r3, #16
 1525 0064 4FEA1343 		lsr	r3, r3, #16
 1526 0068 D363     		str	r3, [r2, #60]
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1527              		.loc 1 789 0
 1528 006a BB69     		ldr	r3, [r7, #24]
 1529 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1530 0070 4FEA8303 		lsl	r3, r3, #2
 1531 0074 FB60     		str	r3, [r7, #12]
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1532              		.loc 1 790 0
 1533 0076 BB69     		ldr	r3, [r7, #24]
 1534 0078 5B69     		ldr	r3, [r3, #20]
 1535 007a BA69     		ldr	r2, [r7, #24]
 1536 007c 5269     		ldr	r2, [r2, #20]
 1537 007e 1169     		ldr	r1, [r2, #16]
 1538 0080 FA68     		ldr	r2, [r7, #12]
 1539 0082 4FF00100 		mov	r0, #1
 1540 0086 00FA02F2 		lsl	r2, r0, r2
 1541 008a 0A43     		orrs	r2, r2, r1
 1542 008c 1A61     		str	r2, [r3, #16]
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1543              		.loc 1 792 0
 1544 008e 07F12407 		add	r7, r7, #36
 1545 0092 BD46     		mov	sp, r7
 1546 0094 80BC     		pop	{r7}
 1547 0096 7047     		bx	lr
 1548              	.L54:
 1549              		.align	2
 1550              	.L53:
 1551 0098 0000C842 		.word	1120403456
 1552              		.cfi_endproc
 1553              	.LFE127:
 1555              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1556              		.align	2
 1557              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1558              		.thumb
 1559              		.thumb_func
 1561              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1562              	.LFB128:
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1563              		.loc 1 803 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 40
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568 0000 90B4     		push	{r4, r7}
 1569              	.LCFI33:
 1570              		.cfi_def_cfa_offset 8
 1571              		.cfi_offset 4, -8
 1572              		.cfi_offset 7, -4
 1573 0002 8AB0     		sub	sp, sp, #40
 1574              	.LCFI34:
 1575              		.cfi_def_cfa_offset 48
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI35:
 1578              		.cfi_def_cfa_register 7
 1579 0006 7860     		str	r0, [r7, #4]
 1580 0008 3960     		str	r1, [r7, #0]	@ float
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1581              		.loc 1 804 0
 1582 000a 4FF00003 		mov	r3, #0
 1583 000e 7B62     		str	r3, [r7, #36]
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1584              		.loc 1 805 0
 1585 0010 4FF00003 		mov	r3, #0
 1586 0014 3B62     		str	r3, [r7, #32]
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1587              		.loc 1 806 0
 1588 0016 4FF00003 		mov	r3, #0
 1589 001a FB61     		str	r3, [r7, #28]
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1590              		.loc 1 810 0
 1591 001c 7B68     		ldr	r3, [r7, #4]
 1592 001e BB61     		str	r3, [r7, #24]
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1593              		.loc 1 812 0
 1594 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1595 0022 7B61     		str	r3, [r7, #20]	@ float
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1596              		.loc 1 815 0
 1597 0024 BB69     		ldr	r3, [r7, #24]
 1598 0026 DB69     		ldr	r3, [r3, #28]
 1599 0028 5B6B     		ldr	r3, [r3, #52]
 1600 002a 03F10103 		add	r3, r3, #1
 1601 002e 7B62     		str	r3, [r7, #36]
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1602              		.loc 1 816 0
 1603 0030 BB69     		ldr	r3, [r7, #24]
 1604 0032 9B69     		ldr	r3, [r3, #24]
 1605 0034 5B6B     		ldr	r3, [r3, #52]
 1606 0036 4FEA0343 		lsl	r3, r3, #16
 1607 003a 4FEA1343 		lsr	r3, r3, #16
 1608 003e 03F10102 		add	r2, r3, #1
 1609 0042 7B6A     		ldr	r3, [r7, #36]
 1610 0044 02FB03F3 		mul	r3, r2, r3
 1611 0048 7B62     		str	r3, [r7, #36]
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1612              		.loc 1 817 0
 1613 004a 7B6A     		ldr	r3, [r7, #36]
 1614 004c 03F10103 		add	r3, r3, #1
 1615 0050 7B62     		str	r3, [r7, #36]
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1616              		.loc 1 819 0
 1617 0052 9FED347A 		flds	s14, .L56
 1618 0056 D7ED057A 		flds	s15, [r7, #20]
 1619 005a 37EE677A 		fsubs	s14, s14, s15
 1620 005e DFED317A 		flds	s15, .L56
 1621 0062 C7EE277A 		fdivs	s15, s14, s15
 1622 0066 C7ED057A 		fsts	s15, [r7, #20]
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1623              		.loc 1 820 0
 1624 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1625 006e F8EE677A 		fuitos	s15, s15
 1626 0072 C7ED047A 		fsts	s15, [r7, #16]
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1627              		.loc 1 821 0
 1628 0076 97ED047A 		flds	s14, [r7, #16]
 1629 007a D7ED057A 		flds	s15, [r7, #20]
 1630 007e 67EE277A 		fmuls	s15, s14, s15
 1631 0082 FCEEE77A 		ftouizs	s15, s15
 1632 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1633              		.loc 1 824 0
 1634 008a BB69     		ldr	r3, [r7, #24]
 1635 008c 9B69     		ldr	r3, [r3, #24]
 1636 008e 5B6B     		ldr	r3, [r3, #52]
 1637 0090 4FEA0343 		lsl	r3, r3, #16
 1638 0094 4FEA1343 		lsr	r3, r3, #16
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1639              		.loc 1 823 0
 1640 0098 7A6A     		ldr	r2, [r7, #36]
 1641 009a B2FBF3F1 		udiv	r1, r2, r3
 1642 009e 03FB01F3 		mul	r3, r3, r1
 1643 00a2 D31A     		subs	r3, r2, r3
 1644 00a4 3B62     		str	r3, [r7, #32]
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1645              		.loc 1 825 0
 1646 00a6 BB69     		ldr	r3, [r7, #24]
 1647 00a8 9A69     		ldr	r2, [r3, #24]
 1648 00aa 3B6A     		ldr	r3, [r7, #32]
 1649 00ac 4FEA0343 		lsl	r3, r3, #16
 1650 00b0 4FEA1343 		lsr	r3, r3, #16
 1651 00b4 D363     		str	r3, [r2, #60]
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1652              		.loc 1 827 0
 1653 00b6 BB69     		ldr	r3, [r7, #24]
 1654 00b8 9B69     		ldr	r3, [r3, #24]
 1655 00ba 5B6B     		ldr	r3, [r3, #52]
 1656 00bc 4FEA0343 		lsl	r3, r3, #16
 1657 00c0 4FEA1343 		lsr	r3, r3, #16
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1658              		.loc 1 826 0
 1659 00c4 7A6A     		ldr	r2, [r7, #36]
 1660 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1661 00ca FB61     		str	r3, [r7, #28]
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1662              		.loc 1 828 0
 1663 00cc BB69     		ldr	r3, [r7, #24]
 1664 00ce DA69     		ldr	r2, [r3, #28]
 1665 00d0 FB69     		ldr	r3, [r7, #28]
 1666 00d2 4FEA0343 		lsl	r3, r3, #16
 1667 00d6 4FEA1343 		lsr	r3, r3, #16
 1668 00da D363     		str	r3, [r2, #60]
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1669              		.loc 1 831 0
 1670 00dc BB69     		ldr	r3, [r7, #24]
 1671 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1672 00e2 4FEA8303 		lsl	r3, r3, #2
 1673 00e6 FB60     		str	r3, [r7, #12]
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1674              		.loc 1 832 0
 1675 00e8 BB69     		ldr	r3, [r7, #24]
 1676 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1677 00ee 4FEA8303 		lsl	r3, r3, #2
 1678 00f2 BB60     		str	r3, [r7, #8]
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1679              		.loc 1 833 0
 1680 00f4 BB69     		ldr	r3, [r7, #24]
 1681 00f6 5B69     		ldr	r3, [r3, #20]
 1682 00f8 BA69     		ldr	r2, [r7, #24]
 1683 00fa 5269     		ldr	r2, [r2, #20]
 1684 00fc 1169     		ldr	r1, [r2, #16]
 1685 00fe FA68     		ldr	r2, [r7, #12]
 1686 0100 4FF00100 		mov	r0, #1
 1687 0104 00FA02F0 		lsl	r0, r0, r2
 1688 0108 BA68     		ldr	r2, [r7, #8]
 1689 010a 4FF00104 		mov	r4, #1
 1690 010e 04FA02F2 		lsl	r2, r4, r2
 1691 0112 0243     		orrs	r2, r2, r0
 1692 0114 0A43     		orrs	r2, r2, r1
 1693 0116 1A61     		str	r2, [r3, #16]
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1694              		.loc 1 834 0
 1695 0118 07F12807 		add	r7, r7, #40
 1696 011c BD46     		mov	sp, r7
 1697 011e 90BC     		pop	{r4, r7}
 1698 0120 7047     		bx	lr
 1699              	.L57:
 1700 0122 00BF     		.align	2
 1701              	.L56:
 1702 0124 0000C842 		.word	1120403456
 1703              		.cfi_endproc
 1704              	.LFE128:
 1706              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1707              		.align	2
 1708              		.global	PWMSP001_lSetDutyCenterAlign
 1709              		.thumb
 1710              		.thumb_func
 1712              	PWMSP001_lSetDutyCenterAlign:
 1713              	.LFB129:
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1714              		.loc 1 845 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 32
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719 0000 80B4     		push	{r7}
 1720              	.LCFI36:
 1721              		.cfi_def_cfa_offset 4
 1722              		.cfi_offset 7, -4
 1723 0002 89B0     		sub	sp, sp, #36
 1724              	.LCFI37:
 1725              		.cfi_def_cfa_offset 40
 1726 0004 00AF     		add	r7, sp, #0
 1727              	.LCFI38:
 1728              		.cfi_def_cfa_register 7
 1729 0006 7860     		str	r0, [r7, #4]
 1730 0008 3960     		str	r1, [r7, #0]	@ float
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1731              		.loc 1 847 0
 1732 000a 4FF00003 		mov	r3, #0
 1733 000e FB61     		str	r3, [r7, #28]
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1734              		.loc 1 850 0
 1735 0010 7B68     		ldr	r3, [r7, #4]
 1736 0012 BB61     		str	r3, [r7, #24]
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1737              		.loc 1 851 0
 1738 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1739 0016 7B61     		str	r3, [r7, #20]	@ float
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1740              		.loc 1 853 0
 1741 0018 9FED1E7A 		flds	s14, .L59
 1742 001c D7ED057A 		flds	s15, [r7, #20]
 1743 0020 37EE677A 		fsubs	s14, s14, s15
 1744 0024 DFED1B7A 		flds	s15, .L59
 1745 0028 C7EE277A 		fdivs	s15, s14, s15
 1746 002c C7ED057A 		fsts	s15, [r7, #20]
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1747              		.loc 1 854 0
 1748 0030 BB69     		ldr	r3, [r7, #24]
 1749 0032 9B69     		ldr	r3, [r3, #24]
 1750 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 1751 0038 F8EE677A 		fuitos	s15, s15
 1752 003c C7ED047A 		fsts	s15, [r7, #16]
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1753              		.loc 1 855 0
 1754 0040 97ED047A 		flds	s14, [r7, #16]
 1755 0044 D7ED057A 		flds	s15, [r7, #20]
 1756 0048 67EE277A 		fmuls	s15, s14, s15
 1757 004c FCEEE77A 		ftouizs	s15, s15
 1758 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1759              		.loc 1 856 0
 1760 0054 BB69     		ldr	r3, [r7, #24]
 1761 0056 9A69     		ldr	r2, [r3, #24]
 1762 0058 FB69     		ldr	r3, [r7, #28]
 1763 005a 4FEA0343 		lsl	r3, r3, #16
 1764 005e 4FEA1343 		lsr	r3, r3, #16
 1765 0062 D363     		str	r3, [r2, #60]
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1766              		.loc 1 859 0
 1767 0064 BB69     		ldr	r3, [r7, #24]
 1768 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1769 006a 4FEA8303 		lsl	r3, r3, #2
 1770 006e FB60     		str	r3, [r7, #12]
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1771              		.loc 1 860 0
 1772 0070 BB69     		ldr	r3, [r7, #24]
 1773 0072 5B69     		ldr	r3, [r3, #20]
 1774 0074 BA69     		ldr	r2, [r7, #24]
 1775 0076 5269     		ldr	r2, [r2, #20]
 1776 0078 1169     		ldr	r1, [r2, #16]
 1777 007a FA68     		ldr	r2, [r7, #12]
 1778 007c 4FF00100 		mov	r0, #1
 1779 0080 00FA02F2 		lsl	r2, r0, r2
 1780 0084 0A43     		orrs	r2, r2, r1
 1781 0086 1A61     		str	r2, [r3, #16]
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1782              		.loc 1 861 0
 1783 0088 07F12407 		add	r7, r7, #36
 1784 008c BD46     		mov	sp, r7
 1785 008e 80BC     		pop	{r7}
 1786 0090 7047     		bx	lr
 1787              	.L60:
 1788 0092 00BF     		.align	2
 1789              	.L59:
 1790 0094 0000C842 		.word	1120403456
 1791              		.cfi_endproc
 1792              	.LFE129:
 1794              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1795              		.align	2
 1796              		.global	PWMSP001_SetPeriodAndCompare
 1797              		.thumb
 1798              		.thumb_func
 1800              	PWMSP001_SetPeriodAndCompare:
 1801              	.LFB130:
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1802              		.loc 1 874 0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 24
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806 0000 80B5     		push	{r7, lr}
 1807              	.LCFI39:
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 7, -8
 1810              		.cfi_offset 14, -4
 1811 0002 86B0     		sub	sp, sp, #24
 1812              	.LCFI40:
 1813              		.cfi_def_cfa_offset 32
 1814 0004 00AF     		add	r7, sp, #0
 1815              	.LCFI41:
 1816              		.cfi_def_cfa_register 7
 1817 0006 F860     		str	r0, [r7, #12]
 1818 0008 B960     		str	r1, [r7, #8]
 1819 000a 7A60     		str	r2, [r7, #4]
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1820              		.loc 1 875 0
 1821 000c 4FF00103 		mov	r3, #1
 1822 0010 7B61     		str	r3, [r7, #20]
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 1823              		.loc 1 876 0
 1824 0012 4FF00003 		mov	r3, #0
 1825 0016 3B61     		str	r3, [r7, #16]
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1826              		.loc 1 878 0
 1827 0018 FB68     		ldr	r3, [r7, #12]
 1828 001a DB6B     		ldr	r3, [r3, #60]
 1829 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1830 001e 002B     		cmp	r3, #0
 1831 0020 3BD0     		beq	.L62
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1832              		.loc 1 880 0
 1833 0022 BB68     		ldr	r3, [r7, #8]
 1834 0024 002B     		cmp	r3, #0
 1835 0026 09D0     		beq	.L63
 1836              		.loc 1 880 0 is_stmt 0 discriminator 1
 1837 0028 FB68     		ldr	r3, [r7, #12]
 1838 002a DA6A     		ldr	r2, [r3, #44]
 1839 002c 7B68     		ldr	r3, [r7, #4]
 1840 002e 9A42     		cmp	r2, r3
 1841 0030 08D2     		bcs	.L64
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 1842              		.loc 1 881 0 is_stmt 1 discriminator 1
 1843 0032 FB68     		ldr	r3, [r7, #12]
 1844 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1845              		.loc 1 880 0 discriminator 1
 1846 0038 002B     		cmp	r3, #0
 1847 003a 03D1     		bne	.L64
 1848              	.L63:
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1849              		.loc 1 883 0
 1850 003c 4FF00203 		mov	r3, #2
 1851 0040 7B61     		str	r3, [r7, #20]
 1852 0042 2AE0     		b	.L62
 1853              	.L64:
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1854              		.loc 1 887 0
 1855 0044 FB68     		ldr	r3, [r7, #12]
 1856 0046 DA6A     		ldr	r2, [r3, #44]
 1857 0048 BB68     		ldr	r3, [r7, #8]
 1858 004a 9A42     		cmp	r2, r3
 1859 004c 08D2     		bcs	.L65
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 1860              		.loc 1 888 0 discriminator 1
 1861 004e FB68     		ldr	r3, [r7, #12]
 1862 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1863              		.loc 1 887 0 discriminator 1
 1864 0054 012B     		cmp	r3, #1
 1865 0056 03D0     		beq	.L65
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1866              		.loc 1 891 0
 1867 0058 4FF00203 		mov	r3, #2
 1868 005c 7B61     		str	r3, [r7, #20]
 1869 005e 1CE0     		b	.L62
 1870              	.L65:
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 1871              		.loc 1 895 0
 1872 0060 BB68     		ldr	r3, [r7, #8]
 1873 0062 3B61     		str	r3, [r7, #16]
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1874              		.loc 1 896 0
 1875 0064 FB68     		ldr	r3, [r7, #12]
 1876 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1877 006a 012B     		cmp	r3, #1
 1878 006c 05D1     		bne	.L66
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 1879              		.loc 1 898 0
 1880 006e FB68     		ldr	r3, [r7, #12]
 1881 0070 DB69     		ldr	r3, [r3, #28]
 1882 0072 3A69     		ldr	r2, [r7, #16]
 1883 0074 4FEA1242 		lsr	r2, r2, #16
 1884 0078 5A63     		str	r2, [r3, #52]
 1885              	.L66:
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1886              		.loc 1 901 0
 1887 007a FB68     		ldr	r3, [r7, #12]
 1888 007c 9A69     		ldr	r2, [r3, #24]
 1889 007e 3B69     		ldr	r3, [r7, #16]
 1890 0080 4FEA0343 		lsl	r3, r3, #16
 1891 0084 4FEA1343 		lsr	r3, r3, #16
 1892 0088 5363     		str	r3, [r2, #52]
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1893              		.loc 1 903 0
 1894 008a FB68     		ldr	r3, [r7, #12]
 1895 008c 1B6C     		ldr	r3, [r3, #64]
 1896 008e F868     		ldr	r0, [r7, #12]
 1897 0090 7968     		ldr	r1, [r7, #4]
 1898 0092 9847     		blx	r3
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1899              		.loc 1 904 0
 1900 0094 4FF00003 		mov	r3, #0
 1901 0098 7B61     		str	r3, [r7, #20]
 1902              	.L62:
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1903              		.loc 1 908 0
 1904 009a 7B69     		ldr	r3, [r7, #20]
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1905              		.loc 1 909 0
 1906 009c 1846     		mov	r0, r3
 1907 009e 07F11807 		add	r7, r7, #24
 1908 00a2 BD46     		mov	sp, r7
 1909 00a4 80BD     		pop	{r7, pc}
 1910              		.cfi_endproc
 1911              	.LFE130:
 1913 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 1914              		.align	2
 1915              		.global	PWMSP001_SetPeriod
 1916              		.thumb
 1917              		.thumb_func
 1919              	PWMSP001_SetPeriod:
 1920              	.LFB131:
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1921              		.loc 1 920 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 24
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926 0000 80B4     		push	{r7}
 1927              	.LCFI42:
 1928              		.cfi_def_cfa_offset 4
 1929              		.cfi_offset 7, -4
 1930 0002 87B0     		sub	sp, sp, #28
 1931              	.LCFI43:
 1932              		.cfi_def_cfa_offset 32
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI44:
 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
 1937 0008 3960     		str	r1, [r7, #0]
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1938              		.loc 1 921 0
 1939 000a 4FF00103 		mov	r3, #1
 1940 000e 7B61     		str	r3, [r7, #20]
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 1941              		.loc 1 922 0
 1942 0010 4FF00003 		mov	r3, #0
 1943 0014 3B61     		str	r3, [r7, #16]
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1944              		.loc 1 926 0
 1945 0016 7B68     		ldr	r3, [r7, #4]
 1946 0018 DB6B     		ldr	r3, [r3, #60]
 1947 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1948 001c 002B     		cmp	r3, #0
 1949 001e 55D0     		beq	.L69
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 1950              		.loc 1 928 0
 1951 0020 3B68     		ldr	r3, [r7, #0]
 1952 0022 002B     		cmp	r3, #0
 1953 0024 03D1     		bne	.L70
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1954              		.loc 1 930 0
 1955 0026 4FF00203 		mov	r3, #2
 1956 002a 7B61     		str	r3, [r7, #20]
 1957 002c 4EE0     		b	.L69
 1958              	.L70:
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 1959              		.loc 1 934 0
 1960 002e 7B68     		ldr	r3, [r7, #4]
 1961 0030 DA6A     		ldr	r2, [r3, #44]
 1962 0032 3B68     		ldr	r3, [r7, #0]
 1963 0034 9A42     		cmp	r2, r3
 1964 0036 08D2     		bcs	.L71
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 1965              		.loc 1 935 0 discriminator 1
 1966 0038 7B68     		ldr	r3, [r7, #4]
 1967 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 1968              		.loc 1 934 0 discriminator 1
 1969 003e 012B     		cmp	r3, #1
 1970 0040 03D0     		beq	.L71
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1971              		.loc 1 937 0
 1972 0042 4FF00203 		mov	r3, #2
 1973 0046 7B61     		str	r3, [r7, #20]
 1974 0048 40E0     		b	.L69
 1975              	.L71:
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 1976              		.loc 1 941 0
 1977 004a 3B68     		ldr	r3, [r7, #0]
 1978 004c 3B61     		str	r3, [r7, #16]
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1979              		.loc 1 942 0
 1980 004e 7B68     		ldr	r3, [r7, #4]
 1981 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1982 0054 012B     		cmp	r3, #1
 1983 0056 05D1     		bne	.L72
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 1984              		.loc 1 944 0
 1985 0058 7B68     		ldr	r3, [r7, #4]
 1986 005a DB69     		ldr	r3, [r3, #28]
 1987 005c 3A69     		ldr	r2, [r7, #16]
 1988 005e 4FEA1242 		lsr	r2, r2, #16
 1989 0062 5A63     		str	r2, [r3, #52]
 1990              	.L72:
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1991              		.loc 1 946 0
 1992 0064 7B68     		ldr	r3, [r7, #4]
 1993 0066 9A69     		ldr	r2, [r3, #24]
 1994 0068 3B69     		ldr	r3, [r7, #16]
 1995 006a 4FEA0343 		lsl	r3, r3, #16
 1996 006e 4FEA1343 		lsr	r3, r3, #16
 1997 0072 5363     		str	r3, [r2, #52]
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 1998              		.loc 1 948 0
 1999 0074 7B68     		ldr	r3, [r7, #4]
 2000 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2001 007a 4FEA8303 		lsl	r3, r3, #2
 2002 007e FB60     		str	r3, [r7, #12]
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2003              		.loc 1 949 0
 2004 0080 7B68     		ldr	r3, [r7, #4]
 2005 0082 5B69     		ldr	r3, [r3, #20]
 2006 0084 7A68     		ldr	r2, [r7, #4]
 2007 0086 5269     		ldr	r2, [r2, #20]
 2008 0088 1169     		ldr	r1, [r2, #16]
 2009 008a FA68     		ldr	r2, [r7, #12]
 2010 008c 4FF00100 		mov	r0, #1
 2011 0090 00FA02F2 		lsl	r2, r0, r2
 2012 0094 0A43     		orrs	r2, r2, r1
 2013 0096 1A61     		str	r2, [r3, #16]
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2014              		.loc 1 950 0
 2015 0098 7B68     		ldr	r3, [r7, #4]
 2016 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2017 009e 012B     		cmp	r3, #1
 2018 00a0 11D1     		bne	.L73
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2019              		.loc 1 953 0
 2020 00a2 7B68     		ldr	r3, [r7, #4]
 2021 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2022 00a8 4FEA8303 		lsl	r3, r3, #2
 2023 00ac FB60     		str	r3, [r7, #12]
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2024              		.loc 1 954 0
 2025 00ae 7B68     		ldr	r3, [r7, #4]
 2026 00b0 5B69     		ldr	r3, [r3, #20]
 2027 00b2 7A68     		ldr	r2, [r7, #4]
 2028 00b4 5269     		ldr	r2, [r2, #20]
 2029 00b6 1169     		ldr	r1, [r2, #16]
 2030 00b8 FA68     		ldr	r2, [r7, #12]
 2031 00ba 4FF00100 		mov	r0, #1
 2032 00be 00FA02F2 		lsl	r2, r0, r2
 2033 00c2 0A43     		orrs	r2, r2, r1
 2034 00c4 1A61     		str	r2, [r3, #16]
 2035              	.L73:
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2036              		.loc 1 956 0
 2037 00c6 4FF00003 		mov	r3, #0
 2038 00ca 7B61     		str	r3, [r7, #20]
 2039              	.L69:
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2040              		.loc 1 960 0
 2041 00cc 7B69     		ldr	r3, [r7, #20]
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2042              		.loc 1 961 0
 2043 00ce 1846     		mov	r0, r3
 2044 00d0 07F11C07 		add	r7, r7, #28
 2045 00d4 BD46     		mov	sp, r7
 2046 00d6 80BC     		pop	{r7}
 2047 00d8 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE131:
 2051 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2052              		.align	2
 2053              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2054              		.thumb
 2055              		.thumb_func
 2057              	PWMSP001_SetPwmFreqAndDutyCycle:
 2058              	.LFB132:
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2059              		.loc 1 974 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 32
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0000 80B5     		push	{r7, lr}
 2064              	.LCFI45:
 2065              		.cfi_def_cfa_offset 8
 2066              		.cfi_offset 7, -8
 2067              		.cfi_offset 14, -4
 2068 0002 88B0     		sub	sp, sp, #32
 2069              	.LCFI46:
 2070              		.cfi_def_cfa_offset 40
 2071 0004 00AF     		add	r7, sp, #0
 2072              	.LCFI47:
 2073              		.cfi_def_cfa_register 7
 2074 0006 F860     		str	r0, [r7, #12]
 2075 0008 B960     		str	r1, [r7, #8]	@ float
 2076 000a 7A60     		str	r2, [r7, #4]	@ float
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2077              		.loc 1 975 0
 2078 000c 4FF00103 		mov	r3, #1
 2079 0010 FB61     		str	r3, [r7, #28]
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2080              		.loc 1 976 0
 2081 0012 4FF00003 		mov	r3, #0
 2082 0016 BB61     		str	r3, [r7, #24]
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2083              		.loc 1 979 0
 2084 0018 FB68     		ldr	r3, [r7, #12]
 2085 001a DB6B     		ldr	r3, [r3, #60]
 2086 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2087 001e 002B     		cmp	r3, #0
 2088 0020 70D0     		beq	.L76
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2089              		.loc 1 981 0
 2090 0022 D7ED027A 		flds	s15, [r7, #8]
 2091 0026 F5EE407A 		fcmpzs	s15
 2092 002a F1EE10FA 		fmstat
 2093 002e 0FD0     		beq	.L77
 2094              		.loc 1 981 0 is_stmt 0 discriminator 1
 2095 0030 97ED017A 		flds	s14, [r7, #4]
 2096 0034 DFED367A 		flds	s15, .L88
 2097 0038 B4EEE77A 		fcmpes	s14, s15
 2098 003c F1EE10FA 		fmstat
 2099 0040 06DC     		bgt	.L77
 2100 0042 D7ED017A 		flds	s15, [r7, #4]
 2101 0046 F5EEC07A 		fcmpezs	s15
 2102 004a F1EE10FA 		fmstat
 2103 004e 03D5     		bpl	.L87
 2104              	.L77:
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2105              		.loc 1 983 0 is_stmt 1
 2106 0050 4FF00203 		mov	r3, #2
 2107 0054 FB61     		str	r3, [r7, #28]
 2108 0056 55E0     		b	.L76
 2109              	.L87:
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2110              		.loc 1 987 0
 2111 0058 FB68     		ldr	r3, [r7, #12]
 2112 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2113 005c 7B61     		str	r3, [r7, #20]	@ float
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2114              		.loc 1 988 0
 2115 005e 97ED057A 		flds	s14, [r7, #20]
 2116 0062 D7ED027A 		flds	s15, [r7, #8]
 2117 0066 67EE277A 		fmuls	s15, s14, s15
 2118 006a C7ED057A 		fsts	s15, [r7, #20]
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2119              		.loc 1 989 0
 2120 006e 9FED297A 		flds	s14, .L88+4
 2121 0072 D7ED057A 		flds	s15, [r7, #20]
 2122 0076 C7EE277A 		fdivs	s15, s14, s15
 2123 007a FCEEE77A 		ftouizs	s15, s15
 2124 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2125              		.loc 1 991 0
 2126 0082 FB68     		ldr	r3, [r7, #12]
 2127 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2128 0088 002B     		cmp	r3, #0
 2129 008a 20D1     		bne	.L80
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2130              		.loc 1 993 0
 2131 008c BA69     		ldr	r2, [r7, #24]
 2132 008e 4FF6FF73 		movw	r3, #65535
 2133 0092 9A42     		cmp	r2, r3
 2134 0094 03D9     		bls	.L81
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2135              		.loc 1 995 0
 2136 0096 4FF00203 		mov	r3, #2
 2137 009a FB61     		str	r3, [r7, #28]
 2138 009c 2AE0     		b	.L82
 2139              	.L81:
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2140              		.loc 1 999 0
 2141 009e FB68     		ldr	r3, [r7, #12]
 2142 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2143 00a4 002B     		cmp	r3, #0
 2144 00a6 06D1     		bne	.L83
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2145              		.loc 1 1001 0
 2146 00a8 FB68     		ldr	r3, [r7, #12]
 2147 00aa 9B69     		ldr	r3, [r3, #24]
 2148 00ac BA69     		ldr	r2, [r7, #24]
 2149 00ae 02F1FF32 		add	r2, r2, #-1
 2150 00b2 5A63     		str	r2, [r3, #52]
 2151 00b4 07E0     		b	.L84
 2152              	.L83:
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2153              		.loc 1 1005 0
 2154 00b6 FB68     		ldr	r3, [r7, #12]
 2155 00b8 9B69     		ldr	r3, [r3, #24]
 2156 00ba BA69     		ldr	r2, [r7, #24]
 2157 00bc 02F1FF32 		add	r2, r2, #-1
 2158 00c0 4FEA5202 		lsr	r2, r2, #1
 2159 00c4 5A63     		str	r2, [r3, #52]
 2160              	.L84:
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2161              		.loc 1 1007 0
 2162 00c6 4FF00003 		mov	r3, #0
 2163 00ca FB61     		str	r3, [r7, #28]
 2164 00cc 12E0     		b	.L82
 2165              	.L80:
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2166              		.loc 1 1010 0
 2167 00ce FB68     		ldr	r3, [r7, #12]
 2168 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2169 00d4 012B     		cmp	r3, #1
 2170 00d6 08D1     		bne	.L85
 2171              		.loc 1 1010 0 is_stmt 0 discriminator 1
 2172 00d8 BA69     		ldr	r2, [r7, #24]
 2173 00da 4FF6FF73 		movw	r3, #65535
 2174 00de 9A42     		cmp	r2, r3
 2175 00e0 03D8     		bhi	.L85
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2176              		.loc 1 1013 0 is_stmt 1
 2177 00e2 4FF00203 		mov	r3, #2
 2178 00e6 FB61     		str	r3, [r7, #28]
 2179 00e8 04E0     		b	.L82
 2180              	.L85:
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2181              		.loc 1 1018 0
 2182 00ea F868     		ldr	r0, [r7, #12]
 2183 00ec B969     		ldr	r1, [r7, #24]
 2184 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2185 00f2 F861     		str	r0, [r7, #28]
 2186              	.L82:
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2187              		.loc 1 1020 0
 2188 00f4 FB69     		ldr	r3, [r7, #28]
 2189 00f6 002B     		cmp	r3, #0
 2190 00f8 04D1     		bne	.L76
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2191              		.loc 1 1023 0
 2192 00fa FB68     		ldr	r3, [r7, #12]
 2193 00fc 5B6C     		ldr	r3, [r3, #68]
 2194 00fe F868     		ldr	r0, [r7, #12]
 2195 0100 7968     		ldr	r1, [r7, #4]	@ float
 2196 0102 9847     		blx	r3
 2197              	.L76:
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2198              		.loc 1 1027 0
 2199 0104 FB69     		ldr	r3, [r7, #28]
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2200              		.loc 1 1028 0
 2201 0106 1846     		mov	r0, r3
 2202 0108 07F12007 		add	r7, r7, #32
 2203 010c BD46     		mov	sp, r7
 2204 010e 80BD     		pop	{r7, pc}
 2205              	.L89:
 2206              		.align	2
 2207              	.L88:
 2208 0110 0000C842 		.word	1120403456
 2209 0114 286B6E4E 		.word	1315859240
 2210              		.cfi_endproc
 2211              	.LFE132:
 2213              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2214              		.align	2
 2215              		.global	PWMSP001_SetPwmFreq
 2216              		.thumb
 2217              		.thumb_func
 2219              	PWMSP001_SetPwmFreq:
 2220              	.LFB133:
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2221              		.loc 1 1040 0
 2222              		.cfi_startproc
 2223              		@ args = 0, pretend = 0, frame = 32
 2224              		@ frame_needed = 1, uses_anonymous_args = 0
 2225 0000 90B5     		push	{r4, r7, lr}
 2226              	.LCFI48:
 2227              		.cfi_def_cfa_offset 12
 2228              		.cfi_offset 4, -12
 2229              		.cfi_offset 7, -8
 2230              		.cfi_offset 14, -4
 2231 0002 89B0     		sub	sp, sp, #36
 2232              	.LCFI49:
 2233              		.cfi_def_cfa_offset 48
 2234 0004 00AF     		add	r7, sp, #0
 2235              	.LCFI50:
 2236              		.cfi_def_cfa_register 7
 2237 0006 7860     		str	r0, [r7, #4]
 2238 0008 3960     		str	r1, [r7, #0]	@ float
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2239              		.loc 1 1041 0
 2240 000a 4FF00103 		mov	r3, #1
 2241 000e FB61     		str	r3, [r7, #28]
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2242              		.loc 1 1042 0
 2243 0010 4FF00003 		mov	r3, #0
 2244 0014 BB61     		str	r3, [r7, #24]
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2245              		.loc 1 1047 0
 2246 0016 7B68     		ldr	r3, [r7, #4]
 2247 0018 DB6B     		ldr	r3, [r3, #60]
 2248 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2249 001c 002B     		cmp	r3, #0
 2250 001e 7DD0     		beq	.L91
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2251              		.loc 1 1049 0
 2252 0020 D7ED007A 		flds	s15, [r7, #0]
 2253 0024 F5EE407A 		fcmpzs	s15
 2254 0028 F1EE10FA 		fmstat
 2255 002c 03D1     		bne	.L92
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2256              		.loc 1 1051 0
 2257 002e 4FF00203 		mov	r3, #2
 2258 0032 FB61     		str	r3, [r7, #28]
 2259 0034 72E0     		b	.L91
 2260              	.L92:
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2261              		.loc 1 1055 0
 2262 0036 7B68     		ldr	r3, [r7, #4]
 2263 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2264 003a 7B61     		str	r3, [r7, #20]	@ float
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2265              		.loc 1 1056 0
 2266 003c 97ED057A 		flds	s14, [r7, #20]
 2267 0040 D7ED007A 		flds	s15, [r7, #0]
 2268 0044 67EE277A 		fmuls	s15, s14, s15
 2269 0048 C7ED057A 		fsts	s15, [r7, #20]
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2270              		.loc 1 1057 0
 2271 004c 9FED367A 		flds	s14, .L98
 2272 0050 D7ED057A 		flds	s15, [r7, #20]
 2273 0054 C7EE277A 		fdivs	s15, s14, s15
 2274 0058 FCEEE77A 		ftouizs	s15, s15
 2275 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2276              		.loc 1 1059 0
 2277 0060 7B68     		ldr	r3, [r7, #4]
 2278 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2279 0066 002B     		cmp	r3, #0
 2280 0068 32D1     		bne	.L93
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2281              		.loc 1 1061 0
 2282 006a BA69     		ldr	r2, [r7, #24]
 2283 006c 4FF6FF73 		movw	r3, #65535
 2284 0070 9A42     		cmp	r2, r3
 2285 0072 03D9     		bls	.L94
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2286              		.loc 1 1063 0
 2287 0074 4FF00203 		mov	r3, #2
 2288 0078 FB61     		str	r3, [r7, #28]
 2289 007a 4FE0     		b	.L91
 2290              	.L94:
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2291              		.loc 1 1067 0
 2292 007c 7B68     		ldr	r3, [r7, #4]
 2293 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2294 0082 002B     		cmp	r3, #0
 2295 0084 06D1     		bne	.L95
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2296              		.loc 1 1069 0
 2297 0086 7B68     		ldr	r3, [r7, #4]
 2298 0088 9B69     		ldr	r3, [r3, #24]
 2299 008a BA69     		ldr	r2, [r7, #24]
 2300 008c 02F1FF32 		add	r2, r2, #-1
 2301 0090 5A63     		str	r2, [r3, #52]
 2302 0092 07E0     		b	.L96
 2303              	.L95:
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2304              		.loc 1 1073 0
 2305 0094 7B68     		ldr	r3, [r7, #4]
 2306 0096 9B69     		ldr	r3, [r3, #24]
 2307 0098 BA69     		ldr	r2, [r7, #24]
 2308 009a 02F1FF32 		add	r2, r2, #-1
 2309 009e 4FEA5202 		lsr	r2, r2, #1
 2310 00a2 5A63     		str	r2, [r3, #52]
 2311              	.L96:
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2312              		.loc 1 1076 0
 2313 00a4 7B68     		ldr	r3, [r7, #4]
 2314 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2315 00aa 4FEA8303 		lsl	r3, r3, #2
 2316 00ae 3B61     		str	r3, [r7, #16]
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2317              		.loc 1 1077 0
 2318 00b0 7B68     		ldr	r3, [r7, #4]
 2319 00b2 5B69     		ldr	r3, [r3, #20]
 2320 00b4 7A68     		ldr	r2, [r7, #4]
 2321 00b6 5269     		ldr	r2, [r2, #20]
 2322 00b8 1169     		ldr	r1, [r2, #16]
 2323 00ba 3A69     		ldr	r2, [r7, #16]
 2324 00bc 4FF00100 		mov	r0, #1
 2325 00c0 00FA02F2 		lsl	r2, r0, r2
 2326 00c4 0A43     		orrs	r2, r2, r1
 2327 00c6 1A61     		str	r2, [r3, #16]
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2328              		.loc 1 1078 0
 2329 00c8 4FF00003 		mov	r3, #0
 2330 00cc FB61     		str	r3, [r7, #28]
 2331 00ce 25E0     		b	.L91
 2332              	.L93:
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2333              		.loc 1 1084 0
 2334 00d0 7868     		ldr	r0, [r7, #4]
 2335 00d2 B969     		ldr	r1, [r7, #24]
 2336 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2337 00d8 F861     		str	r0, [r7, #28]
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2338              		.loc 1 1085 0
 2339 00da FB69     		ldr	r3, [r7, #28]
 2340 00dc 002B     		cmp	r3, #0
 2341 00de 1DD1     		bne	.L91
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2342              		.loc 1 1087 0
 2343 00e0 7B68     		ldr	r3, [r7, #4]
 2344 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2345 00e6 4FEA8303 		lsl	r3, r3, #2
 2346 00ea FB60     		str	r3, [r7, #12]
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2347              		.loc 1 1088 0
 2348 00ec 7B68     		ldr	r3, [r7, #4]
 2349 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2350 00f2 4FEA8303 		lsl	r3, r3, #2
 2351 00f6 BB60     		str	r3, [r7, #8]
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2352              		.loc 1 1089 0
 2353 00f8 7B68     		ldr	r3, [r7, #4]
 2354 00fa 5B69     		ldr	r3, [r3, #20]
 2355 00fc 7A68     		ldr	r2, [r7, #4]
 2356 00fe 5269     		ldr	r2, [r2, #20]
 2357 0100 1169     		ldr	r1, [r2, #16]
 2358 0102 FA68     		ldr	r2, [r7, #12]
 2359 0104 4FF00100 		mov	r0, #1
 2360 0108 00FA02F0 		lsl	r0, r0, r2
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2361              		.loc 1 1090 0
 2362 010c BA68     		ldr	r2, [r7, #8]
 2363 010e 4FF00104 		mov	r4, #1
 2364 0112 04FA02F2 		lsl	r2, r4, r2
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2365              		.loc 1 1089 0
 2366 0116 0243     		orrs	r2, r2, r0
 2367 0118 0A43     		orrs	r2, r2, r1
 2368 011a 1A61     		str	r2, [r3, #16]
 2369              	.L91:
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2370              		.loc 1 1095 0
 2371 011c FB69     		ldr	r3, [r7, #28]
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2372              		.loc 1 1096 0
 2373 011e 1846     		mov	r0, r3
 2374 0120 07F12407 		add	r7, r7, #36
 2375 0124 BD46     		mov	sp, r7
 2376 0126 90BD     		pop	{r4, r7, pc}
 2377              	.L99:
 2378              		.align	2
 2379              	.L98:
 2380 0128 286B6E4E 		.word	1315859240
 2381              		.cfi_endproc
 2382              	.LFE133:
 2384              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2385              		.align	2
 2386              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2387              		.thumb
 2388              		.thumb_func
 2390              	PWMSP001_lSetPwmFreqTimerConcat:
 2391              	.LFB134:
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2392              		.loc 1 1106 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 32
 2395              		@ frame_needed = 1, uses_anonymous_args = 0
 2396              		@ link register save eliminated.
 2397 0000 80B4     		push	{r7}
 2398              	.LCFI51:
 2399              		.cfi_def_cfa_offset 4
 2400              		.cfi_offset 7, -4
 2401 0002 89B0     		sub	sp, sp, #36
 2402              	.LCFI52:
 2403              		.cfi_def_cfa_offset 40
 2404 0004 00AF     		add	r7, sp, #0
 2405              	.LCFI53:
 2406              		.cfi_def_cfa_register 7
 2407 0006 7860     		str	r0, [r7, #4]
 2408 0008 3960     		str	r1, [r7, #0]
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2409              		.loc 1 1107 0
 2410 000a 3B68     		ldr	r3, [r7, #0]
 2411 000c FB61     		str	r3, [r7, #28]
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2412              		.loc 1 1109 0
 2413 000e 4FF00003 		mov	r3, #0
 2414 0012 FB74     		strb	r3, [r7, #19]
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2415              		.loc 1 1110 0
 2416 0014 4FF00103 		mov	r3, #1
 2417 0018 FB60     		str	r3, [r7, #12]
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2418              		.loc 1 1112 0
 2419 001a 3B68     		ldr	r3, [r7, #0]
 2420 001c B3F1FF3F 		cmp	r3, #-1
 2421 0020 03D1     		bne	.L101
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2422              		.loc 1 1114 0
 2423 0022 4FF00203 		mov	r3, #2
 2424 0026 FB60     		str	r3, [r7, #12]
 2425 0028 41E0     		b	.L102
 2426              	.L101:
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2427              		.loc 1 1120 0
 2428 002a 3A68     		ldr	r2, [r7, #0]
 2429 002c 4FF6FF73 		movw	r3, #65535
 2430 0030 9A42     		cmp	r2, r3
 2431 0032 17D9     		bls	.L103
 2432              	.L104:
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2433              		.loc 1 1124 0 discriminator 1
 2434 0034 FB69     		ldr	r3, [r7, #28]
 2435 0036 4FEA5303 		lsr	r3, r3, #1
 2436 003a FB61     		str	r3, [r7, #28]
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2437              		.loc 1 1125 0 discriminator 1
 2438 003c FB7C     		ldrb	r3, [r7, #19]
 2439 003e 03F10103 		add	r3, r3, #1
 2440 0042 FB74     		strb	r3, [r7, #19]
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2441              		.loc 1 1126 0 discriminator 1
 2442 0044 FA69     		ldr	r2, [r7, #28]
 2443 0046 4FF6FE73 		movw	r3, #65534
 2444 004a 9A42     		cmp	r2, r3
 2445 004c F2D8     		bhi	.L104
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2446              		.loc 1 1128 0
 2447 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2448 0050 4FF00102 		mov	r2, #1
 2449 0054 02FA03F3 		lsl	r3, r2, r3
 2450 0058 03F1FF33 		add	r3, r3, #-1
 2451 005c BB61     		str	r3, [r7, #24]
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2452              		.loc 1 1129 0
 2453 005e FB69     		ldr	r3, [r7, #28]
 2454 0060 7B61     		str	r3, [r7, #20]
 2455 0062 04E0     		b	.L105
 2456              	.L103:
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2457              		.loc 1 1133 0
 2458 0064 3B68     		ldr	r3, [r7, #0]
 2459 0066 7B61     		str	r3, [r7, #20]
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2460              		.loc 1 1134 0
 2461 0068 4FF00003 		mov	r3, #0
 2462 006c BB61     		str	r3, [r7, #24]
 2463              	.L105:
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2464              		.loc 1 1138 0
 2465 006e 7B68     		ldr	r3, [r7, #4]
 2466 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2467 0074 012B     		cmp	r3, #1
 2468 0076 07D1     		bne	.L106
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2469              		.loc 1 1140 0
 2470 0078 BB69     		ldr	r3, [r7, #24]
 2471 007a 4FEA5303 		lsr	r3, r3, #1
 2472 007e BB61     		str	r3, [r7, #24]
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2473              		.loc 1 1141 0
 2474 0080 7B69     		ldr	r3, [r7, #20]
 2475 0082 4FEA5303 		lsr	r3, r3, #1
 2476 0086 7B61     		str	r3, [r7, #20]
 2477              	.L106:
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2478              		.loc 1 1144 0
 2479 0088 7B68     		ldr	r3, [r7, #4]
 2480 008a 9A69     		ldr	r2, [r3, #24]
 2481 008c 7B69     		ldr	r3, [r7, #20]
 2482 008e 4FEA0343 		lsl	r3, r3, #16
 2483 0092 4FEA1343 		lsr	r3, r3, #16
 2484 0096 5363     		str	r3, [r2, #52]
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2485              		.loc 1 1145 0
 2486 0098 7B68     		ldr	r3, [r7, #4]
 2487 009a DA69     		ldr	r2, [r3, #28]
 2488 009c BB69     		ldr	r3, [r7, #24]
 2489 009e 4FEA0343 		lsl	r3, r3, #16
 2490 00a2 4FEA1343 		lsr	r3, r3, #16
 2491 00a6 5363     		str	r3, [r2, #52]
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2492              		.loc 1 1148 0
 2493 00a8 4FF00003 		mov	r3, #0
 2494 00ac FB60     		str	r3, [r7, #12]
 2495              	.L102:
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2496              		.loc 1 1150 0
 2497 00ae FB68     		ldr	r3, [r7, #12]
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2498              		.loc 1 1151 0
 2499 00b0 1846     		mov	r0, r3
 2500 00b2 07F12407 		add	r7, r7, #36
 2501 00b6 BD46     		mov	sp, r7
 2502 00b8 80BC     		pop	{r7}
 2503 00ba 7047     		bx	lr
 2504              		.cfi_endproc
 2505              	.LFE134:
 2507              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2508              		.align	2
 2509              		.global	PWMSP001_SetTimerVal
 2510              		.thumb
 2511              		.thumb_func
 2513              	PWMSP001_SetTimerVal:
 2514              	.LFB135:
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2515              		.loc 1 1164 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 16
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519              		@ link register save eliminated.
 2520 0000 80B4     		push	{r7}
 2521              	.LCFI54:
 2522              		.cfi_def_cfa_offset 4
 2523              		.cfi_offset 7, -4
 2524 0002 85B0     		sub	sp, sp, #20
 2525              	.LCFI55:
 2526              		.cfi_def_cfa_offset 24
 2527 0004 00AF     		add	r7, sp, #0
 2528              	.LCFI56:
 2529              		.cfi_def_cfa_register 7
 2530 0006 7860     		str	r0, [r7, #4]
 2531 0008 3960     		str	r1, [r7, #0]
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2532              		.loc 1 1165 0
 2533 000a 4FF00103 		mov	r3, #1
 2534 000e FB60     		str	r3, [r7, #12]
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2535              		.loc 1 1167 0
 2536 0010 7B68     		ldr	r3, [r7, #4]
 2537 0012 DB6B     		ldr	r3, [r3, #60]
 2538 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2539 0016 012B     		cmp	r3, #1
 2540 0018 04D0     		beq	.L109
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2541              		.loc 1 1168 0 discriminator 1
 2542 001a 7B68     		ldr	r3, [r7, #4]
 2543 001c DB6B     		ldr	r3, [r3, #60]
 2544 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2545              		.loc 1 1167 0 discriminator 1
 2546 0020 032B     		cmp	r3, #3
 2547 0022 15D1     		bne	.L110
 2548              	.L109:
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2549              		.loc 1 1175 0
 2550 0024 7B68     		ldr	r3, [r7, #4]
 2551 0026 9A69     		ldr	r2, [r3, #24]
 2552 0028 3B68     		ldr	r3, [r7, #0]
 2553 002a 4FEA0343 		lsl	r3, r3, #16
 2554 002e 4FEA1343 		lsr	r3, r3, #16
 2555 0032 1367     		str	r3, [r2, #112]
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2556              		.loc 1 1176 0
 2557 0034 7B68     		ldr	r3, [r7, #4]
 2558 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2559 003a 012B     		cmp	r3, #1
 2560 003c 05D1     		bne	.L111
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2561              		.loc 1 1178 0
 2562 003e 7B68     		ldr	r3, [r7, #4]
 2563 0040 DB69     		ldr	r3, [r3, #28]
 2564 0042 3A68     		ldr	r2, [r7, #0]
 2565 0044 4FEA1242 		lsr	r2, r2, #16
 2566 0048 1A67     		str	r2, [r3, #112]
 2567              	.L111:
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2568              		.loc 1 1180 0
 2569 004a 4FF00003 		mov	r3, #0
 2570 004e FB60     		str	r3, [r7, #12]
 2571              	.L110:
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2572              		.loc 1 1182 0
 2573 0050 FB68     		ldr	r3, [r7, #12]
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2574              		.loc 1 1183 0
 2575 0052 1846     		mov	r0, r3
 2576 0054 07F11407 		add	r7, r7, #20
 2577 0058 BD46     		mov	sp, r7
 2578 005a 80BC     		pop	{r7}
 2579 005c 7047     		bx	lr
 2580              		.cfi_endproc
 2581              	.LFE135:
 2583 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2584              		.align	2
 2585              		.global	PWMSP001_GetTimerStatus
 2586              		.thumb
 2587              		.thumb_func
 2589              	PWMSP001_GetTimerStatus:
 2590              	.LFB136:
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2591              		.loc 1 1194 0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 16
 2594              		@ frame_needed = 1, uses_anonymous_args = 0
 2595              		@ link register save eliminated.
 2596 0000 80B4     		push	{r7}
 2597              	.LCFI57:
 2598              		.cfi_def_cfa_offset 4
 2599              		.cfi_offset 7, -4
 2600 0002 85B0     		sub	sp, sp, #20
 2601              	.LCFI58:
 2602              		.cfi_def_cfa_offset 24
 2603 0004 00AF     		add	r7, sp, #0
 2604              	.LCFI59:
 2605              		.cfi_def_cfa_register 7
 2606 0006 7860     		str	r0, [r7, #4]
 2607 0008 3960     		str	r1, [r7, #0]
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2608              		.loc 1 1195 0
 2609 000a 4FF00103 		mov	r3, #1
 2610 000e FB60     		str	r3, [r7, #12]
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2611              		.loc 1 1196 0
 2612 0010 4FF00003 		mov	r3, #0
 2613 0014 BB60     		str	r3, [r7, #8]
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2614              		.loc 1 1198 0
 2615 0016 7B68     		ldr	r3, [r7, #4]
 2616 0018 DB6B     		ldr	r3, [r3, #60]
 2617 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2618 001c 002B     		cmp	r3, #0
 2619 001e 1ED0     		beq	.L114
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2620              		.loc 1 1205 0
 2621 0020 7B68     		ldr	r3, [r7, #4]
 2622 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2623 0026 012B     		cmp	r3, #1
 2624 0028 0FD1     		bne	.L115
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2625              		.loc 1 1207 0
 2626 002a 7B68     		ldr	r3, [r7, #4]
 2627 002c DB69     		ldr	r3, [r3, #28]
 2628 002e 9B68     		ldr	r3, [r3, #8]
 2629 0030 03F00103 		and	r3, r3, #1
 2630 0034 BB60     		str	r3, [r7, #8]
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2631              		.loc 1 1209 0
 2632 0036 7B68     		ldr	r3, [r7, #4]
 2633 0038 9B69     		ldr	r3, [r3, #24]
 2634 003a 9A68     		ldr	r2, [r3, #8]
 2635 003c BB68     		ldr	r3, [r7, #8]
 2636 003e 1340     		ands	r3, r3, r2
 2637 0040 03F00102 		and	r2, r3, #1
 2638 0044 3B68     		ldr	r3, [r7, #0]
 2639 0046 1A60     		str	r2, [r3, #0]
 2640 0048 06E0     		b	.L116
 2641              	.L115:
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2642              		.loc 1 1216 0
 2643 004a 7B68     		ldr	r3, [r7, #4]
 2644 004c 9B69     		ldr	r3, [r3, #24]
 2645 004e 9B68     		ldr	r3, [r3, #8]
 2646 0050 03F00102 		and	r2, r3, #1
 2647 0054 3B68     		ldr	r3, [r7, #0]
 2648 0056 1A60     		str	r2, [r3, #0]
 2649              	.L116:
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2650              		.loc 1 1219 0
 2651 0058 4FF00003 		mov	r3, #0
 2652 005c FB60     		str	r3, [r7, #12]
 2653              	.L114:
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2654              		.loc 1 1221 0
 2655 005e FB68     		ldr	r3, [r7, #12]
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2656              		.loc 1 1222 0
 2657 0060 1846     		mov	r0, r3
 2658 0062 07F11407 		add	r7, r7, #20
 2659 0066 BD46     		mov	sp, r7
 2660 0068 80BC     		pop	{r7}
 2661 006a 7047     		bx	lr
 2662              		.cfi_endproc
 2663              	.LFE136:
 2665              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2666              		.align	2
 2667              		.global	PWMSP001_GetTimerRegsVal
 2668              		.thumb
 2669              		.thumb_func
 2671              	PWMSP001_GetTimerRegsVal:
 2672              	.LFB137:
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2673              		.loc 1 1233 0
 2674              		.cfi_startproc
 2675              		@ args = 0, pretend = 0, frame = 16
 2676              		@ frame_needed = 1, uses_anonymous_args = 0
 2677              		@ link register save eliminated.
 2678 0000 80B4     		push	{r7}
 2679              	.LCFI60:
 2680              		.cfi_def_cfa_offset 4
 2681              		.cfi_offset 7, -4
 2682 0002 85B0     		sub	sp, sp, #20
 2683              	.LCFI61:
 2684              		.cfi_def_cfa_offset 24
 2685 0004 00AF     		add	r7, sp, #0
 2686              	.LCFI62:
 2687              		.cfi_def_cfa_register 7
 2688 0006 7860     		str	r0, [r7, #4]
 2689 0008 3960     		str	r1, [r7, #0]
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2690              		.loc 1 1234 0
 2691 000a 4FF00103 		mov	r3, #1
 2692 000e FB60     		str	r3, [r7, #12]
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2693              		.loc 1 1235 0
 2694 0010 4FF00003 		mov	r3, #0
 2695 0014 BB60     		str	r3, [r7, #8]
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2696              		.loc 1 1238 0
 2697 0016 7B68     		ldr	r3, [r7, #4]
 2698 0018 DB6B     		ldr	r3, [r3, #60]
 2699 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2700 001c 002B     		cmp	r3, #0
 2701 001e 5ED0     		beq	.L119
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2702              		.loc 1 1245 0
 2703 0020 7B68     		ldr	r3, [r7, #4]
 2704 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2705 0026 012B     		cmp	r3, #1
 2706 0028 43D1     		bne	.L120
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2707              		.loc 1 1247 0
 2708 002a 7B68     		ldr	r3, [r7, #4]
 2709 002c DB69     		ldr	r3, [r3, #28]
 2710 002e 1B6F     		ldr	r3, [r3, #112]
 2711 0030 4FEA0343 		lsl	r3, r3, #16
 2712 0034 BB60     		str	r3, [r7, #8]
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2713              		.loc 1 1251 0
 2714 0036 7B68     		ldr	r3, [r7, #4]
 2715 0038 9B69     		ldr	r3, [r3, #24]
 2716 003a 1B6F     		ldr	r3, [r3, #112]
 2717 003c 4FEA0343 		lsl	r3, r3, #16
 2718 0040 4FEA1343 		lsr	r3, r3, #16
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2719              		.loc 1 1250 0
 2720 0044 BA68     		ldr	r2, [r7, #8]
 2721 0046 1A43     		orrs	r2, r2, r3
 2722 0048 3B68     		ldr	r3, [r7, #0]
 2723 004a 9A60     		str	r2, [r3, #8]
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2724              		.loc 1 1254 0
 2725 004c 7B68     		ldr	r3, [r7, #4]
 2726 004e DB69     		ldr	r3, [r3, #28]
 2727 0050 DA6B     		ldr	r2, [r3, #60]
 2728 0052 3B68     		ldr	r3, [r7, #0]
 2729 0054 1A60     		str	r2, [r3, #0]
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2730              		.loc 1 1255 0
 2731 0056 3B68     		ldr	r3, [r7, #0]
 2732 0058 1B68     		ldr	r3, [r3, #0]
 2733 005a 7A68     		ldr	r2, [r7, #4]
 2734 005c 9269     		ldr	r2, [r2, #24]
 2735 005e 526B     		ldr	r2, [r2, #52]
 2736 0060 02FB03F2 		mul	r2, r2, r3
 2737 0064 3B68     		ldr	r3, [r7, #0]
 2738 0066 1A60     		str	r2, [r3, #0]
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2739              		.loc 1 1256 0
 2740 0068 3B68     		ldr	r3, [r7, #0]
 2741 006a 1A68     		ldr	r2, [r3, #0]
 2742 006c 7B68     		ldr	r3, [r7, #4]
 2743 006e 9B69     		ldr	r3, [r3, #24]
 2744 0070 DB6B     		ldr	r3, [r3, #60]
 2745 0072 D218     		adds	r2, r2, r3
 2746 0074 3B68     		ldr	r3, [r7, #0]
 2747 0076 1A60     		str	r2, [r3, #0]
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2748              		.loc 1 1257 0
 2749 0078 7B68     		ldr	r3, [r7, #4]
 2750 007a DB69     		ldr	r3, [r3, #28]
 2751 007c 5B6B     		ldr	r3, [r3, #52]
 2752 007e 03F10102 		add	r2, r3, #1
 2753 0082 3B68     		ldr	r3, [r7, #0]
 2754 0084 5A60     		str	r2, [r3, #4]
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2755              		.loc 1 1258 0
 2756 0086 3B68     		ldr	r3, [r7, #0]
 2757 0088 5A68     		ldr	r2, [r3, #4]
 2758 008a 7B68     		ldr	r3, [r7, #4]
 2759 008c 9B69     		ldr	r3, [r3, #24]
 2760 008e 5B6B     		ldr	r3, [r3, #52]
 2761 0090 4FEA0343 		lsl	r3, r3, #16
 2762 0094 4FEA1343 		lsr	r3, r3, #16
 2763 0098 03F10103 		add	r3, r3, #1
 2764 009c 03FB02F2 		mul	r2, r3, r2
 2765 00a0 3B68     		ldr	r3, [r7, #0]
 2766 00a2 5A60     		str	r2, [r3, #4]
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2767              		.loc 1 1259 0
 2768 00a4 3B68     		ldr	r3, [r7, #0]
 2769 00a6 5B68     		ldr	r3, [r3, #4]
 2770 00a8 03F10102 		add	r2, r3, #1
 2771 00ac 3B68     		ldr	r3, [r7, #0]
 2772 00ae 5A60     		str	r2, [r3, #4]
 2773 00b0 12E0     		b	.L121
 2774              	.L120:
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2775              		.loc 1 1264 0
 2776 00b2 7B68     		ldr	r3, [r7, #4]
 2777 00b4 9B69     		ldr	r3, [r3, #24]
 2778 00b6 1B6F     		ldr	r3, [r3, #112]
 2779 00b8 4FEA0343 		lsl	r3, r3, #16
 2780 00bc 4FEA1343 		lsr	r3, r3, #16
 2781 00c0 3A68     		ldr	r2, [r7, #0]
 2782 00c2 9360     		str	r3, [r2, #8]
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 2783              		.loc 1 1267 0
 2784 00c4 7B68     		ldr	r3, [r7, #4]
 2785 00c6 9B69     		ldr	r3, [r3, #24]
 2786 00c8 DA6B     		ldr	r2, [r3, #60]
 2787 00ca 3B68     		ldr	r3, [r7, #0]
 2788 00cc 1A60     		str	r2, [r3, #0]
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2789              		.loc 1 1268 0
 2790 00ce 7B68     		ldr	r3, [r7, #4]
 2791 00d0 9B69     		ldr	r3, [r3, #24]
 2792 00d2 5A6B     		ldr	r2, [r3, #52]
 2793 00d4 3B68     		ldr	r3, [r7, #0]
 2794 00d6 5A60     		str	r2, [r3, #4]
 2795              	.L121:
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2796              		.loc 1 1271 0
 2797 00d8 4FF00003 		mov	r3, #0
 2798 00dc FB60     		str	r3, [r7, #12]
 2799              	.L119:
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2800              		.loc 1 1273 0
 2801 00de FB68     		ldr	r3, [r7, #12]
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2802              		.loc 1 1274 0
 2803 00e0 1846     		mov	r0, r3
 2804 00e2 07F11407 		add	r7, r7, #20
 2805 00e6 BD46     		mov	sp, r7
 2806 00e8 80BC     		pop	{r7}
 2807 00ea 7047     		bx	lr
 2808              		.cfi_endproc
 2809              	.LFE137:
 2811              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 2812              		.align	2
 2813              		.global	PWMSP001_GetPeriodReg
 2814              		.thumb
 2815              		.thumb_func
 2817              	PWMSP001_GetPeriodReg:
 2818              	.LFB138:
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2819              		.loc 1 1285 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 16
 2822              		@ frame_needed = 1, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824 0000 80B4     		push	{r7}
 2825              	.LCFI63:
 2826              		.cfi_def_cfa_offset 4
 2827              		.cfi_offset 7, -4
 2828 0002 85B0     		sub	sp, sp, #20
 2829              	.LCFI64:
 2830              		.cfi_def_cfa_offset 24
 2831 0004 00AF     		add	r7, sp, #0
 2832              	.LCFI65:
 2833              		.cfi_def_cfa_register 7
 2834 0006 7860     		str	r0, [r7, #4]
 2835 0008 3960     		str	r1, [r7, #0]
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2836              		.loc 1 1286 0
 2837 000a 4FF00103 		mov	r3, #1
 2838 000e FB60     		str	r3, [r7, #12]
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2839              		.loc 1 1289 0
 2840 0010 7B68     		ldr	r3, [r7, #4]
 2841 0012 DB6B     		ldr	r3, [r3, #60]
 2842 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2843 0016 002B     		cmp	r3, #0
 2844 0018 29D0     		beq	.L124
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2845              		.loc 1 1295 0
 2846 001a 7B68     		ldr	r3, [r7, #4]
 2847 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2848 0020 012B     		cmp	r3, #1
 2849 0022 1CD1     		bne	.L125
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 2850              		.loc 1 1297 0
 2851 0024 7B68     		ldr	r3, [r7, #4]
 2852 0026 DB69     		ldr	r3, [r3, #28]
 2853 0028 5B6B     		ldr	r3, [r3, #52]
 2854 002a 03F10102 		add	r2, r3, #1
 2855 002e 3B68     		ldr	r3, [r7, #0]
 2856 0030 1A60     		str	r2, [r3, #0]
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2857              		.loc 1 1298 0
 2858 0032 3B68     		ldr	r3, [r7, #0]
 2859 0034 1A68     		ldr	r2, [r3, #0]
 2860 0036 7B68     		ldr	r3, [r7, #4]
 2861 0038 9B69     		ldr	r3, [r3, #24]
 2862 003a 5B6B     		ldr	r3, [r3, #52]
 2863 003c 4FEA0343 		lsl	r3, r3, #16
 2864 0040 4FEA1343 		lsr	r3, r3, #16
 2865 0044 03F10103 		add	r3, r3, #1
 2866 0048 03FB02F2 		mul	r2, r3, r2
 2867 004c 3B68     		ldr	r3, [r7, #0]
 2868 004e 1A60     		str	r2, [r3, #0]
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 2869              		.loc 1 1299 0
 2870 0050 3B68     		ldr	r3, [r7, #0]
 2871 0052 1B68     		ldr	r3, [r3, #0]
 2872 0054 03F10102 		add	r2, r3, #1
 2873 0058 3B68     		ldr	r3, [r7, #0]
 2874 005a 1A60     		str	r2, [r3, #0]
 2875 005c 04E0     		b	.L126
 2876              	.L125:
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2877              		.loc 1 1303 0
 2878 005e 7B68     		ldr	r3, [r7, #4]
 2879 0060 9B69     		ldr	r3, [r3, #24]
 2880 0062 5A6B     		ldr	r2, [r3, #52]
 2881 0064 3B68     		ldr	r3, [r7, #0]
 2882 0066 1A60     		str	r2, [r3, #0]
 2883              	.L126:
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2884              		.loc 1 1305 0
 2885 0068 4FF00003 		mov	r3, #0
 2886 006c FB60     		str	r3, [r7, #12]
 2887              	.L124:
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2888              		.loc 1 1307 0
 2889 006e FB68     		ldr	r3, [r7, #12]
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2890              		.loc 1 1308 0
 2891 0070 1846     		mov	r0, r3
 2892 0072 07F11407 		add	r7, r7, #20
 2893 0076 BD46     		mov	sp, r7
 2894 0078 80BC     		pop	{r7}
 2895 007a 7047     		bx	lr
 2896              		.cfi_endproc
 2897              	.LFE138:
 2899              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 2900              		.align	2
 2901              		.global	PWMSP001_SWRequestShadowTransfer
 2902              		.thumb
 2903              		.thumb_func
 2905              	PWMSP001_SWRequestShadowTransfer:
 2906              	.LFB139:
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2907              		.loc 1 1318 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 24
 2910              		@ frame_needed = 1, uses_anonymous_args = 0
 2911              		@ link register save eliminated.
 2912 0000 90B4     		push	{r4, r7}
 2913              	.LCFI66:
 2914              		.cfi_def_cfa_offset 8
 2915              		.cfi_offset 4, -8
 2916              		.cfi_offset 7, -4
 2917 0002 86B0     		sub	sp, sp, #24
 2918              	.LCFI67:
 2919              		.cfi_def_cfa_offset 32
 2920 0004 00AF     		add	r7, sp, #0
 2921              	.LCFI68:
 2922              		.cfi_def_cfa_register 7
 2923 0006 7860     		str	r0, [r7, #4]
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2924              		.loc 1 1319 0
 2925 0008 4FF00103 		mov	r3, #1
 2926 000c 7B61     		str	r3, [r7, #20]
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2927              		.loc 1 1325 0
 2928 000e 7B68     		ldr	r3, [r7, #4]
 2929 0010 DB6B     		ldr	r3, [r3, #60]
 2930 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2931 0014 002B     		cmp	r3, #0
 2932 0016 38D0     		beq	.L129
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2933              		.loc 1 1333 0
 2934 0018 7B68     		ldr	r3, [r7, #4]
 2935 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2936 001e 012B     		cmp	r3, #1
 2937 0020 1ED1     		bne	.L130
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2938              		.loc 1 1336 0
 2939 0022 7B68     		ldr	r3, [r7, #4]
 2940 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2941 0028 4FEA8303 		lsl	r3, r3, #2
 2942 002c 3B61     		str	r3, [r7, #16]
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 2943              		.loc 1 1337 0
 2944 002e 7B68     		ldr	r3, [r7, #4]
 2945 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2946 0034 4FEA8303 		lsl	r3, r3, #2
 2947 0038 FB60     		str	r3, [r7, #12]
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 2948              		.loc 1 1338 0
 2949 003a 7B68     		ldr	r3, [r7, #4]
 2950 003c 5B69     		ldr	r3, [r3, #20]
 2951 003e 7A68     		ldr	r2, [r7, #4]
 2952 0040 5269     		ldr	r2, [r2, #20]
 2953 0042 1169     		ldr	r1, [r2, #16]
 2954 0044 3A69     		ldr	r2, [r7, #16]
 2955 0046 4FF00100 		mov	r0, #1
 2956 004a 00FA02F0 		lsl	r0, r0, r2
 2957 004e FA68     		ldr	r2, [r7, #12]
 2958 0050 4FF00104 		mov	r4, #1
 2959 0054 04FA02F2 		lsl	r2, r4, r2
 2960 0058 0243     		orrs	r2, r2, r0
 2961 005a 0A43     		orrs	r2, r2, r1
 2962 005c 1A61     		str	r2, [r3, #16]
 2963 005e 11E0     		b	.L131
 2964              	.L130:
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2965              		.loc 1 1342 0
 2966 0060 7B68     		ldr	r3, [r7, #4]
 2967 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2968 0066 4FEA8303 		lsl	r3, r3, #2
 2969 006a BB60     		str	r3, [r7, #8]
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 2970              		.loc 1 1343 0
 2971 006c 7B68     		ldr	r3, [r7, #4]
 2972 006e 5B69     		ldr	r3, [r3, #20]
 2973 0070 7A68     		ldr	r2, [r7, #4]
 2974 0072 5269     		ldr	r2, [r2, #20]
 2975 0074 1169     		ldr	r1, [r2, #16]
 2976 0076 BA68     		ldr	r2, [r7, #8]
 2977 0078 4FF00100 		mov	r0, #1
 2978 007c 00FA02F2 		lsl	r2, r0, r2
 2979 0080 0A43     		orrs	r2, r2, r1
 2980 0082 1A61     		str	r2, [r3, #16]
 2981              	.L131:
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2982              		.loc 1 1345 0
 2983 0084 4FF00003 		mov	r3, #0
 2984 0088 7B61     		str	r3, [r7, #20]
 2985              	.L129:
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2986              		.loc 1 1347 0
 2987 008a 7B69     		ldr	r3, [r7, #20]
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2988              		.loc 1 1348 0
 2989 008c 1846     		mov	r0, r3
 2990 008e 07F11807 		add	r7, r7, #24
 2991 0092 BD46     		mov	sp, r7
 2992 0094 90BC     		pop	{r4, r7}
 2993 0096 7047     		bx	lr
 2994              		.cfi_endproc
 2995              	.LFE139:
 2997              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 2998              		.align	2
 2999              		.global	PWMSP001_ResetTrapFlag
 3000              		.thumb
 3001              		.thumb_func
 3003              	PWMSP001_ResetTrapFlag:
 3004              	.LFB140:
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3005              		.loc 1 1355 0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 8
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009              		@ link register save eliminated.
 3010 0000 80B4     		push	{r7}
 3011              	.LCFI69:
 3012              		.cfi_def_cfa_offset 4
 3013              		.cfi_offset 7, -4
 3014 0002 83B0     		sub	sp, sp, #12
 3015              	.LCFI70:
 3016              		.cfi_def_cfa_offset 16
 3017 0004 00AF     		add	r7, sp, #0
 3018              	.LCFI71:
 3019              		.cfi_def_cfa_register 7
 3020 0006 7860     		str	r0, [r7, #4]
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3021              		.loc 1 1356 0
 3022 0008 7B68     		ldr	r3, [r7, #4]
 3023 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3024 000c 012B     		cmp	r3, #1
 3025 000e 18D1     		bne	.L134
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3026              		.loc 1 1358 0
 3027 0010 7B68     		ldr	r3, [r7, #4]
 3028 0012 9B69     		ldr	r3, [r3, #24]
 3029 0014 7A68     		ldr	r2, [r7, #4]
 3030 0016 9269     		ldr	r2, [r2, #24]
 3031 0018 D2F8B020 		ldr	r2, [r2, #176]
 3032 001c 42F48062 		orr	r2, r2, #1024
 3033 0020 C3F8B020 		str	r2, [r3, #176]
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3034              		.loc 1 1359 0
 3035 0024 7B68     		ldr	r3, [r7, #4]
 3036 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3037 002a 012B     		cmp	r3, #1
 3038 002c 09D1     		bne	.L134
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3039              		.loc 1 1361 0
 3040 002e 7B68     		ldr	r3, [r7, #4]
 3041 0030 DB69     		ldr	r3, [r3, #28]
 3042 0032 7A68     		ldr	r2, [r7, #4]
 3043 0034 D269     		ldr	r2, [r2, #28]
 3044 0036 D2F8B020 		ldr	r2, [r2, #176]
 3045 003a 42F48062 		orr	r2, r2, #1024
 3046 003e C3F8B020 		str	r2, [r3, #176]
 3047              	.L134:
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3048              		.loc 1 1364 0
 3049 0042 7B68     		ldr	r3, [r7, #4]
 3050 0044 9B69     		ldr	r3, [r3, #24]
 3051 0046 7A68     		ldr	r2, [r7, #4]
 3052 0048 9269     		ldr	r2, [r2, #24]
 3053 004a D2F8B020 		ldr	r2, [r2, #176]
 3054 004e 42F40062 		orr	r2, r2, #2048
 3055 0052 C3F8B020 		str	r2, [r3, #176]
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3056              		.loc 1 1365 0
 3057 0056 7B68     		ldr	r3, [r7, #4]
 3058 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3059 005c 012B     		cmp	r3, #1
 3060 005e 09D1     		bne	.L133
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3061              		.loc 1 1367 0
 3062 0060 7B68     		ldr	r3, [r7, #4]
 3063 0062 DB69     		ldr	r3, [r3, #28]
 3064 0064 7A68     		ldr	r2, [r7, #4]
 3065 0066 D269     		ldr	r2, [r2, #28]
 3066 0068 D2F8B020 		ldr	r2, [r2, #176]
 3067 006c 42F40062 		orr	r2, r2, #2048
 3068 0070 C3F8B020 		str	r2, [r3, #176]
 3069              	.L133:
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3070              		.loc 1 1369 0
 3071 0074 07F10C07 		add	r7, r7, #12
 3072 0078 BD46     		mov	sp, r7
 3073 007a 80BC     		pop	{r7}
 3074 007c 7047     		bx	lr
 3075              		.cfi_endproc
 3076              	.LFE140:
 3078 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3079              		.align	2
 3080              		.global	PWMSP001_lConfigureSecondSlice
 3081              		.thumb
 3082              		.thumb_func
 3084              	PWMSP001_lConfigureSecondSlice:
 3085              	.LFB141:
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3086              		.loc 1 1377 0
 3087              		.cfi_startproc
 3088              		@ args = 0, pretend = 0, frame = 8
 3089              		@ frame_needed = 1, uses_anonymous_args = 0
 3090              		@ link register save eliminated.
 3091 0000 90B4     		push	{r4, r7}
 3092              	.LCFI72:
 3093              		.cfi_def_cfa_offset 8
 3094              		.cfi_offset 4, -8
 3095              		.cfi_offset 7, -4
 3096 0002 82B0     		sub	sp, sp, #8
 3097              	.LCFI73:
 3098              		.cfi_def_cfa_offset 16
 3099 0004 00AF     		add	r7, sp, #0
 3100              	.LCFI74:
 3101              		.cfi_def_cfa_register 7
 3102 0006 7860     		str	r0, [r7, #4]
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3103              		.loc 1 1378 0
 3104 0008 7B68     		ldr	r3, [r7, #4]
 3105 000a DB69     		ldr	r3, [r3, #28]
 3106 000c 4FF00702 		mov	r2, #7
 3107 0010 1A61     		str	r2, [r3, #16]
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3108              		.loc 1 1381 0
 3109 0012 7B68     		ldr	r3, [r7, #4]
 3110 0014 DB69     		ldr	r3, [r3, #28]
 3111 0016 7A68     		ldr	r2, [r7, #4]
 3112 0018 926A     		ldr	r2, [r2, #40]
 3113 001a 4FEA1242 		lsr	r2, r2, #16
 3114 001e 5A63     		str	r2, [r3, #52]
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3115              		.loc 1 1383 0
 3116 0020 7B68     		ldr	r3, [r7, #4]
 3117 0022 DB69     		ldr	r3, [r3, #28]
 3118 0024 7A68     		ldr	r2, [r7, #4]
 3119 0026 9268     		ldr	r2, [r2, #8]
 3120 0028 4FEA1242 		lsr	r2, r2, #16
 3121 002c DA63     		str	r2, [r3, #60]
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3122              		.loc 1 1386 0
 3123 002e 7B68     		ldr	r3, [r7, #4]
 3124 0030 DB69     		ldr	r3, [r3, #28]
 3125 0032 7A68     		ldr	r2, [r7, #4]
 3126 0034 D269     		ldr	r2, [r2, #28]
 3127 0036 5268     		ldr	r2, [r2, #4]
 3128 0038 42F48012 		orr	r2, r2, #1048576
 3129 003c 5A60     		str	r2, [r3, #4]
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3130              		.loc 1 1389 0
 3131 003e 7B68     		ldr	r3, [r7, #4]
 3132 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3133 0042 012B     		cmp	r3, #1
 3134 0044 27D1     		bne	.L137
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3135              		.loc 1 1391 0
 3136 0046 7B68     		ldr	r3, [r7, #4]
 3137 0048 DA69     		ldr	r2, [r3, #28]
 3138 004a 7B68     		ldr	r3, [r7, #4]
 3139 004c DB69     		ldr	r3, [r3, #28]
 3140 004e 1B68     		ldr	r3, [r3, #0]
 3141 0050 23F0C053 		bic	r3, r3, #402653184
 3142 0054 23F44023 		bic	r3, r3, #786432
 3143 0058 1360     		str	r3, [r2, #0]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3144              		.loc 1 1392 0
 3145 005a 7B68     		ldr	r3, [r7, #4]
 3146 005c DB69     		ldr	r3, [r3, #28]
 3147 005e 7A68     		ldr	r2, [r7, #4]
 3148 0060 D269     		ldr	r2, [r2, #28]
 3149 0062 5268     		ldr	r2, [r2, #4]
 3150 0064 22F00C02 		bic	r2, r2, #12
 3151 0068 5A60     		str	r2, [r3, #4]
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3152              		.loc 1 1393 0
 3153 006a 7B68     		ldr	r3, [r7, #4]
 3154 006c DB69     		ldr	r3, [r3, #28]
 3155 006e 7A68     		ldr	r2, [r7, #4]
 3156 0070 D269     		ldr	r2, [r2, #28]
 3157 0072 1168     		ldr	r1, [r2, #0]
 3158 0074 7A68     		ldr	r2, [r7, #4]
 3159 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3160 007a 4FEA8242 		lsl	r2, r2, #18
 3161 007e 02F44022 		and	r2, r2, #786432
 3162 0082 0A43     		orrs	r2, r2, r1
 3163 0084 1A60     		str	r2, [r3, #0]
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3164              		.loc 1 1397 0
 3165 0086 7B68     		ldr	r3, [r7, #4]
 3166 0088 DB69     		ldr	r3, [r3, #28]
 3167 008a 7A68     		ldr	r2, [r7, #4]
 3168 008c D269     		ldr	r2, [r2, #28]
 3169 008e 5268     		ldr	r2, [r2, #4]
 3170 0090 42F00802 		orr	r2, r2, #8
 3171 0094 5A60     		str	r2, [r3, #4]
 3172              	.L137:
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3173              		.loc 1 1402 0
 3174 0096 7B68     		ldr	r3, [r7, #4]
 3175 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3176 009a 012B     		cmp	r3, #1
 3177 009c 26D1     		bne	.L138
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3178              		.loc 1 1404 0
 3179 009e 7B68     		ldr	r3, [r7, #4]
 3180 00a0 DA69     		ldr	r2, [r3, #28]
 3181 00a2 7B68     		ldr	r3, [r7, #4]
 3182 00a4 DB69     		ldr	r3, [r3, #28]
 3183 00a6 1B68     		ldr	r3, [r3, #0]
 3184 00a8 23F0C243 		bic	r3, r3, #1627389952
 3185 00ac 23F44013 		bic	r3, r3, #3145728
 3186 00b0 1360     		str	r3, [r2, #0]
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3187              		.loc 1 1406 0
 3188 00b2 7B68     		ldr	r3, [r7, #4]
 3189 00b4 DB69     		ldr	r3, [r3, #28]
 3190 00b6 7A68     		ldr	r2, [r7, #4]
 3191 00b8 D269     		ldr	r2, [r2, #28]
 3192 00ba 5268     		ldr	r2, [r2, #4]
 3193 00bc 22F40032 		bic	r2, r2, #131072
 3194 00c0 5A60     		str	r2, [r3, #4]
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3195              		.loc 1 1407 0
 3196 00c2 7B68     		ldr	r3, [r7, #4]
 3197 00c4 DB69     		ldr	r3, [r3, #28]
 3198 00c6 7A68     		ldr	r2, [r7, #4]
 3199 00c8 D269     		ldr	r2, [r2, #28]
 3200 00ca 1168     		ldr	r1, [r2, #0]
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3201              		.loc 1 1409 0
 3202 00cc 7A68     		ldr	r2, [r7, #4]
 3203 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3204 00d0 4FEA0262 		lsl	r2, r2, #24
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3205              		.loc 1 1407 0
 3206 00d4 02F08072 		and	r2, r2, #16777216
 3207 00d8 0A43     		orrs	r2, r2, r1
 3208 00da 1A60     		str	r2, [r3, #0]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3209              		.loc 1 1412 0
 3210 00dc 7B68     		ldr	r3, [r7, #4]
 3211 00de DB69     		ldr	r3, [r3, #28]
 3212 00e0 7A68     		ldr	r2, [r7, #4]
 3213 00e2 D269     		ldr	r2, [r2, #28]
 3214 00e4 5268     		ldr	r2, [r2, #4]
 3215 00e6 42F40032 		orr	r2, r2, #131072
 3216 00ea 5A60     		str	r2, [r3, #4]
 3217              	.L138:
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3218              		.loc 1 1415 0
 3219 00ec 7B68     		ldr	r3, [r7, #4]
 3220 00ee DA69     		ldr	r2, [r3, #28]
 3221 00f0 7B68     		ldr	r3, [r7, #4]
 3222 00f2 DB69     		ldr	r3, [r3, #28]
 3223 00f4 5B69     		ldr	r3, [r3, #20]
 3224 00f6 23F4CE43 		bic	r3, r3, #26368
 3225 00fa 23F00B03 		bic	r3, r3, #11
 3226 00fe 5361     		str	r3, [r2, #20]
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3227              		.loc 1 1418 0
 3228 0100 7B68     		ldr	r3, [r7, #4]
 3229 0102 DB69     		ldr	r3, [r3, #28]
 3230 0104 7A68     		ldr	r2, [r7, #4]
 3231 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3232              		.loc 1 1419 0
 3233 010a 02F00101 		and	r1, r2, #1
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3234              		.loc 1 1420 0
 3235 010e 7A68     		ldr	r2, [r7, #4]
 3236 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3237 0112 4FEA4202 		lsl	r2, r2, #1
 3238 0116 02F00202 		and	r2, r2, #2
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3239              		.loc 1 1421 0
 3240 011a 1143     		orrs	r1, r1, r2
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3241              		.loc 1 1423 0
 3242 011c 7A68     		ldr	r2, [r7, #4]
 3243 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3244 0122 4FEA8222 		lsl	r2, r2, #10
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3245              		.loc 1 1424 0
 3246 0126 02F48062 		and	r2, r2, #1024
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3247              		.loc 1 1422 0
 3248 012a 1143     		orrs	r1, r1, r2
 3249              		.loc 1 1424 0
 3250 012c 7A68     		ldr	r2, [r7, #4]
 3251 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3252 0132 4FEA0222 		lsl	r2, r2, #8
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3253              		.loc 1 1425 0
 3254 0136 02F44072 		and	r2, r2, #768
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3255              		.loc 1 1424 0
 3256 013a 0A43     		orrs	r2, r2, r1
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3257              		.loc 1 1418 0
 3258 013c 5A61     		str	r2, [r3, #20]
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3259              		.loc 1 1428 0
 3260 013e 7B68     		ldr	r3, [r7, #4]
 3261 0140 DB69     		ldr	r3, [r3, #28]
 3262 0142 7A68     		ldr	r2, [r7, #4]
 3263 0144 D269     		ldr	r2, [r2, #28]
 3264 0146 5169     		ldr	r1, [r2, #20]
 3265 0148 7A68     		ldr	r2, [r7, #4]
 3266 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3267 014e 4FEA4232 		lsl	r2, r2, #13
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3268              		.loc 1 1429 0
 3269 0152 02F4C042 		and	r2, r2, #24576
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3270              		.loc 1 1428 0
 3271 0156 0A43     		orrs	r2, r2, r1
 3272 0158 5A61     		str	r2, [r3, #20]
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3273              		.loc 1 1430 0
 3274 015a 7B68     		ldr	r3, [r7, #4]
 3275 015c DB69     		ldr	r3, [r3, #28]
 3276 015e 7A68     		ldr	r2, [r7, #4]
 3277 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3278 0162 02F00F01 		and	r1, r2, #15
 3279 0166 7A68     		ldr	r2, [r7, #4]
 3280 0168 D269     		ldr	r2, [r2, #28]
 3281 016a 126A     		ldr	r2, [r2, #32]
 3282 016c 22F00F02 		bic	r2, r2, #15
 3283 0170 0A43     		orrs	r2, r2, r1
 3284 0172 1A62     		str	r2, [r3, #32]
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3285              		.loc 1 1434 0
 3286 0174 7B68     		ldr	r3, [r7, #4]
 3287 0176 DB69     		ldr	r3, [r3, #28]
 3288 0178 7A68     		ldr	r2, [r7, #4]
 3289 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3290 017c 4FEA4252 		lsl	r2, r2, #21
 3291 0180 02F40011 		and	r1, r2, #2097152
 3292 0184 7A68     		ldr	r2, [r7, #4]
 3293 0186 D269     		ldr	r2, [r2, #28]
 3294 0188 5269     		ldr	r2, [r2, #20]
 3295 018a 22F40012 		bic	r2, r2, #2097152
 3296 018e 0A43     		orrs	r2, r2, r1
 3297 0190 5A61     		str	r2, [r3, #20]
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3298              		.loc 1 1437 0
 3299 0192 7B68     		ldr	r3, [r7, #4]
 3300 0194 DB69     		ldr	r3, [r3, #28]
 3301 0196 7A68     		ldr	r2, [r7, #4]
 3302 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3303 019a 4FEA8252 		lsl	r2, r2, #22
 3304 019e 02F48001 		and	r1, r2, #4194304
 3305 01a2 7A68     		ldr	r2, [r7, #4]
 3306 01a4 D269     		ldr	r2, [r2, #28]
 3307 01a6 5269     		ldr	r2, [r2, #20]
 3308 01a8 22F48002 		bic	r2, r2, #4194304
 3309 01ac 0A43     		orrs	r2, r2, r1
 3310 01ae 5A61     		str	r2, [r3, #20]
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3311              		.loc 1 1440 0
 3312 01b0 7B68     		ldr	r3, [r7, #4]
 3313 01b2 DB69     		ldr	r3, [r3, #28]
 3314 01b4 7A68     		ldr	r2, [r7, #4]
 3315 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3316 01b8 4FEA4242 		lsl	r2, r2, #17
 3317 01bc 02F40031 		and	r1, r2, #131072
 3318 01c0 7A68     		ldr	r2, [r7, #4]
 3319 01c2 D269     		ldr	r2, [r2, #28]
 3320 01c4 5269     		ldr	r2, [r2, #20]
 3321 01c6 22F40032 		bic	r2, r2, #131072
 3322 01ca 0A43     		orrs	r2, r2, r1
 3323 01cc 5A61     		str	r2, [r3, #20]
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3324              		.loc 1 1443 0
 3325 01ce 7B68     		ldr	r3, [r7, #4]
 3326 01d0 DB69     		ldr	r3, [r3, #28]
 3327 01d2 7A68     		ldr	r2, [r7, #4]
 3328 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3329 01d8 02F00F01 		and	r1, r2, #15
 3330 01dc 7A68     		ldr	r2, [r7, #4]
 3331 01de D269     		ldr	r2, [r2, #28]
 3332 01e0 526A     		ldr	r2, [r2, #36]
 3333 01e2 22F00F02 		bic	r2, r2, #15
 3334 01e6 0A43     		orrs	r2, r2, r1
 3335 01e8 5A62     		str	r2, [r3, #36]
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3336              		.loc 1 1446 0
 3337 01ea 7B68     		ldr	r3, [r7, #4]
 3338 01ec DB69     		ldr	r3, [r3, #28]
 3339 01ee 7A68     		ldr	r2, [r7, #4]
 3340 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3341 01f2 9A61     		str	r2, [r3, #24]
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3342              		.loc 1 1448 0
 3343 01f4 7B68     		ldr	r3, [r7, #4]
 3344 01f6 5B69     		ldr	r3, [r3, #20]
 3345 01f8 7A68     		ldr	r2, [r7, #4]
 3346 01fa 5269     		ldr	r2, [r2, #20]
 3347 01fc 1169     		ldr	r1, [r2, #16]
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3348              		.loc 1 1449 0
 3349 01fe 7A68     		ldr	r2, [r7, #4]
 3350 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3351 0204 4FEA8202 		lsl	r2, r2, #2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3352              		.loc 1 1448 0
 3353 0208 4FF00100 		mov	r0, #1
 3354 020c 00FA02F0 		lsl	r0, r0, r2
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3355              		.loc 1 1451 0
 3356 0210 7A68     		ldr	r2, [r7, #4]
 3357 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3358              		.loc 1 1450 0
 3359 0216 4FEA8202 		lsl	r2, r2, #2
 3360              		.loc 1 1451 0
 3361 021a 02F10102 		add	r2, r2, #1
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3362              		.loc 1 1450 0
 3363 021e 4FF00104 		mov	r4, #1
 3364 0222 04FA02F2 		lsl	r2, r4, r2
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3365              		.loc 1 1449 0
 3366 0226 1043     		orrs	r0, r0, r2
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3367              		.loc 1 1453 0
 3368 0228 7A68     		ldr	r2, [r7, #4]
 3369 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3370              		.loc 1 1452 0
 3371 022e 4FEA8202 		lsl	r2, r2, #2
 3372              		.loc 1 1453 0
 3373 0232 02F10202 		add	r2, r2, #2
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3374              		.loc 1 1452 0
 3375 0236 4FF00104 		mov	r4, #1
 3376 023a 04FA02F2 		lsl	r2, r4, r2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3377              		.loc 1 1448 0
 3378 023e 0243     		orrs	r2, r2, r0
 3379 0240 0A43     		orrs	r2, r2, r1
 3380 0242 1A61     		str	r2, [r3, #16]
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3381              		.loc 1 1454 0
 3382 0244 07F10807 		add	r7, r7, #8
 3383 0248 BD46     		mov	sp, r7
 3384 024a 90BC     		pop	{r4, r7}
 3385 024c 7047     		bx	lr
 3386              		.cfi_endproc
 3387              	.LFE141:
 3389 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3390              		.align	2
 3391              		.global	PWMSP001_EnableEvent
 3392              		.thumb
 3393              		.thumb_func
 3395              	PWMSP001_EnableEvent:
 3396              	.LFB142:
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3397              		.loc 1 1464 0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 16
 3400              		@ frame_needed = 1, uses_anonymous_args = 0
 3401              		@ link register save eliminated.
 3402 0000 80B4     		push	{r7}
 3403              	.LCFI75:
 3404              		.cfi_def_cfa_offset 4
 3405              		.cfi_offset 7, -4
 3406 0002 85B0     		sub	sp, sp, #20
 3407              	.LCFI76:
 3408              		.cfi_def_cfa_offset 24
 3409 0004 00AF     		add	r7, sp, #0
 3410              	.LCFI77:
 3411              		.cfi_def_cfa_register 7
 3412 0006 7860     		str	r0, [r7, #4]
 3413 0008 0B46     		mov	r3, r1
 3414 000a FB70     		strb	r3, [r7, #3]
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3415              		.loc 1 1465 0
 3416 000c 4FF00103 		mov	r3, #1
 3417 0010 FB60     		str	r3, [r7, #12]
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3418              		.loc 1 1467 0
 3419 0012 7B68     		ldr	r3, [r7, #4]
 3420 0014 DB6B     		ldr	r3, [r3, #60]
 3421 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3422 0018 002B     		cmp	r3, #0
 3423 001a 03D1     		bne	.L140
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3424              		.loc 1 1469 0
 3425 001c 4FF00103 		mov	r3, #1
 3426 0020 FB60     		str	r3, [r7, #12]
 3427 0022 24E0     		b	.L141
 3428              	.L140:
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3429              		.loc 1 1474 0
 3430 0024 7B68     		ldr	r3, [r7, #4]
 3431 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3432 002a 012B     		cmp	r3, #1
 3433 002c 0ED1     		bne	.L142
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3434              		.loc 1 1476 0
 3435 002e 7B68     		ldr	r3, [r7, #4]
 3436 0030 DB69     		ldr	r3, [r3, #28]
 3437 0032 7A68     		ldr	r2, [r7, #4]
 3438 0034 D269     		ldr	r2, [r2, #28]
 3439 0036 D2F8A410 		ldr	r1, [r2, #164]
 3440 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3441 003c 4FF00100 		mov	r0, #1
 3442 0040 00FA02F2 		lsl	r2, r0, r2
 3443 0044 0A43     		orrs	r2, r2, r1
 3444 0046 C3F8A420 		str	r2, [r3, #164]
 3445 004a 0DE0     		b	.L143
 3446              	.L142:
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3447              		.loc 1 1480 0
 3448 004c 7B68     		ldr	r3, [r7, #4]
 3449 004e 9B69     		ldr	r3, [r3, #24]
 3450 0050 7A68     		ldr	r2, [r7, #4]
 3451 0052 9269     		ldr	r2, [r2, #24]
 3452 0054 D2F8A410 		ldr	r1, [r2, #164]
 3453 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3454 005a 4FF00100 		mov	r0, #1
 3455 005e 00FA02F2 		lsl	r2, r0, r2
 3456 0062 0A43     		orrs	r2, r2, r1
 3457 0064 C3F8A420 		str	r2, [r3, #164]
 3458              	.L143:
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3459              		.loc 1 1482 0
 3460 0068 4FF00003 		mov	r3, #0
 3461 006c FB60     		str	r3, [r7, #12]
 3462              	.L141:
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3463              		.loc 1 1484 0
 3464 006e FB68     		ldr	r3, [r7, #12]
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3465              		.loc 1 1485 0
 3466 0070 1846     		mov	r0, r3
 3467 0072 07F11407 		add	r7, r7, #20
 3468 0076 BD46     		mov	sp, r7
 3469 0078 80BC     		pop	{r7}
 3470 007a 7047     		bx	lr
 3471              		.cfi_endproc
 3472              	.LFE142:
 3474              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3475              		.align	2
 3476              		.global	PWMSP001_DisableEvent
 3477              		.thumb
 3478              		.thumb_func
 3480              	PWMSP001_DisableEvent:
 3481              	.LFB143:
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3482              		.loc 1 1495 0
 3483              		.cfi_startproc
 3484              		@ args = 0, pretend = 0, frame = 16
 3485              		@ frame_needed = 1, uses_anonymous_args = 0
 3486              		@ link register save eliminated.
 3487 0000 80B4     		push	{r7}
 3488              	.LCFI78:
 3489              		.cfi_def_cfa_offset 4
 3490              		.cfi_offset 7, -4
 3491 0002 85B0     		sub	sp, sp, #20
 3492              	.LCFI79:
 3493              		.cfi_def_cfa_offset 24
 3494 0004 00AF     		add	r7, sp, #0
 3495              	.LCFI80:
 3496              		.cfi_def_cfa_register 7
 3497 0006 7860     		str	r0, [r7, #4]
 3498 0008 0B46     		mov	r3, r1
 3499 000a FB70     		strb	r3, [r7, #3]
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3500              		.loc 1 1496 0
 3501 000c 4FF00103 		mov	r3, #1
 3502 0010 FB60     		str	r3, [r7, #12]
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3503              		.loc 1 1498 0
 3504 0012 7B68     		ldr	r3, [r7, #4]
 3505 0014 DB6B     		ldr	r3, [r3, #60]
 3506 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3507 0018 002B     		cmp	r3, #0
 3508 001a 03D1     		bne	.L146
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3509              		.loc 1 1500 0
 3510 001c 4FF00103 		mov	r3, #1
 3511 0020 FB60     		str	r3, [r7, #12]
 3512 0022 28E0     		b	.L147
 3513              	.L146:
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3514              		.loc 1 1505 0
 3515 0024 7B68     		ldr	r3, [r7, #4]
 3516 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3517 002a 012B     		cmp	r3, #1
 3518 002c 10D1     		bne	.L148
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3519              		.loc 1 1507 0
 3520 002e 7B68     		ldr	r3, [r7, #4]
 3521 0030 DB69     		ldr	r3, [r3, #28]
 3522 0032 7A68     		ldr	r2, [r7, #4]
 3523 0034 D269     		ldr	r2, [r2, #28]
 3524 0036 D2F8A410 		ldr	r1, [r2, #164]
 3525 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3526 003c 4FF00100 		mov	r0, #1
 3527 0040 00FA02F2 		lsl	r2, r0, r2
 3528 0044 6FEA0202 		mvn	r2, r2
 3529 0048 0A40     		ands	r2, r2, r1
 3530 004a C3F8A420 		str	r2, [r3, #164]
 3531 004e 0FE0     		b	.L149
 3532              	.L148:
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3533              		.loc 1 1511 0
 3534 0050 7B68     		ldr	r3, [r7, #4]
 3535 0052 9B69     		ldr	r3, [r3, #24]
 3536 0054 7A68     		ldr	r2, [r7, #4]
 3537 0056 9269     		ldr	r2, [r2, #24]
 3538 0058 D2F8A410 		ldr	r1, [r2, #164]
 3539 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3540 005e 4FF00100 		mov	r0, #1
 3541 0062 00FA02F2 		lsl	r2, r0, r2
 3542 0066 6FEA0202 		mvn	r2, r2
 3543 006a 0A40     		ands	r2, r2, r1
 3544 006c C3F8A420 		str	r2, [r3, #164]
 3545              	.L149:
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3546              		.loc 1 1513 0
 3547 0070 4FF00003 		mov	r3, #0
 3548 0074 FB60     		str	r3, [r7, #12]
 3549              	.L147:
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3550              		.loc 1 1515 0
 3551 0076 FB68     		ldr	r3, [r7, #12]
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3552              		.loc 1 1516 0
 3553 0078 1846     		mov	r0, r3
 3554 007a 07F11407 		add	r7, r7, #20
 3555 007e BD46     		mov	sp, r7
 3556 0080 80BC     		pop	{r7}
 3557 0082 7047     		bx	lr
 3558              		.cfi_endproc
 3559              	.LFE143:
 3561              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3562              		.align	2
 3563              		.global	PWMSP001_ClearPendingEvent
 3564              		.thumb
 3565              		.thumb_func
 3567              	PWMSP001_ClearPendingEvent:
 3568              	.LFB144:
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3569              		.loc 1 1526 0
 3570              		.cfi_startproc
 3571              		@ args = 0, pretend = 0, frame = 16
 3572              		@ frame_needed = 1, uses_anonymous_args = 0
 3573              		@ link register save eliminated.
 3574 0000 80B4     		push	{r7}
 3575              	.LCFI81:
 3576              		.cfi_def_cfa_offset 4
 3577              		.cfi_offset 7, -4
 3578 0002 85B0     		sub	sp, sp, #20
 3579              	.LCFI82:
 3580              		.cfi_def_cfa_offset 24
 3581 0004 00AF     		add	r7, sp, #0
 3582              	.LCFI83:
 3583              		.cfi_def_cfa_register 7
 3584 0006 7860     		str	r0, [r7, #4]
 3585 0008 0B46     		mov	r3, r1
 3586 000a FB70     		strb	r3, [r7, #3]
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3587              		.loc 1 1527 0
 3588 000c 4FF00103 		mov	r3, #1
 3589 0010 FB60     		str	r3, [r7, #12]
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3590              		.loc 1 1529 0
 3591 0012 7B68     		ldr	r3, [r7, #4]
 3592 0014 DB6B     		ldr	r3, [r3, #60]
 3593 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3594 0018 002B     		cmp	r3, #0
 3595 001a 03D1     		bne	.L152
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3596              		.loc 1 1531 0
 3597 001c 4FF00103 		mov	r3, #1
 3598 0020 FB60     		str	r3, [r7, #12]
 3599 0022 24E0     		b	.L153
 3600              	.L152:
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3601              		.loc 1 1536 0
 3602 0024 7B68     		ldr	r3, [r7, #4]
 3603 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3604 002a 012B     		cmp	r3, #1
 3605 002c 0ED1     		bne	.L154
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3606              		.loc 1 1538 0
 3607 002e 7B68     		ldr	r3, [r7, #4]
 3608 0030 DB69     		ldr	r3, [r3, #28]
 3609 0032 7A68     		ldr	r2, [r7, #4]
 3610 0034 D269     		ldr	r2, [r2, #28]
 3611 0036 D2F8B010 		ldr	r1, [r2, #176]
 3612 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3613 003c 4FF00100 		mov	r0, #1
 3614 0040 00FA02F2 		lsl	r2, r0, r2
 3615 0044 0A43     		orrs	r2, r2, r1
 3616 0046 C3F8B020 		str	r2, [r3, #176]
 3617 004a 0DE0     		b	.L155
 3618              	.L154:
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3619              		.loc 1 1542 0
 3620 004c 7B68     		ldr	r3, [r7, #4]
 3621 004e 9B69     		ldr	r3, [r3, #24]
 3622 0050 7A68     		ldr	r2, [r7, #4]
 3623 0052 9269     		ldr	r2, [r2, #24]
 3624 0054 D2F8B010 		ldr	r1, [r2, #176]
 3625 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3626 005a 4FF00100 		mov	r0, #1
 3627 005e 00FA02F2 		lsl	r2, r0, r2
 3628 0062 0A43     		orrs	r2, r2, r1
 3629 0064 C3F8B020 		str	r2, [r3, #176]
 3630              	.L155:
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3631              		.loc 1 1544 0
 3632 0068 4FF00003 		mov	r3, #0
 3633 006c FB60     		str	r3, [r7, #12]
 3634              	.L153:
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3635              		.loc 1 1546 0
 3636 006e FB68     		ldr	r3, [r7, #12]
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3637              		.loc 1 1547 0
 3638 0070 1846     		mov	r0, r3
 3639 0072 07F11407 		add	r7, r7, #20
 3640 0076 BD46     		mov	sp, r7
 3641 0078 80BC     		pop	{r7}
 3642 007a 7047     		bx	lr
 3643              		.cfi_endproc
 3644              	.LFE144:
 3646              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3647              		.align	2
 3648              		.global	PWMSP001_SetPendingEvent
 3649              		.thumb
 3650              		.thumb_func
 3652              	PWMSP001_SetPendingEvent:
 3653              	.LFB145:
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3654              		.loc 1 1558 0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 16
 3657              		@ frame_needed = 1, uses_anonymous_args = 0
 3658              		@ link register save eliminated.
 3659 0000 80B4     		push	{r7}
 3660              	.LCFI84:
 3661              		.cfi_def_cfa_offset 4
 3662              		.cfi_offset 7, -4
 3663 0002 85B0     		sub	sp, sp, #20
 3664              	.LCFI85:
 3665              		.cfi_def_cfa_offset 24
 3666 0004 00AF     		add	r7, sp, #0
 3667              	.LCFI86:
 3668              		.cfi_def_cfa_register 7
 3669 0006 7860     		str	r0, [r7, #4]
 3670 0008 0B46     		mov	r3, r1
 3671 000a FB70     		strb	r3, [r7, #3]
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3672              		.loc 1 1559 0
 3673 000c 4FF00103 		mov	r3, #1
 3674 0010 FB60     		str	r3, [r7, #12]
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3675              		.loc 1 1561 0
 3676 0012 7B68     		ldr	r3, [r7, #4]
 3677 0014 DB6B     		ldr	r3, [r3, #60]
 3678 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3679 0018 002B     		cmp	r3, #0
 3680 001a 03D1     		bne	.L158
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3681              		.loc 1 1563 0
 3682 001c 4FF00103 		mov	r3, #1
 3683 0020 FB60     		str	r3, [r7, #12]
 3684 0022 24E0     		b	.L159
 3685              	.L158:
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3686              		.loc 1 1568 0
 3687 0024 7B68     		ldr	r3, [r7, #4]
 3688 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3689 002a 012B     		cmp	r3, #1
 3690 002c 0ED1     		bne	.L160
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3691              		.loc 1 1570 0
 3692 002e 7B68     		ldr	r3, [r7, #4]
 3693 0030 DB69     		ldr	r3, [r3, #28]
 3694 0032 7A68     		ldr	r2, [r7, #4]
 3695 0034 D269     		ldr	r2, [r2, #28]
 3696 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3697 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3698 003c 4FF00100 		mov	r0, #1
 3699 0040 00FA02F2 		lsl	r2, r0, r2
 3700 0044 0A43     		orrs	r2, r2, r1
 3701 0046 C3F8AC20 		str	r2, [r3, #172]
 3702 004a 0DE0     		b	.L161
 3703              	.L160:
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3704              		.loc 1 1574 0
 3705 004c 7B68     		ldr	r3, [r7, #4]
 3706 004e 9B69     		ldr	r3, [r3, #24]
 3707 0050 7A68     		ldr	r2, [r7, #4]
 3708 0052 9269     		ldr	r2, [r2, #24]
 3709 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3710 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3711 005a 4FF00100 		mov	r0, #1
 3712 005e 00FA02F2 		lsl	r2, r0, r2
 3713 0062 0A43     		orrs	r2, r2, r1
 3714 0064 C3F8AC20 		str	r2, [r3, #172]
 3715              	.L161:
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3716              		.loc 1 1576 0
 3717 0068 4FF00003 		mov	r3, #0
 3718 006c FB60     		str	r3, [r7, #12]
 3719              	.L159:
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3720              		.loc 1 1578 0
 3721 006e FB68     		ldr	r3, [r7, #12]
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3722              		.loc 1 1579 0
 3723 0070 1846     		mov	r0, r3
 3724 0072 07F11407 		add	r7, r7, #20
 3725 0076 BD46     		mov	sp, r7
 3726 0078 80BC     		pop	{r7}
 3727 007a 7047     		bx	lr
 3728              		.cfi_endproc
 3729              	.LFE145:
 3731              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 3732              		.align	2
 3733              		.global	PWMSP001_GetPendingEvent
 3734              		.thumb
 3735              		.thumb_func
 3737              	PWMSP001_GetPendingEvent:
 3738              	.LFB146:
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3739              		.loc 1 1590 0
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 24
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 0000 80B4     		push	{r7}
 3745              	.LCFI87:
 3746              		.cfi_def_cfa_offset 4
 3747              		.cfi_offset 7, -4
 3748 0002 87B0     		sub	sp, sp, #28
 3749              	.LCFI88:
 3750              		.cfi_def_cfa_offset 32
 3751 0004 00AF     		add	r7, sp, #0
 3752              	.LCFI89:
 3753              		.cfi_def_cfa_register 7
 3754 0006 F860     		str	r0, [r7, #12]
 3755 0008 0B46     		mov	r3, r1
 3756 000a 7A60     		str	r2, [r7, #4]
 3757 000c FB72     		strb	r3, [r7, #11]
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3758              		.loc 1 1591 0
 3759 000e 4FF00103 		mov	r3, #1
 3760 0012 7B61     		str	r3, [r7, #20]
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3761              		.loc 1 1593 0
 3762 0014 FB68     		ldr	r3, [r7, #12]
 3763 0016 DB6B     		ldr	r3, [r3, #60]
 3764 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3765 001a 002B     		cmp	r3, #0
 3766 001c 03D1     		bne	.L164
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3767              		.loc 1 1595 0
 3768 001e 4FF00103 		mov	r3, #1
 3769 0022 7B61     		str	r3, [r7, #20]
 3770 0024 38E0     		b	.L165
 3771              	.L164:
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3772              		.loc 1 1600 0
 3773 0026 FB68     		ldr	r3, [r7, #12]
 3774 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3775 002c 012B     		cmp	r3, #1
 3776 002e 18D1     		bne	.L166
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 3777              		.loc 1 1603 0
 3778 0030 FB68     		ldr	r3, [r7, #12]
 3779 0032 DB69     		ldr	r3, [r3, #28]
 3780 0034 D3F8A020 		ldr	r2, [r3, #160]
 3781 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3782 003a 4FF00101 		mov	r1, #1
 3783 003e 01FA03F3 		lsl	r3, r1, r3
 3784 0042 1A40     		ands	r2, r2, r3
 3785 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3786 0046 22FA03F3 		lsr	r3, r2, r3
 3787 004a 002B     		cmp	r3, #0
 3788 004c 04D0     		beq	.L167
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 3789              		.loc 1 1605 0
 3790 004e 7B68     		ldr	r3, [r7, #4]
 3791 0050 4FF00102 		mov	r2, #1
 3792 0054 1A70     		strb	r2, [r3, #0]
 3793 0056 1CE0     		b	.L168
 3794              	.L167:
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 3795              		.loc 1 1609 0
 3796 0058 7B68     		ldr	r3, [r7, #4]
 3797 005a 4FF00002 		mov	r2, #0
 3798 005e 1A70     		strb	r2, [r3, #0]
 3799 0060 17E0     		b	.L168
 3800              	.L166:
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 3801              		.loc 1 1614 0
 3802 0062 FB68     		ldr	r3, [r7, #12]
 3803 0064 9B69     		ldr	r3, [r3, #24]
 3804 0066 D3F8A020 		ldr	r2, [r3, #160]
 3805 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3806 006c 4FF00101 		mov	r1, #1
 3807 0070 01FA03F3 		lsl	r3, r1, r3
 3808 0074 1A40     		ands	r2, r2, r3
 3809 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3810 0078 22FA03F3 		lsr	r3, r2, r3
 3811 007c 002B     		cmp	r3, #0
 3812 007e 04D0     		beq	.L169
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 3813              		.loc 1 1616 0
 3814 0080 7B68     		ldr	r3, [r7, #4]
 3815 0082 4FF00102 		mov	r2, #1
 3816 0086 1A70     		strb	r2, [r3, #0]
 3817 0088 03E0     		b	.L168
 3818              	.L169:
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 3819              		.loc 1 1620 0
 3820 008a 7B68     		ldr	r3, [r7, #4]
 3821 008c 4FF00002 		mov	r2, #0
 3822 0090 1A70     		strb	r2, [r3, #0]
 3823              	.L168:
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3824              		.loc 1 1625 0
 3825 0092 4FF00003 		mov	r3, #0
 3826 0096 7B61     		str	r3, [r7, #20]
 3827              	.L165:
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3828              		.loc 1 1627 0
 3829 0098 7B69     		ldr	r3, [r7, #20]
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3830              		.loc 1 1628 0
 3831 009a 1846     		mov	r0, r3
 3832 009c 07F11C07 		add	r7, r7, #28
 3833 00a0 BD46     		mov	sp, r7
 3834 00a2 80BC     		pop	{r7}
 3835 00a4 7047     		bx	lr
 3836              		.cfi_endproc
 3837              	.LFE146:
 3839 00a6 00BF     		.text
 3840              	.Letext0:
 3841              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3842              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3843              		.file 4 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Feather-PonteH\\Dave\\
 3844              		.file 5 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Feather-PonteH\\Dave\\
 3845              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3846              		.file 7 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Feather-PonteH\\Dave\\
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:112    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:722    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:107    .text.PWMSP001_lInit:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3084   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:505    .text.PWMSP001_Deinit:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:510    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:717    .text.PWMSP001_Start:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:949    .text.PWMSP001_Stop:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:954    .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1063   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1068   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1167   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1172   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1229   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1234   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1332   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1337   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1391   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1396   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1461   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1466   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1471   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1551   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1556   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1561   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1702   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1707   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1712   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1790   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1795   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1800   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1914   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:1919   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2052   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2057   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2390   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2208   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2214   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2219   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2380   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2385   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2508   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2513   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2584   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2589   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2666   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2671   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2812   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2817   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2900   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2905   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:2998   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3003   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3079   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3390   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3395   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3475   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3480   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3562   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3567   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3647   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3652   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3732   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccWqsjqe.s:3737   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e3bdd798bb23f70d94471cb7157fa38f
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CNT001.h.53.54b2229008e37b1970e63d1faf193d82
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO002_Conf.h.51.be0baad511cf66771895fab0bf90f390
                           .group:00000000 wm4.ERU001_Conf.h.69.f750231c9123c4051e3fdc807a0a9f2c
                           .group:00000000 wm4.ERU002_Conf.h.49.30dcaaaa39ec7b925c3755a566961d37
                           .group:00000000 wm4.NVIC002_Conf.h.63.37fe2ad95ca338d2934f86193f466e34

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
