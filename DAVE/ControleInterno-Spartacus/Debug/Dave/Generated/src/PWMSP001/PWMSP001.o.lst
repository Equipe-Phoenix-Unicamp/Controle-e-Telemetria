   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB117:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.1 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD1_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40143 		mov	r3, #33024
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40142 		mov	r2, #33024
  73 004c C4F60202 		movt	r2, 18434
  74 0050 126C     		ldr	r2, [r2, #64]
  75 0052 22F07002 		bic	r2, r2, #112
  76 0056 1A64     		str	r2, [r3, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD1_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40143 		mov	r3, #33024
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40142 		mov	r2, #33024
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 126C     		ldr	r2, [r2, #64]
  83 006a 1A64     		str	r2, [r3, #64]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD1_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40143 		mov	r3, #33024
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40142 		mov	r2, #33024
  88 0078 C4F60202 		movt	r2, 18434
  89 007c 1269     		ldr	r2, [r2, #16]
  90 007e 22F48042 		bic	r2, r2, #16384
  91 0082 1A61     		str	r2, [r3, #16]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40143 		mov	r3, #33024
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40142 		mov	r2, #33024
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 1269     		ldr	r2, [r2, #16]
  98 0096 1A61     		str	r2, [r3, #16]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
  99              		.loc 1 296 0
 100 0098 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 101 009c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 102 00a0 FFF7FEFF 		bl	PWMSP001_lInit
 103 00a4 7860     		str	r0, [r7, #4]
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 104              		.loc 1 298 0
 105 00a6 7B68     		ldr	r3, [r7, #4]
 106 00a8 002B     		cmp	r3, #0
 107 00aa 0DD1     		bne	.L3
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
 108              		.loc 1 300 0
 109 00ac 40F20003 		movw	r3, #:lower16:PWMSP001_Handle1
 110 00b0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle1
 111 00b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 112 00b6 012B     		cmp	r3, #1
 113 00b8 06D1     		bne	.L3
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
 114              		.loc 1 302 0
 115 00ba 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 116 00be C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 117 00c2 FFF7FEFF 		bl	PWMSP001_Start
 118 00c6 7860     		str	r0, [r7, #4]
 119              	.L3:
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 3.4 based on User configuration */
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  &= (uint32_t)(~(PORT3_PDR0_PD4_Msk));
 120              		.loc 1 308 0
 121 00c8 4FF40343 		mov	r3, #33536
 122 00cc C4F60203 		movt	r3, 18434
 123 00d0 4FF40342 		mov	r2, #33536
 124 00d4 C4F60202 		movt	r2, 18434
 125 00d8 126C     		ldr	r2, [r2, #64]
 126 00da 22F4E022 		bic	r2, r2, #458752
 127 00de 1A64     		str	r2, [r3, #64]
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  |= (((uint32_t)0 << (uint32_t)PORT3_PDR0_PD4_Pos) & \
 128              		.loc 1 309 0
 129 00e0 4FF40343 		mov	r3, #33536
 130 00e4 C4F60203 		movt	r3, 18434
 131 00e8 4FF40342 		mov	r2, #33536
 132 00ec C4F60202 		movt	r2, 18434
 133 00f0 126C     		ldr	r2, [r2, #64]
 134 00f2 1A64     		str	r2, [r3, #64]
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT3_PDR0_PD4_Msk);
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 135              		.loc 1 311 0
 136 00f4 4FF40343 		mov	r3, #33536
 137 00f8 C4F60203 		movt	r3, 18434
 138 00fc 4FF40342 		mov	r2, #33536
 139 0100 C4F60202 		movt	r2, 18434
 140 0104 5269     		ldr	r2, [r2, #20]
 141 0106 22F04002 		bic	r2, r2, #64
 142 010a 5A61     		str	r2, [r3, #20]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 143              		.loc 1 312 0
 144 010c 4FF40343 		mov	r3, #33536
 145 0110 C4F60203 		movt	r3, 18434
 146 0114 4FF40342 		mov	r2, #33536
 147 0118 C4F60202 		movt	r2, 18434
 148 011c 5269     		ldr	r2, [r2, #20]
 149 011e 5A61     		str	r2, [r3, #20]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 150              		.loc 1 314 0
 151 0120 07F10807 		add	r7, r7, #8
 152 0124 BD46     		mov	sp, r7
 153 0126 80BD     		pop	{r7, pc}
 154              		.cfi_endproc
 155              	.LFE117:
 157              		.section	.text.PWMSP001_lInit,"ax",%progbits
 158              		.align	2
 159              		.global	PWMSP001_lInit
 160              		.thumb
 161              		.thumb_func
 163              	PWMSP001_lInit:
 164              	.LFB118:
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 165              		.loc 1 319 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 16
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169 0000 90B5     		push	{r4, r7, lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 12
 172              		.cfi_offset 4, -12
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 85B0     		sub	sp, sp, #20
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 32
 178 0004 00AF     		add	r7, sp, #0
 179              	.LCFI5:
 180              		.cfi_def_cfa_register 7
 181 0006 7860     		str	r0, [r7, #4]
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 182              		.loc 1 320 0
 183 0008 4FF00103 		mov	r3, #1
 184 000c FB60     		str	r3, [r7, #12]
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 185              		.loc 1 325 0
 186 000e 7B68     		ldr	r3, [r7, #4]
 187 0010 DB6B     		ldr	r3, [r3, #60]
 188 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 189 0014 002B     		cmp	r3, #0
 190 0016 40F06981 		bne	.L14
 191              	.L5:
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 192              		.loc 1 329 0
 193 001a 7B68     		ldr	r3, [r7, #4]
 194 001c 9B69     		ldr	r3, [r3, #24]
 195 001e 4FF00702 		mov	r2, #7
 196 0022 1A61     		str	r2, [r3, #16]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 197              		.loc 1 333 0
 198 0024 7B68     		ldr	r3, [r7, #4]
 199 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 200 0028 012B     		cmp	r3, #1
 201 002a 27D1     		bne	.L7
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 202              		.loc 1 335 0
 203 002c 7B68     		ldr	r3, [r7, #4]
 204 002e 9A69     		ldr	r2, [r3, #24]
 205 0030 7B68     		ldr	r3, [r7, #4]
 206 0032 9B69     		ldr	r3, [r3, #24]
 207 0034 1B68     		ldr	r3, [r3, #0]
 208 0036 23F0C053 		bic	r3, r3, #402653184
 209 003a 23F44023 		bic	r3, r3, #786432
 210 003e 1360     		str	r3, [r2, #0]
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 211              		.loc 1 336 0
 212 0040 7B68     		ldr	r3, [r7, #4]
 213 0042 9B69     		ldr	r3, [r3, #24]
 214 0044 7A68     		ldr	r2, [r7, #4]
 215 0046 9269     		ldr	r2, [r2, #24]
 216 0048 5268     		ldr	r2, [r2, #4]
 217 004a 22F00C02 		bic	r2, r2, #12
 218 004e 5A60     		str	r2, [r3, #4]
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 219              		.loc 1 337 0
 220 0050 7B68     		ldr	r3, [r7, #4]
 221 0052 9B69     		ldr	r3, [r3, #24]
 222 0054 7A68     		ldr	r2, [r7, #4]
 223 0056 9269     		ldr	r2, [r2, #24]
 224 0058 1168     		ldr	r1, [r2, #0]
 225 005a 7A68     		ldr	r2, [r7, #4]
 226 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 227 0060 4FEA8242 		lsl	r2, r2, #18
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 228              		.loc 1 338 0
 229 0064 02F44022 		and	r2, r2, #786432
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 230              		.loc 1 337 0
 231 0068 0A43     		orrs	r2, r2, r1
 232 006a 1A60     		str	r2, [r3, #0]
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 233              		.loc 1 341 0
 234 006c 7B68     		ldr	r3, [r7, #4]
 235 006e 9B69     		ldr	r3, [r3, #24]
 236 0070 7A68     		ldr	r2, [r7, #4]
 237 0072 9269     		ldr	r2, [r2, #24]
 238 0074 5268     		ldr	r2, [r2, #4]
 239 0076 42F00802 		orr	r2, r2, #8
 240 007a 5A60     		str	r2, [r3, #4]
 241              	.L7:
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 242              		.loc 1 347 0
 243 007c 7B68     		ldr	r3, [r7, #4]
 244 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 245 0080 012B     		cmp	r3, #1
 246 0082 2BD1     		bne	.L8
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 247              		.loc 1 348 0 discriminator 1
 248 0084 7B68     		ldr	r3, [r7, #4]
 249 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 250              		.loc 1 347 0 discriminator 1
 251 008a 012B     		cmp	r3, #1
 252 008c 26D0     		beq	.L8
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 253              		.loc 1 351 0
 254 008e 7B68     		ldr	r3, [r7, #4]
 255 0090 9A69     		ldr	r2, [r3, #24]
 256 0092 7B68     		ldr	r3, [r7, #4]
 257 0094 9B69     		ldr	r3, [r3, #24]
 258 0096 1B68     		ldr	r3, [r3, #0]
 259 0098 23F0C243 		bic	r3, r3, #1627389952
 260 009c 23F44013 		bic	r3, r3, #3145728
 261 00a0 1360     		str	r3, [r2, #0]
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 262              		.loc 1 353 0
 263 00a2 7B68     		ldr	r3, [r7, #4]
 264 00a4 9B69     		ldr	r3, [r3, #24]
 265 00a6 7A68     		ldr	r2, [r7, #4]
 266 00a8 9269     		ldr	r2, [r2, #24]
 267 00aa 5268     		ldr	r2, [r2, #4]
 268 00ac 22F40032 		bic	r2, r2, #131072
 269 00b0 5A60     		str	r2, [r3, #4]
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 270              		.loc 1 354 0
 271 00b2 7B68     		ldr	r3, [r7, #4]
 272 00b4 9B69     		ldr	r3, [r3, #24]
 273 00b6 7A68     		ldr	r2, [r7, #4]
 274 00b8 9269     		ldr	r2, [r2, #24]
 275 00ba 1168     		ldr	r1, [r2, #0]
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 276              		.loc 1 355 0
 277 00bc 7A68     		ldr	r2, [r7, #4]
 278 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 279 00c0 4FEA0262 		lsl	r2, r2, #24
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 280              		.loc 1 356 0
 281 00c4 02F08072 		and	r2, r2, #16777216
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 282              		.loc 1 354 0
 283 00c8 0A43     		orrs	r2, r2, r1
 284 00ca 1A60     		str	r2, [r3, #0]
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 285              		.loc 1 360 0
 286 00cc 7B68     		ldr	r3, [r7, #4]
 287 00ce 9B69     		ldr	r3, [r3, #24]
 288 00d0 7A68     		ldr	r2, [r7, #4]
 289 00d2 9269     		ldr	r2, [r2, #24]
 290 00d4 5268     		ldr	r2, [r2, #4]
 291 00d6 42F40032 		orr	r2, r2, #131072
 292 00da 5A60     		str	r2, [r3, #4]
 293              	.L8:
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 294              		.loc 1 363 0
 295 00dc 7B68     		ldr	r3, [r7, #4]
 296 00de 9A69     		ldr	r2, [r3, #24]
 297 00e0 7B68     		ldr	r3, [r7, #4]
 298 00e2 9B69     		ldr	r3, [r3, #24]
 299 00e4 5B69     		ldr	r3, [r3, #20]
 300 00e6 23F4CE43 		bic	r3, r3, #26368
 301 00ea 23F00903 		bic	r3, r3, #9
 302 00ee 5361     		str	r3, [r2, #20]
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 303              		.loc 1 367 0
 304 00f0 7B68     		ldr	r3, [r7, #4]
 305 00f2 9B69     		ldr	r3, [r3, #24]
 306 00f4 7A68     		ldr	r2, [r7, #4]
 307 00f6 9269     		ldr	r2, [r2, #24]
 308 00f8 5169     		ldr	r1, [r2, #20]
 309 00fa 7A68     		ldr	r2, [r7, #4]
 310 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 311              		.loc 1 368 0
 312 0100 02F00100 		and	r0, r2, #1
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 313              		.loc 1 371 0
 314 0104 7A68     		ldr	r2, [r7, #4]
 315 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 316 010a 4FEA8222 		lsl	r2, r2, #10
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 317              		.loc 1 372 0
 318 010e 02F48062 		and	r2, r2, #1024
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 319              		.loc 1 370 0
 320 0112 1043     		orrs	r0, r0, r2
 321              		.loc 1 372 0
 322 0114 7A68     		ldr	r2, [r7, #4]
 323 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 324 011a 4FEA0222 		lsl	r2, r2, #8
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 325              		.loc 1 373 0
 326 011e 02F44072 		and	r2, r2, #768
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 327              		.loc 1 372 0
 328 0122 0243     		orrs	r2, r2, r0
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 329              		.loc 1 367 0
 330 0124 0A43     		orrs	r2, r2, r1
 331 0126 5A61     		str	r2, [r3, #20]
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 332              		.loc 1 378 0
 333 0128 7B68     		ldr	r3, [r7, #4]
 334 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 335 012e 012B     		cmp	r3, #1
 336 0130 0ED0     		beq	.L9
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 337              		.loc 1 380 0
 338 0132 7B68     		ldr	r3, [r7, #4]
 339 0134 9B69     		ldr	r3, [r3, #24]
 340 0136 7A68     		ldr	r2, [r7, #4]
 341 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 342 013a 4FEA4202 		lsl	r2, r2, #1
 343 013e 02F00201 		and	r1, r2, #2
 344 0142 7A68     		ldr	r2, [r7, #4]
 345 0144 9269     		ldr	r2, [r2, #24]
 346 0146 5269     		ldr	r2, [r2, #20]
 347 0148 22F00202 		bic	r2, r2, #2
 348 014c 0A43     		orrs	r2, r2, r1
 349 014e 5A61     		str	r2, [r3, #20]
 350              	.L9:
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 351              		.loc 1 385 0
 352 0150 7B68     		ldr	r3, [r7, #4]
 353 0152 9B69     		ldr	r3, [r3, #24]
 354 0154 7A68     		ldr	r2, [r7, #4]
 355 0156 9269     		ldr	r2, [r2, #24]
 356 0158 5169     		ldr	r1, [r2, #20]
 357 015a 7A68     		ldr	r2, [r7, #4]
 358 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 359 0160 4FEA4232 		lsl	r2, r2, #13
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 360              		.loc 1 386 0
 361 0164 02F4C042 		and	r2, r2, #24576
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 362              		.loc 1 385 0
 363 0168 0A43     		orrs	r2, r2, r1
 364 016a 5A61     		str	r2, [r3, #20]
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 365              		.loc 1 388 0
 366 016c 7B68     		ldr	r3, [r7, #4]
 367 016e 9B69     		ldr	r3, [r3, #24]
 368 0170 7A68     		ldr	r2, [r7, #4]
 369 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 370 0174 02F00F01 		and	r1, r2, #15
 371 0178 7A68     		ldr	r2, [r7, #4]
 372 017a 9269     		ldr	r2, [r2, #24]
 373 017c 126A     		ldr	r2, [r2, #32]
 374 017e 22F00F02 		bic	r2, r2, #15
 375 0182 0A43     		orrs	r2, r2, r1
 376 0184 1A62     		str	r2, [r3, #32]
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 377              		.loc 1 392 0
 378 0186 7B68     		ldr	r3, [r7, #4]
 379 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 380 018c 012B     		cmp	r3, #1
 381 018e 2CD0     		beq	.L10
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 382              		.loc 1 395 0
 383 0190 7B68     		ldr	r3, [r7, #4]
 384 0192 9B69     		ldr	r3, [r3, #24]
 385 0194 7A68     		ldr	r2, [r7, #4]
 386 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 387 0198 4FEA4252 		lsl	r2, r2, #21
 388 019c 02F40011 		and	r1, r2, #2097152
 389 01a0 7A68     		ldr	r2, [r7, #4]
 390 01a2 9269     		ldr	r2, [r2, #24]
 391 01a4 5269     		ldr	r2, [r2, #20]
 392 01a6 22F40012 		bic	r2, r2, #2097152
 393 01aa 0A43     		orrs	r2, r2, r1
 394 01ac 5A61     		str	r2, [r3, #20]
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 395              		.loc 1 398 0
 396 01ae 7B68     		ldr	r3, [r7, #4]
 397 01b0 9B69     		ldr	r3, [r3, #24]
 398 01b2 7A68     		ldr	r2, [r7, #4]
 399 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 400 01b6 4FEA8252 		lsl	r2, r2, #22
 401 01ba 02F48001 		and	r1, r2, #4194304
 402 01be 7A68     		ldr	r2, [r7, #4]
 403 01c0 9269     		ldr	r2, [r2, #24]
 404 01c2 5269     		ldr	r2, [r2, #20]
 405 01c4 22F48002 		bic	r2, r2, #4194304
 406 01c8 0A43     		orrs	r2, r2, r1
 407 01ca 5A61     		str	r2, [r3, #20]
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 408              		.loc 1 401 0
 409 01cc 7B68     		ldr	r3, [r7, #4]
 410 01ce 9B69     		ldr	r3, [r3, #24]
 411 01d0 7A68     		ldr	r2, [r7, #4]
 412 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 413 01d4 4FEA4242 		lsl	r2, r2, #17
 414 01d8 02F40031 		and	r1, r2, #131072
 415 01dc 7A68     		ldr	r2, [r7, #4]
 416 01de 9269     		ldr	r2, [r2, #24]
 417 01e0 5269     		ldr	r2, [r2, #20]
 418 01e2 22F40032 		bic	r2, r2, #131072
 419 01e6 0A43     		orrs	r2, r2, r1
 420 01e8 5A61     		str	r2, [r3, #20]
 421              	.L10:
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 422              		.loc 1 405 0
 423 01ea 7B68     		ldr	r3, [r7, #4]
 424 01ec 9B69     		ldr	r3, [r3, #24]
 425 01ee 7A68     		ldr	r2, [r7, #4]
 426 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 427 01f4 02F00F01 		and	r1, r2, #15
 428 01f8 7A68     		ldr	r2, [r7, #4]
 429 01fa 9269     		ldr	r2, [r2, #24]
 430 01fc 526A     		ldr	r2, [r2, #36]
 431 01fe 22F00F02 		bic	r2, r2, #15
 432 0202 0A43     		orrs	r2, r2, r1
 433 0204 5A62     		str	r2, [r3, #36]
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 434              		.loc 1 407 0
 435 0206 7B68     		ldr	r3, [r7, #4]
 436 0208 9B69     		ldr	r3, [r3, #24]
 437 020a 7A68     		ldr	r2, [r7, #4]
 438 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 439 020e 9A61     		str	r2, [r3, #24]
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 440              		.loc 1 411 0
 441 0210 7B68     		ldr	r3, [r7, #4]
 442 0212 9A69     		ldr	r2, [r3, #24]
 443 0214 7B68     		ldr	r3, [r7, #4]
 444 0216 9B6A     		ldr	r3, [r3, #40]
 445 0218 4FEA0343 		lsl	r3, r3, #16
 446 021c 4FEA1343 		lsr	r3, r3, #16
 447 0220 5363     		str	r3, [r2, #52]
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 448              		.loc 1 413 0
 449 0222 7B68     		ldr	r3, [r7, #4]
 450 0224 9A69     		ldr	r2, [r3, #24]
 451 0226 7B68     		ldr	r3, [r7, #4]
 452 0228 9B68     		ldr	r3, [r3, #8]
 453 022a 4FEA0343 		lsl	r3, r3, #16
 454 022e 4FEA1343 		lsr	r3, r3, #16
 455 0232 D363     		str	r3, [r2, #60]
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 456              		.loc 1 414 0
 457 0234 7B68     		ldr	r3, [r7, #4]
 458 0236 9A69     		ldr	r2, [r3, #24]
 459 0238 7B68     		ldr	r3, [r7, #4]
 460 023a 9B69     		ldr	r3, [r3, #24]
 461 023c D3F8B030 		ldr	r3, [r3, #176]
 462 0240 43F47063 		orr	r3, r3, #3840
 463 0244 43F00F03 		orr	r3, r3, #15
 464 0248 C2F8B030 		str	r3, [r2, #176]
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 465              		.loc 1 418 0
 466 024c 7B68     		ldr	r3, [r7, #4]
 467 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 468 0252 012B     		cmp	r3, #1
 469 0254 0ED1     		bne	.L11
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 470              		.loc 1 420 0
 471 0256 7868     		ldr	r0, [r7, #4]
 472 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 473              		.loc 1 421 0
 474 025c 7B68     		ldr	r3, [r7, #4]
 475 025e DB69     		ldr	r3, [r3, #28]
 476 0260 7A68     		ldr	r2, [r7, #4]
 477 0262 D269     		ldr	r2, [r2, #28]
 478 0264 D2F8A410 		ldr	r1, [r2, #164]
 479 0268 7A68     		ldr	r2, [r7, #4]
 480 026a 126B     		ldr	r2, [r2, #48]
 481 026c 0A43     		orrs	r2, r2, r1
 482 026e C3F8A420 		str	r2, [r3, #164]
 483 0272 0AE0     		b	.L12
 484              	.L11:
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 485              		.loc 1 426 0
 486 0274 7B68     		ldr	r3, [r7, #4]
 487 0276 9B69     		ldr	r3, [r3, #24]
 488 0278 7A68     		ldr	r2, [r7, #4]
 489 027a 9269     		ldr	r2, [r2, #24]
 490 027c D2F8A410 		ldr	r1, [r2, #164]
 491 0280 7A68     		ldr	r2, [r7, #4]
 492 0282 126B     		ldr	r2, [r2, #48]
 493 0284 0A43     		orrs	r2, r2, r1
 494 0286 C3F8A420 		str	r2, [r3, #164]
 495              	.L12:
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 496              		.loc 1 431 0
 497 028a 7B68     		ldr	r3, [r7, #4]
 498 028c 5B69     		ldr	r3, [r3, #20]
 499 028e 7A68     		ldr	r2, [r7, #4]
 500 0290 5269     		ldr	r2, [r2, #20]
 501 0292 1169     		ldr	r1, [r2, #16]
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 502              		.loc 1 432 0
 503 0294 7A68     		ldr	r2, [r7, #4]
 504 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 505              		.loc 1 431 0
 506 029a 4FEA8202 		lsl	r2, r2, #2
 507 029e 4FF00100 		mov	r0, #1
 508 02a2 00FA02F0 		lsl	r0, r0, r2
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 509              		.loc 1 433 0
 510 02a6 7A68     		ldr	r2, [r7, #4]
 511 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 512              		.loc 1 432 0
 513 02ac 4FEA8202 		lsl	r2, r2, #2
 514              		.loc 1 433 0
 515 02b0 02F10102 		add	r2, r2, #1
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 516              		.loc 1 432 0
 517 02b4 4FF00104 		mov	r4, #1
 518 02b8 04FA02F2 		lsl	r2, r4, r2
 519 02bc 1043     		orrs	r0, r0, r2
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 520              		.loc 1 434 0
 521 02be 7A68     		ldr	r2, [r7, #4]
 522 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 523 02c4 4FEA8202 		lsl	r2, r2, #2
 524 02c8 02F10202 		add	r2, r2, #2
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 525              		.loc 1 433 0
 526 02cc 4FF00104 		mov	r4, #1
 527 02d0 04FA02F2 		lsl	r2, r4, r2
 528 02d4 0243     		orrs	r2, r2, r0
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 529              		.loc 1 431 0
 530 02d6 0A43     		orrs	r2, r2, r1
 531 02d8 1A61     		str	r2, [r3, #16]
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 532              		.loc 1 436 0
 533 02da 4FF00003 		mov	r3, #0
 534 02de FB60     		str	r3, [r7, #12]
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 535              		.loc 1 437 0
 536 02e0 7B68     		ldr	r3, [r7, #4]
 537 02e2 DB6B     		ldr	r3, [r3, #60]
 538 02e4 4FF00102 		mov	r2, #1
 539 02e8 1A70     		strb	r2, [r3, #0]
 540 02ea 00E0     		b	.L6
 541              	.L14:
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 542              		.loc 1 327 0
 543 02ec 00BF     		nop
 544              	.L6:
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 545              		.loc 1 444 0
 546 02ee FB68     		ldr	r3, [r7, #12]
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 547              		.loc 1 445 0
 548 02f0 1846     		mov	r0, r3
 549 02f2 07F11407 		add	r7, r7, #20
 550 02f6 BD46     		mov	sp, r7
 551 02f8 90BD     		pop	{r4, r7, pc}
 552              		.cfi_endproc
 553              	.LFE118:
 555 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 556              		.align	2
 557              		.global	PWMSP001_Deinit
 558              		.thumb
 559              		.thumb_func
 561              	PWMSP001_Deinit:
 562              	.LFB119:
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 563              		.loc 1 450 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 32
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0000 80B4     		push	{r7}
 569              	.LCFI6:
 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 7, -4
 572 0002 89B0     		sub	sp, sp, #36
 573              	.LCFI7:
 574              		.cfi_def_cfa_offset 40
 575 0004 00AF     		add	r7, sp, #0
 576              	.LCFI8:
 577              		.cfi_def_cfa_register 7
 578 0006 7860     		str	r0, [r7, #4]
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 579              		.loc 1 451 0
 580 0008 4FF00103 		mov	r3, #1
 581 000c FB61     		str	r3, [r7, #28]
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 582              		.loc 1 458 0
 583 000e 7B68     		ldr	r3, [r7, #4]
 584 0010 DB6B     		ldr	r3, [r3, #60]
 585 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 586 0014 002B     		cmp	r3, #0
 587 0016 00F0AB80 		beq	.L16
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 588              		.loc 1 461 0
 589 001a 7B68     		ldr	r3, [r7, #4]
 590 001c 9B69     		ldr	r3, [r3, #24]
 591 001e 4FF00702 		mov	r2, #7
 592 0022 1A61     		str	r2, [r3, #16]
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 593              		.loc 1 462 0
 594 0024 7B68     		ldr	r3, [r7, #4]
 595 0026 9B69     		ldr	r3, [r3, #24]
 596 0028 40F60F72 		movw	r2, #3855
 597 002c C3F8B020 		str	r2, [r3, #176]
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 598              		.loc 1 463 0
 599 0030 7B68     		ldr	r3, [r7, #4]
 600 0032 9B69     		ldr	r3, [r3, #24]
 601 0034 4FF00002 		mov	r2, #0
 602 0038 C3F8A420 		str	r2, [r3, #164]
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 603              		.loc 1 466 0
 604 003c 7B68     		ldr	r3, [r7, #4]
 605 003e 5B69     		ldr	r3, [r3, #20]
 606 0040 7A68     		ldr	r2, [r7, #4]
 607 0042 5269     		ldr	r2, [r2, #20]
 608 0044 9168     		ldr	r1, [r2, #8]
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 609              		.loc 1 467 0
 610 0046 7A68     		ldr	r2, [r7, #4]
 611 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 612              		.loc 1 466 0
 613 004c 4FF00100 		mov	r0, #1
 614 0050 00FA02F2 		lsl	r2, r0, r2
 615 0054 0A43     		orrs	r2, r2, r1
 616 0056 42F44072 		orr	r2, r2, #768
 617 005a 9A60     		str	r2, [r3, #8]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 618              		.loc 1 471 0
 619 005c 7B68     		ldr	r3, [r7, #4]
 620 005e 9B69     		ldr	r3, [r3, #24]
 621 0060 4FF00002 		mov	r2, #0
 622 0064 1A60     		str	r2, [r3, #0]
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 623              		.loc 1 472 0
 624 0066 7B68     		ldr	r3, [r7, #4]
 625 0068 9B69     		ldr	r3, [r3, #24]
 626 006a 4FF00002 		mov	r2, #0
 627 006e 5A60     		str	r2, [r3, #4]
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 628              		.loc 1 473 0
 629 0070 7B68     		ldr	r3, [r7, #4]
 630 0072 9B69     		ldr	r3, [r3, #24]
 631 0074 4FF00002 		mov	r2, #0
 632 0078 5A61     		str	r2, [r3, #20]
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 633              		.loc 1 474 0
 634 007a 7B68     		ldr	r3, [r7, #4]
 635 007c 9B69     		ldr	r3, [r3, #24]
 636 007e 4FF00002 		mov	r2, #0
 637 0082 5A62     		str	r2, [r3, #36]
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 638              		.loc 1 475 0
 639 0084 7B68     		ldr	r3, [r7, #4]
 640 0086 9B69     		ldr	r3, [r3, #24]
 641 0088 4FF00002 		mov	r2, #0
 642 008c 9A61     		str	r2, [r3, #24]
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 643              		.loc 1 476 0
 644 008e 7B68     		ldr	r3, [r7, #4]
 645 0090 9B69     		ldr	r3, [r3, #24]
 646 0092 4FF00002 		mov	r2, #0
 647 0096 1A62     		str	r2, [r3, #32]
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 648              		.loc 1 477 0
 649 0098 7B68     		ldr	r3, [r7, #4]
 650 009a 9B69     		ldr	r3, [r3, #24]
 651 009c 4FF00002 		mov	r2, #0
 652 00a0 DA63     		str	r2, [r3, #60]
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 653              		.loc 1 478 0
 654 00a2 7B68     		ldr	r3, [r7, #4]
 655 00a4 9B69     		ldr	r3, [r3, #24]
 656 00a6 4FF00002 		mov	r2, #0
 657 00aa 5A63     		str	r2, [r3, #52]
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 658              		.loc 1 481 0
 659 00ac 7B68     		ldr	r3, [r7, #4]
 660 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 661 00b2 012B     		cmp	r3, #1
 662 00b4 54D1     		bne	.L17
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 663              		.loc 1 484 0
 664 00b6 7B68     		ldr	r3, [r7, #4]
 665 00b8 DB69     		ldr	r3, [r3, #28]
 666 00ba 4FF00702 		mov	r2, #7
 667 00be 1A61     		str	r2, [r3, #16]
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 668              		.loc 1 485 0
 669 00c0 7B68     		ldr	r3, [r7, #4]
 670 00c2 DB69     		ldr	r3, [r3, #28]
 671 00c4 40F60F72 		movw	r2, #3855
 672 00c8 C3F8B020 		str	r2, [r3, #176]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 673              		.loc 1 486 0
 674 00cc 7B68     		ldr	r3, [r7, #4]
 675 00ce DB69     		ldr	r3, [r3, #28]
 676 00d0 4FF00002 		mov	r2, #0
 677 00d4 C3F8A420 		str	r2, [r3, #164]
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 678              		.loc 1 489 0
 679 00d8 4FF40073 		mov	r3, #512
 680 00dc BB61     		str	r3, [r7, #24]
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 681              		.loc 1 490 0
 682 00de 4FF48073 		mov	r3, #256
 683 00e2 7B61     		str	r3, [r7, #20]
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 684              		.loc 1 491 0
 685 00e4 7B68     		ldr	r3, [r7, #4]
 686 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 687 00ea 3B61     		str	r3, [r7, #16]
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 688              		.loc 1 492 0
 689 00ec 7A69     		ldr	r2, [r7, #20]
 690 00ee BB69     		ldr	r3, [r7, #24]
 691 00f0 1343     		orrs	r3, r3, r2
 692 00f2 FB60     		str	r3, [r7, #12]
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 693              		.loc 1 493 0
 694 00f4 7B68     		ldr	r3, [r7, #4]
 695 00f6 5B69     		ldr	r3, [r3, #20]
 696 00f8 7A68     		ldr	r2, [r7, #4]
 697 00fa 5269     		ldr	r2, [r2, #20]
 698 00fc 9168     		ldr	r1, [r2, #8]
 699 00fe 3A69     		ldr	r2, [r7, #16]
 700 0100 4FF00100 		mov	r0, #1
 701 0104 00FA02F0 		lsl	r0, r0, r2
 702 0108 FA68     		ldr	r2, [r7, #12]
 703 010a 0243     		orrs	r2, r2, r0
 704 010c 0A43     		orrs	r2, r2, r1
 705 010e 9A60     		str	r2, [r3, #8]
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 706              		.loc 1 497 0
 707 0110 7B68     		ldr	r3, [r7, #4]
 708 0112 DB69     		ldr	r3, [r3, #28]
 709 0114 4FF00002 		mov	r2, #0
 710 0118 1A60     		str	r2, [r3, #0]
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 711              		.loc 1 498 0
 712 011a 7B68     		ldr	r3, [r7, #4]
 713 011c DB69     		ldr	r3, [r3, #28]
 714 011e 4FF00002 		mov	r2, #0
 715 0122 5A60     		str	r2, [r3, #4]
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 716              		.loc 1 499 0
 717 0124 7B68     		ldr	r3, [r7, #4]
 718 0126 DB69     		ldr	r3, [r3, #28]
 719 0128 4FF00002 		mov	r2, #0
 720 012c 5A61     		str	r2, [r3, #20]
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 721              		.loc 1 500 0
 722 012e 7B68     		ldr	r3, [r7, #4]
 723 0130 DB69     		ldr	r3, [r3, #28]
 724 0132 4FF00002 		mov	r2, #0
 725 0136 5A62     		str	r2, [r3, #36]
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 726              		.loc 1 501 0
 727 0138 7B68     		ldr	r3, [r7, #4]
 728 013a DB69     		ldr	r3, [r3, #28]
 729 013c 4FF00002 		mov	r2, #0
 730 0140 9A61     		str	r2, [r3, #24]
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 731              		.loc 1 502 0
 732 0142 7B68     		ldr	r3, [r7, #4]
 733 0144 DB69     		ldr	r3, [r3, #28]
 734 0146 4FF00002 		mov	r2, #0
 735 014a 1A62     		str	r2, [r3, #32]
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 736              		.loc 1 503 0
 737 014c 7B68     		ldr	r3, [r7, #4]
 738 014e DB69     		ldr	r3, [r3, #28]
 739 0150 4FF00002 		mov	r2, #0
 740 0154 DA63     		str	r2, [r3, #60]
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 741              		.loc 1 504 0
 742 0156 7B68     		ldr	r3, [r7, #4]
 743 0158 DB69     		ldr	r3, [r3, #28]
 744 015a 4FF00002 		mov	r2, #0
 745 015e 5A63     		str	r2, [r3, #52]
 746              	.L17:
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 747              		.loc 1 507 0
 748 0160 7B68     		ldr	r3, [r7, #4]
 749 0162 DB6B     		ldr	r3, [r3, #60]
 750 0164 4FF00002 		mov	r2, #0
 751 0168 1A70     		strb	r2, [r3, #0]
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 752              		.loc 1 509 0
 753 016a 4FF00003 		mov	r3, #0
 754 016e FB61     		str	r3, [r7, #28]
 755              	.L16:
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 756              		.loc 1 516 0
 757 0170 FB69     		ldr	r3, [r7, #28]
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 758              		.loc 1 517 0
 759 0172 1846     		mov	r0, r3
 760 0174 07F12407 		add	r7, r7, #36
 761 0178 BD46     		mov	sp, r7
 762 017a 80BC     		pop	{r7}
 763 017c 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE119:
 767 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 768              		.align	2
 769              		.global	PWMSP001_Start
 770              		.thumb
 771              		.thumb_func
 773              	PWMSP001_Start:
 774              	.LFB120:
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 775              		.loc 1 523 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 16
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780 0000 80B4     		push	{r7}
 781              	.LCFI9:
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 7, -4
 784 0002 85B0     		sub	sp, sp, #20
 785              	.LCFI10:
 786              		.cfi_def_cfa_offset 24
 787 0004 00AF     		add	r7, sp, #0
 788              	.LCFI11:
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 791              		.loc 1 524 0
 792 0008 4FF00103 		mov	r3, #1
 793 000c FB60     		str	r3, [r7, #12]
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 794              		.loc 1 529 0
 795 000e 7B68     		ldr	r3, [r7, #4]
 796 0010 DB6B     		ldr	r3, [r3, #60]
 797 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 798 0014 012B     		cmp	r3, #1
 799 0016 05D0     		beq	.L20
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 800              		.loc 1 530 0 discriminator 1
 801 0018 7B68     		ldr	r3, [r7, #4]
 802 001a DB6B     		ldr	r3, [r3, #60]
 803 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 804              		.loc 1 529 0 discriminator 1
 805 001e 032B     		cmp	r3, #3
 806 0020 40F0A780 		bne	.L27
 807              	.L20:
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 808              		.loc 1 536 0
 809 0024 7B68     		ldr	r3, [r7, #4]
 810 0026 9B69     		ldr	r3, [r3, #24]
 811 0028 40F60F72 		movw	r2, #3855
 812 002c C3F8B020 		str	r2, [r3, #176]
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 813              		.loc 1 539 0
 814 0030 7B68     		ldr	r3, [r7, #4]
 815 0032 5B69     		ldr	r3, [r3, #20]
 816 0034 7A68     		ldr	r2, [r7, #4]
 817 0036 5269     		ldr	r2, [r2, #20]
 818 0038 D168     		ldr	r1, [r2, #12]
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 819              		.loc 1 541 0
 820 003a 7A68     		ldr	r2, [r7, #4]
 821 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 822              		.loc 1 540 0
 823 0040 4FF00100 		mov	r0, #1
 824 0044 00FA02F2 		lsl	r2, r0, r2
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 825              		.loc 1 539 0
 826 0048 0A43     		orrs	r2, r2, r1
 827 004a DA60     		str	r2, [r3, #12]
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 828              		.loc 1 542 0
 829 004c 7B68     		ldr	r3, [r7, #4]
 830 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 831 0052 012B     		cmp	r3, #1
 832 0054 0DD1     		bne	.L22
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 833              		.loc 1 544 0
 834 0056 7B68     		ldr	r3, [r7, #4]
 835 0058 5B69     		ldr	r3, [r3, #20]
 836 005a 7A68     		ldr	r2, [r7, #4]
 837 005c 5269     		ldr	r2, [r2, #20]
 838 005e D168     		ldr	r1, [r2, #12]
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 839              		.loc 1 546 0
 840 0060 7A68     		ldr	r2, [r7, #4]
 841 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 842              		.loc 1 545 0
 843 0066 4FF00100 		mov	r0, #1
 844 006a 00FA02F2 		lsl	r2, r0, r2
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 845              		.loc 1 544 0
 846 006e 0A43     		orrs	r2, r2, r1
 847 0070 DA60     		str	r2, [r3, #12]
 848              	.L22:
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 849              		.loc 1 550 0
 850 0072 7B68     		ldr	r3, [r7, #4]
 851 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 852 0076 002B     		cmp	r3, #0
 853 0078 15D1     		bne	.L23
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 854              		.loc 1 552 0
 855 007a 7B68     		ldr	r3, [r7, #4]
 856 007c 9B69     		ldr	r3, [r3, #24]
 857 007e 7A68     		ldr	r2, [r7, #4]
 858 0080 9269     		ldr	r2, [r2, #24]
 859 0082 D268     		ldr	r2, [r2, #12]
 860 0084 42F00102 		orr	r2, r2, #1
 861 0088 DA60     		str	r2, [r3, #12]
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 862              		.loc 1 553 0
 863 008a 7B68     		ldr	r3, [r7, #4]
 864 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 865 0090 012B     		cmp	r3, #1
 866 0092 65D1     		bne	.L24
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 867              		.loc 1 555 0
 868 0094 7B68     		ldr	r3, [r7, #4]
 869 0096 DB69     		ldr	r3, [r3, #28]
 870 0098 7A68     		ldr	r2, [r7, #4]
 871 009a D269     		ldr	r2, [r2, #28]
 872 009c D268     		ldr	r2, [r2, #12]
 873 009e 42F00102 		orr	r2, r2, #1
 874 00a2 DA60     		str	r2, [r3, #12]
 875 00a4 5CE0     		b	.L24
 876              	.L23:
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 877              		.loc 1 561 0
 878 00a6 7B68     		ldr	r3, [r7, #4]
 879 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 880 00aa 012B     		cmp	r3, #1
 881 00ac 27D1     		bne	.L25
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 882              		.loc 1 563 0
 883 00ae 7B68     		ldr	r3, [r7, #4]
 884 00b0 9A69     		ldr	r2, [r3, #24]
 885 00b2 7B68     		ldr	r3, [r7, #4]
 886 00b4 9B69     		ldr	r3, [r3, #24]
 887 00b6 1B68     		ldr	r3, [r3, #0]
 888 00b8 23F0C063 		bic	r3, r3, #100663296
 889 00bc 23F44033 		bic	r3, r3, #196608
 890 00c0 1360     		str	r3, [r2, #0]
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 891              		.loc 1 565 0
 892 00c2 7B68     		ldr	r3, [r7, #4]
 893 00c4 9B69     		ldr	r3, [r3, #24]
 894 00c6 7A68     		ldr	r2, [r7, #4]
 895 00c8 9269     		ldr	r2, [r2, #24]
 896 00ca 5268     		ldr	r2, [r2, #4]
 897 00cc 22F00302 		bic	r2, r2, #3
 898 00d0 5A60     		str	r2, [r3, #4]
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 899              		.loc 1 566 0
 900 00d2 7B68     		ldr	r3, [r7, #4]
 901 00d4 9B69     		ldr	r3, [r3, #24]
 902 00d6 7A68     		ldr	r2, [r7, #4]
 903 00d8 9269     		ldr	r2, [r2, #24]
 904 00da 1168     		ldr	r1, [r2, #0]
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 905              		.loc 1 567 0
 906 00dc 7A68     		ldr	r2, [r7, #4]
 907 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 908 00e2 4FEA0242 		lsl	r2, r2, #16
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 909              		.loc 1 568 0
 910 00e6 02F44032 		and	r2, r2, #196608
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 911              		.loc 1 566 0
 912 00ea 0A43     		orrs	r2, r2, r1
 913 00ec 1A60     		str	r2, [r3, #0]
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 914              		.loc 1 570 0
 915 00ee 7B68     		ldr	r3, [r7, #4]
 916 00f0 9B69     		ldr	r3, [r3, #24]
 917 00f2 7A68     		ldr	r2, [r7, #4]
 918 00f4 9269     		ldr	r2, [r2, #24]
 919 00f6 5268     		ldr	r2, [r2, #4]
 920 00f8 42F00102 		orr	r2, r2, #1
 921 00fc 5A60     		str	r2, [r3, #4]
 922              	.L25:
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 923              		.loc 1 574 0
 924 00fe 7B68     		ldr	r3, [r7, #4]
 925 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 926 0102 012B     		cmp	r3, #1
 927 0104 2CD1     		bne	.L24
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 928              		.loc 1 575 0 discriminator 1
 929 0106 7B68     		ldr	r3, [r7, #4]
 930 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 931              		.loc 1 574 0 discriminator 1
 932 010c 012B     		cmp	r3, #1
 933 010e 27D1     		bne	.L24
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 934              		.loc 1 578 0
 935 0110 7B68     		ldr	r3, [r7, #4]
 936 0112 DA69     		ldr	r2, [r3, #28]
 937 0114 7B68     		ldr	r3, [r7, #4]
 938 0116 DB69     		ldr	r3, [r3, #28]
 939 0118 1B68     		ldr	r3, [r3, #0]
 940 011a 23F0C063 		bic	r3, r3, #100663296
 941 011e 23F44033 		bic	r3, r3, #196608
 942 0122 1360     		str	r3, [r2, #0]
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 943              		.loc 1 579 0
 944 0124 7B68     		ldr	r3, [r7, #4]
 945 0126 DB69     		ldr	r3, [r3, #28]
 946 0128 7A68     		ldr	r2, [r7, #4]
 947 012a D269     		ldr	r2, [r2, #28]
 948 012c 5268     		ldr	r2, [r2, #4]
 949 012e 22F00302 		bic	r2, r2, #3
 950 0132 5A60     		str	r2, [r3, #4]
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 951              		.loc 1 580 0
 952 0134 7B68     		ldr	r3, [r7, #4]
 953 0136 DB69     		ldr	r3, [r3, #28]
 954 0138 7A68     		ldr	r2, [r7, #4]
 955 013a D269     		ldr	r2, [r2, #28]
 956 013c 1168     		ldr	r1, [r2, #0]
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 957              		.loc 1 581 0
 958 013e 7A68     		ldr	r2, [r7, #4]
 959 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 960 0144 4FEA0242 		lsl	r2, r2, #16
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 961              		.loc 1 582 0
 962 0148 02F44032 		and	r2, r2, #196608
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 963              		.loc 1 580 0
 964 014c 0A43     		orrs	r2, r2, r1
 965 014e 1A60     		str	r2, [r3, #0]
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 966              		.loc 1 584 0
 967 0150 7B68     		ldr	r3, [r7, #4]
 968 0152 DB69     		ldr	r3, [r3, #28]
 969 0154 7A68     		ldr	r2, [r7, #4]
 970 0156 D269     		ldr	r2, [r2, #28]
 971 0158 5268     		ldr	r2, [r2, #4]
 972 015a 42F00102 		orr	r2, r2, #1
 973 015e 5A60     		str	r2, [r3, #4]
 974              	.L24:
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 975              		.loc 1 589 0
 976 0160 7B68     		ldr	r3, [r7, #4]
 977 0162 DB6B     		ldr	r3, [r3, #60]
 978 0164 4FF00202 		mov	r2, #2
 979 0168 1A70     		strb	r2, [r3, #0]
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 980              		.loc 1 590 0
 981 016a 4FF00003 		mov	r3, #0
 982 016e FB60     		str	r3, [r7, #12]
 983 0170 00E0     		b	.L21
 984              	.L27:
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 985              		.loc 1 533 0
 986 0172 00BF     		nop
 987              	.L21:
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 988              		.loc 1 592 0
 989 0174 FB68     		ldr	r3, [r7, #12]
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 990              		.loc 1 593 0
 991 0176 1846     		mov	r0, r3
 992 0178 07F11407 		add	r7, r7, #20
 993 017c BD46     		mov	sp, r7
 994 017e 80BC     		pop	{r7}
 995 0180 7047     		bx	lr
 996              		.cfi_endproc
 997              	.LFE120:
 999 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 1000              		.align	2
 1001              		.global	PWMSP001_Stop
 1002              		.thumb
 1003              		.thumb_func
 1005              	PWMSP001_Stop:
 1006              	.LFB121:
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1007              		.loc 1 598 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 24
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 0000 80B4     		push	{r7}
 1013              	.LCFI12:
 1014              		.cfi_def_cfa_offset 4
 1015              		.cfi_offset 7, -4
 1016 0002 87B0     		sub	sp, sp, #28
 1017              	.LCFI13:
 1018              		.cfi_def_cfa_offset 32
 1019 0004 00AF     		add	r7, sp, #0
 1020              	.LCFI14:
 1021              		.cfi_def_cfa_register 7
 1022 0006 7860     		str	r0, [r7, #4]
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1023              		.loc 1 599 0
 1024 0008 4FF00103 		mov	r3, #1
 1025 000c 7B61     		str	r3, [r7, #20]
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1026              		.loc 1 606 0
 1027 000e 7B68     		ldr	r3, [r7, #4]
 1028 0010 DB6B     		ldr	r3, [r3, #60]
 1029 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1030 0014 022B     		cmp	r3, #2
 1031 0016 41D1     		bne	.L33
 1032              	.L29:
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1033              		.loc 1 612 0
 1034 0018 7B68     		ldr	r3, [r7, #4]
 1035 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1036 001e 3B61     		str	r3, [r7, #16]
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1037              		.loc 1 613 0
 1038 0020 4FF40073 		mov	r3, #512
 1039 0024 FB60     		str	r3, [r7, #12]
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1040              		.loc 1 614 0
 1041 0026 7B68     		ldr	r3, [r7, #4]
 1042 0028 9B69     		ldr	r3, [r3, #24]
 1043 002a 4FF00702 		mov	r2, #7
 1044 002e 1A61     		str	r2, [r3, #16]
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1045              		.loc 1 615 0
 1046 0030 7B68     		ldr	r3, [r7, #4]
 1047 0032 5B69     		ldr	r3, [r3, #20]
 1048 0034 7A68     		ldr	r2, [r7, #4]
 1049 0036 5269     		ldr	r2, [r2, #20]
 1050 0038 9168     		ldr	r1, [r2, #8]
 1051 003a 3A69     		ldr	r2, [r7, #16]
 1052 003c 4FF00100 		mov	r0, #1
 1053 0040 00FA02F0 		lsl	r0, r0, r2
 1054 0044 FA68     		ldr	r2, [r7, #12]
 1055 0046 0243     		orrs	r2, r2, r0
 1056 0048 0A43     		orrs	r2, r2, r1
 1057 004a 9A60     		str	r2, [r3, #8]
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1058              		.loc 1 617 0
 1059 004c 7B68     		ldr	r3, [r7, #4]
 1060 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1061 0052 012B     		cmp	r3, #1
 1062 0054 19D1     		bne	.L31
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1063              		.loc 1 619 0
 1064 0056 7B68     		ldr	r3, [r7, #4]
 1065 0058 DB69     		ldr	r3, [r3, #28]
 1066 005a 4FF00702 		mov	r2, #7
 1067 005e 1A61     		str	r2, [r3, #16]
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1068              		.loc 1 620 0
 1069 0060 7B68     		ldr	r3, [r7, #4]
 1070 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1071 0066 3B61     		str	r3, [r7, #16]
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1072              		.loc 1 621 0
 1073 0068 4FF40073 		mov	r3, #512
 1074 006c FB60     		str	r3, [r7, #12]
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1075              		.loc 1 622 0
 1076 006e 7B68     		ldr	r3, [r7, #4]
 1077 0070 5B69     		ldr	r3, [r3, #20]
 1078 0072 7A68     		ldr	r2, [r7, #4]
 1079 0074 5269     		ldr	r2, [r2, #20]
 1080 0076 9168     		ldr	r1, [r2, #8]
 1081 0078 3A69     		ldr	r2, [r7, #16]
 1082 007a 4FF00100 		mov	r0, #1
 1083 007e 00FA02F0 		lsl	r0, r0, r2
 1084 0082 FA68     		ldr	r2, [r7, #12]
 1085 0084 0243     		orrs	r2, r2, r0
 1086 0086 0A43     		orrs	r2, r2, r1
 1087 0088 9A60     		str	r2, [r3, #8]
 1088              	.L31:
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1089              		.loc 1 625 0
 1090 008a 7B68     		ldr	r3, [r7, #4]
 1091 008c DB6B     		ldr	r3, [r3, #60]
 1092 008e 4FF00302 		mov	r2, #3
 1093 0092 1A70     		strb	r2, [r3, #0]
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1094              		.loc 1 626 0
 1095 0094 4FF00003 		mov	r3, #0
 1096 0098 7B61     		str	r3, [r7, #20]
 1097 009a 00E0     		b	.L30
 1098              	.L33:
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1099              		.loc 1 608 0
 1100 009c 00BF     		nop
 1101              	.L30:
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1102              		.loc 1 634 0
 1103 009e 7B69     		ldr	r3, [r7, #20]
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1104              		.loc 1 635 0
 1105 00a0 1846     		mov	r0, r3
 1106 00a2 07F11C07 		add	r7, r7, #28
 1107 00a6 BD46     		mov	sp, r7
 1108 00a8 80BC     		pop	{r7}
 1109 00aa 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE121:
 1113              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1114              		.align	2
 1115              		.global	PWMSP001_SetCompare
 1116              		.thumb
 1117              		.thumb_func
 1119              	PWMSP001_SetCompare:
 1120              	.LFB122:
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1121              		.loc 1 644 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 16
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125 0000 80B5     		push	{r7, lr}
 1126              	.LCFI15:
 1127              		.cfi_def_cfa_offset 8
 1128              		.cfi_offset 7, -8
 1129              		.cfi_offset 14, -4
 1130 0002 84B0     		sub	sp, sp, #16
 1131              	.LCFI16:
 1132              		.cfi_def_cfa_offset 24
 1133 0004 00AF     		add	r7, sp, #0
 1134              	.LCFI17:
 1135              		.cfi_def_cfa_register 7
 1136 0006 7860     		str	r0, [r7, #4]
 1137 0008 3960     		str	r1, [r7, #0]
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1138              		.loc 1 645 0
 1139 000a 4FF00103 		mov	r3, #1
 1140 000e FB60     		str	r3, [r7, #12]
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1141              		.loc 1 648 0
 1142 0010 7B68     		ldr	r3, [r7, #4]
 1143 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1144 0016 012B     		cmp	r3, #1
 1145 0018 0AD1     		bne	.L35
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1146              		.loc 1 649 0
 1147 001a 7B68     		ldr	r3, [r7, #4]
 1148 001c DB69     		ldr	r3, [r3, #28]
 1149 001e 5B6B     		ldr	r3, [r3, #52]
 1150 0020 4FEA0342 		lsl	r2, r3, #16
 1151 0024 7B68     		ldr	r3, [r7, #4]
 1152 0026 9B69     		ldr	r3, [r3, #24]
 1153 0028 5B6B     		ldr	r3, [r3, #52]
 1154 002a 1343     		orrs	r3, r3, r2
 1155 002c BB60     		str	r3, [r7, #8]
 1156 002e 03E0     		b	.L36
 1157              	.L35:
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1158              		.loc 1 651 0
 1159 0030 7B68     		ldr	r3, [r7, #4]
 1160 0032 9B69     		ldr	r3, [r3, #24]
 1161 0034 5B6B     		ldr	r3, [r3, #52]
 1162 0036 BB60     		str	r3, [r7, #8]
 1163              	.L36:
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1164              		.loc 1 654 0
 1165 0038 7B68     		ldr	r3, [r7, #4]
 1166 003a DB6B     		ldr	r3, [r3, #60]
 1167 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1168 003e 002B     		cmp	r3, #0
 1169 0040 1DD0     		beq	.L37
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1170              		.loc 1 656 0
 1171 0042 7B68     		ldr	r3, [r7, #4]
 1172 0044 DA6A     		ldr	r2, [r3, #44]
 1173 0046 3B68     		ldr	r3, [r7, #0]
 1174 0048 9A42     		cmp	r2, r3
 1175 004a 08D2     		bcs	.L38
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1176              		.loc 1 657 0 discriminator 1
 1177 004c 7B68     		ldr	r3, [r7, #4]
 1178 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1179              		.loc 1 656 0 discriminator 1
 1180 0052 002B     		cmp	r3, #0
 1181 0054 03D1     		bne	.L38
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1182              		.loc 1 659 0
 1183 0056 4FF00203 		mov	r3, #2
 1184 005a FB60     		str	r3, [r7, #12]
 1185 005c 0FE0     		b	.L37
 1186              	.L38:
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1187              		.loc 1 665 0
 1188 005e 3A68     		ldr	r2, [r7, #0]
 1189 0060 BB68     		ldr	r3, [r7, #8]
 1190 0062 9A42     		cmp	r2, r3
 1191 0064 03D3     		bcc	.L39
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1192              		.loc 1 667 0
 1193 0066 BB68     		ldr	r3, [r7, #8]
 1194 0068 03F10103 		add	r3, r3, #1
 1195 006c 3B60     		str	r3, [r7, #0]
 1196              	.L39:
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1197              		.loc 1 670 0
 1198 006e 7B68     		ldr	r3, [r7, #4]
 1199 0070 1B6C     		ldr	r3, [r3, #64]
 1200 0072 7868     		ldr	r0, [r7, #4]
 1201 0074 3968     		ldr	r1, [r7, #0]
 1202 0076 9847     		blx	r3
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1203              		.loc 1 671 0
 1204 0078 4FF00003 		mov	r3, #0
 1205 007c FB60     		str	r3, [r7, #12]
 1206              	.L37:
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1207              		.loc 1 674 0
 1208 007e FB68     		ldr	r3, [r7, #12]
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1209              		.loc 1 675 0
 1210 0080 1846     		mov	r0, r3
 1211 0082 07F11007 		add	r7, r7, #16
 1212 0086 BD46     		mov	sp, r7
 1213 0088 80BD     		pop	{r7, pc}
 1214              		.cfi_endproc
 1215              	.LFE122:
 1217 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1218              		.align	2
 1219              		.global	PWMSP001_lSetCompareEdgeAlign
 1220              		.thumb
 1221              		.thumb_func
 1223              	PWMSP001_lSetCompareEdgeAlign:
 1224              	.LFB123:
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1225              		.loc 1 686 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 24
 1228              		@ frame_needed = 1, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
 1230 0000 80B4     		push	{r7}
 1231              	.LCFI18:
 1232              		.cfi_def_cfa_offset 4
 1233              		.cfi_offset 7, -4
 1234 0002 87B0     		sub	sp, sp, #28
 1235              	.LCFI19:
 1236              		.cfi_def_cfa_offset 32
 1237 0004 00AF     		add	r7, sp, #0
 1238              	.LCFI20:
 1239              		.cfi_def_cfa_register 7
 1240 0006 7860     		str	r0, [r7, #4]
 1241 0008 3960     		str	r1, [r7, #0]
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1242              		.loc 1 689 0
 1243 000a 7B68     		ldr	r3, [r7, #4]
 1244 000c 7B61     		str	r3, [r7, #20]
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1245              		.loc 1 690 0
 1246 000e 7B69     		ldr	r3, [r7, #20]
 1247 0010 9A69     		ldr	r2, [r3, #24]
 1248 0012 3B68     		ldr	r3, [r7, #0]
 1249 0014 4FEA0343 		lsl	r3, r3, #16
 1250 0018 4FEA1343 		lsr	r3, r3, #16
 1251 001c D363     		str	r3, [r2, #60]
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1252              		.loc 1 693 0
 1253 001e 7B69     		ldr	r3, [r7, #20]
 1254 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1255 0024 4FEA8303 		lsl	r3, r3, #2
 1256 0028 3B61     		str	r3, [r7, #16]
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1257              		.loc 1 694 0
 1258 002a 3B69     		ldr	r3, [r7, #16]
 1259 002c FB60     		str	r3, [r7, #12]
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1260              		.loc 1 695 0
 1261 002e 7B69     		ldr	r3, [r7, #20]
 1262 0030 5B69     		ldr	r3, [r3, #20]
 1263 0032 7A69     		ldr	r2, [r7, #20]
 1264 0034 5269     		ldr	r2, [r2, #20]
 1265 0036 1169     		ldr	r1, [r2, #16]
 1266 0038 FA68     		ldr	r2, [r7, #12]
 1267 003a 4FF00100 		mov	r0, #1
 1268 003e 00FA02F2 		lsl	r2, r0, r2
 1269 0042 0A43     		orrs	r2, r2, r1
 1270 0044 1A61     		str	r2, [r3, #16]
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1271              		.loc 1 696 0
 1272 0046 07F11C07 		add	r7, r7, #28
 1273 004a BD46     		mov	sp, r7
 1274 004c 80BC     		pop	{r7}
 1275 004e 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE123:
 1279              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1280              		.align	2
 1281              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1282              		.thumb
 1283              		.thumb_func
 1285              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1286              	.LFB124:
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1287              		.loc 1 707 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 32
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292 0000 90B4     		push	{r4, r7}
 1293              	.LCFI21:
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 4, -8
 1296              		.cfi_offset 7, -4
 1297 0002 88B0     		sub	sp, sp, #32
 1298              	.LCFI22:
 1299              		.cfi_def_cfa_offset 40
 1300 0004 00AF     		add	r7, sp, #0
 1301              	.LCFI23:
 1302              		.cfi_def_cfa_register 7
 1303 0006 7860     		str	r0, [r7, #4]
 1304 0008 3960     		str	r1, [r7, #0]
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1305              		.loc 1 708 0
 1306 000a 4FF00003 		mov	r3, #0
 1307 000e FB61     		str	r3, [r7, #28]
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1308              		.loc 1 709 0
 1309 0010 4FF00003 		mov	r3, #0
 1310 0014 BB61     		str	r3, [r7, #24]
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1311              		.loc 1 712 0
 1312 0016 7B68     		ldr	r3, [r7, #4]
 1313 0018 7B61     		str	r3, [r7, #20]
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1314              		.loc 1 722 0
 1315 001a 7B69     		ldr	r3, [r7, #20]
 1316 001c 9B69     		ldr	r3, [r3, #24]
 1317 001e 5B6B     		ldr	r3, [r3, #52]
 1318 0020 9BB2     		uxth	r3, r3
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1319              		.loc 1 721 0
 1320 0022 1A46     		mov	r2, r3
 1321 0024 3B68     		ldr	r3, [r7, #0]
 1322 0026 B3FBF2F1 		udiv	r1, r3, r2
 1323 002a 02FB01F2 		mul	r2, r2, r1
 1324 002e 9B1A     		subs	r3, r3, r2
 1325 0030 FB61     		str	r3, [r7, #28]
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1326              		.loc 1 724 0
 1327 0032 7B69     		ldr	r3, [r7, #20]
 1328 0034 9B69     		ldr	r3, [r3, #24]
 1329 0036 5B6B     		ldr	r3, [r3, #52]
 1330 0038 9BB2     		uxth	r3, r3
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1331              		.loc 1 723 0
 1332 003a 3A68     		ldr	r2, [r7, #0]
 1333 003c B2FBF3F3 		udiv	r3, r2, r3
 1334 0040 BB61     		str	r3, [r7, #24]
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1335              		.loc 1 726 0
 1336 0042 7B69     		ldr	r3, [r7, #20]
 1337 0044 9A69     		ldr	r2, [r3, #24]
 1338 0046 FB69     		ldr	r3, [r7, #28]
 1339 0048 4FEA0343 		lsl	r3, r3, #16
 1340 004c 4FEA1343 		lsr	r3, r3, #16
 1341 0050 D363     		str	r3, [r2, #60]
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1342              		.loc 1 727 0
 1343 0052 7B69     		ldr	r3, [r7, #20]
 1344 0054 DA69     		ldr	r2, [r3, #28]
 1345 0056 BB69     		ldr	r3, [r7, #24]
 1346 0058 4FEA0343 		lsl	r3, r3, #16
 1347 005c 4FEA1343 		lsr	r3, r3, #16
 1348 0060 D363     		str	r3, [r2, #60]
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1349              		.loc 1 729 0
 1350 0062 7B69     		ldr	r3, [r7, #20]
 1351 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1352 0068 4FEA8303 		lsl	r3, r3, #2
 1353 006c 3B61     		str	r3, [r7, #16]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1354              		.loc 1 730 0
 1355 006e 7B69     		ldr	r3, [r7, #20]
 1356 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1357 0074 4FEA8303 		lsl	r3, r3, #2
 1358 0078 FB60     		str	r3, [r7, #12]
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1359              		.loc 1 731 0
 1360 007a 7B69     		ldr	r3, [r7, #20]
 1361 007c 5B69     		ldr	r3, [r3, #20]
 1362 007e 7A69     		ldr	r2, [r7, #20]
 1363 0080 5269     		ldr	r2, [r2, #20]
 1364 0082 1169     		ldr	r1, [r2, #16]
 1365 0084 FA68     		ldr	r2, [r7, #12]
 1366 0086 4FF00100 		mov	r0, #1
 1367 008a 00FA02F0 		lsl	r0, r0, r2
 1368 008e 3A69     		ldr	r2, [r7, #16]
 1369 0090 4FF00104 		mov	r4, #1
 1370 0094 04FA02F2 		lsl	r2, r4, r2
 1371 0098 0243     		orrs	r2, r2, r0
 1372 009a 0A43     		orrs	r2, r2, r1
 1373 009c 1A61     		str	r2, [r3, #16]
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1374              		.loc 1 732 0
 1375 009e 07F12007 		add	r7, r7, #32
 1376 00a2 BD46     		mov	sp, r7
 1377 00a4 90BC     		pop	{r4, r7}
 1378 00a6 7047     		bx	lr
 1379              		.cfi_endproc
 1380              	.LFE124:
 1382              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1383              		.align	2
 1384              		.global	PWMSP001_lSetCompareCenterAlign
 1385              		.thumb
 1386              		.thumb_func
 1388              	PWMSP001_lSetCompareCenterAlign:
 1389              	.LFB125:
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1390              		.loc 1 743 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 16
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 1395 0000 80B4     		push	{r7}
 1396              	.LCFI24:
 1397              		.cfi_def_cfa_offset 4
 1398              		.cfi_offset 7, -4
 1399 0002 85B0     		sub	sp, sp, #20
 1400              	.LCFI25:
 1401              		.cfi_def_cfa_offset 24
 1402 0004 00AF     		add	r7, sp, #0
 1403              	.LCFI26:
 1404              		.cfi_def_cfa_register 7
 1405 0006 7860     		str	r0, [r7, #4]
 1406 0008 3960     		str	r1, [r7, #0]
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1407              		.loc 1 746 0
 1408 000a 7B68     		ldr	r3, [r7, #4]
 1409 000c FB60     		str	r3, [r7, #12]
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1410              		.loc 1 747 0
 1411 000e FB68     		ldr	r3, [r7, #12]
 1412 0010 9A69     		ldr	r2, [r3, #24]
 1413 0012 3B68     		ldr	r3, [r7, #0]
 1414 0014 4FEA0343 		lsl	r3, r3, #16
 1415 0018 4FEA1343 		lsr	r3, r3, #16
 1416 001c D363     		str	r3, [r2, #60]
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1417              		.loc 1 750 0
 1418 001e FB68     		ldr	r3, [r7, #12]
 1419 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1420 0024 4FEA8303 		lsl	r3, r3, #2
 1421 0028 BB60     		str	r3, [r7, #8]
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1422              		.loc 1 751 0
 1423 002a FB68     		ldr	r3, [r7, #12]
 1424 002c 5B69     		ldr	r3, [r3, #20]
 1425 002e FA68     		ldr	r2, [r7, #12]
 1426 0030 5269     		ldr	r2, [r2, #20]
 1427 0032 1169     		ldr	r1, [r2, #16]
 1428 0034 BA68     		ldr	r2, [r7, #8]
 1429 0036 4FF00100 		mov	r0, #1
 1430 003a 00FA02F2 		lsl	r2, r0, r2
 1431 003e 0A43     		orrs	r2, r2, r1
 1432 0040 1A61     		str	r2, [r3, #16]
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1433              		.loc 1 752 0
 1434 0042 07F11407 		add	r7, r7, #20
 1435 0046 BD46     		mov	sp, r7
 1436 0048 80BC     		pop	{r7}
 1437 004a 7047     		bx	lr
 1438              		.cfi_endproc
 1439              	.LFE125:
 1441              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1442              		.align	2
 1443              		.global	PWMSP001_SetDutyCycle
 1444              		.thumb
 1445              		.thumb_func
 1447              	PWMSP001_SetDutyCycle:
 1448              	.LFB126:
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1449              		.loc 1 764 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 16
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453 0000 80B5     		push	{r7, lr}
 1454              	.LCFI27:
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 84B0     		sub	sp, sp, #16
 1459              	.LCFI28:
 1460              		.cfi_def_cfa_offset 24
 1461 0004 00AF     		add	r7, sp, #0
 1462              	.LCFI29:
 1463              		.cfi_def_cfa_register 7
 1464 0006 7860     		str	r0, [r7, #4]
 1465 0008 3960     		str	r1, [r7, #0]	@ float
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1466              		.loc 1 765 0
 1467 000a 4FF00103 		mov	r3, #1
 1468 000e FB60     		str	r3, [r7, #12]
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1469              		.loc 1 767 0
 1470 0010 7B68     		ldr	r3, [r7, #4]
 1471 0012 DB6B     		ldr	r3, [r3, #60]
 1472 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1473 0016 002B     		cmp	r3, #0
 1474 0018 1BD0     		beq	.L45
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1475              		.loc 1 769 0
 1476 001a 97ED007A 		flds	s14, [r7, #0]
 1477 001e DFED107A 		flds	s15, .L51
 1478 0022 B4EEE77A 		fcmpes	s14, s15
 1479 0026 F1EE10FA 		fmstat
 1480 002a 06DC     		bgt	.L46
 1481              		.loc 1 769 0 is_stmt 0 discriminator 1
 1482 002c D7ED007A 		flds	s15, [r7, #0]
 1483 0030 F5EEC07A 		fcmpezs	s15
 1484 0034 F1EE10FA 		fmstat
 1485 0038 03D5     		bpl	.L50
 1486              	.L46:
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1487              		.loc 1 771 0 is_stmt 1
 1488 003a 4FF00203 		mov	r3, #2
 1489 003e FB60     		str	r3, [r7, #12]
 1490 0040 07E0     		b	.L45
 1491              	.L50:
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1492              		.loc 1 776 0
 1493 0042 7B68     		ldr	r3, [r7, #4]
 1494 0044 5B6C     		ldr	r3, [r3, #68]
 1495 0046 7868     		ldr	r0, [r7, #4]
 1496 0048 3968     		ldr	r1, [r7, #0]	@ float
 1497 004a 9847     		blx	r3
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1498              		.loc 1 777 0
 1499 004c 4FF00003 		mov	r3, #0
 1500 0050 FB60     		str	r3, [r7, #12]
 1501              	.L45:
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1502              		.loc 1 780 0
 1503 0052 FB68     		ldr	r3, [r7, #12]
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1504              		.loc 1 781 0
 1505 0054 1846     		mov	r0, r3
 1506 0056 07F11007 		add	r7, r7, #16
 1507 005a BD46     		mov	sp, r7
 1508 005c 80BD     		pop	{r7, pc}
 1509              	.L52:
 1510 005e 00BF     		.align	2
 1511              	.L51:
 1512 0060 0000C842 		.word	1120403456
 1513              		.cfi_endproc
 1514              	.LFE126:
 1516              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1517              		.align	2
 1518              		.global	PWMSP001_lSetDutyEdgeAlign
 1519              		.thumb
 1520              		.thumb_func
 1522              	PWMSP001_lSetDutyEdgeAlign:
 1523              	.LFB127:
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1524              		.loc 1 792 0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 32
 1527              		@ frame_needed = 1, uses_anonymous_args = 0
 1528              		@ link register save eliminated.
 1529 0000 80B4     		push	{r7}
 1530              	.LCFI30:
 1531              		.cfi_def_cfa_offset 4
 1532              		.cfi_offset 7, -4
 1533 0002 89B0     		sub	sp, sp, #36
 1534              	.LCFI31:
 1535              		.cfi_def_cfa_offset 40
 1536 0004 00AF     		add	r7, sp, #0
 1537              	.LCFI32:
 1538              		.cfi_def_cfa_register 7
 1539 0006 7860     		str	r0, [r7, #4]
 1540 0008 3960     		str	r1, [r7, #0]	@ float
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1541              		.loc 1 793 0
 1542 000a 4FF00003 		mov	r3, #0
 1543 000e FB61     		str	r3, [r7, #28]
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1544              		.loc 1 796 0
 1545 0010 7B68     		ldr	r3, [r7, #4]
 1546 0012 BB61     		str	r3, [r7, #24]
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1547              		.loc 1 797 0
 1548 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1549 0016 7B61     		str	r3, [r7, #20]	@ float
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1550              		.loc 1 801 0
 1551 0018 9FED1F7A 		flds	s14, .L54
 1552 001c D7ED057A 		flds	s15, [r7, #20]
 1553 0020 37EE677A 		fsubs	s14, s14, s15
 1554 0024 DFED1C7A 		flds	s15, .L54
 1555 0028 C7EE277A 		fdivs	s15, s14, s15
 1556 002c C7ED057A 		fsts	s15, [r7, #20]
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1557              		.loc 1 802 0
 1558 0030 BB69     		ldr	r3, [r7, #24]
 1559 0032 9B69     		ldr	r3, [r3, #24]
 1560 0034 5B6B     		ldr	r3, [r3, #52]
 1561 0036 03F10103 		add	r3, r3, #1
 1562 003a 07EE103A 		fmsr	s14, r3	@ int
 1563 003e F8EE477A 		fuitos	s15, s14
 1564 0042 C7ED047A 		fsts	s15, [r7, #16]
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1565              		.loc 1 803 0
 1566 0046 97ED047A 		flds	s14, [r7, #16]
 1567 004a D7ED057A 		flds	s15, [r7, #20]
 1568 004e 67EE277A 		fmuls	s15, s14, s15
 1569 0052 FCEEE77A 		ftouizs	s15, s15
 1570 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1571              		.loc 1 804 0
 1572 005a BB69     		ldr	r3, [r7, #24]
 1573 005c 9A69     		ldr	r2, [r3, #24]
 1574 005e FB69     		ldr	r3, [r7, #28]
 1575 0060 4FEA0343 		lsl	r3, r3, #16
 1576 0064 4FEA1343 		lsr	r3, r3, #16
 1577 0068 D363     		str	r3, [r2, #60]
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1578              		.loc 1 807 0
 1579 006a BB69     		ldr	r3, [r7, #24]
 1580 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1581 0070 4FEA8303 		lsl	r3, r3, #2
 1582 0074 FB60     		str	r3, [r7, #12]
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1583              		.loc 1 808 0
 1584 0076 BB69     		ldr	r3, [r7, #24]
 1585 0078 5B69     		ldr	r3, [r3, #20]
 1586 007a BA69     		ldr	r2, [r7, #24]
 1587 007c 5269     		ldr	r2, [r2, #20]
 1588 007e 1169     		ldr	r1, [r2, #16]
 1589 0080 FA68     		ldr	r2, [r7, #12]
 1590 0082 4FF00100 		mov	r0, #1
 1591 0086 00FA02F2 		lsl	r2, r0, r2
 1592 008a 0A43     		orrs	r2, r2, r1
 1593 008c 1A61     		str	r2, [r3, #16]
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1594              		.loc 1 810 0
 1595 008e 07F12407 		add	r7, r7, #36
 1596 0092 BD46     		mov	sp, r7
 1597 0094 80BC     		pop	{r7}
 1598 0096 7047     		bx	lr
 1599              	.L55:
 1600              		.align	2
 1601              	.L54:
 1602 0098 0000C842 		.word	1120403456
 1603              		.cfi_endproc
 1604              	.LFE127:
 1606              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1607              		.align	2
 1608              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1609              		.thumb
 1610              		.thumb_func
 1612              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1613              	.LFB128:
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1614              		.loc 1 821 0
 1615              		.cfi_startproc
 1616              		@ args = 0, pretend = 0, frame = 40
 1617              		@ frame_needed = 1, uses_anonymous_args = 0
 1618              		@ link register save eliminated.
 1619 0000 90B4     		push	{r4, r7}
 1620              	.LCFI33:
 1621              		.cfi_def_cfa_offset 8
 1622              		.cfi_offset 4, -8
 1623              		.cfi_offset 7, -4
 1624 0002 8AB0     		sub	sp, sp, #40
 1625              	.LCFI34:
 1626              		.cfi_def_cfa_offset 48
 1627 0004 00AF     		add	r7, sp, #0
 1628              	.LCFI35:
 1629              		.cfi_def_cfa_register 7
 1630 0006 7860     		str	r0, [r7, #4]
 1631 0008 3960     		str	r1, [r7, #0]	@ float
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1632              		.loc 1 822 0
 1633 000a 4FF00003 		mov	r3, #0
 1634 000e 7B62     		str	r3, [r7, #36]
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1635              		.loc 1 823 0
 1636 0010 4FF00003 		mov	r3, #0
 1637 0014 3B62     		str	r3, [r7, #32]
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1638              		.loc 1 824 0
 1639 0016 4FF00003 		mov	r3, #0
 1640 001a FB61     		str	r3, [r7, #28]
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1641              		.loc 1 828 0
 1642 001c 7B68     		ldr	r3, [r7, #4]
 1643 001e BB61     		str	r3, [r7, #24]
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1644              		.loc 1 830 0
 1645 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1646 0022 7B61     		str	r3, [r7, #20]	@ float
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1647              		.loc 1 833 0
 1648 0024 BB69     		ldr	r3, [r7, #24]
 1649 0026 DB69     		ldr	r3, [r3, #28]
 1650 0028 5B6B     		ldr	r3, [r3, #52]
 1651 002a 03F10103 		add	r3, r3, #1
 1652 002e 7B62     		str	r3, [r7, #36]
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1653              		.loc 1 834 0
 1654 0030 BB69     		ldr	r3, [r7, #24]
 1655 0032 9B69     		ldr	r3, [r3, #24]
 1656 0034 5B6B     		ldr	r3, [r3, #52]
 1657 0036 4FEA0343 		lsl	r3, r3, #16
 1658 003a 4FEA1343 		lsr	r3, r3, #16
 1659 003e 03F10102 		add	r2, r3, #1
 1660 0042 7B6A     		ldr	r3, [r7, #36]
 1661 0044 02FB03F3 		mul	r3, r2, r3
 1662 0048 7B62     		str	r3, [r7, #36]
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1663              		.loc 1 835 0
 1664 004a 7B6A     		ldr	r3, [r7, #36]
 1665 004c 03F10103 		add	r3, r3, #1
 1666 0050 7B62     		str	r3, [r7, #36]
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1667              		.loc 1 837 0
 1668 0052 9FED347A 		flds	s14, .L57
 1669 0056 D7ED057A 		flds	s15, [r7, #20]
 1670 005a 37EE677A 		fsubs	s14, s14, s15
 1671 005e DFED317A 		flds	s15, .L57
 1672 0062 C7EE277A 		fdivs	s15, s14, s15
 1673 0066 C7ED057A 		fsts	s15, [r7, #20]
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1674              		.loc 1 838 0
 1675 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1676 006e F8EE677A 		fuitos	s15, s15
 1677 0072 C7ED047A 		fsts	s15, [r7, #16]
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1678              		.loc 1 839 0
 1679 0076 97ED047A 		flds	s14, [r7, #16]
 1680 007a D7ED057A 		flds	s15, [r7, #20]
 1681 007e 67EE277A 		fmuls	s15, s14, s15
 1682 0082 FCEEE77A 		ftouizs	s15, s15
 1683 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1684              		.loc 1 842 0
 1685 008a BB69     		ldr	r3, [r7, #24]
 1686 008c 9B69     		ldr	r3, [r3, #24]
 1687 008e 5B6B     		ldr	r3, [r3, #52]
 1688 0090 4FEA0343 		lsl	r3, r3, #16
 1689 0094 4FEA1343 		lsr	r3, r3, #16
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1690              		.loc 1 841 0
 1691 0098 7A6A     		ldr	r2, [r7, #36]
 1692 009a B2FBF3F1 		udiv	r1, r2, r3
 1693 009e 03FB01F3 		mul	r3, r3, r1
 1694 00a2 D31A     		subs	r3, r2, r3
 1695 00a4 3B62     		str	r3, [r7, #32]
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1696              		.loc 1 843 0
 1697 00a6 BB69     		ldr	r3, [r7, #24]
 1698 00a8 9A69     		ldr	r2, [r3, #24]
 1699 00aa 3B6A     		ldr	r3, [r7, #32]
 1700 00ac 4FEA0343 		lsl	r3, r3, #16
 1701 00b0 4FEA1343 		lsr	r3, r3, #16
 1702 00b4 D363     		str	r3, [r2, #60]
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1703              		.loc 1 845 0
 1704 00b6 BB69     		ldr	r3, [r7, #24]
 1705 00b8 9B69     		ldr	r3, [r3, #24]
 1706 00ba 5B6B     		ldr	r3, [r3, #52]
 1707 00bc 4FEA0343 		lsl	r3, r3, #16
 1708 00c0 4FEA1343 		lsr	r3, r3, #16
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1709              		.loc 1 844 0
 1710 00c4 7A6A     		ldr	r2, [r7, #36]
 1711 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1712 00ca FB61     		str	r3, [r7, #28]
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1713              		.loc 1 846 0
 1714 00cc BB69     		ldr	r3, [r7, #24]
 1715 00ce DA69     		ldr	r2, [r3, #28]
 1716 00d0 FB69     		ldr	r3, [r7, #28]
 1717 00d2 4FEA0343 		lsl	r3, r3, #16
 1718 00d6 4FEA1343 		lsr	r3, r3, #16
 1719 00da D363     		str	r3, [r2, #60]
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1720              		.loc 1 849 0
 1721 00dc BB69     		ldr	r3, [r7, #24]
 1722 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1723 00e2 4FEA8303 		lsl	r3, r3, #2
 1724 00e6 FB60     		str	r3, [r7, #12]
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1725              		.loc 1 850 0
 1726 00e8 BB69     		ldr	r3, [r7, #24]
 1727 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1728 00ee 4FEA8303 		lsl	r3, r3, #2
 1729 00f2 BB60     		str	r3, [r7, #8]
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1730              		.loc 1 851 0
 1731 00f4 BB69     		ldr	r3, [r7, #24]
 1732 00f6 5B69     		ldr	r3, [r3, #20]
 1733 00f8 BA69     		ldr	r2, [r7, #24]
 1734 00fa 5269     		ldr	r2, [r2, #20]
 1735 00fc 1169     		ldr	r1, [r2, #16]
 1736 00fe FA68     		ldr	r2, [r7, #12]
 1737 0100 4FF00100 		mov	r0, #1
 1738 0104 00FA02F0 		lsl	r0, r0, r2
 1739 0108 BA68     		ldr	r2, [r7, #8]
 1740 010a 4FF00104 		mov	r4, #1
 1741 010e 04FA02F2 		lsl	r2, r4, r2
 1742 0112 0243     		orrs	r2, r2, r0
 1743 0114 0A43     		orrs	r2, r2, r1
 1744 0116 1A61     		str	r2, [r3, #16]
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1745              		.loc 1 852 0
 1746 0118 07F12807 		add	r7, r7, #40
 1747 011c BD46     		mov	sp, r7
 1748 011e 90BC     		pop	{r4, r7}
 1749 0120 7047     		bx	lr
 1750              	.L58:
 1751 0122 00BF     		.align	2
 1752              	.L57:
 1753 0124 0000C842 		.word	1120403456
 1754              		.cfi_endproc
 1755              	.LFE128:
 1757              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1758              		.align	2
 1759              		.global	PWMSP001_lSetDutyCenterAlign
 1760              		.thumb
 1761              		.thumb_func
 1763              	PWMSP001_lSetDutyCenterAlign:
 1764              	.LFB129:
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1765              		.loc 1 863 0
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 32
 1768              		@ frame_needed = 1, uses_anonymous_args = 0
 1769              		@ link register save eliminated.
 1770 0000 80B4     		push	{r7}
 1771              	.LCFI36:
 1772              		.cfi_def_cfa_offset 4
 1773              		.cfi_offset 7, -4
 1774 0002 89B0     		sub	sp, sp, #36
 1775              	.LCFI37:
 1776              		.cfi_def_cfa_offset 40
 1777 0004 00AF     		add	r7, sp, #0
 1778              	.LCFI38:
 1779              		.cfi_def_cfa_register 7
 1780 0006 7860     		str	r0, [r7, #4]
 1781 0008 3960     		str	r1, [r7, #0]	@ float
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1782              		.loc 1 865 0
 1783 000a 4FF00003 		mov	r3, #0
 1784 000e FB61     		str	r3, [r7, #28]
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1785              		.loc 1 868 0
 1786 0010 7B68     		ldr	r3, [r7, #4]
 1787 0012 BB61     		str	r3, [r7, #24]
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1788              		.loc 1 869 0
 1789 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1790 0016 7B61     		str	r3, [r7, #20]	@ float
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1791              		.loc 1 871 0
 1792 0018 9FED1E7A 		flds	s14, .L60
 1793 001c D7ED057A 		flds	s15, [r7, #20]
 1794 0020 37EE677A 		fsubs	s14, s14, s15
 1795 0024 DFED1B7A 		flds	s15, .L60
 1796 0028 C7EE277A 		fdivs	s15, s14, s15
 1797 002c C7ED057A 		fsts	s15, [r7, #20]
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1798              		.loc 1 872 0
 1799 0030 BB69     		ldr	r3, [r7, #24]
 1800 0032 9B69     		ldr	r3, [r3, #24]
 1801 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 1802 0038 F8EE677A 		fuitos	s15, s15
 1803 003c C7ED047A 		fsts	s15, [r7, #16]
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1804              		.loc 1 873 0
 1805 0040 97ED047A 		flds	s14, [r7, #16]
 1806 0044 D7ED057A 		flds	s15, [r7, #20]
 1807 0048 67EE277A 		fmuls	s15, s14, s15
 1808 004c FCEEE77A 		ftouizs	s15, s15
 1809 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1810              		.loc 1 874 0
 1811 0054 BB69     		ldr	r3, [r7, #24]
 1812 0056 9A69     		ldr	r2, [r3, #24]
 1813 0058 FB69     		ldr	r3, [r7, #28]
 1814 005a 4FEA0343 		lsl	r3, r3, #16
 1815 005e 4FEA1343 		lsr	r3, r3, #16
 1816 0062 D363     		str	r3, [r2, #60]
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1817              		.loc 1 877 0
 1818 0064 BB69     		ldr	r3, [r7, #24]
 1819 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1820 006a 4FEA8303 		lsl	r3, r3, #2
 1821 006e FB60     		str	r3, [r7, #12]
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1822              		.loc 1 878 0
 1823 0070 BB69     		ldr	r3, [r7, #24]
 1824 0072 5B69     		ldr	r3, [r3, #20]
 1825 0074 BA69     		ldr	r2, [r7, #24]
 1826 0076 5269     		ldr	r2, [r2, #20]
 1827 0078 1169     		ldr	r1, [r2, #16]
 1828 007a FA68     		ldr	r2, [r7, #12]
 1829 007c 4FF00100 		mov	r0, #1
 1830 0080 00FA02F2 		lsl	r2, r0, r2
 1831 0084 0A43     		orrs	r2, r2, r1
 1832 0086 1A61     		str	r2, [r3, #16]
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1833              		.loc 1 879 0
 1834 0088 07F12407 		add	r7, r7, #36
 1835 008c BD46     		mov	sp, r7
 1836 008e 80BC     		pop	{r7}
 1837 0090 7047     		bx	lr
 1838              	.L61:
 1839 0092 00BF     		.align	2
 1840              	.L60:
 1841 0094 0000C842 		.word	1120403456
 1842              		.cfi_endproc
 1843              	.LFE129:
 1845              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1846              		.align	2
 1847              		.global	PWMSP001_SetPeriodAndCompare
 1848              		.thumb
 1849              		.thumb_func
 1851              	PWMSP001_SetPeriodAndCompare:
 1852              	.LFB130:
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1853              		.loc 1 892 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 24
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857 0000 80B5     		push	{r7, lr}
 1858              	.LCFI39:
 1859              		.cfi_def_cfa_offset 8
 1860              		.cfi_offset 7, -8
 1861              		.cfi_offset 14, -4
 1862 0002 86B0     		sub	sp, sp, #24
 1863              	.LCFI40:
 1864              		.cfi_def_cfa_offset 32
 1865 0004 00AF     		add	r7, sp, #0
 1866              	.LCFI41:
 1867              		.cfi_def_cfa_register 7
 1868 0006 F860     		str	r0, [r7, #12]
 1869 0008 B960     		str	r1, [r7, #8]
 1870 000a 7A60     		str	r2, [r7, #4]
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1871              		.loc 1 893 0
 1872 000c 4FF00103 		mov	r3, #1
 1873 0010 7B61     		str	r3, [r7, #20]
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 1874              		.loc 1 894 0
 1875 0012 4FF00003 		mov	r3, #0
 1876 0016 3B61     		str	r3, [r7, #16]
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1877              		.loc 1 896 0
 1878 0018 FB68     		ldr	r3, [r7, #12]
 1879 001a DB6B     		ldr	r3, [r3, #60]
 1880 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1881 001e 002B     		cmp	r3, #0
 1882 0020 3BD0     		beq	.L63
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1883              		.loc 1 898 0
 1884 0022 BB68     		ldr	r3, [r7, #8]
 1885 0024 002B     		cmp	r3, #0
 1886 0026 09D0     		beq	.L64
 1887              		.loc 1 898 0 is_stmt 0 discriminator 1
 1888 0028 FB68     		ldr	r3, [r7, #12]
 1889 002a DA6A     		ldr	r2, [r3, #44]
 1890 002c 7B68     		ldr	r3, [r7, #4]
 1891 002e 9A42     		cmp	r2, r3
 1892 0030 08D2     		bcs	.L65
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 1893              		.loc 1 899 0 is_stmt 1 discriminator 1
 1894 0032 FB68     		ldr	r3, [r7, #12]
 1895 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1896              		.loc 1 898 0 discriminator 1
 1897 0038 002B     		cmp	r3, #0
 1898 003a 03D1     		bne	.L65
 1899              	.L64:
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1900              		.loc 1 901 0
 1901 003c 4FF00203 		mov	r3, #2
 1902 0040 7B61     		str	r3, [r7, #20]
 1903 0042 2AE0     		b	.L63
 1904              	.L65:
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1905              		.loc 1 905 0
 1906 0044 FB68     		ldr	r3, [r7, #12]
 1907 0046 DA6A     		ldr	r2, [r3, #44]
 1908 0048 BB68     		ldr	r3, [r7, #8]
 1909 004a 9A42     		cmp	r2, r3
 1910 004c 08D2     		bcs	.L66
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 1911              		.loc 1 906 0 discriminator 1
 1912 004e FB68     		ldr	r3, [r7, #12]
 1913 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 1914              		.loc 1 905 0 discriminator 1
 1915 0054 012B     		cmp	r3, #1
 1916 0056 03D0     		beq	.L66
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1917              		.loc 1 909 0
 1918 0058 4FF00203 		mov	r3, #2
 1919 005c 7B61     		str	r3, [r7, #20]
 1920 005e 1CE0     		b	.L63
 1921              	.L66:
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 1922              		.loc 1 913 0
 1923 0060 BB68     		ldr	r3, [r7, #8]
 1924 0062 3B61     		str	r3, [r7, #16]
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1925              		.loc 1 914 0
 1926 0064 FB68     		ldr	r3, [r7, #12]
 1927 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1928 006a 012B     		cmp	r3, #1
 1929 006c 05D1     		bne	.L67
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 1930              		.loc 1 916 0
 1931 006e FB68     		ldr	r3, [r7, #12]
 1932 0070 DB69     		ldr	r3, [r3, #28]
 1933 0072 3A69     		ldr	r2, [r7, #16]
 1934 0074 4FEA1242 		lsr	r2, r2, #16
 1935 0078 5A63     		str	r2, [r3, #52]
 1936              	.L67:
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 1937              		.loc 1 919 0
 1938 007a FB68     		ldr	r3, [r7, #12]
 1939 007c 9A69     		ldr	r2, [r3, #24]
 1940 007e 3B69     		ldr	r3, [r7, #16]
 1941 0080 4FEA0343 		lsl	r3, r3, #16
 1942 0084 4FEA1343 		lsr	r3, r3, #16
 1943 0088 5363     		str	r3, [r2, #52]
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1944              		.loc 1 921 0
 1945 008a FB68     		ldr	r3, [r7, #12]
 1946 008c 1B6C     		ldr	r3, [r3, #64]
 1947 008e F868     		ldr	r0, [r7, #12]
 1948 0090 7968     		ldr	r1, [r7, #4]
 1949 0092 9847     		blx	r3
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1950              		.loc 1 922 0
 1951 0094 4FF00003 		mov	r3, #0
 1952 0098 7B61     		str	r3, [r7, #20]
 1953              	.L63:
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1954              		.loc 1 926 0
 1955 009a 7B69     		ldr	r3, [r7, #20]
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1956              		.loc 1 927 0
 1957 009c 1846     		mov	r0, r3
 1958 009e 07F11807 		add	r7, r7, #24
 1959 00a2 BD46     		mov	sp, r7
 1960 00a4 80BD     		pop	{r7, pc}
 1961              		.cfi_endproc
 1962              	.LFE130:
 1964 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 1965              		.align	2
 1966              		.global	PWMSP001_SetPeriod
 1967              		.thumb
 1968              		.thumb_func
 1970              	PWMSP001_SetPeriod:
 1971              	.LFB131:
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1972              		.loc 1 938 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 24
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 1977 0000 80B4     		push	{r7}
 1978              	.LCFI42:
 1979              		.cfi_def_cfa_offset 4
 1980              		.cfi_offset 7, -4
 1981 0002 87B0     		sub	sp, sp, #28
 1982              	.LCFI43:
 1983              		.cfi_def_cfa_offset 32
 1984 0004 00AF     		add	r7, sp, #0
 1985              	.LCFI44:
 1986              		.cfi_def_cfa_register 7
 1987 0006 7860     		str	r0, [r7, #4]
 1988 0008 3960     		str	r1, [r7, #0]
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1989              		.loc 1 939 0
 1990 000a 4FF00103 		mov	r3, #1
 1991 000e 7B61     		str	r3, [r7, #20]
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 1992              		.loc 1 940 0
 1993 0010 4FF00003 		mov	r3, #0
 1994 0014 3B61     		str	r3, [r7, #16]
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1995              		.loc 1 944 0
 1996 0016 7B68     		ldr	r3, [r7, #4]
 1997 0018 DB6B     		ldr	r3, [r3, #60]
 1998 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1999 001c 002B     		cmp	r3, #0
 2000 001e 55D0     		beq	.L70
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2001              		.loc 1 946 0
 2002 0020 3B68     		ldr	r3, [r7, #0]
 2003 0022 002B     		cmp	r3, #0
 2004 0024 03D1     		bne	.L71
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2005              		.loc 1 948 0
 2006 0026 4FF00203 		mov	r3, #2
 2007 002a 7B61     		str	r3, [r7, #20]
 2008 002c 4EE0     		b	.L70
 2009              	.L71:
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2010              		.loc 1 952 0
 2011 002e 7B68     		ldr	r3, [r7, #4]
 2012 0030 DA6A     		ldr	r2, [r3, #44]
 2013 0032 3B68     		ldr	r3, [r7, #0]
 2014 0034 9A42     		cmp	r2, r3
 2015 0036 08D2     		bcs	.L72
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2016              		.loc 1 953 0 discriminator 1
 2017 0038 7B68     		ldr	r3, [r7, #4]
 2018 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2019              		.loc 1 952 0 discriminator 1
 2020 003e 012B     		cmp	r3, #1
 2021 0040 03D0     		beq	.L72
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2022              		.loc 1 955 0
 2023 0042 4FF00203 		mov	r3, #2
 2024 0046 7B61     		str	r3, [r7, #20]
 2025 0048 40E0     		b	.L70
 2026              	.L72:
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2027              		.loc 1 959 0
 2028 004a 3B68     		ldr	r3, [r7, #0]
 2029 004c 3B61     		str	r3, [r7, #16]
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2030              		.loc 1 960 0
 2031 004e 7B68     		ldr	r3, [r7, #4]
 2032 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2033 0054 012B     		cmp	r3, #1
 2034 0056 05D1     		bne	.L73
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2035              		.loc 1 962 0
 2036 0058 7B68     		ldr	r3, [r7, #4]
 2037 005a DB69     		ldr	r3, [r3, #28]
 2038 005c 3A69     		ldr	r2, [r7, #16]
 2039 005e 4FEA1242 		lsr	r2, r2, #16
 2040 0062 5A63     		str	r2, [r3, #52]
 2041              	.L73:
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2042              		.loc 1 964 0
 2043 0064 7B68     		ldr	r3, [r7, #4]
 2044 0066 9A69     		ldr	r2, [r3, #24]
 2045 0068 3B69     		ldr	r3, [r7, #16]
 2046 006a 4FEA0343 		lsl	r3, r3, #16
 2047 006e 4FEA1343 		lsr	r3, r3, #16
 2048 0072 5363     		str	r3, [r2, #52]
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2049              		.loc 1 966 0
 2050 0074 7B68     		ldr	r3, [r7, #4]
 2051 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2052 007a 4FEA8303 		lsl	r3, r3, #2
 2053 007e FB60     		str	r3, [r7, #12]
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2054              		.loc 1 967 0
 2055 0080 7B68     		ldr	r3, [r7, #4]
 2056 0082 5B69     		ldr	r3, [r3, #20]
 2057 0084 7A68     		ldr	r2, [r7, #4]
 2058 0086 5269     		ldr	r2, [r2, #20]
 2059 0088 1169     		ldr	r1, [r2, #16]
 2060 008a FA68     		ldr	r2, [r7, #12]
 2061 008c 4FF00100 		mov	r0, #1
 2062 0090 00FA02F2 		lsl	r2, r0, r2
 2063 0094 0A43     		orrs	r2, r2, r1
 2064 0096 1A61     		str	r2, [r3, #16]
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2065              		.loc 1 968 0
 2066 0098 7B68     		ldr	r3, [r7, #4]
 2067 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2068 009e 012B     		cmp	r3, #1
 2069 00a0 11D1     		bne	.L74
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2070              		.loc 1 971 0
 2071 00a2 7B68     		ldr	r3, [r7, #4]
 2072 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2073 00a8 4FEA8303 		lsl	r3, r3, #2
 2074 00ac FB60     		str	r3, [r7, #12]
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2075              		.loc 1 972 0
 2076 00ae 7B68     		ldr	r3, [r7, #4]
 2077 00b0 5B69     		ldr	r3, [r3, #20]
 2078 00b2 7A68     		ldr	r2, [r7, #4]
 2079 00b4 5269     		ldr	r2, [r2, #20]
 2080 00b6 1169     		ldr	r1, [r2, #16]
 2081 00b8 FA68     		ldr	r2, [r7, #12]
 2082 00ba 4FF00100 		mov	r0, #1
 2083 00be 00FA02F2 		lsl	r2, r0, r2
 2084 00c2 0A43     		orrs	r2, r2, r1
 2085 00c4 1A61     		str	r2, [r3, #16]
 2086              	.L74:
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2087              		.loc 1 974 0
 2088 00c6 4FF00003 		mov	r3, #0
 2089 00ca 7B61     		str	r3, [r7, #20]
 2090              	.L70:
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2091              		.loc 1 978 0
 2092 00cc 7B69     		ldr	r3, [r7, #20]
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2093              		.loc 1 979 0
 2094 00ce 1846     		mov	r0, r3
 2095 00d0 07F11C07 		add	r7, r7, #28
 2096 00d4 BD46     		mov	sp, r7
 2097 00d6 80BC     		pop	{r7}
 2098 00d8 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE131:
 2102 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2103              		.align	2
 2104              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2105              		.thumb
 2106              		.thumb_func
 2108              	PWMSP001_SetPwmFreqAndDutyCycle:
 2109              	.LFB132:
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2110              		.loc 1 992 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 32
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0000 80B5     		push	{r7, lr}
 2115              	.LCFI45:
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 7, -8
 2118              		.cfi_offset 14, -4
 2119 0002 88B0     		sub	sp, sp, #32
 2120              	.LCFI46:
 2121              		.cfi_def_cfa_offset 40
 2122 0004 00AF     		add	r7, sp, #0
 2123              	.LCFI47:
 2124              		.cfi_def_cfa_register 7
 2125 0006 F860     		str	r0, [r7, #12]
 2126 0008 B960     		str	r1, [r7, #8]	@ float
 2127 000a 7A60     		str	r2, [r7, #4]	@ float
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2128              		.loc 1 993 0
 2129 000c 4FF00103 		mov	r3, #1
 2130 0010 FB61     		str	r3, [r7, #28]
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2131              		.loc 1 994 0
 2132 0012 4FF00003 		mov	r3, #0
 2133 0016 BB61     		str	r3, [r7, #24]
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2134              		.loc 1 997 0
 2135 0018 FB68     		ldr	r3, [r7, #12]
 2136 001a DB6B     		ldr	r3, [r3, #60]
 2137 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2138 001e 002B     		cmp	r3, #0
 2139 0020 70D0     		beq	.L77
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2140              		.loc 1 999 0
 2141 0022 D7ED027A 		flds	s15, [r7, #8]
 2142 0026 F5EE407A 		fcmpzs	s15
 2143 002a F1EE10FA 		fmstat
 2144 002e 0FD0     		beq	.L78
 2145              		.loc 1 999 0 is_stmt 0 discriminator 1
 2146 0030 97ED017A 		flds	s14, [r7, #4]
 2147 0034 DFED367A 		flds	s15, .L89
 2148 0038 B4EEE77A 		fcmpes	s14, s15
 2149 003c F1EE10FA 		fmstat
 2150 0040 06DC     		bgt	.L78
 2151 0042 D7ED017A 		flds	s15, [r7, #4]
 2152 0046 F5EEC07A 		fcmpezs	s15
 2153 004a F1EE10FA 		fmstat
 2154 004e 03D5     		bpl	.L88
 2155              	.L78:
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2156              		.loc 1 1001 0 is_stmt 1
 2157 0050 4FF00203 		mov	r3, #2
 2158 0054 FB61     		str	r3, [r7, #28]
 2159 0056 55E0     		b	.L77
 2160              	.L88:
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2161              		.loc 1 1005 0
 2162 0058 FB68     		ldr	r3, [r7, #12]
 2163 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2164 005c 7B61     		str	r3, [r7, #20]	@ float
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2165              		.loc 1 1006 0
 2166 005e 97ED057A 		flds	s14, [r7, #20]
 2167 0062 D7ED027A 		flds	s15, [r7, #8]
 2168 0066 67EE277A 		fmuls	s15, s14, s15
 2169 006a C7ED057A 		fsts	s15, [r7, #20]
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2170              		.loc 1 1007 0
 2171 006e 9FED297A 		flds	s14, .L89+4
 2172 0072 D7ED057A 		flds	s15, [r7, #20]
 2173 0076 C7EE277A 		fdivs	s15, s14, s15
 2174 007a FCEEE77A 		ftouizs	s15, s15
 2175 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2176              		.loc 1 1009 0
 2177 0082 FB68     		ldr	r3, [r7, #12]
 2178 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2179 0088 002B     		cmp	r3, #0
 2180 008a 20D1     		bne	.L81
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2181              		.loc 1 1011 0
 2182 008c BA69     		ldr	r2, [r7, #24]
 2183 008e 4FF6FF73 		movw	r3, #65535
 2184 0092 9A42     		cmp	r2, r3
 2185 0094 03D9     		bls	.L82
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2186              		.loc 1 1013 0
 2187 0096 4FF00203 		mov	r3, #2
 2188 009a FB61     		str	r3, [r7, #28]
 2189 009c 2AE0     		b	.L83
 2190              	.L82:
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2191              		.loc 1 1017 0
 2192 009e FB68     		ldr	r3, [r7, #12]
 2193 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2194 00a4 002B     		cmp	r3, #0
 2195 00a6 06D1     		bne	.L84
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2196              		.loc 1 1019 0
 2197 00a8 FB68     		ldr	r3, [r7, #12]
 2198 00aa 9B69     		ldr	r3, [r3, #24]
 2199 00ac BA69     		ldr	r2, [r7, #24]
 2200 00ae 02F1FF32 		add	r2, r2, #-1
 2201 00b2 5A63     		str	r2, [r3, #52]
 2202 00b4 07E0     		b	.L85
 2203              	.L84:
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2204              		.loc 1 1023 0
 2205 00b6 FB68     		ldr	r3, [r7, #12]
 2206 00b8 9B69     		ldr	r3, [r3, #24]
 2207 00ba BA69     		ldr	r2, [r7, #24]
 2208 00bc 02F1FF32 		add	r2, r2, #-1
 2209 00c0 4FEA5202 		lsr	r2, r2, #1
 2210 00c4 5A63     		str	r2, [r3, #52]
 2211              	.L85:
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2212              		.loc 1 1025 0
 2213 00c6 4FF00003 		mov	r3, #0
 2214 00ca FB61     		str	r3, [r7, #28]
 2215 00cc 12E0     		b	.L83
 2216              	.L81:
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2217              		.loc 1 1028 0
 2218 00ce FB68     		ldr	r3, [r7, #12]
 2219 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2220 00d4 012B     		cmp	r3, #1
 2221 00d6 08D1     		bne	.L86
 2222              		.loc 1 1028 0 is_stmt 0 discriminator 1
 2223 00d8 BA69     		ldr	r2, [r7, #24]
 2224 00da 4FF6FF73 		movw	r3, #65535
 2225 00de 9A42     		cmp	r2, r3
 2226 00e0 03D8     		bhi	.L86
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2227              		.loc 1 1031 0 is_stmt 1
 2228 00e2 4FF00203 		mov	r3, #2
 2229 00e6 FB61     		str	r3, [r7, #28]
 2230 00e8 04E0     		b	.L83
 2231              	.L86:
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2232              		.loc 1 1036 0
 2233 00ea F868     		ldr	r0, [r7, #12]
 2234 00ec B969     		ldr	r1, [r7, #24]
 2235 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2236 00f2 F861     		str	r0, [r7, #28]
 2237              	.L83:
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2238              		.loc 1 1038 0
 2239 00f4 FB69     		ldr	r3, [r7, #28]
 2240 00f6 002B     		cmp	r3, #0
 2241 00f8 04D1     		bne	.L77
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2242              		.loc 1 1041 0
 2243 00fa FB68     		ldr	r3, [r7, #12]
 2244 00fc 5B6C     		ldr	r3, [r3, #68]
 2245 00fe F868     		ldr	r0, [r7, #12]
 2246 0100 7968     		ldr	r1, [r7, #4]	@ float
 2247 0102 9847     		blx	r3
 2248              	.L77:
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2249              		.loc 1 1045 0
 2250 0104 FB69     		ldr	r3, [r7, #28]
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2251              		.loc 1 1046 0
 2252 0106 1846     		mov	r0, r3
 2253 0108 07F12007 		add	r7, r7, #32
 2254 010c BD46     		mov	sp, r7
 2255 010e 80BD     		pop	{r7, pc}
 2256              	.L90:
 2257              		.align	2
 2258              	.L89:
 2259 0110 0000C842 		.word	1120403456
 2260 0114 286B6E4E 		.word	1315859240
 2261              		.cfi_endproc
 2262              	.LFE132:
 2264              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2265              		.align	2
 2266              		.global	PWMSP001_SetPwmFreq
 2267              		.thumb
 2268              		.thumb_func
 2270              	PWMSP001_SetPwmFreq:
 2271              	.LFB133:
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2272              		.loc 1 1058 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 32
 2275              		@ frame_needed = 1, uses_anonymous_args = 0
 2276 0000 90B5     		push	{r4, r7, lr}
 2277              	.LCFI48:
 2278              		.cfi_def_cfa_offset 12
 2279              		.cfi_offset 4, -12
 2280              		.cfi_offset 7, -8
 2281              		.cfi_offset 14, -4
 2282 0002 89B0     		sub	sp, sp, #36
 2283              	.LCFI49:
 2284              		.cfi_def_cfa_offset 48
 2285 0004 00AF     		add	r7, sp, #0
 2286              	.LCFI50:
 2287              		.cfi_def_cfa_register 7
 2288 0006 7860     		str	r0, [r7, #4]
 2289 0008 3960     		str	r1, [r7, #0]	@ float
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2290              		.loc 1 1059 0
 2291 000a 4FF00103 		mov	r3, #1
 2292 000e FB61     		str	r3, [r7, #28]
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2293              		.loc 1 1060 0
 2294 0010 4FF00003 		mov	r3, #0
 2295 0014 BB61     		str	r3, [r7, #24]
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2296              		.loc 1 1065 0
 2297 0016 7B68     		ldr	r3, [r7, #4]
 2298 0018 DB6B     		ldr	r3, [r3, #60]
 2299 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2300 001c 002B     		cmp	r3, #0
 2301 001e 7DD0     		beq	.L92
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2302              		.loc 1 1067 0
 2303 0020 D7ED007A 		flds	s15, [r7, #0]
 2304 0024 F5EE407A 		fcmpzs	s15
 2305 0028 F1EE10FA 		fmstat
 2306 002c 03D1     		bne	.L93
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2307              		.loc 1 1069 0
 2308 002e 4FF00203 		mov	r3, #2
 2309 0032 FB61     		str	r3, [r7, #28]
 2310 0034 72E0     		b	.L92
 2311              	.L93:
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2312              		.loc 1 1073 0
 2313 0036 7B68     		ldr	r3, [r7, #4]
 2314 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2315 003a 7B61     		str	r3, [r7, #20]	@ float
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2316              		.loc 1 1074 0
 2317 003c 97ED057A 		flds	s14, [r7, #20]
 2318 0040 D7ED007A 		flds	s15, [r7, #0]
 2319 0044 67EE277A 		fmuls	s15, s14, s15
 2320 0048 C7ED057A 		fsts	s15, [r7, #20]
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2321              		.loc 1 1075 0
 2322 004c 9FED367A 		flds	s14, .L99
 2323 0050 D7ED057A 		flds	s15, [r7, #20]
 2324 0054 C7EE277A 		fdivs	s15, s14, s15
 2325 0058 FCEEE77A 		ftouizs	s15, s15
 2326 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2327              		.loc 1 1077 0
 2328 0060 7B68     		ldr	r3, [r7, #4]
 2329 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2330 0066 002B     		cmp	r3, #0
 2331 0068 32D1     		bne	.L94
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2332              		.loc 1 1079 0
 2333 006a BA69     		ldr	r2, [r7, #24]
 2334 006c 4FF6FF73 		movw	r3, #65535
 2335 0070 9A42     		cmp	r2, r3
 2336 0072 03D9     		bls	.L95
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2337              		.loc 1 1081 0
 2338 0074 4FF00203 		mov	r3, #2
 2339 0078 FB61     		str	r3, [r7, #28]
 2340 007a 4FE0     		b	.L92
 2341              	.L95:
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2342              		.loc 1 1085 0
 2343 007c 7B68     		ldr	r3, [r7, #4]
 2344 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2345 0082 002B     		cmp	r3, #0
 2346 0084 06D1     		bne	.L96
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2347              		.loc 1 1087 0
 2348 0086 7B68     		ldr	r3, [r7, #4]
 2349 0088 9B69     		ldr	r3, [r3, #24]
 2350 008a BA69     		ldr	r2, [r7, #24]
 2351 008c 02F1FF32 		add	r2, r2, #-1
 2352 0090 5A63     		str	r2, [r3, #52]
 2353 0092 07E0     		b	.L97
 2354              	.L96:
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2355              		.loc 1 1091 0
 2356 0094 7B68     		ldr	r3, [r7, #4]
 2357 0096 9B69     		ldr	r3, [r3, #24]
 2358 0098 BA69     		ldr	r2, [r7, #24]
 2359 009a 02F1FF32 		add	r2, r2, #-1
 2360 009e 4FEA5202 		lsr	r2, r2, #1
 2361 00a2 5A63     		str	r2, [r3, #52]
 2362              	.L97:
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2363              		.loc 1 1094 0
 2364 00a4 7B68     		ldr	r3, [r7, #4]
 2365 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2366 00aa 4FEA8303 		lsl	r3, r3, #2
 2367 00ae 3B61     		str	r3, [r7, #16]
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2368              		.loc 1 1095 0
 2369 00b0 7B68     		ldr	r3, [r7, #4]
 2370 00b2 5B69     		ldr	r3, [r3, #20]
 2371 00b4 7A68     		ldr	r2, [r7, #4]
 2372 00b6 5269     		ldr	r2, [r2, #20]
 2373 00b8 1169     		ldr	r1, [r2, #16]
 2374 00ba 3A69     		ldr	r2, [r7, #16]
 2375 00bc 4FF00100 		mov	r0, #1
 2376 00c0 00FA02F2 		lsl	r2, r0, r2
 2377 00c4 0A43     		orrs	r2, r2, r1
 2378 00c6 1A61     		str	r2, [r3, #16]
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2379              		.loc 1 1096 0
 2380 00c8 4FF00003 		mov	r3, #0
 2381 00cc FB61     		str	r3, [r7, #28]
 2382 00ce 25E0     		b	.L92
 2383              	.L94:
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2384              		.loc 1 1102 0
 2385 00d0 7868     		ldr	r0, [r7, #4]
 2386 00d2 B969     		ldr	r1, [r7, #24]
 2387 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2388 00d8 F861     		str	r0, [r7, #28]
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2389              		.loc 1 1103 0
 2390 00da FB69     		ldr	r3, [r7, #28]
 2391 00dc 002B     		cmp	r3, #0
 2392 00de 1DD1     		bne	.L92
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2393              		.loc 1 1105 0
 2394 00e0 7B68     		ldr	r3, [r7, #4]
 2395 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2396 00e6 4FEA8303 		lsl	r3, r3, #2
 2397 00ea FB60     		str	r3, [r7, #12]
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2398              		.loc 1 1106 0
 2399 00ec 7B68     		ldr	r3, [r7, #4]
 2400 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2401 00f2 4FEA8303 		lsl	r3, r3, #2
 2402 00f6 BB60     		str	r3, [r7, #8]
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2403              		.loc 1 1107 0
 2404 00f8 7B68     		ldr	r3, [r7, #4]
 2405 00fa 5B69     		ldr	r3, [r3, #20]
 2406 00fc 7A68     		ldr	r2, [r7, #4]
 2407 00fe 5269     		ldr	r2, [r2, #20]
 2408 0100 1169     		ldr	r1, [r2, #16]
 2409 0102 FA68     		ldr	r2, [r7, #12]
 2410 0104 4FF00100 		mov	r0, #1
 2411 0108 00FA02F0 		lsl	r0, r0, r2
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2412              		.loc 1 1108 0
 2413 010c BA68     		ldr	r2, [r7, #8]
 2414 010e 4FF00104 		mov	r4, #1
 2415 0112 04FA02F2 		lsl	r2, r4, r2
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2416              		.loc 1 1107 0
 2417 0116 0243     		orrs	r2, r2, r0
 2418 0118 0A43     		orrs	r2, r2, r1
 2419 011a 1A61     		str	r2, [r3, #16]
 2420              	.L92:
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2421              		.loc 1 1113 0
 2422 011c FB69     		ldr	r3, [r7, #28]
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2423              		.loc 1 1114 0
 2424 011e 1846     		mov	r0, r3
 2425 0120 07F12407 		add	r7, r7, #36
 2426 0124 BD46     		mov	sp, r7
 2427 0126 90BD     		pop	{r4, r7, pc}
 2428              	.L100:
 2429              		.align	2
 2430              	.L99:
 2431 0128 286B6E4E 		.word	1315859240
 2432              		.cfi_endproc
 2433              	.LFE133:
 2435              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2436              		.align	2
 2437              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2438              		.thumb
 2439              		.thumb_func
 2441              	PWMSP001_lSetPwmFreqTimerConcat:
 2442              	.LFB134:
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2443              		.loc 1 1124 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 32
 2446              		@ frame_needed = 1, uses_anonymous_args = 0
 2447              		@ link register save eliminated.
 2448 0000 80B4     		push	{r7}
 2449              	.LCFI51:
 2450              		.cfi_def_cfa_offset 4
 2451              		.cfi_offset 7, -4
 2452 0002 89B0     		sub	sp, sp, #36
 2453              	.LCFI52:
 2454              		.cfi_def_cfa_offset 40
 2455 0004 00AF     		add	r7, sp, #0
 2456              	.LCFI53:
 2457              		.cfi_def_cfa_register 7
 2458 0006 7860     		str	r0, [r7, #4]
 2459 0008 3960     		str	r1, [r7, #0]
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2460              		.loc 1 1125 0
 2461 000a 3B68     		ldr	r3, [r7, #0]
 2462 000c FB61     		str	r3, [r7, #28]
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2463              		.loc 1 1127 0
 2464 000e 4FF00003 		mov	r3, #0
 2465 0012 FB74     		strb	r3, [r7, #19]
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2466              		.loc 1 1128 0
 2467 0014 4FF00103 		mov	r3, #1
 2468 0018 FB60     		str	r3, [r7, #12]
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2469              		.loc 1 1130 0
 2470 001a 3B68     		ldr	r3, [r7, #0]
 2471 001c B3F1FF3F 		cmp	r3, #-1
 2472 0020 03D1     		bne	.L102
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2473              		.loc 1 1132 0
 2474 0022 4FF00203 		mov	r3, #2
 2475 0026 FB60     		str	r3, [r7, #12]
 2476 0028 41E0     		b	.L103
 2477              	.L102:
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2478              		.loc 1 1138 0
 2479 002a 3A68     		ldr	r2, [r7, #0]
 2480 002c 4FF6FF73 		movw	r3, #65535
 2481 0030 9A42     		cmp	r2, r3
 2482 0032 17D9     		bls	.L104
 2483              	.L105:
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2484              		.loc 1 1142 0 discriminator 1
 2485 0034 FB69     		ldr	r3, [r7, #28]
 2486 0036 4FEA5303 		lsr	r3, r3, #1
 2487 003a FB61     		str	r3, [r7, #28]
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2488              		.loc 1 1143 0 discriminator 1
 2489 003c FB7C     		ldrb	r3, [r7, #19]
 2490 003e 03F10103 		add	r3, r3, #1
 2491 0042 FB74     		strb	r3, [r7, #19]
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2492              		.loc 1 1144 0 discriminator 1
 2493 0044 FA69     		ldr	r2, [r7, #28]
 2494 0046 4FF6FE73 		movw	r3, #65534
 2495 004a 9A42     		cmp	r2, r3
 2496 004c F2D8     		bhi	.L105
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2497              		.loc 1 1146 0
 2498 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2499 0050 4FF00102 		mov	r2, #1
 2500 0054 02FA03F3 		lsl	r3, r2, r3
 2501 0058 03F1FF33 		add	r3, r3, #-1
 2502 005c BB61     		str	r3, [r7, #24]
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2503              		.loc 1 1147 0
 2504 005e FB69     		ldr	r3, [r7, #28]
 2505 0060 7B61     		str	r3, [r7, #20]
 2506 0062 04E0     		b	.L106
 2507              	.L104:
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2508              		.loc 1 1151 0
 2509 0064 3B68     		ldr	r3, [r7, #0]
 2510 0066 7B61     		str	r3, [r7, #20]
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2511              		.loc 1 1152 0
 2512 0068 4FF00003 		mov	r3, #0
 2513 006c BB61     		str	r3, [r7, #24]
 2514              	.L106:
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2515              		.loc 1 1156 0
 2516 006e 7B68     		ldr	r3, [r7, #4]
 2517 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2518 0074 012B     		cmp	r3, #1
 2519 0076 07D1     		bne	.L107
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2520              		.loc 1 1158 0
 2521 0078 BB69     		ldr	r3, [r7, #24]
 2522 007a 4FEA5303 		lsr	r3, r3, #1
 2523 007e BB61     		str	r3, [r7, #24]
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2524              		.loc 1 1159 0
 2525 0080 7B69     		ldr	r3, [r7, #20]
 2526 0082 4FEA5303 		lsr	r3, r3, #1
 2527 0086 7B61     		str	r3, [r7, #20]
 2528              	.L107:
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2529              		.loc 1 1162 0
 2530 0088 7B68     		ldr	r3, [r7, #4]
 2531 008a 9A69     		ldr	r2, [r3, #24]
 2532 008c 7B69     		ldr	r3, [r7, #20]
 2533 008e 4FEA0343 		lsl	r3, r3, #16
 2534 0092 4FEA1343 		lsr	r3, r3, #16
 2535 0096 5363     		str	r3, [r2, #52]
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2536              		.loc 1 1163 0
 2537 0098 7B68     		ldr	r3, [r7, #4]
 2538 009a DA69     		ldr	r2, [r3, #28]
 2539 009c BB69     		ldr	r3, [r7, #24]
 2540 009e 4FEA0343 		lsl	r3, r3, #16
 2541 00a2 4FEA1343 		lsr	r3, r3, #16
 2542 00a6 5363     		str	r3, [r2, #52]
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2543              		.loc 1 1166 0
 2544 00a8 4FF00003 		mov	r3, #0
 2545 00ac FB60     		str	r3, [r7, #12]
 2546              	.L103:
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2547              		.loc 1 1168 0
 2548 00ae FB68     		ldr	r3, [r7, #12]
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2549              		.loc 1 1169 0
 2550 00b0 1846     		mov	r0, r3
 2551 00b2 07F12407 		add	r7, r7, #36
 2552 00b6 BD46     		mov	sp, r7
 2553 00b8 80BC     		pop	{r7}
 2554 00ba 7047     		bx	lr
 2555              		.cfi_endproc
 2556              	.LFE134:
 2558              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2559              		.align	2
 2560              		.global	PWMSP001_SetTimerVal
 2561              		.thumb
 2562              		.thumb_func
 2564              	PWMSP001_SetTimerVal:
 2565              	.LFB135:
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2566              		.loc 1 1182 0
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 16
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570              		@ link register save eliminated.
 2571 0000 80B4     		push	{r7}
 2572              	.LCFI54:
 2573              		.cfi_def_cfa_offset 4
 2574              		.cfi_offset 7, -4
 2575 0002 85B0     		sub	sp, sp, #20
 2576              	.LCFI55:
 2577              		.cfi_def_cfa_offset 24
 2578 0004 00AF     		add	r7, sp, #0
 2579              	.LCFI56:
 2580              		.cfi_def_cfa_register 7
 2581 0006 7860     		str	r0, [r7, #4]
 2582 0008 3960     		str	r1, [r7, #0]
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2583              		.loc 1 1183 0
 2584 000a 4FF00103 		mov	r3, #1
 2585 000e FB60     		str	r3, [r7, #12]
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2586              		.loc 1 1185 0
 2587 0010 7B68     		ldr	r3, [r7, #4]
 2588 0012 DB6B     		ldr	r3, [r3, #60]
 2589 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2590 0016 012B     		cmp	r3, #1
 2591 0018 04D0     		beq	.L110
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2592              		.loc 1 1186 0 discriminator 1
 2593 001a 7B68     		ldr	r3, [r7, #4]
 2594 001c DB6B     		ldr	r3, [r3, #60]
 2595 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2596              		.loc 1 1185 0 discriminator 1
 2597 0020 032B     		cmp	r3, #3
 2598 0022 15D1     		bne	.L111
 2599              	.L110:
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2600              		.loc 1 1193 0
 2601 0024 7B68     		ldr	r3, [r7, #4]
 2602 0026 9A69     		ldr	r2, [r3, #24]
 2603 0028 3B68     		ldr	r3, [r7, #0]
 2604 002a 4FEA0343 		lsl	r3, r3, #16
 2605 002e 4FEA1343 		lsr	r3, r3, #16
 2606 0032 1367     		str	r3, [r2, #112]
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2607              		.loc 1 1194 0
 2608 0034 7B68     		ldr	r3, [r7, #4]
 2609 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2610 003a 012B     		cmp	r3, #1
 2611 003c 05D1     		bne	.L112
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2612              		.loc 1 1196 0
 2613 003e 7B68     		ldr	r3, [r7, #4]
 2614 0040 DB69     		ldr	r3, [r3, #28]
 2615 0042 3A68     		ldr	r2, [r7, #0]
 2616 0044 4FEA1242 		lsr	r2, r2, #16
 2617 0048 1A67     		str	r2, [r3, #112]
 2618              	.L112:
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2619              		.loc 1 1198 0
 2620 004a 4FF00003 		mov	r3, #0
 2621 004e FB60     		str	r3, [r7, #12]
 2622              	.L111:
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2623              		.loc 1 1200 0
 2624 0050 FB68     		ldr	r3, [r7, #12]
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2625              		.loc 1 1201 0
 2626 0052 1846     		mov	r0, r3
 2627 0054 07F11407 		add	r7, r7, #20
 2628 0058 BD46     		mov	sp, r7
 2629 005a 80BC     		pop	{r7}
 2630 005c 7047     		bx	lr
 2631              		.cfi_endproc
 2632              	.LFE135:
 2634 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2635              		.align	2
 2636              		.global	PWMSP001_GetTimerStatus
 2637              		.thumb
 2638              		.thumb_func
 2640              	PWMSP001_GetTimerStatus:
 2641              	.LFB136:
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2642              		.loc 1 1212 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 16
 2645              		@ frame_needed = 1, uses_anonymous_args = 0
 2646              		@ link register save eliminated.
 2647 0000 80B4     		push	{r7}
 2648              	.LCFI57:
 2649              		.cfi_def_cfa_offset 4
 2650              		.cfi_offset 7, -4
 2651 0002 85B0     		sub	sp, sp, #20
 2652              	.LCFI58:
 2653              		.cfi_def_cfa_offset 24
 2654 0004 00AF     		add	r7, sp, #0
 2655              	.LCFI59:
 2656              		.cfi_def_cfa_register 7
 2657 0006 7860     		str	r0, [r7, #4]
 2658 0008 3960     		str	r1, [r7, #0]
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2659              		.loc 1 1213 0
 2660 000a 4FF00103 		mov	r3, #1
 2661 000e FB60     		str	r3, [r7, #12]
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2662              		.loc 1 1214 0
 2663 0010 4FF00003 		mov	r3, #0
 2664 0014 BB60     		str	r3, [r7, #8]
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2665              		.loc 1 1216 0
 2666 0016 7B68     		ldr	r3, [r7, #4]
 2667 0018 DB6B     		ldr	r3, [r3, #60]
 2668 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2669 001c 002B     		cmp	r3, #0
 2670 001e 1ED0     		beq	.L115
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2671              		.loc 1 1223 0
 2672 0020 7B68     		ldr	r3, [r7, #4]
 2673 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2674 0026 012B     		cmp	r3, #1
 2675 0028 0FD1     		bne	.L116
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2676              		.loc 1 1225 0
 2677 002a 7B68     		ldr	r3, [r7, #4]
 2678 002c DB69     		ldr	r3, [r3, #28]
 2679 002e 9B68     		ldr	r3, [r3, #8]
 2680 0030 03F00103 		and	r3, r3, #1
 2681 0034 BB60     		str	r3, [r7, #8]
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2682              		.loc 1 1227 0
 2683 0036 7B68     		ldr	r3, [r7, #4]
 2684 0038 9B69     		ldr	r3, [r3, #24]
 2685 003a 9A68     		ldr	r2, [r3, #8]
 2686 003c BB68     		ldr	r3, [r7, #8]
 2687 003e 1340     		ands	r3, r3, r2
 2688 0040 03F00102 		and	r2, r3, #1
 2689 0044 3B68     		ldr	r3, [r7, #0]
 2690 0046 1A60     		str	r2, [r3, #0]
 2691 0048 06E0     		b	.L117
 2692              	.L116:
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2693              		.loc 1 1234 0
 2694 004a 7B68     		ldr	r3, [r7, #4]
 2695 004c 9B69     		ldr	r3, [r3, #24]
 2696 004e 9B68     		ldr	r3, [r3, #8]
 2697 0050 03F00102 		and	r2, r3, #1
 2698 0054 3B68     		ldr	r3, [r7, #0]
 2699 0056 1A60     		str	r2, [r3, #0]
 2700              	.L117:
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2701              		.loc 1 1237 0
 2702 0058 4FF00003 		mov	r3, #0
 2703 005c FB60     		str	r3, [r7, #12]
 2704              	.L115:
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2705              		.loc 1 1239 0
 2706 005e FB68     		ldr	r3, [r7, #12]
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2707              		.loc 1 1240 0
 2708 0060 1846     		mov	r0, r3
 2709 0062 07F11407 		add	r7, r7, #20
 2710 0066 BD46     		mov	sp, r7
 2711 0068 80BC     		pop	{r7}
 2712 006a 7047     		bx	lr
 2713              		.cfi_endproc
 2714              	.LFE136:
 2716              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2717              		.align	2
 2718              		.global	PWMSP001_GetTimerRegsVal
 2719              		.thumb
 2720              		.thumb_func
 2722              	PWMSP001_GetTimerRegsVal:
 2723              	.LFB137:
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2724              		.loc 1 1251 0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 16
 2727              		@ frame_needed = 1, uses_anonymous_args = 0
 2728              		@ link register save eliminated.
 2729 0000 80B4     		push	{r7}
 2730              	.LCFI60:
 2731              		.cfi_def_cfa_offset 4
 2732              		.cfi_offset 7, -4
 2733 0002 85B0     		sub	sp, sp, #20
 2734              	.LCFI61:
 2735              		.cfi_def_cfa_offset 24
 2736 0004 00AF     		add	r7, sp, #0
 2737              	.LCFI62:
 2738              		.cfi_def_cfa_register 7
 2739 0006 7860     		str	r0, [r7, #4]
 2740 0008 3960     		str	r1, [r7, #0]
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2741              		.loc 1 1252 0
 2742 000a 4FF00103 		mov	r3, #1
 2743 000e FB60     		str	r3, [r7, #12]
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2744              		.loc 1 1253 0
 2745 0010 4FF00003 		mov	r3, #0
 2746 0014 BB60     		str	r3, [r7, #8]
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2747              		.loc 1 1256 0
 2748 0016 7B68     		ldr	r3, [r7, #4]
 2749 0018 DB6B     		ldr	r3, [r3, #60]
 2750 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2751 001c 002B     		cmp	r3, #0
 2752 001e 5ED0     		beq	.L120
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2753              		.loc 1 1263 0
 2754 0020 7B68     		ldr	r3, [r7, #4]
 2755 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2756 0026 012B     		cmp	r3, #1
 2757 0028 43D1     		bne	.L121
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2758              		.loc 1 1265 0
 2759 002a 7B68     		ldr	r3, [r7, #4]
 2760 002c DB69     		ldr	r3, [r3, #28]
 2761 002e 1B6F     		ldr	r3, [r3, #112]
 2762 0030 4FEA0343 		lsl	r3, r3, #16
 2763 0034 BB60     		str	r3, [r7, #8]
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2764              		.loc 1 1269 0
 2765 0036 7B68     		ldr	r3, [r7, #4]
 2766 0038 9B69     		ldr	r3, [r3, #24]
 2767 003a 1B6F     		ldr	r3, [r3, #112]
 2768 003c 4FEA0343 		lsl	r3, r3, #16
 2769 0040 4FEA1343 		lsr	r3, r3, #16
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2770              		.loc 1 1268 0
 2771 0044 BA68     		ldr	r2, [r7, #8]
 2772 0046 1A43     		orrs	r2, r2, r3
 2773 0048 3B68     		ldr	r3, [r7, #0]
 2774 004a 9A60     		str	r2, [r3, #8]
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2775              		.loc 1 1272 0
 2776 004c 7B68     		ldr	r3, [r7, #4]
 2777 004e DB69     		ldr	r3, [r3, #28]
 2778 0050 DA6B     		ldr	r2, [r3, #60]
 2779 0052 3B68     		ldr	r3, [r7, #0]
 2780 0054 1A60     		str	r2, [r3, #0]
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2781              		.loc 1 1273 0
 2782 0056 3B68     		ldr	r3, [r7, #0]
 2783 0058 1B68     		ldr	r3, [r3, #0]
 2784 005a 7A68     		ldr	r2, [r7, #4]
 2785 005c 9269     		ldr	r2, [r2, #24]
 2786 005e 526B     		ldr	r2, [r2, #52]
 2787 0060 02FB03F2 		mul	r2, r2, r3
 2788 0064 3B68     		ldr	r3, [r7, #0]
 2789 0066 1A60     		str	r2, [r3, #0]
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2790              		.loc 1 1274 0
 2791 0068 3B68     		ldr	r3, [r7, #0]
 2792 006a 1A68     		ldr	r2, [r3, #0]
 2793 006c 7B68     		ldr	r3, [r7, #4]
 2794 006e 9B69     		ldr	r3, [r3, #24]
 2795 0070 DB6B     		ldr	r3, [r3, #60]
 2796 0072 D218     		adds	r2, r2, r3
 2797 0074 3B68     		ldr	r3, [r7, #0]
 2798 0076 1A60     		str	r2, [r3, #0]
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2799              		.loc 1 1275 0
 2800 0078 7B68     		ldr	r3, [r7, #4]
 2801 007a DB69     		ldr	r3, [r3, #28]
 2802 007c 5B6B     		ldr	r3, [r3, #52]
 2803 007e 03F10102 		add	r2, r3, #1
 2804 0082 3B68     		ldr	r3, [r7, #0]
 2805 0084 5A60     		str	r2, [r3, #4]
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2806              		.loc 1 1276 0
 2807 0086 3B68     		ldr	r3, [r7, #0]
 2808 0088 5A68     		ldr	r2, [r3, #4]
 2809 008a 7B68     		ldr	r3, [r7, #4]
 2810 008c 9B69     		ldr	r3, [r3, #24]
 2811 008e 5B6B     		ldr	r3, [r3, #52]
 2812 0090 4FEA0343 		lsl	r3, r3, #16
 2813 0094 4FEA1343 		lsr	r3, r3, #16
 2814 0098 03F10103 		add	r3, r3, #1
 2815 009c 03FB02F2 		mul	r2, r3, r2
 2816 00a0 3B68     		ldr	r3, [r7, #0]
 2817 00a2 5A60     		str	r2, [r3, #4]
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2818              		.loc 1 1277 0
 2819 00a4 3B68     		ldr	r3, [r7, #0]
 2820 00a6 5B68     		ldr	r3, [r3, #4]
 2821 00a8 03F10102 		add	r2, r3, #1
 2822 00ac 3B68     		ldr	r3, [r7, #0]
 2823 00ae 5A60     		str	r2, [r3, #4]
 2824 00b0 12E0     		b	.L122
 2825              	.L121:
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2826              		.loc 1 1282 0
 2827 00b2 7B68     		ldr	r3, [r7, #4]
 2828 00b4 9B69     		ldr	r3, [r3, #24]
 2829 00b6 1B6F     		ldr	r3, [r3, #112]
 2830 00b8 4FEA0343 		lsl	r3, r3, #16
 2831 00bc 4FEA1343 		lsr	r3, r3, #16
 2832 00c0 3A68     		ldr	r2, [r7, #0]
 2833 00c2 9360     		str	r3, [r2, #8]
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 2834              		.loc 1 1285 0
 2835 00c4 7B68     		ldr	r3, [r7, #4]
 2836 00c6 9B69     		ldr	r3, [r3, #24]
 2837 00c8 DA6B     		ldr	r2, [r3, #60]
 2838 00ca 3B68     		ldr	r3, [r7, #0]
 2839 00cc 1A60     		str	r2, [r3, #0]
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2840              		.loc 1 1286 0
 2841 00ce 7B68     		ldr	r3, [r7, #4]
 2842 00d0 9B69     		ldr	r3, [r3, #24]
 2843 00d2 5A6B     		ldr	r2, [r3, #52]
 2844 00d4 3B68     		ldr	r3, [r7, #0]
 2845 00d6 5A60     		str	r2, [r3, #4]
 2846              	.L122:
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2847              		.loc 1 1289 0
 2848 00d8 4FF00003 		mov	r3, #0
 2849 00dc FB60     		str	r3, [r7, #12]
 2850              	.L120:
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2851              		.loc 1 1291 0
 2852 00de FB68     		ldr	r3, [r7, #12]
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2853              		.loc 1 1292 0
 2854 00e0 1846     		mov	r0, r3
 2855 00e2 07F11407 		add	r7, r7, #20
 2856 00e6 BD46     		mov	sp, r7
 2857 00e8 80BC     		pop	{r7}
 2858 00ea 7047     		bx	lr
 2859              		.cfi_endproc
 2860              	.LFE137:
 2862              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 2863              		.align	2
 2864              		.global	PWMSP001_GetPeriodReg
 2865              		.thumb
 2866              		.thumb_func
 2868              	PWMSP001_GetPeriodReg:
 2869              	.LFB138:
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2870              		.loc 1 1303 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 16
 2873              		@ frame_needed = 1, uses_anonymous_args = 0
 2874              		@ link register save eliminated.
 2875 0000 80B4     		push	{r7}
 2876              	.LCFI63:
 2877              		.cfi_def_cfa_offset 4
 2878              		.cfi_offset 7, -4
 2879 0002 85B0     		sub	sp, sp, #20
 2880              	.LCFI64:
 2881              		.cfi_def_cfa_offset 24
 2882 0004 00AF     		add	r7, sp, #0
 2883              	.LCFI65:
 2884              		.cfi_def_cfa_register 7
 2885 0006 7860     		str	r0, [r7, #4]
 2886 0008 3960     		str	r1, [r7, #0]
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2887              		.loc 1 1304 0
 2888 000a 4FF00103 		mov	r3, #1
 2889 000e FB60     		str	r3, [r7, #12]
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2890              		.loc 1 1307 0
 2891 0010 7B68     		ldr	r3, [r7, #4]
 2892 0012 DB6B     		ldr	r3, [r3, #60]
 2893 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2894 0016 002B     		cmp	r3, #0
 2895 0018 29D0     		beq	.L125
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2896              		.loc 1 1313 0
 2897 001a 7B68     		ldr	r3, [r7, #4]
 2898 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2899 0020 012B     		cmp	r3, #1
 2900 0022 1CD1     		bne	.L126
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 2901              		.loc 1 1315 0
 2902 0024 7B68     		ldr	r3, [r7, #4]
 2903 0026 DB69     		ldr	r3, [r3, #28]
 2904 0028 5B6B     		ldr	r3, [r3, #52]
 2905 002a 03F10102 		add	r2, r3, #1
 2906 002e 3B68     		ldr	r3, [r7, #0]
 2907 0030 1A60     		str	r2, [r3, #0]
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2908              		.loc 1 1316 0
 2909 0032 3B68     		ldr	r3, [r7, #0]
 2910 0034 1A68     		ldr	r2, [r3, #0]
 2911 0036 7B68     		ldr	r3, [r7, #4]
 2912 0038 9B69     		ldr	r3, [r3, #24]
 2913 003a 5B6B     		ldr	r3, [r3, #52]
 2914 003c 4FEA0343 		lsl	r3, r3, #16
 2915 0040 4FEA1343 		lsr	r3, r3, #16
 2916 0044 03F10103 		add	r3, r3, #1
 2917 0048 03FB02F2 		mul	r2, r3, r2
 2918 004c 3B68     		ldr	r3, [r7, #0]
 2919 004e 1A60     		str	r2, [r3, #0]
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 2920              		.loc 1 1317 0
 2921 0050 3B68     		ldr	r3, [r7, #0]
 2922 0052 1B68     		ldr	r3, [r3, #0]
 2923 0054 03F10102 		add	r2, r3, #1
 2924 0058 3B68     		ldr	r3, [r7, #0]
 2925 005a 1A60     		str	r2, [r3, #0]
 2926 005c 04E0     		b	.L127
 2927              	.L126:
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2928              		.loc 1 1321 0
 2929 005e 7B68     		ldr	r3, [r7, #4]
 2930 0060 9B69     		ldr	r3, [r3, #24]
 2931 0062 5A6B     		ldr	r2, [r3, #52]
 2932 0064 3B68     		ldr	r3, [r7, #0]
 2933 0066 1A60     		str	r2, [r3, #0]
 2934              	.L127:
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2935              		.loc 1 1323 0
 2936 0068 4FF00003 		mov	r3, #0
 2937 006c FB60     		str	r3, [r7, #12]
 2938              	.L125:
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2939              		.loc 1 1325 0
 2940 006e FB68     		ldr	r3, [r7, #12]
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2941              		.loc 1 1326 0
 2942 0070 1846     		mov	r0, r3
 2943 0072 07F11407 		add	r7, r7, #20
 2944 0076 BD46     		mov	sp, r7
 2945 0078 80BC     		pop	{r7}
 2946 007a 7047     		bx	lr
 2947              		.cfi_endproc
 2948              	.LFE138:
 2950              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 2951              		.align	2
 2952              		.global	PWMSP001_SWRequestShadowTransfer
 2953              		.thumb
 2954              		.thumb_func
 2956              	PWMSP001_SWRequestShadowTransfer:
 2957              	.LFB139:
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2958              		.loc 1 1336 0
 2959              		.cfi_startproc
 2960              		@ args = 0, pretend = 0, frame = 24
 2961              		@ frame_needed = 1, uses_anonymous_args = 0
 2962              		@ link register save eliminated.
 2963 0000 90B4     		push	{r4, r7}
 2964              	.LCFI66:
 2965              		.cfi_def_cfa_offset 8
 2966              		.cfi_offset 4, -8
 2967              		.cfi_offset 7, -4
 2968 0002 86B0     		sub	sp, sp, #24
 2969              	.LCFI67:
 2970              		.cfi_def_cfa_offset 32
 2971 0004 00AF     		add	r7, sp, #0
 2972              	.LCFI68:
 2973              		.cfi_def_cfa_register 7
 2974 0006 7860     		str	r0, [r7, #4]
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2975              		.loc 1 1337 0
 2976 0008 4FF00103 		mov	r3, #1
 2977 000c 7B61     		str	r3, [r7, #20]
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2978              		.loc 1 1343 0
 2979 000e 7B68     		ldr	r3, [r7, #4]
 2980 0010 DB6B     		ldr	r3, [r3, #60]
 2981 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2982 0014 002B     		cmp	r3, #0
 2983 0016 38D0     		beq	.L130
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2984              		.loc 1 1351 0
 2985 0018 7B68     		ldr	r3, [r7, #4]
 2986 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2987 001e 012B     		cmp	r3, #1
 2988 0020 1ED1     		bne	.L131
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2989              		.loc 1 1354 0
 2990 0022 7B68     		ldr	r3, [r7, #4]
 2991 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2992 0028 4FEA8303 		lsl	r3, r3, #2
 2993 002c 3B61     		str	r3, [r7, #16]
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 2994              		.loc 1 1355 0
 2995 002e 7B68     		ldr	r3, [r7, #4]
 2996 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2997 0034 4FEA8303 		lsl	r3, r3, #2
 2998 0038 FB60     		str	r3, [r7, #12]
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 2999              		.loc 1 1356 0
 3000 003a 7B68     		ldr	r3, [r7, #4]
 3001 003c 5B69     		ldr	r3, [r3, #20]
 3002 003e 7A68     		ldr	r2, [r7, #4]
 3003 0040 5269     		ldr	r2, [r2, #20]
 3004 0042 1169     		ldr	r1, [r2, #16]
 3005 0044 3A69     		ldr	r2, [r7, #16]
 3006 0046 4FF00100 		mov	r0, #1
 3007 004a 00FA02F0 		lsl	r0, r0, r2
 3008 004e FA68     		ldr	r2, [r7, #12]
 3009 0050 4FF00104 		mov	r4, #1
 3010 0054 04FA02F2 		lsl	r2, r4, r2
 3011 0058 0243     		orrs	r2, r2, r0
 3012 005a 0A43     		orrs	r2, r2, r1
 3013 005c 1A61     		str	r2, [r3, #16]
 3014 005e 11E0     		b	.L132
 3015              	.L131:
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3016              		.loc 1 1360 0
 3017 0060 7B68     		ldr	r3, [r7, #4]
 3018 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3019 0066 4FEA8303 		lsl	r3, r3, #2
 3020 006a BB60     		str	r3, [r7, #8]
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3021              		.loc 1 1361 0
 3022 006c 7B68     		ldr	r3, [r7, #4]
 3023 006e 5B69     		ldr	r3, [r3, #20]
 3024 0070 7A68     		ldr	r2, [r7, #4]
 3025 0072 5269     		ldr	r2, [r2, #20]
 3026 0074 1169     		ldr	r1, [r2, #16]
 3027 0076 BA68     		ldr	r2, [r7, #8]
 3028 0078 4FF00100 		mov	r0, #1
 3029 007c 00FA02F2 		lsl	r2, r0, r2
 3030 0080 0A43     		orrs	r2, r2, r1
 3031 0082 1A61     		str	r2, [r3, #16]
 3032              	.L132:
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3033              		.loc 1 1363 0
 3034 0084 4FF00003 		mov	r3, #0
 3035 0088 7B61     		str	r3, [r7, #20]
 3036              	.L130:
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3037              		.loc 1 1365 0
 3038 008a 7B69     		ldr	r3, [r7, #20]
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3039              		.loc 1 1366 0
 3040 008c 1846     		mov	r0, r3
 3041 008e 07F11807 		add	r7, r7, #24
 3042 0092 BD46     		mov	sp, r7
 3043 0094 90BC     		pop	{r4, r7}
 3044 0096 7047     		bx	lr
 3045              		.cfi_endproc
 3046              	.LFE139:
 3048              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3049              		.align	2
 3050              		.global	PWMSP001_ResetTrapFlag
 3051              		.thumb
 3052              		.thumb_func
 3054              	PWMSP001_ResetTrapFlag:
 3055              	.LFB140:
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3056              		.loc 1 1373 0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 8
 3059              		@ frame_needed = 1, uses_anonymous_args = 0
 3060              		@ link register save eliminated.
 3061 0000 80B4     		push	{r7}
 3062              	.LCFI69:
 3063              		.cfi_def_cfa_offset 4
 3064              		.cfi_offset 7, -4
 3065 0002 83B0     		sub	sp, sp, #12
 3066              	.LCFI70:
 3067              		.cfi_def_cfa_offset 16
 3068 0004 00AF     		add	r7, sp, #0
 3069              	.LCFI71:
 3070              		.cfi_def_cfa_register 7
 3071 0006 7860     		str	r0, [r7, #4]
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3072              		.loc 1 1374 0
 3073 0008 7B68     		ldr	r3, [r7, #4]
 3074 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3075 000c 012B     		cmp	r3, #1
 3076 000e 18D1     		bne	.L135
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3077              		.loc 1 1376 0
 3078 0010 7B68     		ldr	r3, [r7, #4]
 3079 0012 9B69     		ldr	r3, [r3, #24]
 3080 0014 7A68     		ldr	r2, [r7, #4]
 3081 0016 9269     		ldr	r2, [r2, #24]
 3082 0018 D2F8B020 		ldr	r2, [r2, #176]
 3083 001c 42F48062 		orr	r2, r2, #1024
 3084 0020 C3F8B020 		str	r2, [r3, #176]
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3085              		.loc 1 1377 0
 3086 0024 7B68     		ldr	r3, [r7, #4]
 3087 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3088 002a 012B     		cmp	r3, #1
 3089 002c 09D1     		bne	.L135
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3090              		.loc 1 1379 0
 3091 002e 7B68     		ldr	r3, [r7, #4]
 3092 0030 DB69     		ldr	r3, [r3, #28]
 3093 0032 7A68     		ldr	r2, [r7, #4]
 3094 0034 D269     		ldr	r2, [r2, #28]
 3095 0036 D2F8B020 		ldr	r2, [r2, #176]
 3096 003a 42F48062 		orr	r2, r2, #1024
 3097 003e C3F8B020 		str	r2, [r3, #176]
 3098              	.L135:
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3099              		.loc 1 1382 0
 3100 0042 7B68     		ldr	r3, [r7, #4]
 3101 0044 9B69     		ldr	r3, [r3, #24]
 3102 0046 7A68     		ldr	r2, [r7, #4]
 3103 0048 9269     		ldr	r2, [r2, #24]
 3104 004a D2F8B020 		ldr	r2, [r2, #176]
 3105 004e 42F40062 		orr	r2, r2, #2048
 3106 0052 C3F8B020 		str	r2, [r3, #176]
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3107              		.loc 1 1383 0
 3108 0056 7B68     		ldr	r3, [r7, #4]
 3109 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3110 005c 012B     		cmp	r3, #1
 3111 005e 09D1     		bne	.L134
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3112              		.loc 1 1385 0
 3113 0060 7B68     		ldr	r3, [r7, #4]
 3114 0062 DB69     		ldr	r3, [r3, #28]
 3115 0064 7A68     		ldr	r2, [r7, #4]
 3116 0066 D269     		ldr	r2, [r2, #28]
 3117 0068 D2F8B020 		ldr	r2, [r2, #176]
 3118 006c 42F40062 		orr	r2, r2, #2048
 3119 0070 C3F8B020 		str	r2, [r3, #176]
 3120              	.L134:
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3121              		.loc 1 1387 0
 3122 0074 07F10C07 		add	r7, r7, #12
 3123 0078 BD46     		mov	sp, r7
 3124 007a 80BC     		pop	{r7}
 3125 007c 7047     		bx	lr
 3126              		.cfi_endproc
 3127              	.LFE140:
 3129 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3130              		.align	2
 3131              		.global	PWMSP001_lConfigureSecondSlice
 3132              		.thumb
 3133              		.thumb_func
 3135              	PWMSP001_lConfigureSecondSlice:
 3136              	.LFB141:
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3137              		.loc 1 1395 0
 3138              		.cfi_startproc
 3139              		@ args = 0, pretend = 0, frame = 8
 3140              		@ frame_needed = 1, uses_anonymous_args = 0
 3141              		@ link register save eliminated.
 3142 0000 90B4     		push	{r4, r7}
 3143              	.LCFI72:
 3144              		.cfi_def_cfa_offset 8
 3145              		.cfi_offset 4, -8
 3146              		.cfi_offset 7, -4
 3147 0002 82B0     		sub	sp, sp, #8
 3148              	.LCFI73:
 3149              		.cfi_def_cfa_offset 16
 3150 0004 00AF     		add	r7, sp, #0
 3151              	.LCFI74:
 3152              		.cfi_def_cfa_register 7
 3153 0006 7860     		str	r0, [r7, #4]
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3154              		.loc 1 1396 0
 3155 0008 7B68     		ldr	r3, [r7, #4]
 3156 000a DB69     		ldr	r3, [r3, #28]
 3157 000c 4FF00702 		mov	r2, #7
 3158 0010 1A61     		str	r2, [r3, #16]
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3159              		.loc 1 1399 0
 3160 0012 7B68     		ldr	r3, [r7, #4]
 3161 0014 DB69     		ldr	r3, [r3, #28]
 3162 0016 7A68     		ldr	r2, [r7, #4]
 3163 0018 926A     		ldr	r2, [r2, #40]
 3164 001a 4FEA1242 		lsr	r2, r2, #16
 3165 001e 5A63     		str	r2, [r3, #52]
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3166              		.loc 1 1401 0
 3167 0020 7B68     		ldr	r3, [r7, #4]
 3168 0022 DB69     		ldr	r3, [r3, #28]
 3169 0024 7A68     		ldr	r2, [r7, #4]
 3170 0026 9268     		ldr	r2, [r2, #8]
 3171 0028 4FEA1242 		lsr	r2, r2, #16
 3172 002c DA63     		str	r2, [r3, #60]
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3173              		.loc 1 1404 0
 3174 002e 7B68     		ldr	r3, [r7, #4]
 3175 0030 DB69     		ldr	r3, [r3, #28]
 3176 0032 7A68     		ldr	r2, [r7, #4]
 3177 0034 D269     		ldr	r2, [r2, #28]
 3178 0036 5268     		ldr	r2, [r2, #4]
 3179 0038 42F48012 		orr	r2, r2, #1048576
 3180 003c 5A60     		str	r2, [r3, #4]
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3181              		.loc 1 1407 0
 3182 003e 7B68     		ldr	r3, [r7, #4]
 3183 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3184 0042 012B     		cmp	r3, #1
 3185 0044 27D1     		bne	.L138
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3186              		.loc 1 1409 0
 3187 0046 7B68     		ldr	r3, [r7, #4]
 3188 0048 DA69     		ldr	r2, [r3, #28]
 3189 004a 7B68     		ldr	r3, [r7, #4]
 3190 004c DB69     		ldr	r3, [r3, #28]
 3191 004e 1B68     		ldr	r3, [r3, #0]
 3192 0050 23F0C053 		bic	r3, r3, #402653184
 3193 0054 23F44023 		bic	r3, r3, #786432
 3194 0058 1360     		str	r3, [r2, #0]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3195              		.loc 1 1410 0
 3196 005a 7B68     		ldr	r3, [r7, #4]
 3197 005c DB69     		ldr	r3, [r3, #28]
 3198 005e 7A68     		ldr	r2, [r7, #4]
 3199 0060 D269     		ldr	r2, [r2, #28]
 3200 0062 5268     		ldr	r2, [r2, #4]
 3201 0064 22F00C02 		bic	r2, r2, #12
 3202 0068 5A60     		str	r2, [r3, #4]
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3203              		.loc 1 1411 0
 3204 006a 7B68     		ldr	r3, [r7, #4]
 3205 006c DB69     		ldr	r3, [r3, #28]
 3206 006e 7A68     		ldr	r2, [r7, #4]
 3207 0070 D269     		ldr	r2, [r2, #28]
 3208 0072 1168     		ldr	r1, [r2, #0]
 3209 0074 7A68     		ldr	r2, [r7, #4]
 3210 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3211 007a 4FEA8242 		lsl	r2, r2, #18
 3212 007e 02F44022 		and	r2, r2, #786432
 3213 0082 0A43     		orrs	r2, r2, r1
 3214 0084 1A60     		str	r2, [r3, #0]
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3215              		.loc 1 1415 0
 3216 0086 7B68     		ldr	r3, [r7, #4]
 3217 0088 DB69     		ldr	r3, [r3, #28]
 3218 008a 7A68     		ldr	r2, [r7, #4]
 3219 008c D269     		ldr	r2, [r2, #28]
 3220 008e 5268     		ldr	r2, [r2, #4]
 3221 0090 42F00802 		orr	r2, r2, #8
 3222 0094 5A60     		str	r2, [r3, #4]
 3223              	.L138:
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3224              		.loc 1 1420 0
 3225 0096 7B68     		ldr	r3, [r7, #4]
 3226 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3227 009a 012B     		cmp	r3, #1
 3228 009c 26D1     		bne	.L139
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3229              		.loc 1 1422 0
 3230 009e 7B68     		ldr	r3, [r7, #4]
 3231 00a0 DA69     		ldr	r2, [r3, #28]
 3232 00a2 7B68     		ldr	r3, [r7, #4]
 3233 00a4 DB69     		ldr	r3, [r3, #28]
 3234 00a6 1B68     		ldr	r3, [r3, #0]
 3235 00a8 23F0C243 		bic	r3, r3, #1627389952
 3236 00ac 23F44013 		bic	r3, r3, #3145728
 3237 00b0 1360     		str	r3, [r2, #0]
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3238              		.loc 1 1424 0
 3239 00b2 7B68     		ldr	r3, [r7, #4]
 3240 00b4 DB69     		ldr	r3, [r3, #28]
 3241 00b6 7A68     		ldr	r2, [r7, #4]
 3242 00b8 D269     		ldr	r2, [r2, #28]
 3243 00ba 5268     		ldr	r2, [r2, #4]
 3244 00bc 22F40032 		bic	r2, r2, #131072
 3245 00c0 5A60     		str	r2, [r3, #4]
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3246              		.loc 1 1425 0
 3247 00c2 7B68     		ldr	r3, [r7, #4]
 3248 00c4 DB69     		ldr	r3, [r3, #28]
 3249 00c6 7A68     		ldr	r2, [r7, #4]
 3250 00c8 D269     		ldr	r2, [r2, #28]
 3251 00ca 1168     		ldr	r1, [r2, #0]
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3252              		.loc 1 1427 0
 3253 00cc 7A68     		ldr	r2, [r7, #4]
 3254 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3255 00d0 4FEA0262 		lsl	r2, r2, #24
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3256              		.loc 1 1425 0
 3257 00d4 02F08072 		and	r2, r2, #16777216
 3258 00d8 0A43     		orrs	r2, r2, r1
 3259 00da 1A60     		str	r2, [r3, #0]
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3260              		.loc 1 1430 0
 3261 00dc 7B68     		ldr	r3, [r7, #4]
 3262 00de DB69     		ldr	r3, [r3, #28]
 3263 00e0 7A68     		ldr	r2, [r7, #4]
 3264 00e2 D269     		ldr	r2, [r2, #28]
 3265 00e4 5268     		ldr	r2, [r2, #4]
 3266 00e6 42F40032 		orr	r2, r2, #131072
 3267 00ea 5A60     		str	r2, [r3, #4]
 3268              	.L139:
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3269              		.loc 1 1433 0
 3270 00ec 7B68     		ldr	r3, [r7, #4]
 3271 00ee DA69     		ldr	r2, [r3, #28]
 3272 00f0 7B68     		ldr	r3, [r7, #4]
 3273 00f2 DB69     		ldr	r3, [r3, #28]
 3274 00f4 5B69     		ldr	r3, [r3, #20]
 3275 00f6 23F4CE43 		bic	r3, r3, #26368
 3276 00fa 23F00B03 		bic	r3, r3, #11
 3277 00fe 5361     		str	r3, [r2, #20]
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3278              		.loc 1 1436 0
 3279 0100 7B68     		ldr	r3, [r7, #4]
 3280 0102 DB69     		ldr	r3, [r3, #28]
 3281 0104 7A68     		ldr	r2, [r7, #4]
 3282 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3283              		.loc 1 1437 0
 3284 010a 02F00101 		and	r1, r2, #1
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3285              		.loc 1 1438 0
 3286 010e 7A68     		ldr	r2, [r7, #4]
 3287 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3288 0112 4FEA4202 		lsl	r2, r2, #1
 3289 0116 02F00202 		and	r2, r2, #2
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3290              		.loc 1 1439 0
 3291 011a 1143     		orrs	r1, r1, r2
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3292              		.loc 1 1441 0
 3293 011c 7A68     		ldr	r2, [r7, #4]
 3294 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3295 0122 4FEA8222 		lsl	r2, r2, #10
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3296              		.loc 1 1442 0
 3297 0126 02F48062 		and	r2, r2, #1024
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3298              		.loc 1 1440 0
 3299 012a 1143     		orrs	r1, r1, r2
 3300              		.loc 1 1442 0
 3301 012c 7A68     		ldr	r2, [r7, #4]
 3302 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3303 0132 4FEA0222 		lsl	r2, r2, #8
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3304              		.loc 1 1443 0
 3305 0136 02F44072 		and	r2, r2, #768
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3306              		.loc 1 1442 0
 3307 013a 0A43     		orrs	r2, r2, r1
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3308              		.loc 1 1436 0
 3309 013c 5A61     		str	r2, [r3, #20]
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3310              		.loc 1 1446 0
 3311 013e 7B68     		ldr	r3, [r7, #4]
 3312 0140 DB69     		ldr	r3, [r3, #28]
 3313 0142 7A68     		ldr	r2, [r7, #4]
 3314 0144 D269     		ldr	r2, [r2, #28]
 3315 0146 5169     		ldr	r1, [r2, #20]
 3316 0148 7A68     		ldr	r2, [r7, #4]
 3317 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3318 014e 4FEA4232 		lsl	r2, r2, #13
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3319              		.loc 1 1447 0
 3320 0152 02F4C042 		and	r2, r2, #24576
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3321              		.loc 1 1446 0
 3322 0156 0A43     		orrs	r2, r2, r1
 3323 0158 5A61     		str	r2, [r3, #20]
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3324              		.loc 1 1448 0
 3325 015a 7B68     		ldr	r3, [r7, #4]
 3326 015c DB69     		ldr	r3, [r3, #28]
 3327 015e 7A68     		ldr	r2, [r7, #4]
 3328 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3329 0162 02F00F01 		and	r1, r2, #15
 3330 0166 7A68     		ldr	r2, [r7, #4]
 3331 0168 D269     		ldr	r2, [r2, #28]
 3332 016a 126A     		ldr	r2, [r2, #32]
 3333 016c 22F00F02 		bic	r2, r2, #15
 3334 0170 0A43     		orrs	r2, r2, r1
 3335 0172 1A62     		str	r2, [r3, #32]
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3336              		.loc 1 1452 0
 3337 0174 7B68     		ldr	r3, [r7, #4]
 3338 0176 DB69     		ldr	r3, [r3, #28]
 3339 0178 7A68     		ldr	r2, [r7, #4]
 3340 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3341 017c 4FEA4252 		lsl	r2, r2, #21
 3342 0180 02F40011 		and	r1, r2, #2097152
 3343 0184 7A68     		ldr	r2, [r7, #4]
 3344 0186 D269     		ldr	r2, [r2, #28]
 3345 0188 5269     		ldr	r2, [r2, #20]
 3346 018a 22F40012 		bic	r2, r2, #2097152
 3347 018e 0A43     		orrs	r2, r2, r1
 3348 0190 5A61     		str	r2, [r3, #20]
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3349              		.loc 1 1455 0
 3350 0192 7B68     		ldr	r3, [r7, #4]
 3351 0194 DB69     		ldr	r3, [r3, #28]
 3352 0196 7A68     		ldr	r2, [r7, #4]
 3353 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3354 019a 4FEA8252 		lsl	r2, r2, #22
 3355 019e 02F48001 		and	r1, r2, #4194304
 3356 01a2 7A68     		ldr	r2, [r7, #4]
 3357 01a4 D269     		ldr	r2, [r2, #28]
 3358 01a6 5269     		ldr	r2, [r2, #20]
 3359 01a8 22F48002 		bic	r2, r2, #4194304
 3360 01ac 0A43     		orrs	r2, r2, r1
 3361 01ae 5A61     		str	r2, [r3, #20]
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3362              		.loc 1 1458 0
 3363 01b0 7B68     		ldr	r3, [r7, #4]
 3364 01b2 DB69     		ldr	r3, [r3, #28]
 3365 01b4 7A68     		ldr	r2, [r7, #4]
 3366 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3367 01b8 4FEA4242 		lsl	r2, r2, #17
 3368 01bc 02F40031 		and	r1, r2, #131072
 3369 01c0 7A68     		ldr	r2, [r7, #4]
 3370 01c2 D269     		ldr	r2, [r2, #28]
 3371 01c4 5269     		ldr	r2, [r2, #20]
 3372 01c6 22F40032 		bic	r2, r2, #131072
 3373 01ca 0A43     		orrs	r2, r2, r1
 3374 01cc 5A61     		str	r2, [r3, #20]
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3375              		.loc 1 1461 0
 3376 01ce 7B68     		ldr	r3, [r7, #4]
 3377 01d0 DB69     		ldr	r3, [r3, #28]
 3378 01d2 7A68     		ldr	r2, [r7, #4]
 3379 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3380 01d8 02F00F01 		and	r1, r2, #15
 3381 01dc 7A68     		ldr	r2, [r7, #4]
 3382 01de D269     		ldr	r2, [r2, #28]
 3383 01e0 526A     		ldr	r2, [r2, #36]
 3384 01e2 22F00F02 		bic	r2, r2, #15
 3385 01e6 0A43     		orrs	r2, r2, r1
 3386 01e8 5A62     		str	r2, [r3, #36]
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3387              		.loc 1 1464 0
 3388 01ea 7B68     		ldr	r3, [r7, #4]
 3389 01ec DB69     		ldr	r3, [r3, #28]
 3390 01ee 7A68     		ldr	r2, [r7, #4]
 3391 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3392 01f2 9A61     		str	r2, [r3, #24]
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3393              		.loc 1 1466 0
 3394 01f4 7B68     		ldr	r3, [r7, #4]
 3395 01f6 5B69     		ldr	r3, [r3, #20]
 3396 01f8 7A68     		ldr	r2, [r7, #4]
 3397 01fa 5269     		ldr	r2, [r2, #20]
 3398 01fc 1169     		ldr	r1, [r2, #16]
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3399              		.loc 1 1467 0
 3400 01fe 7A68     		ldr	r2, [r7, #4]
 3401 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3402 0204 4FEA8202 		lsl	r2, r2, #2
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3403              		.loc 1 1466 0
 3404 0208 4FF00100 		mov	r0, #1
 3405 020c 00FA02F0 		lsl	r0, r0, r2
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3406              		.loc 1 1469 0
 3407 0210 7A68     		ldr	r2, [r7, #4]
 3408 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3409              		.loc 1 1468 0
 3410 0216 4FEA8202 		lsl	r2, r2, #2
 3411              		.loc 1 1469 0
 3412 021a 02F10102 		add	r2, r2, #1
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3413              		.loc 1 1468 0
 3414 021e 4FF00104 		mov	r4, #1
 3415 0222 04FA02F2 		lsl	r2, r4, r2
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3416              		.loc 1 1467 0
 3417 0226 1043     		orrs	r0, r0, r2
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3418              		.loc 1 1471 0
 3419 0228 7A68     		ldr	r2, [r7, #4]
 3420 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3421              		.loc 1 1470 0
 3422 022e 4FEA8202 		lsl	r2, r2, #2
 3423              		.loc 1 1471 0
 3424 0232 02F10202 		add	r2, r2, #2
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3425              		.loc 1 1470 0
 3426 0236 4FF00104 		mov	r4, #1
 3427 023a 04FA02F2 		lsl	r2, r4, r2
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3428              		.loc 1 1466 0
 3429 023e 0243     		orrs	r2, r2, r0
 3430 0240 0A43     		orrs	r2, r2, r1
 3431 0242 1A61     		str	r2, [r3, #16]
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3432              		.loc 1 1472 0
 3433 0244 07F10807 		add	r7, r7, #8
 3434 0248 BD46     		mov	sp, r7
 3435 024a 90BC     		pop	{r4, r7}
 3436 024c 7047     		bx	lr
 3437              		.cfi_endproc
 3438              	.LFE141:
 3440 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3441              		.align	2
 3442              		.global	PWMSP001_EnableEvent
 3443              		.thumb
 3444              		.thumb_func
 3446              	PWMSP001_EnableEvent:
 3447              	.LFB142:
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3448              		.loc 1 1482 0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 16
 3451              		@ frame_needed = 1, uses_anonymous_args = 0
 3452              		@ link register save eliminated.
 3453 0000 80B4     		push	{r7}
 3454              	.LCFI75:
 3455              		.cfi_def_cfa_offset 4
 3456              		.cfi_offset 7, -4
 3457 0002 85B0     		sub	sp, sp, #20
 3458              	.LCFI76:
 3459              		.cfi_def_cfa_offset 24
 3460 0004 00AF     		add	r7, sp, #0
 3461              	.LCFI77:
 3462              		.cfi_def_cfa_register 7
 3463 0006 7860     		str	r0, [r7, #4]
 3464 0008 0B46     		mov	r3, r1
 3465 000a FB70     		strb	r3, [r7, #3]
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3466              		.loc 1 1483 0
 3467 000c 4FF00103 		mov	r3, #1
 3468 0010 FB60     		str	r3, [r7, #12]
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3469              		.loc 1 1485 0
 3470 0012 7B68     		ldr	r3, [r7, #4]
 3471 0014 DB6B     		ldr	r3, [r3, #60]
 3472 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3473 0018 002B     		cmp	r3, #0
 3474 001a 03D1     		bne	.L141
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3475              		.loc 1 1487 0
 3476 001c 4FF00103 		mov	r3, #1
 3477 0020 FB60     		str	r3, [r7, #12]
 3478 0022 24E0     		b	.L142
 3479              	.L141:
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3480              		.loc 1 1492 0
 3481 0024 7B68     		ldr	r3, [r7, #4]
 3482 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3483 002a 012B     		cmp	r3, #1
 3484 002c 0ED1     		bne	.L143
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3485              		.loc 1 1494 0
 3486 002e 7B68     		ldr	r3, [r7, #4]
 3487 0030 DB69     		ldr	r3, [r3, #28]
 3488 0032 7A68     		ldr	r2, [r7, #4]
 3489 0034 D269     		ldr	r2, [r2, #28]
 3490 0036 D2F8A410 		ldr	r1, [r2, #164]
 3491 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3492 003c 4FF00100 		mov	r0, #1
 3493 0040 00FA02F2 		lsl	r2, r0, r2
 3494 0044 0A43     		orrs	r2, r2, r1
 3495 0046 C3F8A420 		str	r2, [r3, #164]
 3496 004a 0DE0     		b	.L144
 3497              	.L143:
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3498              		.loc 1 1498 0
 3499 004c 7B68     		ldr	r3, [r7, #4]
 3500 004e 9B69     		ldr	r3, [r3, #24]
 3501 0050 7A68     		ldr	r2, [r7, #4]
 3502 0052 9269     		ldr	r2, [r2, #24]
 3503 0054 D2F8A410 		ldr	r1, [r2, #164]
 3504 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3505 005a 4FF00100 		mov	r0, #1
 3506 005e 00FA02F2 		lsl	r2, r0, r2
 3507 0062 0A43     		orrs	r2, r2, r1
 3508 0064 C3F8A420 		str	r2, [r3, #164]
 3509              	.L144:
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3510              		.loc 1 1500 0
 3511 0068 4FF00003 		mov	r3, #0
 3512 006c FB60     		str	r3, [r7, #12]
 3513              	.L142:
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3514              		.loc 1 1502 0
 3515 006e FB68     		ldr	r3, [r7, #12]
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3516              		.loc 1 1503 0
 3517 0070 1846     		mov	r0, r3
 3518 0072 07F11407 		add	r7, r7, #20
 3519 0076 BD46     		mov	sp, r7
 3520 0078 80BC     		pop	{r7}
 3521 007a 7047     		bx	lr
 3522              		.cfi_endproc
 3523              	.LFE142:
 3525              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3526              		.align	2
 3527              		.global	PWMSP001_DisableEvent
 3528              		.thumb
 3529              		.thumb_func
 3531              	PWMSP001_DisableEvent:
 3532              	.LFB143:
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3533              		.loc 1 1513 0
 3534              		.cfi_startproc
 3535              		@ args = 0, pretend = 0, frame = 16
 3536              		@ frame_needed = 1, uses_anonymous_args = 0
 3537              		@ link register save eliminated.
 3538 0000 80B4     		push	{r7}
 3539              	.LCFI78:
 3540              		.cfi_def_cfa_offset 4
 3541              		.cfi_offset 7, -4
 3542 0002 85B0     		sub	sp, sp, #20
 3543              	.LCFI79:
 3544              		.cfi_def_cfa_offset 24
 3545 0004 00AF     		add	r7, sp, #0
 3546              	.LCFI80:
 3547              		.cfi_def_cfa_register 7
 3548 0006 7860     		str	r0, [r7, #4]
 3549 0008 0B46     		mov	r3, r1
 3550 000a FB70     		strb	r3, [r7, #3]
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3551              		.loc 1 1514 0
 3552 000c 4FF00103 		mov	r3, #1
 3553 0010 FB60     		str	r3, [r7, #12]
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3554              		.loc 1 1516 0
 3555 0012 7B68     		ldr	r3, [r7, #4]
 3556 0014 DB6B     		ldr	r3, [r3, #60]
 3557 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3558 0018 002B     		cmp	r3, #0
 3559 001a 03D1     		bne	.L147
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3560              		.loc 1 1518 0
 3561 001c 4FF00103 		mov	r3, #1
 3562 0020 FB60     		str	r3, [r7, #12]
 3563 0022 28E0     		b	.L148
 3564              	.L147:
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3565              		.loc 1 1523 0
 3566 0024 7B68     		ldr	r3, [r7, #4]
 3567 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3568 002a 012B     		cmp	r3, #1
 3569 002c 10D1     		bne	.L149
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3570              		.loc 1 1525 0
 3571 002e 7B68     		ldr	r3, [r7, #4]
 3572 0030 DB69     		ldr	r3, [r3, #28]
 3573 0032 7A68     		ldr	r2, [r7, #4]
 3574 0034 D269     		ldr	r2, [r2, #28]
 3575 0036 D2F8A410 		ldr	r1, [r2, #164]
 3576 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3577 003c 4FF00100 		mov	r0, #1
 3578 0040 00FA02F2 		lsl	r2, r0, r2
 3579 0044 6FEA0202 		mvn	r2, r2
 3580 0048 0A40     		ands	r2, r2, r1
 3581 004a C3F8A420 		str	r2, [r3, #164]
 3582 004e 0FE0     		b	.L150
 3583              	.L149:
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3584              		.loc 1 1529 0
 3585 0050 7B68     		ldr	r3, [r7, #4]
 3586 0052 9B69     		ldr	r3, [r3, #24]
 3587 0054 7A68     		ldr	r2, [r7, #4]
 3588 0056 9269     		ldr	r2, [r2, #24]
 3589 0058 D2F8A410 		ldr	r1, [r2, #164]
 3590 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3591 005e 4FF00100 		mov	r0, #1
 3592 0062 00FA02F2 		lsl	r2, r0, r2
 3593 0066 6FEA0202 		mvn	r2, r2
 3594 006a 0A40     		ands	r2, r2, r1
 3595 006c C3F8A420 		str	r2, [r3, #164]
 3596              	.L150:
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3597              		.loc 1 1531 0
 3598 0070 4FF00003 		mov	r3, #0
 3599 0074 FB60     		str	r3, [r7, #12]
 3600              	.L148:
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3601              		.loc 1 1533 0
 3602 0076 FB68     		ldr	r3, [r7, #12]
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3603              		.loc 1 1534 0
 3604 0078 1846     		mov	r0, r3
 3605 007a 07F11407 		add	r7, r7, #20
 3606 007e BD46     		mov	sp, r7
 3607 0080 80BC     		pop	{r7}
 3608 0082 7047     		bx	lr
 3609              		.cfi_endproc
 3610              	.LFE143:
 3612              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3613              		.align	2
 3614              		.global	PWMSP001_ClearPendingEvent
 3615              		.thumb
 3616              		.thumb_func
 3618              	PWMSP001_ClearPendingEvent:
 3619              	.LFB144:
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3620              		.loc 1 1544 0
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 16
 3623              		@ frame_needed = 1, uses_anonymous_args = 0
 3624              		@ link register save eliminated.
 3625 0000 80B4     		push	{r7}
 3626              	.LCFI81:
 3627              		.cfi_def_cfa_offset 4
 3628              		.cfi_offset 7, -4
 3629 0002 85B0     		sub	sp, sp, #20
 3630              	.LCFI82:
 3631              		.cfi_def_cfa_offset 24
 3632 0004 00AF     		add	r7, sp, #0
 3633              	.LCFI83:
 3634              		.cfi_def_cfa_register 7
 3635 0006 7860     		str	r0, [r7, #4]
 3636 0008 0B46     		mov	r3, r1
 3637 000a FB70     		strb	r3, [r7, #3]
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3638              		.loc 1 1545 0
 3639 000c 4FF00103 		mov	r3, #1
 3640 0010 FB60     		str	r3, [r7, #12]
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3641              		.loc 1 1547 0
 3642 0012 7B68     		ldr	r3, [r7, #4]
 3643 0014 DB6B     		ldr	r3, [r3, #60]
 3644 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3645 0018 002B     		cmp	r3, #0
 3646 001a 03D1     		bne	.L153
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3647              		.loc 1 1549 0
 3648 001c 4FF00103 		mov	r3, #1
 3649 0020 FB60     		str	r3, [r7, #12]
 3650 0022 24E0     		b	.L154
 3651              	.L153:
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3652              		.loc 1 1554 0
 3653 0024 7B68     		ldr	r3, [r7, #4]
 3654 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3655 002a 012B     		cmp	r3, #1
 3656 002c 0ED1     		bne	.L155
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3657              		.loc 1 1556 0
 3658 002e 7B68     		ldr	r3, [r7, #4]
 3659 0030 DB69     		ldr	r3, [r3, #28]
 3660 0032 7A68     		ldr	r2, [r7, #4]
 3661 0034 D269     		ldr	r2, [r2, #28]
 3662 0036 D2F8B010 		ldr	r1, [r2, #176]
 3663 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3664 003c 4FF00100 		mov	r0, #1
 3665 0040 00FA02F2 		lsl	r2, r0, r2
 3666 0044 0A43     		orrs	r2, r2, r1
 3667 0046 C3F8B020 		str	r2, [r3, #176]
 3668 004a 0DE0     		b	.L156
 3669              	.L155:
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3670              		.loc 1 1560 0
 3671 004c 7B68     		ldr	r3, [r7, #4]
 3672 004e 9B69     		ldr	r3, [r3, #24]
 3673 0050 7A68     		ldr	r2, [r7, #4]
 3674 0052 9269     		ldr	r2, [r2, #24]
 3675 0054 D2F8B010 		ldr	r1, [r2, #176]
 3676 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3677 005a 4FF00100 		mov	r0, #1
 3678 005e 00FA02F2 		lsl	r2, r0, r2
 3679 0062 0A43     		orrs	r2, r2, r1
 3680 0064 C3F8B020 		str	r2, [r3, #176]
 3681              	.L156:
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3682              		.loc 1 1562 0
 3683 0068 4FF00003 		mov	r3, #0
 3684 006c FB60     		str	r3, [r7, #12]
 3685              	.L154:
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3686              		.loc 1 1564 0
 3687 006e FB68     		ldr	r3, [r7, #12]
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3688              		.loc 1 1565 0
 3689 0070 1846     		mov	r0, r3
 3690 0072 07F11407 		add	r7, r7, #20
 3691 0076 BD46     		mov	sp, r7
 3692 0078 80BC     		pop	{r7}
 3693 007a 7047     		bx	lr
 3694              		.cfi_endproc
 3695              	.LFE144:
 3697              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3698              		.align	2
 3699              		.global	PWMSP001_SetPendingEvent
 3700              		.thumb
 3701              		.thumb_func
 3703              	PWMSP001_SetPendingEvent:
 3704              	.LFB145:
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3705              		.loc 1 1576 0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 16
 3708              		@ frame_needed = 1, uses_anonymous_args = 0
 3709              		@ link register save eliminated.
 3710 0000 80B4     		push	{r7}
 3711              	.LCFI84:
 3712              		.cfi_def_cfa_offset 4
 3713              		.cfi_offset 7, -4
 3714 0002 85B0     		sub	sp, sp, #20
 3715              	.LCFI85:
 3716              		.cfi_def_cfa_offset 24
 3717 0004 00AF     		add	r7, sp, #0
 3718              	.LCFI86:
 3719              		.cfi_def_cfa_register 7
 3720 0006 7860     		str	r0, [r7, #4]
 3721 0008 0B46     		mov	r3, r1
 3722 000a FB70     		strb	r3, [r7, #3]
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3723              		.loc 1 1577 0
 3724 000c 4FF00103 		mov	r3, #1
 3725 0010 FB60     		str	r3, [r7, #12]
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3726              		.loc 1 1579 0
 3727 0012 7B68     		ldr	r3, [r7, #4]
 3728 0014 DB6B     		ldr	r3, [r3, #60]
 3729 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3730 0018 002B     		cmp	r3, #0
 3731 001a 03D1     		bne	.L159
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3732              		.loc 1 1581 0
 3733 001c 4FF00103 		mov	r3, #1
 3734 0020 FB60     		str	r3, [r7, #12]
 3735 0022 24E0     		b	.L160
 3736              	.L159:
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3737              		.loc 1 1586 0
 3738 0024 7B68     		ldr	r3, [r7, #4]
 3739 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3740 002a 012B     		cmp	r3, #1
 3741 002c 0ED1     		bne	.L161
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3742              		.loc 1 1588 0
 3743 002e 7B68     		ldr	r3, [r7, #4]
 3744 0030 DB69     		ldr	r3, [r3, #28]
 3745 0032 7A68     		ldr	r2, [r7, #4]
 3746 0034 D269     		ldr	r2, [r2, #28]
 3747 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3748 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3749 003c 4FF00100 		mov	r0, #1
 3750 0040 00FA02F2 		lsl	r2, r0, r2
 3751 0044 0A43     		orrs	r2, r2, r1
 3752 0046 C3F8AC20 		str	r2, [r3, #172]
 3753 004a 0DE0     		b	.L162
 3754              	.L161:
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3755              		.loc 1 1592 0
 3756 004c 7B68     		ldr	r3, [r7, #4]
 3757 004e 9B69     		ldr	r3, [r3, #24]
 3758 0050 7A68     		ldr	r2, [r7, #4]
 3759 0052 9269     		ldr	r2, [r2, #24]
 3760 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3761 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3762 005a 4FF00100 		mov	r0, #1
 3763 005e 00FA02F2 		lsl	r2, r0, r2
 3764 0062 0A43     		orrs	r2, r2, r1
 3765 0064 C3F8AC20 		str	r2, [r3, #172]
 3766              	.L162:
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3767              		.loc 1 1594 0
 3768 0068 4FF00003 		mov	r3, #0
 3769 006c FB60     		str	r3, [r7, #12]
 3770              	.L160:
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3771              		.loc 1 1596 0
 3772 006e FB68     		ldr	r3, [r7, #12]
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3773              		.loc 1 1597 0
 3774 0070 1846     		mov	r0, r3
 3775 0072 07F11407 		add	r7, r7, #20
 3776 0076 BD46     		mov	sp, r7
 3777 0078 80BC     		pop	{r7}
 3778 007a 7047     		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE145:
 3782              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 3783              		.align	2
 3784              		.global	PWMSP001_GetPendingEvent
 3785              		.thumb
 3786              		.thumb_func
 3788              	PWMSP001_GetPendingEvent:
 3789              	.LFB146:
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3790              		.loc 1 1608 0
 3791              		.cfi_startproc
 3792              		@ args = 0, pretend = 0, frame = 24
 3793              		@ frame_needed = 1, uses_anonymous_args = 0
 3794              		@ link register save eliminated.
 3795 0000 80B4     		push	{r7}
 3796              	.LCFI87:
 3797              		.cfi_def_cfa_offset 4
 3798              		.cfi_offset 7, -4
 3799 0002 87B0     		sub	sp, sp, #28
 3800              	.LCFI88:
 3801              		.cfi_def_cfa_offset 32
 3802 0004 00AF     		add	r7, sp, #0
 3803              	.LCFI89:
 3804              		.cfi_def_cfa_register 7
 3805 0006 F860     		str	r0, [r7, #12]
 3806 0008 0B46     		mov	r3, r1
 3807 000a 7A60     		str	r2, [r7, #4]
 3808 000c FB72     		strb	r3, [r7, #11]
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3809              		.loc 1 1609 0
 3810 000e 4FF00103 		mov	r3, #1
 3811 0012 7B61     		str	r3, [r7, #20]
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3812              		.loc 1 1611 0
 3813 0014 FB68     		ldr	r3, [r7, #12]
 3814 0016 DB6B     		ldr	r3, [r3, #60]
 3815 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3816 001a 002B     		cmp	r3, #0
 3817 001c 03D1     		bne	.L165
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3818              		.loc 1 1613 0
 3819 001e 4FF00103 		mov	r3, #1
 3820 0022 7B61     		str	r3, [r7, #20]
 3821 0024 38E0     		b	.L166
 3822              	.L165:
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3823              		.loc 1 1618 0
 3824 0026 FB68     		ldr	r3, [r7, #12]
 3825 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3826 002c 012B     		cmp	r3, #1
 3827 002e 18D1     		bne	.L167
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 3828              		.loc 1 1621 0
 3829 0030 FB68     		ldr	r3, [r7, #12]
 3830 0032 DB69     		ldr	r3, [r3, #28]
 3831 0034 D3F8A020 		ldr	r2, [r3, #160]
 3832 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3833 003a 4FF00101 		mov	r1, #1
 3834 003e 01FA03F3 		lsl	r3, r1, r3
 3835 0042 1A40     		ands	r2, r2, r3
 3836 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3837 0046 22FA03F3 		lsr	r3, r2, r3
 3838 004a 002B     		cmp	r3, #0
 3839 004c 04D0     		beq	.L168
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 3840              		.loc 1 1623 0
 3841 004e 7B68     		ldr	r3, [r7, #4]
 3842 0050 4FF00102 		mov	r2, #1
 3843 0054 1A70     		strb	r2, [r3, #0]
 3844 0056 1CE0     		b	.L169
 3845              	.L168:
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 3846              		.loc 1 1627 0
 3847 0058 7B68     		ldr	r3, [r7, #4]
 3848 005a 4FF00002 		mov	r2, #0
 3849 005e 1A70     		strb	r2, [r3, #0]
 3850 0060 17E0     		b	.L169
 3851              	.L167:
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 3852              		.loc 1 1632 0
 3853 0062 FB68     		ldr	r3, [r7, #12]
 3854 0064 9B69     		ldr	r3, [r3, #24]
 3855 0066 D3F8A020 		ldr	r2, [r3, #160]
 3856 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3857 006c 4FF00101 		mov	r1, #1
 3858 0070 01FA03F3 		lsl	r3, r1, r3
 3859 0074 1A40     		ands	r2, r2, r3
 3860 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3861 0078 22FA03F3 		lsr	r3, r2, r3
 3862 007c 002B     		cmp	r3, #0
 3863 007e 04D0     		beq	.L170
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 3864              		.loc 1 1634 0
 3865 0080 7B68     		ldr	r3, [r7, #4]
 3866 0082 4FF00102 		mov	r2, #1
 3867 0086 1A70     		strb	r2, [r3, #0]
 3868 0088 03E0     		b	.L169
 3869              	.L170:
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 3870              		.loc 1 1638 0
 3871 008a 7B68     		ldr	r3, [r7, #4]
 3872 008c 4FF00002 		mov	r2, #0
 3873 0090 1A70     		strb	r2, [r3, #0]
 3874              	.L169:
1639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1641:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3875              		.loc 1 1643 0
 3876 0092 4FF00003 		mov	r3, #0
 3877 0096 7B61     		str	r3, [r7, #20]
 3878              	.L166:
1644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3879              		.loc 1 1645 0
 3880 0098 7B69     		ldr	r3, [r7, #20]
1646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3881              		.loc 1 1646 0
 3882 009a 1846     		mov	r0, r3
 3883 009c 07F11C07 		add	r7, r7, #28
 3884 00a0 BD46     		mov	sp, r7
 3885 00a2 80BC     		pop	{r7}
 3886 00a4 7047     		bx	lr
 3887              		.cfi_endproc
 3888              	.LFE146:
 3890 00a6 00BF     		.text
 3891              	.Letext0:
 3892              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3893              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3894              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\ControleInterno-Spartacus\\Dave\\Generated\\inc\\DAVESuppo
 3895              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\ControleInterno-Spartacus\\Dave\\Generated\\inc\\DAVESuppo
 3896              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3897              		.file 7 "C:\\DAVE3_workspace\\ws3.1.10\\ControleInterno-Spartacus\\Dave\\Generated\\inc\\DAVESuppo
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:163    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:773    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:158    .text.PWMSP001_lInit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3135   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:556    .text.PWMSP001_Deinit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:561    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:768    .text.PWMSP001_Start:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1000   .text.PWMSP001_Stop:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1005   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1114   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1119   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1218   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1223   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1280   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1285   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1383   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1388   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1442   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1447   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1512   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1517   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1522   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1602   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1607   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1612   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1753   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1758   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1763   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1841   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1846   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1851   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1965   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:1970   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2103   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2108   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2441   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2259   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2265   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2270   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2431   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2436   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2559   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2564   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2635   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2640   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2717   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2722   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2863   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2868   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2951   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:2956   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3049   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3054   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3130   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3441   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3446   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3526   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3531   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3613   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3618   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3698   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3703   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3783   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc7gwYHk.s:3788   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e3bdd798bb23f70d94471cb7157fa38f
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CNT001.h.53.54b2229008e37b1970e63d1faf193d82
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ERU001_Conf.h.69.cbf5f28f16df40bf2ec07157d45ebab0
                           .group:00000000 wm4.ERU002_Conf.h.49.2f1d75b23a08c83bd296d7c11c7e280b
                           .group:00000000 wm4.NVIC002_Conf.h.63.13943eb720fa25e7207fa08ab410f2a7

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
