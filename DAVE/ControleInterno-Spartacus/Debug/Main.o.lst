   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	configuration,15,4
  20              		.comm	data_R,5,4
  21              		.global	ticks
  22              		.bss
  23              		.align	2
  26              	ticks:
  27 0000 00000000 		.space	4
  28              		.global	status_ticks
  29              		.align	2
  32              	status_ticks:
  33 0004 00000000 		.space	4
  34              		.global	sudden_run_ticks
  35              		.align	2
  38              	sudden_run_ticks:
  39 0008 00000000 		.space	4
  40              		.global	error_ticks
  41              		.align	2
  44              	error_ticks:
  45 000c 00000000 		.space	4
  46              		.global	value
  49              	value:
  50 0010 00       		.space	1
  51              		.global	last_duty_right
  52 0011 000000   		.align	2
  55              	last_duty_right:
  56 0014 00000000 		.space	4
  57              		.global	last_duty_left
  58              		.align	2
  61              	last_duty_left:
  62 0018 00000000 		.space	4
  63              		.global	error_left
  66              	error_left:
  67 001c 00       		.space	1
  68              		.global	error_right
  71              	error_right:
  72 001d 00       		.space	1
  73 001e 0000     		.section	.text.main,"ax",%progbits
  74              		.align	2
  75              		.global	main
  76              		.thumb
  77              		.thumb_func
  79              	main:
  80              	.LFB117:
  81              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: May 9, 2015
   5:../Main.c     ****  *      Author: JM
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** #include <DAVE3.h> //Declarations from DAVE3 Code Generation (includes SFR declaration)
   9:../Main.c     **** /* DADO3:
  10:../Main.c     ****  BIT 0: BLAH2
  11:../Main.c     ****  BIT 1: BUZINA
  12:../Main.c     ****  BIT 2: ENABLE
  13:../Main.c     ****  BIT 3: ALBH2
  14:../Main.c     ****  BIT 4: BLAH1
  15:../Main.c     ****  BIT 5: ALBH1
  16:../Main.c     ****  */
  17:../Main.c     **** 
  18:../Main.c     **** /***************************************************
  19:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  20:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  21:../Main.c     ****  *Byte 1 : PWM 1
  22:../Main.c     ****  *Byte 2 : PWM 2
  23:../Main.c     ****  *Byte 3 : SENTIDOS
  24:../Main.c     ****  *Byte 4 : PWM 3 (Arma)
  25:../Main.c     ****  ***************************************************/
  26:../Main.c     **** 
  27:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  28:../Main.c     **** /***************************************************/
  29:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  30:../Main.c     **** /***************************************************/
  31:../Main.c     **** 
  32:../Main.c     **** #define NULL 0
  33:../Main.c     **** 
  34:../Main.c     **** //Defines referentes ao protocolo
  35:../Main.c     **** #define BYTES_TO_RECEIVE 5
  36:../Main.c     **** //Defines referentes ao byte DADO 3
  37:../Main.c     **** #define	BLAH2		0		//LEFT-BACK
  38:../Main.c     **** #define	BUZINA		1		//USELESS
  39:../Main.c     **** #define	ENABLE		2		//USELESS
  40:../Main.c     **** #define	ALBH2		3		//LEFT-FRONT
  41:../Main.c     **** #define	BLAH1		4		//RIGHT-BACK
  42:../Main.c     **** #define	ALBH1		5		//RIGHT-FRONT
  43:../Main.c     **** #define	LEFT_BACK	BLAH2
  44:../Main.c     **** #define	LEFT_FRONT	ALBH2
  45:../Main.c     **** #define	RIGHT_BACK	BLAH1
  46:../Main.c     **** #define	RIGHT_FRONT	ALBH1
  47:../Main.c     **** #define DATA_TEST0 BUZINA
  48:../Main.c     **** #define DATA_TEST1 ENABLE
  49:../Main.c     **** 
  50:../Main.c     **** //Defines referentes ao transceptor
  51:../Main.c     **** #define CS	 	IO004_Handle10
  52:../Main.c     **** #define CLK1 	IO004_Handle11
  53:../Main.c     **** #define DATA 	IO004_Handle12
  54:../Main.c     **** #define DR1		IO004_Handle13
  55:../Main.c     **** #define CE 		IO004_Handle14
  56:../Main.c     **** 
  57:../Main.c     **** //Defines referentes ao driver da ponte H
  58:../Main.c     **** #define ERR_INTRPT_LEFT		IO002_Handle1
  59:../Main.c     **** #define DIR_LEFT			IO004_Handle6
  60:../Main.c     **** #define Enable_LEFT			IO004_Handle7
  61:../Main.c     **** #define DvrDis_LEFT			IO004_Handle8
  62:../Main.c     **** #define ERR_Input_LEFT		IO004_Handle15
  63:../Main.c     **** #define PWM_LEFT			&PWMSP001_Handle1
  64:../Main.c     **** #define ERR_INTRPT_RIGHT	IO002_Handle0
  65:../Main.c     **** #define DIR_RIGHT			IO004_Handle0
  66:../Main.c     **** #define Enable_RIGHT		IO004_Handle1
  67:../Main.c     **** #define DvrDis_RIGHT		IO004_Handle2
  68:../Main.c     **** #define ERR_Input_RIGHT		IO004_Handle3
  69:../Main.c     **** #define PWM_RIGHT			&PWMSP001_Handle0
  70:../Main.c     **** 
  71:../Main.c     **** //Define Faiscador
  72:../Main.c     **** #define FAISCADOR			IO004_Handle9
  73:../Main.c     **** #define GND					IO004_Handle4
  74:../Main.c     **** 
  75:../Main.c     **** //Define referentes a ponte H
  76:../Main.c     **** #define PWM_LIMITATION 70
  77:../Main.c     **** #define PWM_DUTY_LIM_MAX 100
  78:../Main.c     **** #define PWM_DUTY_LIM_MIN 8
  79:../Main.c     **** #define PWM_DUTY_LIM_ZERO 0
  80:../Main.c     **** #define DIR_FRONT_LEFT 0
  81:../Main.c     **** #define DIR_REV_LEFT 1
  82:../Main.c     **** #define DIR_FRONT_RIGHT 0
  83:../Main.c     **** #define DIR_REV_RIGHT 1
  84:../Main.c     **** #define PWM_MOTOR_CUT_OFF 50
  85:../Main.c     **** #define PWM_MOTOR_RIGHT &PWMSP001_Handle0
  86:../Main.c     **** #define PWM_MOTOR_LEFT &PWMSP001_Handle1
  87:../Main.c     **** #define FREQ_MOTOR_LOCOMOTION 30000 //Hz
  88:../Main.c     **** //Defines referentes ao fail safe
  89:../Main.c     **** #define RUNNING 1
  90:../Main.c     **** #define FAIL 0
  91:../Main.c     **** 
  92:../Main.c     **** //Defines referentes a testes de locomocao
  93:../Main.c     **** #define LINEAR 	2
  94:../Main.c     **** #define DEGRAU 	0
  95:../Main.c     **** #define EXP	1
  96:../Main.c     **** 
  97:../Main.c     **** //==============================
  98:../Main.c     **** 
  99:../Main.c     **** /***************************************************/
 100:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 101:../Main.c     **** /***************************************************/
 102:../Main.c     **** 
 103:../Main.c     **** void Tick_Handler(void);
 104:../Main.c     **** void Testando_Handler(void);
 105:../Main.c     **** void interrupt_left(void);
 106:../Main.c     **** void interrupt_right(void);
 107:../Main.c     **** void delayms(uint32_t delay_ms);
 108:../Main.c     **** void delayus(uint32_t delay_us);
 109:../Main.c     **** void Software_Timers_Init(void);
 110:../Main.c     **** void WakeUp(void);
 111:../Main.c     **** void pulse_R(void);
 112:../Main.c     **** void configure_R(void);
 113:../Main.c     **** void read_R(void);
 114:../Main.c     **** void update_driver_signals(void);
 115:../Main.c     **** void delay(long unsigned int i);
 116:../Main.c     **** void start_driver_signals(void);
 117:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data);
 118:../Main.c     **** int floor(float value);
 119:../Main.c     **** void error(void);
 120:../Main.c     **** 
 121:../Main.c     **** /***************************************************/
 122:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 123:../Main.c     **** /***************************************************/
 124:../Main.c     **** 
 125:../Main.c     **** char configuration[15];
 126:../Main.c     **** unsigned char data_R[BYTES_TO_RECEIVE];
 127:../Main.c     **** uint32_t ticks = 0UL;
 128:../Main.c     **** uint32_t status_ticks = 0UL;
 129:../Main.c     **** uint32_t sudden_run_ticks = 0UL;
 130:../Main.c     **** uint32_t error_ticks = 0UL;
 131:../Main.c     **** bool value = 0UL;
 132:../Main.c     **** float last_duty_right = 0;
 133:../Main.c     **** float last_duty_left = 0;
 134:../Main.c     **** char error_left = 0;
 135:../Main.c     **** char error_right = 0;
 136:../Main.c     **** 
 137:../Main.c     **** /***************************************************/
 138:../Main.c     **** /***********************MAIN************************/
 139:../Main.c     **** /***************************************************/
 140:../Main.c     **** 
 141:../Main.c     **** int main(void) {
  82              		.loc 1 141 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 82B0     		sub	sp, sp, #8
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI2:
  96              		.cfi_def_cfa_register 7
 142:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 143:../Main.c     **** 
 144:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
  97              		.loc 1 144 0
  98 0006 FFF7FEFF 		bl	DAVE_Init
 145:../Main.c     **** 
 146:../Main.c     **** 	Software_Timers_Init();
  99              		.loc 1 146 0
 100 000a FFF7FEFF 		bl	Software_Timers_Init
 147:../Main.c     **** 	WakeUp();
 101              		.loc 1 147 0
 102 000e FFF7FEFF 		bl	WakeUp
 148:../Main.c     **** 	configure_R();
 103              		.loc 1 148 0
 104 0012 FFF7FEFF 		bl	configure_R
 149:../Main.c     **** 
 150:../Main.c     **** 	ticks = 0;
 105              		.loc 1 150 0
 106 0016 40F20003 		movw	r3, #:lower16:ticks
 107 001a C0F20003 		movt	r3, #:upper16:ticks
 108 001e 4FF00002 		mov	r2, #0
 109 0022 1A60     		str	r2, [r3, #0]
 151:../Main.c     **** 	status_ticks = 0;
 110              		.loc 1 151 0
 111 0024 40F20003 		movw	r3, #:lower16:status_ticks
 112 0028 C0F20003 		movt	r3, #:upper16:status_ticks
 113 002c 4FF00002 		mov	r2, #0
 114 0030 1A60     		str	r2, [r3, #0]
 152:../Main.c     **** 	char status = RUNNING;
 115              		.loc 1 152 0
 116 0032 4FF00103 		mov	r3, #1
 117 0036 FB71     		strb	r3, [r7, #7]
 153:../Main.c     **** 	start_driver_signals();
 118              		.loc 1 153 0
 119 0038 FFF7FEFF 		bl	start_driver_signals
 154:../Main.c     **** 
 155:../Main.c     **** 	IO004_SetPin(Enable_LEFT);
 120              		.loc 1 155 0
 121 003c 40F20003 		movw	r3, #:lower16:IO004_Handle7
 122 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 123 0044 5A68     		ldr	r2, [r3, #4]
 124 0046 40F20003 		movw	r3, #:lower16:IO004_Handle7
 125 004a C0F20003 		movt	r3, #:upper16:IO004_Handle7
 126 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 127 0050 4FF00101 		mov	r1, #1
 128 0054 01FA03F3 		lsl	r3, r1, r3
 129 0058 5360     		str	r3, [r2, #4]
 130 005a 00E0     		b	.L4
 131              	.L5:
 156:../Main.c     **** 
 157:../Main.c     **** 	while (1) {
 158:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 159:../Main.c     **** 			status_ticks = 0;
 160:../Main.c     **** 			read_R();
 161:../Main.c     **** 			update_driver_signals();
 162:../Main.c     **** 		} else {
 163:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 164:../Main.c     **** 				status = FAIL;
 165:../Main.c     **** 				start_driver_signals();
 166:../Main.c     **** 			}
 167:../Main.c     **** 		}
 168:../Main.c     **** 	}
 132              		.loc 1 168 0
 133 005c 00BF     		nop
 134              	.L4:
 158:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 135              		.loc 1 158 0
 136 005e 40F20003 		movw	r3, #:lower16:IO004_Handle13
 137 0062 C0F20003 		movt	r3, #:upper16:IO004_Handle13
 138 0066 5B68     		ldr	r3, [r3, #4]
 139 0068 5A6A     		ldr	r2, [r3, #36]
 140 006a 40F20003 		movw	r3, #:lower16:IO004_Handle13
 141 006e C0F20003 		movt	r3, #:upper16:IO004_Handle13
 142 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 143 0074 22FA03F3 		lsr	r3, r2, r3
 144 0078 03F00103 		and	r3, r3, #1
 145 007c 002B     		cmp	r3, #0
 146 007e 0BD0     		beq	.L2
 159:../Main.c     **** 			status_ticks = 0;
 147              		.loc 1 159 0
 148 0080 40F20003 		movw	r3, #:lower16:status_ticks
 149 0084 C0F20003 		movt	r3, #:upper16:status_ticks
 150 0088 4FF00002 		mov	r2, #0
 151 008c 1A60     		str	r2, [r3, #0]
 160:../Main.c     **** 			read_R();
 152              		.loc 1 160 0
 153 008e FFF7FEFF 		bl	read_R
 161:../Main.c     **** 			update_driver_signals();
 154              		.loc 1 161 0
 155 0092 FFF7FEFF 		bl	update_driver_signals
 156              		.loc 1 168 0
 157 0096 E1E7     		b	.L5
 158              	.L2:
 163:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 159              		.loc 1 163 0
 160 0098 40F20003 		movw	r3, #:lower16:status_ticks
 161 009c C0F20003 		movt	r3, #:upper16:status_ticks
 162 00a0 1A68     		ldr	r2, [r3, #0]
 163 00a2 41F28833 		movw	r3, #5000
 164 00a6 9A42     		cmp	r2, r3
 165 00a8 D8D9     		bls	.L5
 164:../Main.c     **** 				status = FAIL;
 166              		.loc 1 164 0
 167 00aa 4FF00003 		mov	r3, #0
 168 00ae FB71     		strb	r3, [r7, #7]
 165:../Main.c     **** 				start_driver_signals();
 169              		.loc 1 165 0
 170 00b0 FFF7FEFF 		bl	start_driver_signals
 171              		.loc 1 168 0
 172 00b4 D2E7     		b	.L5
 173              		.cfi_endproc
 174              	.LFE117:
 176 00b6 00BF     		.section	.text.WakeUp,"ax",%progbits
 177              		.align	2
 178              		.global	WakeUp
 179              		.thumb
 180              		.thumb_func
 182              	WakeUp:
 183              	.LFB118:
 169:../Main.c     **** 	return 0;
 170:../Main.c     **** }
 171:../Main.c     **** 
 172:../Main.c     **** void WakeUp(void) {
 184              		.loc 1 172 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 80B4     		push	{r7}
 190              	.LCFI3:
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 0002 00AF     		add	r7, sp, #0
 194              	.LCFI4:
 195              		.cfi_def_cfa_register 7
 173:../Main.c     **** 
 174:../Main.c     **** 	//Enable
 175:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 176:../Main.c     **** //	delayus(100);
 177:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 178:../Main.c     **** 
 179:../Main.c     **** 	//DrvDis
 180:../Main.c     **** 	/*IO004_SetPin(IO004_Handle2);
 181:../Main.c     **** 	 delayms(1);
 182:../Main.c     **** 	 IO004_TogglePin(IO004_Handle2);*/
 183:../Main.c     **** 
 184:../Main.c     **** }
 196              		.loc 1 184 0
 197 0004 BD46     		mov	sp, r7
 198 0006 80BC     		pop	{r7}
 199 0008 7047     		bx	lr
 200              		.cfi_endproc
 201              	.LFE118:
 203 000a 00BF     		.section	.text.start_driver_signals,"ax",%progbits
 204              		.align	2
 205              		.global	start_driver_signals
 206              		.thumb
 207              		.thumb_func
 209              	start_driver_signals:
 210              	.LFB119:
 185:../Main.c     **** 
 186:../Main.c     **** void start_driver_signals(void) {
 211              		.loc 1 186 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 80B5     		push	{r7, lr}
 216              	.LCFI5:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 00AF     		add	r7, sp, #0
 221              	.LCFI6:
 222              		.cfi_def_cfa_register 7
 187:../Main.c     **** 
 188:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 223              		.loc 1 188 0
 224 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 225 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 226 000c FFF7FEFF 		bl	PWMSP001_Start
 189:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 227              		.loc 1 189 0
 228 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 229 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 230 0018 4FF4C041 		mov	r1, #24576
 231 001c C4F2EA61 		movt	r1, 18154
 232 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 190:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, PWM_DUTY_LIM_ZERO);
 233              		.loc 1 190 0
 234 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 235 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 236 002c 4FF00001 		mov	r1, #0
 237 0030 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 191:../Main.c     **** 
 192:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 238              		.loc 1 192 0
 239 0034 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 240 0038 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 241 003c FFF7FEFF 		bl	PWMSP001_Start
 193:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 242              		.loc 1 193 0
 243 0040 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 244 0044 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 245 0048 4FF4C041 		mov	r1, #24576
 246 004c C4F2EA61 		movt	r1, 18154
 247 0050 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 194:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, PWM_DUTY_LIM_ZERO);
 248              		.loc 1 194 0
 249 0054 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 250 0058 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 251 005c 4FF00001 		mov	r1, #0
 252 0060 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 195:../Main.c     **** 
 196:../Main.c     **** }
 253              		.loc 1 196 0
 254 0064 80BD     		pop	{r7, pc}
 255              		.cfi_endproc
 256              	.LFE119:
 258 0066 00BF     		.section	.text.update_driver_signals,"ax",%progbits
 259              		.align	2
 260              		.global	update_driver_signals
 261              		.thumb
 262              		.thumb_func
 264              	update_driver_signals:
 265              	.LFB120:
 197:../Main.c     **** 
 198:../Main.c     **** void update_driver_signals(void) {
 266              		.loc 1 198 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 24
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI7:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 86B0     		sub	sp, sp, #24
 276              	.LCFI8:
 277              		.cfi_def_cfa_offset 32
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI9:
 280              		.cfi_def_cfa_register 7
 199:../Main.c     **** 
 200:../Main.c     **** 	unsigned char direction = data_R[3];
 281              		.loc 1 200 0
 282 0006 40F20003 		movw	r3, #:lower16:data_R
 283 000a C0F20003 		movt	r3, #:upper16:data_R
 284 000e DB78     		ldrb	r3, [r3, #3]
 285 0010 BB71     		strb	r3, [r7, #6]
 201:../Main.c     **** 	float duty_motor_left = PWM_DUTY_LIM_ZERO;
 286              		.loc 1 201 0
 287 0012 4FF00003 		mov	r3, #0
 288 0016 7B61     		str	r3, [r7, #20]	@ float
 202:../Main.c     **** 	float duty_motor_right = PWM_DUTY_LIM_ZERO;
 289              		.loc 1 202 0
 290 0018 4FF00003 		mov	r3, #0
 291 001c 3B61     		str	r3, [r7, #16]	@ float
 203:../Main.c     **** 	float direction_motor_left = 0;
 292              		.loc 1 203 0
 293 001e 4FF00003 		mov	r3, #0
 294 0022 FB60     		str	r3, [r7, #12]	@ float
 204:../Main.c     **** 	float direction_motor_right = 0;
 295              		.loc 1 204 0
 296 0024 4FF00003 		mov	r3, #0
 297 0028 BB60     		str	r3, [r7, #8]	@ float
 205:../Main.c     **** 
 206:../Main.c     **** 	char mode = LINEAR;
 298              		.loc 1 206 0
 299 002a 4FF00203 		mov	r3, #2
 300 002e FB71     		strb	r3, [r7, #7]
 207:../Main.c     **** 
 208:../Main.c     **** 	if (!(direction & (1 << DATA_TEST1))) {
 301              		.loc 1 208 0
 302 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 303 0032 03F00403 		and	r3, r3, #4
 304 0036 002B     		cmp	r3, #0
 305 0038 0BD1     		bne	.L9
 209:../Main.c     **** 
 210:../Main.c     **** 		if (direction & (1 << DATA_TEST0))
 306              		.loc 1 210 0
 307 003a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 308 003c 03F00203 		and	r3, r3, #2
 309 0040 002B     		cmp	r3, #0
 310 0042 03D0     		beq	.L10
 211:../Main.c     **** 			mode = EXP;
 311              		.loc 1 211 0
 312 0044 4FF00103 		mov	r3, #1
 313 0048 FB71     		strb	r3, [r7, #7]
 314 004a 02E0     		b	.L9
 315              	.L10:
 212:../Main.c     **** 		else
 213:../Main.c     **** 			mode = DEGRAU;
 316              		.loc 1 213 0
 317 004c 4FF00003 		mov	r3, #0
 318 0050 FB71     		strb	r3, [r7, #7]
 319              	.L9:
 214:../Main.c     **** 
 215:../Main.c     **** 	}
 216:../Main.c     **** 
 217:../Main.c     **** 	if (direction & (1 << LEFT_FRONT)) {
 320              		.loc 1 217 0
 321 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 322 0054 03F00803 		and	r3, r3, #8
 323 0058 002B     		cmp	r3, #0
 324 005a 15D0     		beq	.L11
 218:../Main.c     **** 
 219:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 325              		.loc 1 219 0
 326 005c 40F20003 		movw	r3, #:lower16:data_R
 327 0060 C0F20003 		movt	r3, #:upper16:data_R
 328 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 329 0066 322B     		cmp	r3, #50
 330 0068 0AD9     		bls	.L12
 220:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 331              		.loc 1 220 0
 332 006a 40F20003 		movw	r3, #:lower16:data_R
 333 006e C0F20003 		movt	r3, #:upper16:data_R
 334 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 335 0074 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 336 0076 1046     		mov	r0, r2
 337 0078 1946     		mov	r1, r3
 338 007a FFF7FEFF 		bl	calculateDutyCicle
 339 007e 7861     		str	r0, [r7, #20]	@ float
 340              	.L12:
 221:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 222:../Main.c     **** 		direction_motor_left = DIR_FRONT_LEFT;
 341              		.loc 1 222 0
 342 0080 4FF00003 		mov	r3, #0
 343 0084 FB60     		str	r3, [r7, #12]	@ float
 344 0086 19E0     		b	.L13
 345              	.L11:
 223:../Main.c     **** 
 224:../Main.c     **** 	} else if (direction & (1 << LEFT_BACK)) {
 346              		.loc 1 224 0
 347 0088 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 348 008a 03F00103 		and	r3, r3, #1
 349 008e 002B     		cmp	r3, #0
 350 0090 14D0     		beq	.L13
 225:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 351              		.loc 1 225 0
 352 0092 40F20003 		movw	r3, #:lower16:data_R
 353 0096 C0F20003 		movt	r3, #:upper16:data_R
 354 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 355 009c 322B     		cmp	r3, #50
 356 009e 0AD9     		bls	.L14
 226:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 357              		.loc 1 226 0
 358 00a0 40F20003 		movw	r3, #:lower16:data_R
 359 00a4 C0F20003 		movt	r3, #:upper16:data_R
 360 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 361 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 362 00ac 1046     		mov	r0, r2
 363 00ae 1946     		mov	r1, r3
 364 00b0 FFF7FEFF 		bl	calculateDutyCicle
 365 00b4 7861     		str	r0, [r7, #20]	@ float
 366              	.L14:
 227:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 228:../Main.c     **** 		direction_motor_left = DIR_REV_LEFT;
 367              		.loc 1 228 0
 368 00b6 4FF07E53 		mov	r3, #1065353216
 369 00ba FB60     		str	r3, [r7, #12]	@ float
 370              	.L13:
 229:../Main.c     **** 	}
 230:../Main.c     **** 
 231:../Main.c     **** 	if (direction & (1 << RIGHT_FRONT)) {
 371              		.loc 1 231 0
 372 00bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 373 00be 03F02003 		and	r3, r3, #32
 374 00c2 002B     		cmp	r3, #0
 375 00c4 15D0     		beq	.L15
 232:../Main.c     **** 
 233:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 376              		.loc 1 233 0
 377 00c6 40F20003 		movw	r3, #:lower16:data_R
 378 00ca C0F20003 		movt	r3, #:upper16:data_R
 379 00ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 380 00d0 322B     		cmp	r3, #50
 381 00d2 0AD9     		bls	.L16
 234:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 382              		.loc 1 234 0
 383 00d4 40F20003 		movw	r3, #:lower16:data_R
 384 00d8 C0F20003 		movt	r3, #:upper16:data_R
 385 00dc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 386 00de FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 387 00e0 1046     		mov	r0, r2
 388 00e2 1946     		mov	r1, r3
 389 00e4 FFF7FEFF 		bl	calculateDutyCicle
 390 00e8 3861     		str	r0, [r7, #16]	@ float
 391              	.L16:
 235:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 236:../Main.c     **** 		direction_motor_right = DIR_FRONT_RIGHT;
 392              		.loc 1 236 0
 393 00ea 4FF00003 		mov	r3, #0
 394 00ee BB60     		str	r3, [r7, #8]	@ float
 395 00f0 19E0     		b	.L17
 396              	.L15:
 237:../Main.c     **** 
 238:../Main.c     **** 	} else if (direction & (1 << RIGHT_BACK)) {
 397              		.loc 1 238 0
 398 00f2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 399 00f4 03F01003 		and	r3, r3, #16
 400 00f8 002B     		cmp	r3, #0
 401 00fa 14D0     		beq	.L17
 239:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 402              		.loc 1 239 0
 403 00fc 40F20003 		movw	r3, #:lower16:data_R
 404 0100 C0F20003 		movt	r3, #:upper16:data_R
 405 0104 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 406 0106 322B     		cmp	r3, #50
 407 0108 0AD9     		bls	.L18
 240:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 408              		.loc 1 240 0
 409 010a 40F20003 		movw	r3, #:lower16:data_R
 410 010e C0F20003 		movt	r3, #:upper16:data_R
 411 0112 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 412 0114 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 413 0116 1046     		mov	r0, r2
 414 0118 1946     		mov	r1, r3
 415 011a FFF7FEFF 		bl	calculateDutyCicle
 416 011e 3861     		str	r0, [r7, #16]	@ float
 417              	.L18:
 241:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 242:../Main.c     **** 		direction_motor_right = DIR_REV_RIGHT;
 418              		.loc 1 242 0
 419 0120 4FF07E53 		mov	r3, #1065353216
 420 0124 BB60     		str	r3, [r7, #8]	@ float
 421              	.L17:
 243:../Main.c     **** 	}
 244:../Main.c     **** 
 245:../Main.c     **** 	if (direction_motor_left) {
 422              		.loc 1 245 0
 423 0126 D7ED037A 		flds	s15, [r7, #12]
 424 012a F5EE407A 		fcmpzs	s15
 425 012e F1EE10FA 		fmstat
 426 0132 0FD0     		beq	.L19
 246:../Main.c     **** 		IO004_ResetPin(DIR_LEFT);
 427              		.loc 1 246 0
 428 0134 40F20003 		movw	r3, #:lower16:IO004_Handle6
 429 0138 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 430 013c 5A68     		ldr	r2, [r3, #4]
 431 013e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 432 0142 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 433 0146 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 434 0148 4FF48031 		mov	r1, #65536
 435 014c 01FA03F3 		lsl	r3, r1, r3
 436 0150 5360     		str	r3, [r2, #4]
 437 0152 0EE0     		b	.L20
 438              	.L19:
 247:../Main.c     **** 	} else {
 248:../Main.c     **** 		IO004_SetPin(DIR_LEFT);
 439              		.loc 1 248 0
 440 0154 40F20003 		movw	r3, #:lower16:IO004_Handle6
 441 0158 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 442 015c 5A68     		ldr	r2, [r3, #4]
 443 015e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 444 0162 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 445 0166 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 446 0168 4FF00101 		mov	r1, #1
 447 016c 01FA03F3 		lsl	r3, r1, r3
 448 0170 5360     		str	r3, [r2, #4]
 449              	.L20:
 249:../Main.c     **** 	}
 250:../Main.c     **** 
 251:../Main.c     **** 	if (direction_motor_right) {
 450              		.loc 1 251 0
 451 0172 D7ED027A 		flds	s15, [r7, #8]
 452 0176 F5EE407A 		fcmpzs	s15
 453 017a F1EE10FA 		fmstat
 454 017e 0FD0     		beq	.L21
 252:../Main.c     **** 		IO004_ResetPin(DIR_RIGHT);
 455              		.loc 1 252 0
 456 0180 40F20003 		movw	r3, #:lower16:IO004_Handle0
 457 0184 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 458 0188 5A68     		ldr	r2, [r3, #4]
 459 018a 40F20003 		movw	r3, #:lower16:IO004_Handle0
 460 018e C0F20003 		movt	r3, #:upper16:IO004_Handle0
 461 0192 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 462 0194 4FF48031 		mov	r1, #65536
 463 0198 01FA03F3 		lsl	r3, r1, r3
 464 019c 5360     		str	r3, [r2, #4]
 465 019e 0EE0     		b	.L22
 466              	.L21:
 253:../Main.c     **** 	} else {
 254:../Main.c     **** 		IO004_SetPin(DIR_RIGHT);
 467              		.loc 1 254 0
 468 01a0 40F20003 		movw	r3, #:lower16:IO004_Handle0
 469 01a4 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 470 01a8 5A68     		ldr	r2, [r3, #4]
 471 01aa 40F20003 		movw	r3, #:lower16:IO004_Handle0
 472 01ae C0F20003 		movt	r3, #:upper16:IO004_Handle0
 473 01b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 474 01b4 4FF00101 		mov	r1, #1
 475 01b8 01FA03F3 		lsl	r3, r1, r3
 476 01bc 5360     		str	r3, [r2, #4]
 477              	.L22:
 255:../Main.c     **** 	}
 256:../Main.c     **** 
 257:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, duty_motor_right);
 478              		.loc 1 257 0
 479 01be 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 480 01c2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 481 01c6 3969     		ldr	r1, [r7, #16]	@ float
 482 01c8 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 258:../Main.c     **** 
 259:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, duty_motor_left);
 483              		.loc 1 259 0
 484 01cc 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 485 01d0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 486 01d4 7969     		ldr	r1, [r7, #20]	@ float
 487 01d6 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 260:../Main.c     **** 
 261:../Main.c     **** }
 488              		.loc 1 261 0
 489 01da 07F11807 		add	r7, r7, #24
 490 01de BD46     		mov	sp, r7
 491 01e0 80BD     		pop	{r7, pc}
 492              		.cfi_endproc
 493              	.LFE120:
 495 01e2 00BF     		.section	.text.calculateDutyCicle,"ax",%progbits
 496              		.align	2
 497              		.global	calculateDutyCicle
 498              		.thumb
 499              		.thumb_func
 501              	calculateDutyCicle:
 502              	.LFB121:
 262:../Main.c     **** 
 263:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data) {
 503              		.loc 1 263 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 40
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507 0000 80B5     		push	{r7, lr}
 508              	.LCFI10:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 8AB0     		sub	sp, sp, #40
 513              	.LCFI11:
 514              		.cfi_def_cfa_offset 48
 515 0004 00AF     		add	r7, sp, #0
 516              	.LCFI12:
 517              		.cfi_def_cfa_register 7
 518 0006 0246     		mov	r2, r0
 519 0008 0B46     		mov	r3, r1
 520 000a FA71     		strb	r2, [r7, #7]
 521 000c BB71     		strb	r3, [r7, #6]
 264:../Main.c     **** 
 265:../Main.c     **** 	unsigned char range = 255 - PWM_MOTOR_CUT_OFF;
 522              		.loc 1 265 0
 523 000e 4FF0CD03 		mov	r3, #205
 524 0012 87F82330 		strb	r3, [r7, #35]
 266:../Main.c     **** 
 267:../Main.c     **** 	unsigned char pwm_duty_limit = data_R[0];
 525              		.loc 1 267 0
 526 0016 40F20003 		movw	r3, #:lower16:data_R
 527 001a C0F20003 		movt	r3, #:upper16:data_R
 528 001e 1B78     		ldrb	r3, [r3, #0]
 529 0020 87F82230 		strb	r3, [r7, #34]
 268:../Main.c     **** 
 269:../Main.c     **** 	if (mode == LINEAR) {
 530              		.loc 1 269 0
 531 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 532 0026 022B     		cmp	r3, #2
 533 0028 19D1     		bne	.L24
 270:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 271:../Main.c     **** 				+ ((100 - PWM_DUTY_LIM_MIN)
 272:../Main.c     **** 						* (((float) data) - PWM_MOTOR_CUT_OFF)) / range;
 534              		.loc 1 272 0
 535 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 536 002c 06EE903A 		fmsr	s13, r3	@ int
 537 0030 B8EE667A 		fuitos	s14, s13
 538 0034 DFED927A 		flds	s15, .L40
 539 0038 37EE677A 		fsubs	s14, s14, s15
 540 003c DFED917A 		flds	s15, .L40+4
 541 0040 27EE277A 		fmuls	s14, s14, s15
 542 0044 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 543 0048 06EE903A 		fmsr	s13, r3	@ int
 544 004c F8EEE67A 		fsitos	s15, s13
 545 0050 87EE277A 		fdivs	s14, s14, s15
 270:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 546              		.loc 1 270 0
 547 0054 F2EE007A 		fconsts	s15, #32
 548 0058 77EE277A 		fadds	s15, s14, s15
 549 005c 09E1     		b	.L25
 550              	.L24:
 273:../Main.c     **** 
 274:../Main.c     **** 	} else if (mode == EXP) {
 551              		.loc 1 274 0
 552 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 553 0060 012B     		cmp	r3, #1
 554 0062 40F0C180 		bne	.L26
 555              	.LBB4:
 275:../Main.c     **** 
 276:../Main.c     **** 		//MODO GAMBS ON
 277:../Main.c     **** 
 278:../Main.c     **** //		int correctedData = ((255*pwm_duty_limit - PWM_MOTOR_CUT_OFF)*data)/(255*pwm_duty_limit) + PWM_
 279:../Main.c     **** 		int duty_cicle;
 280:../Main.c     **** 
 281:../Main.c     **** 		float value = 100.0f * data / ((pwm_duty_limit / 100.0f) * 255.0f);
 556              		.loc 1 281 0
 557 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 558 0068 07EE903A 		fmsr	s15, r3	@ int
 559 006c B8EEE77A 		fsitos	s14, s15
 560 0070 DFED857A 		flds	s15, .L40+8
 561 0074 27EE277A 		fmuls	s14, s14, s15
 562 0078 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 563 007c 07EE903A 		fmsr	s15, r3	@ int
 564 0080 F8EEE76A 		fsitos	s13, s15
 565 0084 DFED807A 		flds	s15, .L40+8
 566 0088 C6EEA76A 		fdivs	s13, s13, s15
 567 008c DFED7F7A 		flds	s15, .L40+12
 568 0090 66EEA77A 		fmuls	s15, s13, s15
 569 0094 C7EE277A 		fdivs	s15, s14, s15
 570 0098 C7ED077A 		fsts	s15, [r7, #28]
 282:../Main.c     **** 
 283:../Main.c     **** 		if (value < 10) {
 571              		.loc 1 283 0
 572 009c 97ED077A 		flds	s14, [r7, #28]
 573 00a0 F2EE047A 		fconsts	s15, #36
 574 00a4 B4EEE77A 		fcmpes	s14, s15
 575 00a8 F1EE10FA 		fmstat
 576 00ac 03D5     		bpl	.L37
 577              	.L34:
 284:../Main.c     **** 			duty_cicle = 0;
 578              		.loc 1 284 0
 579 00ae 4FF00003 		mov	r3, #0
 580 00b2 7B62     		str	r3, [r7, #36]
 581 00b4 93E0     		b	.L29
 582              	.L37:
 285:../Main.c     **** 		} else if (value < 75) {
 583              		.loc 1 285 0
 584 00b6 97ED077A 		flds	s14, [r7, #28]
 585 00ba DFED757A 		flds	s15, .L40+16
 586 00be B4EEE77A 		fcmpes	s14, s15
 587 00c2 F1EE10FA 		fmstat
 588 00c6 24D5     		bpl	.L38
 589              	.L35:
 286:../Main.c     **** 			duty_cicle = (value - 10) * (33 - PWM_DUTY_LIM_MIN)
 590              		.loc 1 286 0
 591 00c8 97ED077A 		flds	s14, [r7, #28]
 592 00cc F2EE047A 		fconsts	s15, #36
 593 00d0 37EE677A 		fsubs	s14, s14, s15
 594 00d4 F3EE097A 		fconsts	s15, #57
 595 00d8 27EE277A 		fmuls	s14, s14, s15
 287:../Main.c     **** 					* (pwm_duty_limit / 100.0f) / (65.0f);
 596              		.loc 1 287 0
 597 00dc 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 598 00e0 07EE903A 		fmsr	s15, r3	@ int
 599 00e4 F8EEE76A 		fsitos	s13, s15
 600 00e8 DFED677A 		flds	s15, .L40+8
 601 00ec C6EEA77A 		fdivs	s15, s13, s15
 602 00f0 27EE277A 		fmuls	s14, s14, s15
 603 00f4 DFED677A 		flds	s15, .L40+20
 604 00f8 C7EE277A 		fdivs	s15, s14, s15
 286:../Main.c     **** 			duty_cicle = (value - 10) * (33 - PWM_DUTY_LIM_MIN)
 605              		.loc 1 286 0
 606 00fc FDEEE77A 		ftosizs	s15, s15
 607 0100 C7ED097A 		fsts	s15, [r7, #36]	@ int
 288:../Main.c     **** 			if (duty_cicle < PWM_DUTY_LIM_MIN)
 608              		.loc 1 288 0
 609 0104 7B6A     		ldr	r3, [r7, #36]
 610 0106 072B     		cmp	r3, #7
 611 0108 69DC     		bgt	.L29
 289:../Main.c     **** 				duty_cicle = 0;
 612              		.loc 1 289 0
 613 010a 4FF00003 		mov	r3, #0
 614 010e 7B62     		str	r3, [r7, #36]
 615 0110 65E0     		b	.L29
 616              	.L38:
 290:../Main.c     **** 		} else if (value < 90) {
 617              		.loc 1 290 0
 618 0112 97ED077A 		flds	s14, [r7, #28]
 619 0116 DFED607A 		flds	s15, .L40+24
 620 011a B4EEE77A 		fcmpes	s14, s15
 621 011e F1EE10FA 		fmstat
 622 0122 2ED5     		bpl	.L39
 623              	.L36:
 291:../Main.c     **** 			duty_cicle = (value - 75) * 33 * (pwm_duty_limit / 100.0f) / (25.0f)
 624              		.loc 1 291 0
 625 0124 97ED077A 		flds	s14, [r7, #28]
 626 0128 DFED597A 		flds	s15, .L40+16
 627 012c 37EE677A 		fsubs	s14, s14, s15
 628 0130 DFED5A7A 		flds	s15, .L40+28
 629 0134 27EE277A 		fmuls	s14, s14, s15
 630 0138 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 631 013c 07EE903A 		fmsr	s15, r3	@ int
 632 0140 F8EEE76A 		fsitos	s13, s15
 633 0144 DFED507A 		flds	s15, .L40+8
 634 0148 C6EEA77A 		fdivs	s15, s13, s15
 635 014c 27EE277A 		fmuls	s14, s14, s15
 636 0150 F3EE097A 		fconsts	s15, #57
 637 0154 87EE277A 		fdivs	s14, s14, s15
 292:../Main.c     **** 					+ 33 * (pwm_duty_limit / 100.0f);
 638              		.loc 1 292 0
 639 0158 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 640 015c 07EE903A 		fmsr	s15, r3	@ int
 641 0160 F8EEE76A 		fsitos	s13, s15
 642 0164 DFED487A 		flds	s15, .L40+8
 643 0168 C6EEA76A 		fdivs	s13, s13, s15
 644 016c DFED4B7A 		flds	s15, .L40+28
 645 0170 66EEA77A 		fmuls	s15, s13, s15
 646 0174 77EE277A 		fadds	s15, s14, s15
 291:../Main.c     **** 			duty_cicle = (value - 75) * 33 * (pwm_duty_limit / 100.0f) / (25.0f)
 647              		.loc 1 291 0
 648 0178 FDEEE77A 		ftosizs	s15, s15
 649 017c C7ED097A 		fsts	s15, [r7, #36]	@ int
 650 0180 2DE0     		b	.L29
 651              	.L39:
 293:../Main.c     **** 		} else {
 294:../Main.c     **** 			duty_cicle = (value - 90) * 33 * (pwm_duty_limit / 100.0f) / (10.0f)
 652              		.loc 1 294 0
 653 0182 97ED077A 		flds	s14, [r7, #28]
 654 0186 DFED447A 		flds	s15, .L40+24
 655 018a 37EE677A 		fsubs	s14, s14, s15
 656 018e DFED437A 		flds	s15, .L40+28
 657 0192 27EE277A 		fmuls	s14, s14, s15
 658 0196 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 659 019a 07EE903A 		fmsr	s15, r3	@ int
 660 019e F8EEE76A 		fsitos	s13, s15
 661 01a2 DFED397A 		flds	s15, .L40+8
 662 01a6 C6EEA77A 		fdivs	s15, s13, s15
 663 01aa 27EE277A 		fmuls	s14, s14, s15
 664 01ae F2EE047A 		fconsts	s15, #36
 665 01b2 87EE277A 		fdivs	s14, s14, s15
 295:../Main.c     **** 					+ 66 * (pwm_duty_limit / 100.0f);
 666              		.loc 1 295 0
 667 01b6 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 668 01ba 07EE903A 		fmsr	s15, r3	@ int
 669 01be F8EEE76A 		fsitos	s13, s15
 670 01c2 DFED317A 		flds	s15, .L40+8
 671 01c6 C6EEA76A 		fdivs	s13, s13, s15
 672 01ca DFED357A 		flds	s15, .L40+32
 673 01ce 66EEA77A 		fmuls	s15, s13, s15
 674 01d2 77EE277A 		fadds	s15, s14, s15
 294:../Main.c     **** 			duty_cicle = (value - 90) * 33 * (pwm_duty_limit / 100.0f) / (10.0f)
 675              		.loc 1 294 0
 676 01d6 FDEEE77A 		ftosizs	s15, s15
 677 01da C7ED097A 		fsts	s15, [r7, #36]	@ int
 678              	.L29:
 296:../Main.c     **** 		}
 297:../Main.c     **** 
 298:../Main.c     **** 		return duty_cicle;
 679              		.loc 1 298 0
 680 01de D7ED097A 		flds	s15, [r7, #36]	@ int
 681 01e2 F8EEE77A 		fsitos	s15, s15
 682 01e6 44E0     		b	.L25
 683              	.L26:
 684              	.LBE4:
 685              	.LBB5:
 299:../Main.c     **** 		//MODO GAMBS OFF
 300:../Main.c     **** 
 301:../Main.c     **** 	} else { // DEGRAU
 302:../Main.c     **** 
 303:../Main.c     **** 		int nDegrau = 4;
 686              		.loc 1 303 0
 687 01e8 4FF00403 		mov	r3, #4
 688 01ec BB61     		str	r3, [r7, #24]
 304:../Main.c     **** 		float larguraDegrau = range / nDegrau;
 689              		.loc 1 304 0
 690 01ee 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 691 01f2 BB69     		ldr	r3, [r7, #24]
 692 01f4 92FBF3F3 		sdiv	r3, r2, r3
 693 01f8 06EE903A 		fmsr	s13, r3	@ int
 694 01fc F8EEE67A 		fsitos	s15, s13
 695 0200 C7ED057A 		fsts	s15, [r7, #20]
 305:../Main.c     **** 		float alturaDegrau = PWM_DUTY_LIM_MAX * pwm_duty_limit
 696              		.loc 1 305 0
 697 0204 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 698 0208 4FF06402 		mov	r2, #100
 699 020c 02FB03F3 		mul	r3, r2, r3
 306:../Main.c     **** 				/ (100.0f * (nDegrau - 1));
 700              		.loc 1 306 0
 701 0210 07EE903A 		fmsr	s15, r3	@ int
 702 0214 B8EEE77A 		fsitos	s14, s15
 703 0218 BB69     		ldr	r3, [r7, #24]
 704 021a 03F1FF33 		add	r3, r3, #-1
 705 021e 07EE903A 		fmsr	s15, r3	@ int
 706 0222 F8EEE76A 		fsitos	s13, s15
 707 0226 DFED187A 		flds	s15, .L40+8
 708 022a 66EEA77A 		fmuls	s15, s13, s15
 305:../Main.c     **** 		float alturaDegrau = PWM_DUTY_LIM_MAX * pwm_duty_limit
 709              		.loc 1 305 0
 710 022e C7EE277A 		fdivs	s15, s14, s15
 711 0232 C7ED047A 		fsts	s15, [r7, #16]
 307:../Main.c     **** 
 308:../Main.c     **** 		int sinalDegrau = floor((data / larguraDegrau)) * alturaDegrau;
 712              		.loc 1 308 0
 713 0236 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 714 0238 06EE903A 		fmsr	s13, r3	@ int
 715 023c B8EEE67A 		fsitos	s14, s13
 716 0240 D7ED057A 		flds	s15, [r7, #20]
 717 0244 C7EE277A 		fdivs	s15, s14, s15
 718 0248 17EE900A 		fmrs	r0, s15
 719 024c FFF7FEFF 		bl	floor
 720 0250 0346     		mov	r3, r0
 721 0252 07EE903A 		fmsr	s15, r3	@ int
 722 0256 B8EEE77A 		fsitos	s14, s15
 723 025a D7ED047A 		flds	s15, [r7, #16]
 724 025e 67EE277A 		fmuls	s15, s14, s15
 725 0262 FDEEE77A 		ftosizs	s15, s15
 726 0266 C7ED037A 		fsts	s15, [r7, #12]	@ int
 309:../Main.c     **** 
 310:../Main.c     **** 		return sinalDegrau;
 727              		.loc 1 310 0
 728 026a D7ED037A 		flds	s15, [r7, #12]	@ int
 729 026e F8EEE77A 		fsitos	s15, s15
 730              	.L25:
 731 0272 17EE903A 		fmrs	r3, s15
 732              	.LBE5:
 311:../Main.c     **** 
 312:../Main.c     **** 	}
 313:../Main.c     **** 
 314:../Main.c     **** }
 733              		.loc 1 314 0
 734 0276 1846     		mov	r0, r3	@ float
 735 0278 07F12807 		add	r7, r7, #40
 736 027c BD46     		mov	sp, r7
 737 027e 80BD     		pop	{r7, pc}
 738              	.L41:
 739              		.align	2
 740              	.L40:
 741 0280 00004842 		.word	1112014848
 742 0284 0000B842 		.word	1119354880
 743 0288 0000C842 		.word	1120403456
 744 028c 00007F43 		.word	1132396544
 745 0290 00009642 		.word	1117126656
 746 0294 00008242 		.word	1115815936
 747 0298 0000B442 		.word	1119092736
 748 029c 00000442 		.word	1107558400
 749 02a0 00008442 		.word	1115947008
 750              		.cfi_endproc
 751              	.LFE121:
 753              		.section	.text.Testando_Handler,"ax",%progbits
 754              		.align	2
 755              		.global	Testando_Handler
 756              		.thumb
 757              		.thumb_func
 759              	Testando_Handler:
 760              	.LFB122:
 315:../Main.c     **** 
 316:../Main.c     **** void Testando_Handler(void) {
 761              		.loc 1 316 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0000 80B4     		push	{r7}
 767              	.LCFI13:
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 00AF     		add	r7, sp, #0
 771              	.LCFI14:
 772              		.cfi_def_cfa_register 7
 317:../Main.c     **** 
 318:../Main.c     **** 	uint32_t status;
 319:../Main.c     **** 
 320:../Main.c     **** 	/*status = RD_REG(ERU001_Handle0.ERURegs->EXICON[ERU001_Handle0.InputChannel],ERU_EXICON_FL_Msk , 
 321:../Main.c     **** 
 322:../Main.c     **** 	 if(status)
 323:../Main.c     **** 	 {
 324:../Main.c     **** 	 IO004_ResetPin(IO004_Handle6);		// ERU event received, turn on LED
 325:../Main.c     **** 	 ERU001_ClearFlag(ERU001_Handle0);	// Clears the Status Flag
 326:../Main.c     **** 	 }*/
 327:../Main.c     **** }
 773              		.loc 1 327 0
 774 0004 BD46     		mov	sp, r7
 775 0006 80BC     		pop	{r7}
 776 0008 7047     		bx	lr
 777              		.cfi_endproc
 778              	.LFE122:
 780 000a 00BF     		.section	.text.ERU0_3_IRQHandler,"ax",%progbits
 781              		.align	2
 782              		.global	ERU0_3_IRQHandler
 783              		.thumb
 784              		.thumb_func
 786              	ERU0_3_IRQHandler:
 787              	.LFB123:
 328:../Main.c     **** 
 329:../Main.c     **** void interrupt_left(void) {
 788              		.loc 1 329 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0000 80B4     		push	{r7}
 794              	.LCFI15:
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 0002 00AF     		add	r7, sp, #0
 798              	.LCFI16:
 799              		.cfi_def_cfa_register 7
 330:../Main.c     **** 
 331:../Main.c     **** }
 800              		.loc 1 331 0
 801 0004 BD46     		mov	sp, r7
 802 0006 80BC     		pop	{r7}
 803 0008 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE123:
 807 000a 00BF     		.section	.text.ERU1_0_IRQHandler,"ax",%progbits
 808              		.align	2
 809              		.global	ERU1_0_IRQHandler
 810              		.thumb
 811              		.thumb_func
 813              	ERU1_0_IRQHandler:
 814              	.LFB124:
 332:../Main.c     **** 
 333:../Main.c     **** void interrupt_right(void) {
 815              		.loc 1 333 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0000 80B4     		push	{r7}
 821              	.LCFI17:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 00AF     		add	r7, sp, #0
 825              	.LCFI18:
 826              		.cfi_def_cfa_register 7
 334:../Main.c     **** 
 335:../Main.c     **** }
 827              		.loc 1 335 0
 828 0004 BD46     		mov	sp, r7
 829 0006 80BC     		pop	{r7}
 830 0008 7047     		bx	lr
 831              		.cfi_endproc
 832              	.LFE124:
 834 000a 00BF     		.section	.text.read_R,"ax",%progbits
 835              		.align	2
 836              		.global	read_R
 837              		.thumb
 838              		.thumb_func
 840              	read_R:
 841              	.LFB125:
 336:../Main.c     **** 
 337:../Main.c     **** /***************************************************/
 338:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 339:../Main.c     **** /***************************************************/
 340:../Main.c     **** 
 341:../Main.c     **** void read_R() {
 842              		.loc 1 341 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 16
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 0000 80B5     		push	{r7, lr}
 847              	.LCFI19:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
 851 0002 84B0     		sub	sp, sp, #16
 852              	.LCFI20:
 853              		.cfi_def_cfa_offset 24
 854 0004 00AF     		add	r7, sp, #0
 855              	.LCFI21:
 856              		.cfi_def_cfa_register 7
 342:../Main.c     **** 	int i, j;
 343:../Main.c     **** 	IO004_ResetPin(CE);
 857              		.loc 1 343 0
 858 0006 40F20003 		movw	r3, #:lower16:IO004_Handle14
 859 000a C0F20003 		movt	r3, #:upper16:IO004_Handle14
 860 000e 5A68     		ldr	r2, [r3, #4]
 861 0010 40F20003 		movw	r3, #:lower16:IO004_Handle14
 862 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 863 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 864 001a 4FF48031 		mov	r1, #65536
 865 001e 01FA03F3 		lsl	r3, r1, r3
 866 0022 5360     		str	r3, [r2, #4]
 344:../Main.c     **** 	delay(50000);
 867              		.loc 1 344 0
 868 0024 4CF25030 		movw	r0, #50000
 869 0028 FFF7FEFF 		bl	delay
 345:../Main.c     **** 	uint8_t temp = 0;
 870              		.loc 1 345 0
 871 002c 4FF00003 		mov	r3, #0
 872 0030 FB71     		strb	r3, [r7, #7]
 346:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 873              		.loc 1 346 0
 874 0032 4FF00003 		mov	r3, #0
 875 0036 BB60     		str	r3, [r7, #8]
 876 0038 36E0     		b	.L46
 877              	.L50:
 347:../Main.c     **** 		for (i = 7; i > -1; i--) {
 878              		.loc 1 347 0
 879 003a 4FF00703 		mov	r3, #7
 880 003e FB60     		str	r3, [r7, #12]
 881 0040 20E0     		b	.L47
 882              	.L49:
 348:../Main.c     **** 			if (IO004_ReadPin(DATA))
 883              		.loc 1 348 0
 884 0042 40F20003 		movw	r3, #:lower16:IO004_Handle12
 885 0046 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 886 004a 5B68     		ldr	r3, [r3, #4]
 887 004c 5A6A     		ldr	r2, [r3, #36]
 888 004e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 889 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 890 0056 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 891 0058 22FA03F3 		lsr	r3, r2, r3
 892 005c 03F00103 		and	r3, r3, #1
 893 0060 002B     		cmp	r3, #0
 894 0062 09D0     		beq	.L48
 349:../Main.c     **** 				temp |= (1 << i);
 895              		.loc 1 349 0
 896 0064 4FF00102 		mov	r2, #1
 897 0068 FB68     		ldr	r3, [r7, #12]
 898 006a 02FA03F3 		lsl	r3, r2, r3
 899 006e DAB2     		uxtb	r2, r3
 900 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 901 0072 1343     		orrs	r3, r3, r2
 902 0074 DBB2     		uxtb	r3, r3
 903 0076 FB71     		strb	r3, [r7, #7]
 904              	.L48:
 350:../Main.c     **** 			pulse_R();
 905              		.loc 1 350 0
 906 0078 FFF7FEFF 		bl	pulse_R
 347:../Main.c     **** 		for (i = 7; i > -1; i--) {
 907              		.loc 1 347 0
 908 007c FB68     		ldr	r3, [r7, #12]
 909 007e 03F1FF33 		add	r3, r3, #-1
 910 0082 FB60     		str	r3, [r7, #12]
 911              	.L47:
 347:../Main.c     **** 		for (i = 7; i > -1; i--) {
 912              		.loc 1 347 0 is_stmt 0 discriminator 1
 913 0084 FB68     		ldr	r3, [r7, #12]
 914 0086 002B     		cmp	r3, #0
 915 0088 DBDA     		bge	.L49
 351:../Main.c     **** 		}
 352:../Main.c     **** 		data_R[j] = temp;
 916              		.loc 1 352 0 is_stmt 1
 917 008a 40F20003 		movw	r3, #:lower16:data_R
 918 008e C0F20003 		movt	r3, #:upper16:data_R
 919 0092 BA68     		ldr	r2, [r7, #8]
 920 0094 9B18     		adds	r3, r3, r2
 921 0096 FA79     		ldrb	r2, [r7, #7]
 922 0098 1A70     		strb	r2, [r3, #0]
 353:../Main.c     **** 		temp = 0;
 923              		.loc 1 353 0
 924 009a 4FF00003 		mov	r3, #0
 925 009e FB71     		strb	r3, [r7, #7]
 346:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 926              		.loc 1 346 0
 927 00a0 BB68     		ldr	r3, [r7, #8]
 928 00a2 03F10103 		add	r3, r3, #1
 929 00a6 BB60     		str	r3, [r7, #8]
 930              	.L46:
 346:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 931              		.loc 1 346 0 is_stmt 0 discriminator 1
 932 00a8 BB68     		ldr	r3, [r7, #8]
 933 00aa 042B     		cmp	r3, #4
 934 00ac C5DD     		ble	.L50
 354:../Main.c     **** 	}
 355:../Main.c     **** 	IO004_SetPin(CE);
 935              		.loc 1 355 0 is_stmt 1
 936 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle14
 937 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 938 00b6 5A68     		ldr	r2, [r3, #4]
 939 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 940 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 941 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 942 00c2 4FF00101 		mov	r1, #1
 943 00c6 01FA03F3 		lsl	r3, r1, r3
 944 00ca 5360     		str	r3, [r2, #4]
 356:../Main.c     **** 	delay(50000);
 945              		.loc 1 356 0
 946 00cc 4CF25030 		movw	r0, #50000
 947 00d0 FFF7FEFF 		bl	delay
 357:../Main.c     **** }
 948              		.loc 1 357 0
 949 00d4 07F11007 		add	r7, r7, #16
 950 00d8 BD46     		mov	sp, r7
 951 00da 80BD     		pop	{r7, pc}
 952              		.cfi_endproc
 953              	.LFE125:
 955              		.section	.text.pulse_R,"ax",%progbits
 956              		.align	2
 957              		.global	pulse_R
 958              		.thumb
 959              		.thumb_func
 961              	pulse_R:
 962              	.LFB126:
 358:../Main.c     **** 
 359:../Main.c     **** void pulse_R() {
 963              		.loc 1 359 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              	.LCFI22:
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 00AF     		add	r7, sp, #0
 973              	.LCFI23:
 974              		.cfi_def_cfa_register 7
 360:../Main.c     **** 	delay(300);
 975              		.loc 1 360 0
 976 0004 4FF49670 		mov	r0, #300
 977 0008 FFF7FEFF 		bl	delay
 361:../Main.c     **** 	IO004_SetPin(CLK1);
 978              		.loc 1 361 0
 979 000c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 980 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 981 0014 5A68     		ldr	r2, [r3, #4]
 982 0016 40F20003 		movw	r3, #:lower16:IO004_Handle11
 983 001a C0F20003 		movt	r3, #:upper16:IO004_Handle11
 984 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 985 0020 4FF00101 		mov	r1, #1
 986 0024 01FA03F3 		lsl	r3, r1, r3
 987 0028 5360     		str	r3, [r2, #4]
 362:../Main.c     **** 	delay(300);
 988              		.loc 1 362 0
 989 002a 4FF49670 		mov	r0, #300
 990 002e FFF7FEFF 		bl	delay
 363:../Main.c     **** 	IO004_ResetPin(CLK1);
 991              		.loc 1 363 0
 992 0032 40F20003 		movw	r3, #:lower16:IO004_Handle11
 993 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 994 003a 5A68     		ldr	r2, [r3, #4]
 995 003c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 996 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 997 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 998 0046 4FF48031 		mov	r1, #65536
 999 004a 01FA03F3 		lsl	r3, r1, r3
 1000 004e 5360     		str	r3, [r2, #4]
 364:../Main.c     **** }
 1001              		.loc 1 364 0
 1002 0050 80BD     		pop	{r7, pc}
 1003              		.cfi_endproc
 1004              	.LFE126:
 1006 0052 00BF     		.section	.text.configure_R,"ax",%progbits
 1007              		.align	2
 1008              		.global	configure_R
 1009              		.thumb
 1010              		.thumb_func
 1012              	configure_R:
 1013              	.LFB127:
 365:../Main.c     **** 
 366:../Main.c     **** void configure_R() {
 1014              		.loc 1 366 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 8
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018 0000 80B5     		push	{r7, lr}
 1019              	.LCFI24:
 1020              		.cfi_def_cfa_offset 8
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 1023 0002 82B0     		sub	sp, sp, #8
 1024              	.LCFI25:
 1025              		.cfi_def_cfa_offset 16
 1026 0004 00AF     		add	r7, sp, #0
 1027              	.LCFI26:
 1028              		.cfi_def_cfa_register 7
 367:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 368:../Main.c     **** 	configuration[0] = 0xC5; //RF_CH# e OP_MODE 0b11000101
 1029              		.loc 1 368 0
 1030 0006 40F20003 		movw	r3, #:lower16:configuration
 1031 000a C0F20003 		movt	r3, #:upper16:configuration
 1032 000e 4FF0C502 		mov	r2, #197
 1033 0012 1A70     		strb	r2, [r3, #0]
 369:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1034              		.loc 1 369 0
 1035 0014 40F20003 		movw	r3, #:lower16:configuration
 1036 0018 C0F20003 		movt	r3, #:upper16:configuration
 1037 001c 4FF04F02 		mov	r2, #79
 1038 0020 5A70     		strb	r2, [r3, #1]
 370:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 1039              		.loc 1 370 0
 1040 0022 40F20003 		movw	r3, #:lower16:configuration
 1041 0026 C0F20003 		movt	r3, #:upper16:configuration
 1042 002a 4FF0A302 		mov	r2, #163
 1043 002e 9A70     		strb	r2, [r3, #2]
 371:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1044              		.loc 1 371 0
 1045 0030 40F20003 		movw	r3, #:lower16:configuration
 1046 0034 C0F20003 		movt	r3, #:upper16:configuration
 1047 0038 4FF0EE02 		mov	r2, #238
 1048 003c DA70     		strb	r2, [r3, #3]
 372:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1049              		.loc 1 372 0
 1050 003e 40F20003 		movw	r3, #:lower16:configuration
 1051 0042 C0F20003 		movt	r3, #:upper16:configuration
 1052 0046 4FF0DD02 		mov	r2, #221
 1053 004a 1A71     		strb	r2, [r3, #4]
 373:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1054              		.loc 1 373 0
 1055 004c 40F20003 		movw	r3, #:lower16:configuration
 1056 0050 C0F20003 		movt	r3, #:upper16:configuration
 1057 0054 4FF0CC02 		mov	r2, #204
 1058 0058 5A71     		strb	r2, [r3, #5]
 374:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1059              		.loc 1 374 0
 1060 005a 40F20003 		movw	r3, #:lower16:configuration
 1061 005e C0F20003 		movt	r3, #:upper16:configuration
 1062 0062 4FF0BB02 		mov	r2, #187
 1063 0066 9A71     		strb	r2, [r3, #6]
 375:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1064              		.loc 1 375 0
 1065 0068 40F20003 		movw	r3, #:lower16:configuration
 1066 006c C0F20003 		movt	r3, #:upper16:configuration
 1067 0070 4FF0AA02 		mov	r2, #170
 1068 0074 DA71     		strb	r2, [r3, #7]
 376:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1069              		.loc 1 376 0
 1070 0076 40F20003 		movw	r3, #:lower16:configuration
 1071 007a C0F20003 		movt	r3, #:upper16:configuration
 1072 007e 4FF00002 		mov	r2, #0
 1073 0082 1A72     		strb	r2, [r3, #8]
 377:../Main.c     **** 	configuration[9] = 0b00000000;
 1074              		.loc 1 377 0
 1075 0084 40F20003 		movw	r3, #:lower16:configuration
 1076 0088 C0F20003 		movt	r3, #:upper16:configuration
 1077 008c 4FF00002 		mov	r2, #0
 1078 0090 5A72     		strb	r2, [r3, #9]
 378:../Main.c     **** 	configuration[10] = 0b00000000;
 1079              		.loc 1 378 0
 1080 0092 40F20003 		movw	r3, #:lower16:configuration
 1081 0096 C0F20003 		movt	r3, #:upper16:configuration
 1082 009a 4FF00002 		mov	r2, #0
 1083 009e 9A72     		strb	r2, [r3, #10]
 379:../Main.c     **** 	configuration[11] = 0b00000000;
 1084              		.loc 1 379 0
 1085 00a0 40F20003 		movw	r3, #:lower16:configuration
 1086 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1087 00a8 4FF00002 		mov	r2, #0
 1088 00ac DA72     		strb	r2, [r3, #11]
 380:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1089              		.loc 1 380 0
 1090 00ae 40F20003 		movw	r3, #:lower16:configuration
 1091 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1092 00b6 4FF00002 		mov	r2, #0
 1093 00ba 1A73     		strb	r2, [r3, #12]
 381:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1094              		.loc 1 381 0
 1095 00bc 40F20003 		movw	r3, #:lower16:configuration
 1096 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1097 00c4 4FF02802 		mov	r2, #40
 1098 00c8 5A73     		strb	r2, [r3, #13]
 382:../Main.c     **** 	configuration[14] = 0b00000000;
 1099              		.loc 1 382 0
 1100 00ca 40F20003 		movw	r3, #:lower16:configuration
 1101 00ce C0F20003 		movt	r3, #:upper16:configuration
 1102 00d2 4FF00002 		mov	r2, #0
 1103 00d6 9A73     		strb	r2, [r3, #14]
 383:../Main.c     **** 
 384:../Main.c     **** 	IO004_ResetPin(CE);
 1104              		.loc 1 384 0
 1105 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1106 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1107 00e0 5A68     		ldr	r2, [r3, #4]
 1108 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1109 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1110 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1111 00ec 4FF48031 		mov	r1, #65536
 1112 00f0 01FA03F3 		lsl	r3, r1, r3
 1113 00f4 5360     		str	r3, [r2, #4]
 385:../Main.c     **** 	IO004_SetPin(CS);
 1114              		.loc 1 385 0
 1115 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1116 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1117 00fe 5A68     		ldr	r2, [r3, #4]
 1118 0100 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1119 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1120 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1121 010a 4FF00101 		mov	r1, #1
 1122 010e 01FA03F3 		lsl	r3, r1, r3
 1123 0112 5360     		str	r3, [r2, #4]
 386:../Main.c     **** 	int i, j;
 387:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1124              		.loc 1 387 0
 1125 0114 4FF00E03 		mov	r3, #14
 1126 0118 7B60     		str	r3, [r7, #4]
 1127 011a 3FE0     		b	.L53
 1128              	.L58:
 388:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1129              		.loc 1 388 0
 1130 011c 4FF00703 		mov	r3, #7
 1131 0120 3B60     		str	r3, [r7, #0]
 1132 0122 34E0     		b	.L54
 1133              	.L57:
 389:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1134              		.loc 1 389 0
 1135 0124 40F20003 		movw	r3, #:lower16:configuration
 1136 0128 C0F20003 		movt	r3, #:upper16:configuration
 1137 012c 7A68     		ldr	r2, [r7, #4]
 1138 012e 9B18     		adds	r3, r3, r2
 1139 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1140 0132 1A46     		mov	r2, r3
 1141 0134 4FF00101 		mov	r1, #1
 1142 0138 3B68     		ldr	r3, [r7, #0]
 1143 013a 01FA03F3 		lsl	r3, r1, r3
 1144 013e 1340     		ands	r3, r3, r2
 1145 0140 002B     		cmp	r3, #0
 1146 0142 0FDD     		ble	.L55
 390:../Main.c     **** 				IO004_SetPin(DATA);
 1147              		.loc 1 390 0
 1148 0144 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1149 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1150 014c 5A68     		ldr	r2, [r3, #4]
 1151 014e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1152 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1153 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1154 0158 4FF00101 		mov	r1, #1
 1155 015c 01FA03F3 		lsl	r3, r1, r3
 1156 0160 5360     		str	r3, [r2, #4]
 1157 0162 0EE0     		b	.L56
 1158              	.L55:
 391:../Main.c     **** 			else
 392:../Main.c     **** 				IO004_ResetPin(DATA);
 1159              		.loc 1 392 0
 1160 0164 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1161 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1162 016c 5A68     		ldr	r2, [r3, #4]
 1163 016e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1164 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1165 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1166 0178 4FF48031 		mov	r1, #65536
 1167 017c 01FA03F3 		lsl	r3, r1, r3
 1168 0180 5360     		str	r3, [r2, #4]
 1169              	.L56:
 393:../Main.c     **** 			;
 394:../Main.c     **** 			pulse_R();
 1170              		.loc 1 394 0
 1171 0182 FFF7FEFF 		bl	pulse_R
 388:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1172              		.loc 1 388 0
 1173 0186 3B68     		ldr	r3, [r7, #0]
 1174 0188 03F1FF33 		add	r3, r3, #-1
 1175 018c 3B60     		str	r3, [r7, #0]
 1176              	.L54:
 388:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1177              		.loc 1 388 0 is_stmt 0 discriminator 1
 1178 018e 3B68     		ldr	r3, [r7, #0]
 1179 0190 002B     		cmp	r3, #0
 1180 0192 C7DA     		bge	.L57
 387:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1181              		.loc 1 387 0 is_stmt 1
 1182 0194 7B68     		ldr	r3, [r7, #4]
 1183 0196 03F1FF33 		add	r3, r3, #-1
 1184 019a 7B60     		str	r3, [r7, #4]
 1185              	.L53:
 387:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1186              		.loc 1 387 0 is_stmt 0 discriminator 1
 1187 019c 7B68     		ldr	r3, [r7, #4]
 1188 019e 002B     		cmp	r3, #0
 1189 01a0 BCDA     		bge	.L58
 395:../Main.c     **** 		}
 396:../Main.c     **** 	}
 397:../Main.c     **** 	IO004_DisableOutputDriver(&DATA, IO004_CONT_POLLING);
 1190              		.loc 1 397 0 is_stmt 1
 1191 01a2 40F20000 		movw	r0, #:lower16:IO004_Handle12
 1192 01a6 C0F20000 		movt	r0, #:upper16:IO004_Handle12
 1193 01aa 4FF00301 		mov	r1, #3
 1194 01ae FFF7FEFF 		bl	IO004_DisableOutputDriver
 398:../Main.c     **** 	IO004_ResetPin(CS);
 1195              		.loc 1 398 0
 1196 01b2 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1197 01b6 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1198 01ba 5A68     		ldr	r2, [r3, #4]
 1199 01bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1200 01c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1201 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1202 01c6 4FF48031 		mov	r1, #65536
 1203 01ca 01FA03F3 		lsl	r3, r1, r3
 1204 01ce 5360     		str	r3, [r2, #4]
 399:../Main.c     **** 	IO004_SetPin(CE);
 1205              		.loc 1 399 0
 1206 01d0 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1207 01d4 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1208 01d8 5A68     		ldr	r2, [r3, #4]
 1209 01da 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1210 01de C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1211 01e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1212 01e4 4FF00101 		mov	r1, #1
 1213 01e8 01FA03F3 		lsl	r3, r1, r3
 1214 01ec 5360     		str	r3, [r2, #4]
 400:../Main.c     **** 	delay(50000);
 1215              		.loc 1 400 0
 1216 01ee 4CF25030 		movw	r0, #50000
 1217 01f2 FFF7FEFF 		bl	delay
 401:../Main.c     **** }
 1218              		.loc 1 401 0
 1219 01f6 07F10807 		add	r7, r7, #8
 1220 01fa BD46     		mov	sp, r7
 1221 01fc 80BD     		pop	{r7, pc}
 1222              		.cfi_endproc
 1223              	.LFE127:
 1225 01fe 00BF     		.section	.text.Software_Timers_Init,"ax",%progbits
 1226              		.align	2
 1227              		.global	Software_Timers_Init
 1228              		.thumb
 1229              		.thumb_func
 1231              	Software_Timers_Init:
 1232              	.LFB128:
 402:../Main.c     **** 
 403:../Main.c     **** /***************************************************/
 404:../Main.c     **** /****************FUNCOES TEMPORAIS******************/
 405:../Main.c     **** /***************************************************/
 406:../Main.c     **** 
 407:../Main.c     **** void Software_Timers_Init() {
 1233              		.loc 1 407 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 8
 1236              		@ frame_needed = 1, uses_anonymous_args = 0
 1237 0000 80B5     		push	{r7, lr}
 1238              	.LCFI27:
 1239              		.cfi_def_cfa_offset 8
 1240              		.cfi_offset 7, -8
 1241              		.cfi_offset 14, -4
 1242 0002 82B0     		sub	sp, sp, #8
 1243              	.LCFI28:
 1244              		.cfi_def_cfa_offset 16
 1245 0004 00AF     		add	r7, sp, #0
 1246              	.LCFI29:
 1247              		.cfi_def_cfa_register 7
 408:../Main.c     **** 	handle_t TaskTimerId;
 409:../Main.c     **** 
 410:../Main.c     **** 	TaskTimerId = SYSTM002_CreateTimer(SYSTM002_SYSTICK_INTERVAL,
 1248              		.loc 1 410 0
 1249 0006 4FF06400 		mov	r0, #100
 1250 000a 4FF00101 		mov	r1, #1
 1251 000e 40F20002 		movw	r2, #:lower16:Tick_Handler
 1252 0012 C0F20002 		movt	r2, #:upper16:Tick_Handler
 1253 0016 4FF00003 		mov	r3, #0
 1254 001a FFF7FEFF 		bl	SYSTM002_CreateTimer
 1255 001e 7860     		str	r0, [r7, #4]
 411:../Main.c     **** 			SYSTM002_PERIODIC, &Tick_Handler, NULL);
 412:../Main.c     **** 	if (TaskTimerId != 0) {
 1256              		.loc 1 412 0
 1257 0020 7B68     		ldr	r3, [r7, #4]
 1258 0022 002B     		cmp	r3, #0
 1259 0024 02D0     		beq	.L59
 413:../Main.c     **** //Timer created successfully so start it
 414:../Main.c     **** 		SYSTM002_StartTimer(TaskTimerId);
 1260              		.loc 1 414 0
 1261 0026 7868     		ldr	r0, [r7, #4]
 1262 0028 FFF7FEFF 		bl	SYSTM002_StartTimer
 1263              	.L59:
 415:../Main.c     **** 	}
 416:../Main.c     **** }
 1264              		.loc 1 416 0
 1265 002c 07F10807 		add	r7, r7, #8
 1266 0030 BD46     		mov	sp, r7
 1267 0032 80BD     		pop	{r7, pc}
 1268              		.cfi_endproc
 1269              	.LFE128:
 1271              		.section	.text.delayus,"ax",%progbits
 1272              		.align	2
 1273              		.global	delayus
 1274              		.thumb
 1275              		.thumb_func
 1277              	delayus:
 1278              	.LFB129:
 417:../Main.c     **** 
 418:../Main.c     **** void delayus(uint32_t delay_us) {
 1279              		.loc 1 418 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 16
 1282              		@ frame_needed = 1, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
 1284 0000 80B4     		push	{r7}
 1285              	.LCFI30:
 1286              		.cfi_def_cfa_offset 4
 1287              		.cfi_offset 7, -4
 1288 0002 85B0     		sub	sp, sp, #20
 1289              	.LCFI31:
 1290              		.cfi_def_cfa_offset 24
 1291 0004 00AF     		add	r7, sp, #0
 1292              	.LCFI32:
 1293              		.cfi_def_cfa_register 7
 1294 0006 7860     		str	r0, [r7, #4]
 419:../Main.c     **** 	uint32_t currenttick = ticks;
 1295              		.loc 1 419 0
 1296 0008 40F20003 		movw	r3, #:lower16:ticks
 1297 000c C0F20003 		movt	r3, #:upper16:ticks
 1298 0010 1B68     		ldr	r3, [r3, #0]
 1299 0012 FB60     		str	r3, [r7, #12]
 420:../Main.c     **** 	while (ticks - currenttick < (delay_us / SYSTM002_SYSTICK_INTERVAL))
 1300              		.loc 1 420 0
 1301 0014 00BF     		nop
 1302              	.L62:
 1303              		.loc 1 420 0 is_stmt 0 discriminator 1
 1304 0016 40F20003 		movw	r3, #:lower16:ticks
 1305 001a C0F20003 		movt	r3, #:upper16:ticks
 1306 001e 1A68     		ldr	r2, [r3, #0]
 1307 0020 FB68     		ldr	r3, [r7, #12]
 1308 0022 D21A     		subs	r2, r2, r3
 1309 0024 7968     		ldr	r1, [r7, #4]
 1310 0026 48F21F53 		movw	r3, #34079
 1311 002a C5F2EB13 		movt	r3, 20971
 1312 002e A3FB0103 		umull	r0, r3, r3, r1
 1313 0032 4FEA5313 		lsr	r3, r3, #5
 1314 0036 9A42     		cmp	r2, r3
 1315 0038 EDD3     		bcc	.L62
 421:../Main.c     **** 		;
 422:../Main.c     **** 	ticks = 0;
 1316              		.loc 1 422 0 is_stmt 1
 1317 003a 40F20003 		movw	r3, #:lower16:ticks
 1318 003e C0F20003 		movt	r3, #:upper16:ticks
 1319 0042 4FF00002 		mov	r2, #0
 1320 0046 1A60     		str	r2, [r3, #0]
 423:../Main.c     **** }
 1321              		.loc 1 423 0
 1322 0048 07F11407 		add	r7, r7, #20
 1323 004c BD46     		mov	sp, r7
 1324 004e 80BC     		pop	{r7}
 1325 0050 7047     		bx	lr
 1326              		.cfi_endproc
 1327              	.LFE129:
 1329 0052 00BF     		.section	.text.delayms,"ax",%progbits
 1330              		.align	2
 1331              		.global	delayms
 1332              		.thumb
 1333              		.thumb_func
 1335              	delayms:
 1336              	.LFB130:
 424:../Main.c     **** 
 425:../Main.c     **** void delayms(uint32_t delay_ms) {
 1337              		.loc 1 425 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 8
 1340              		@ frame_needed = 1, uses_anonymous_args = 0
 1341 0000 80B5     		push	{r7, lr}
 1342              	.LCFI33:
 1343              		.cfi_def_cfa_offset 8
 1344              		.cfi_offset 7, -8
 1345              		.cfi_offset 14, -4
 1346 0002 82B0     		sub	sp, sp, #8
 1347              	.LCFI34:
 1348              		.cfi_def_cfa_offset 16
 1349 0004 00AF     		add	r7, sp, #0
 1350              	.LCFI35:
 1351              		.cfi_def_cfa_register 7
 1352 0006 7860     		str	r0, [r7, #4]
 426:../Main.c     **** 	delayus(1000 * delay_ms);
 1353              		.loc 1 426 0
 1354 0008 7B68     		ldr	r3, [r7, #4]
 1355 000a 4FF47A72 		mov	r2, #1000
 1356 000e 02FB03F3 		mul	r3, r2, r3
 1357 0012 1846     		mov	r0, r3
 1358 0014 FFF7FEFF 		bl	delayus
 427:../Main.c     **** }
 1359              		.loc 1 427 0
 1360 0018 07F10807 		add	r7, r7, #8
 1361 001c BD46     		mov	sp, r7
 1362 001e 80BD     		pop	{r7, pc}
 1363              		.cfi_endproc
 1364              	.LFE130:
 1366              		.section	.text.Tick_Handler,"ax",%progbits
 1367              		.align	2
 1368              		.global	Tick_Handler
 1369              		.thumb
 1370              		.thumb_func
 1372              	Tick_Handler:
 1373              	.LFB131:
 428:../Main.c     **** 
 429:../Main.c     **** void Tick_Handler(void) {
 1374              		.loc 1 429 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378 0000 80B5     		push	{r7, lr}
 1379              	.LCFI36:
 1380              		.cfi_def_cfa_offset 8
 1381              		.cfi_offset 7, -8
 1382              		.cfi_offset 14, -4
 1383 0002 00AF     		add	r7, sp, #0
 1384              	.LCFI37:
 1385              		.cfi_def_cfa_register 7
 430:../Main.c     **** 	//ticks++;
 431:../Main.c     **** 	status_ticks++;
 1386              		.loc 1 431 0
 1387 0004 40F20003 		movw	r3, #:lower16:status_ticks
 1388 0008 C0F20003 		movt	r3, #:upper16:status_ticks
 1389 000c 1B68     		ldr	r3, [r3, #0]
 1390 000e 03F10102 		add	r2, r3, #1
 1391 0012 40F20003 		movw	r3, #:lower16:status_ticks
 1392 0016 C0F20003 		movt	r3, #:upper16:status_ticks
 1393 001a 1A60     		str	r2, [r3, #0]
 432:../Main.c     **** 	error_ticks++;
 1394              		.loc 1 432 0
 1395 001c 40F20003 		movw	r3, #:lower16:error_ticks
 1396 0020 C0F20003 		movt	r3, #:upper16:error_ticks
 1397 0024 1B68     		ldr	r3, [r3, #0]
 1398 0026 03F10102 		add	r2, r3, #1
 1399 002a 40F20003 		movw	r3, #:lower16:error_ticks
 1400 002e C0F20003 		movt	r3, #:upper16:error_ticks
 1401 0032 1A60     		str	r2, [r3, #0]
 433:../Main.c     **** 	if(error_ticks == 1)
 1402              		.loc 1 433 0
 1403 0034 40F20003 		movw	r3, #:lower16:error_ticks
 1404 0038 C0F20003 		movt	r3, #:upper16:error_ticks
 1405 003c 1B68     		ldr	r3, [r3, #0]
 1406 003e 012B     		cmp	r3, #1
 1407 0040 01D1     		bne	.L65
 1408              	.LBB6:
 434:../Main.c     **** 		trata_erro();
 1409              		.loc 1 434 0
 1410 0042 FFF7FEFF 		bl	trata_erro
 1411              	.L65:
 1412              	.LBE6:
 435:../Main.c     **** 	if (error_ticks >= 100) {
 1413              		.loc 1 435 0
 1414 0046 40F20003 		movw	r3, #:lower16:error_ticks
 1415 004a C0F20003 		movt	r3, #:upper16:error_ticks
 1416 004e 1B68     		ldr	r3, [r3, #0]
 1417 0050 632B     		cmp	r3, #99
 1418 0052 08D9     		bls	.L64
 436:../Main.c     **** 		error_ticks = 0;
 1419              		.loc 1 436 0
 1420 0054 40F20003 		movw	r3, #:lower16:error_ticks
 1421 0058 C0F20003 		movt	r3, #:upper16:error_ticks
 1422 005c 4FF00002 		mov	r2, #0
 1423 0060 1A60     		str	r2, [r3, #0]
 437:../Main.c     **** 		error();
 1424              		.loc 1 437 0
 1425 0062 FFF7FEFF 		bl	error
 1426              	.L64:
 438:../Main.c     **** 	}
 439:../Main.c     **** }
 1427              		.loc 1 439 0
 1428 0066 80BD     		pop	{r7, pc}
 1429              		.cfi_endproc
 1430              	.LFE131:
 1432              		.section	.text.trata_erro,"ax",%progbits
 1433              		.align	2
 1434              		.global	trata_erro
 1435              		.thumb
 1436              		.thumb_func
 1438              	trata_erro:
 1439              	.LFB132:
 440:../Main.c     **** 
 441:../Main.c     **** void trata_erro(void){
 1440              		.loc 1 441 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 1, uses_anonymous_args = 0
 1444              		@ link register save eliminated.
 1445 0000 80B4     		push	{r7}
 1446              	.LCFI38:
 1447              		.cfi_def_cfa_offset 4
 1448              		.cfi_offset 7, -4
 1449 0002 00AF     		add	r7, sp, #0
 1450              	.LCFI39:
 1451              		.cfi_def_cfa_register 7
 442:../Main.c     **** 
 443:../Main.c     **** 	if(error_left){
 1452              		.loc 1 443 0
 1453 0004 40F20003 		movw	r3, #:lower16:error_left
 1454 0008 C0F20003 		movt	r3, #:upper16:error_left
 1455 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1456 000e 002B     		cmp	r3, #0
 1457 0010 16D0     		beq	.L68
 444:../Main.c     **** 		error_left = 0;
 1458              		.loc 1 444 0
 1459 0012 40F20003 		movw	r3, #:lower16:error_left
 1460 0016 C0F20003 		movt	r3, #:upper16:error_left
 1461 001a 4FF00002 		mov	r2, #0
 1462 001e 1A70     		strb	r2, [r3, #0]
 445:../Main.c     **** 		IO004_SetPin(Enable_LEFT);
 1463              		.loc 1 445 0
 1464 0020 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1465 0024 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1466 0028 5A68     		ldr	r2, [r3, #4]
 1467 002a 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1468 002e C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1469 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1470 0034 4FF00101 		mov	r1, #1
 1471 0038 01FA03F3 		lsl	r3, r1, r3
 1472 003c 5360     		str	r3, [r2, #4]
 1473 003e 15E0     		b	.L67
 1474              	.L68:
 446:../Main.c     **** 	}else{
 447:../Main.c     **** 		error_right = 0;
 1475              		.loc 1 447 0
 1476 0040 40F20003 		movw	r3, #:lower16:error_right
 1477 0044 C0F20003 		movt	r3, #:upper16:error_right
 1478 0048 4FF00002 		mov	r2, #0
 1479 004c 1A70     		strb	r2, [r3, #0]
 448:../Main.c     **** 		IO004_SetPin(Enable_RIGHT);
 1480              		.loc 1 448 0
 1481 004e 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1482 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1483 0056 5A68     		ldr	r2, [r3, #4]
 1484 0058 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1485 005c C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1486 0060 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1487 0062 4FF00101 		mov	r1, #1
 1488 0066 01FA03F3 		lsl	r3, r1, r3
 1489 006a 5360     		str	r3, [r2, #4]
 1490              	.L67:
 449:../Main.c     **** 	}
 450:../Main.c     **** }
 1491              		.loc 1 450 0
 1492 006c BD46     		mov	sp, r7
 1493 006e 80BC     		pop	{r7}
 1494 0070 7047     		bx	lr
 1495              		.cfi_endproc
 1496              	.LFE132:
 1498 0072 00BF     		.section	.text.delay,"ax",%progbits
 1499              		.align	2
 1500              		.global	delay
 1501              		.thumb
 1502              		.thumb_func
 1504              	delay:
 1505              	.LFB133:
 451:../Main.c     **** 
 452:../Main.c     **** void delay(long unsigned int i) {
 1506              		.loc 1 452 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 1511 0000 80B4     		push	{r7}
 1512              	.LCFI40:
 1513              		.cfi_def_cfa_offset 4
 1514              		.cfi_offset 7, -4
 1515 0002 83B0     		sub	sp, sp, #12
 1516              	.LCFI41:
 1517              		.cfi_def_cfa_offset 16
 1518 0004 00AF     		add	r7, sp, #0
 1519              	.LCFI42:
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
 453:../Main.c     **** 	while (i--) {
 1522              		.loc 1 453 0
 1523 0008 00E0     		b	.L71
 1524              	.L72:
 1525              	.LBB7:
 1526              	.LBB8:
 1527              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1528              		.loc 2 327 0
 1529              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1530 000a 00BF     		nop
 1531              	@ 0 "" 2
 1532              		.thumb
 1533              	.L71:
 1534              	.LBE8:
 1535              	.LBE7:
 1536              		.loc 1 453 0 discriminator 1
 1537 000c 7B68     		ldr	r3, [r7, #4]
 1538 000e 002B     		cmp	r3, #0
 1539 0010 0CBF     		ite	eq
 1540 0012 0023     		moveq	r3, #0
 1541 0014 0123     		movne	r3, #1
 1542 0016 DBB2     		uxtb	r3, r3
 1543 0018 7A68     		ldr	r2, [r7, #4]
 1544 001a 02F1FF32 		add	r2, r2, #-1
 1545 001e 7A60     		str	r2, [r7, #4]
 1546 0020 002B     		cmp	r3, #0
 1547 0022 F2D1     		bne	.L72
 454:../Main.c     **** 
 455:../Main.c     **** 		__NOP();
 456:../Main.c     **** 	}
 457:../Main.c     **** }
 1548              		.loc 1 457 0
 1549 0024 07F10C07 		add	r7, r7, #12
 1550 0028 BD46     		mov	sp, r7
 1551 002a 80BC     		pop	{r7}
 1552 002c 7047     		bx	lr
 1553              		.cfi_endproc
 1554              	.LFE133:
 1556 002e 00BF     		.section	.text.floor,"ax",%progbits
 1557              		.align	2
 1558              		.global	floor
 1559              		.thumb
 1560              		.thumb_func
 1562              	floor:
 1563              	.LFB134:
 458:../Main.c     **** 
 459:../Main.c     **** int floor(float value) {
 1564              		.loc 1 459 0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 16
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568              		@ link register save eliminated.
 1569 0000 80B4     		push	{r7}
 1570              	.LCFI43:
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 7, -4
 1573 0002 85B0     		sub	sp, sp, #20
 1574              	.LCFI44:
 1575              		.cfi_def_cfa_offset 24
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI45:
 1578              		.cfi_def_cfa_register 7
 1579 0006 7860     		str	r0, [r7, #4]	@ float
 460:../Main.c     **** 	int a = value;
 1580              		.loc 1 460 0
 1581 0008 D7ED017A 		flds	s15, [r7, #4]
 1582 000c FDEEE77A 		ftosizs	s15, s15
 1583 0010 C7ED037A 		fsts	s15, [r7, #12]	@ int
 461:../Main.c     **** 	return a;
 1584              		.loc 1 461 0
 1585 0014 FB68     		ldr	r3, [r7, #12]
 462:../Main.c     **** }
 1586              		.loc 1 462 0
 1587 0016 1846     		mov	r0, r3
 1588 0018 07F11407 		add	r7, r7, #20
 1589 001c BD46     		mov	sp, r7
 1590 001e 80BC     		pop	{r7}
 1591 0020 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE134:
 1595 0022 00BF     		.section	.text.error,"ax",%progbits
 1596              		.align	2
 1597              		.global	error
 1598              		.thumb
 1599              		.thumb_func
 1601              	error:
 1602              	.LFB135:
 463:../Main.c     **** 
 464:../Main.c     **** void error(void) {
 1603              		.loc 1 464 0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 1, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
 1608 0000 80B4     		push	{r7}
 1609              	.LCFI46:
 1610              		.cfi_def_cfa_offset 4
 1611              		.cfi_offset 7, -4
 1612 0002 00AF     		add	r7, sp, #0
 1613              	.LCFI47:
 1614              		.cfi_def_cfa_register 7
 465:../Main.c     **** 
 466:../Main.c     **** 	if (!IO004_ReadPin(ERR_Input_LEFT)) {
 1615              		.loc 1 466 0
 1616 0004 40F20003 		movw	r3, #:lower16:IO004_Handle15
 1617 0008 C0F20003 		movt	r3, #:upper16:IO004_Handle15
 1618 000c 5B68     		ldr	r3, [r3, #4]
 1619 000e 5A6A     		ldr	r2, [r3, #36]
 1620 0010 40F20003 		movw	r3, #:lower16:IO004_Handle15
 1621 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle15
 1622 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1623 001a 22FA03F3 		lsr	r3, r2, r3
 1624 001e 03F00103 		and	r3, r3, #1
 1625 0022 002B     		cmp	r3, #0
 1626 0024 15D1     		bne	.L76
 467:../Main.c     **** 		IO004_ResetPin(Enable_LEFT);
 1627              		.loc 1 467 0
 1628 0026 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1629 002a C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1630 002e 5A68     		ldr	r2, [r3, #4]
 1631 0030 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1632 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1633 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1634 003a 4FF48031 		mov	r1, #65536
 1635 003e 01FA03F3 		lsl	r3, r1, r3
 1636 0042 5360     		str	r3, [r2, #4]
 468:../Main.c     **** 		error_left = 1;
 1637              		.loc 1 468 0
 1638 0044 40F20003 		movw	r3, #:lower16:error_left
 1639 0048 C0F20003 		movt	r3, #:upper16:error_left
 1640 004c 4FF00102 		mov	r2, #1
 1641 0050 1A70     		strb	r2, [r3, #0]
 1642              	.L76:
 469:../Main.c     **** 	}
 470:../Main.c     **** 
 471:../Main.c     **** 	if (!IO004_ReadPin(ERR_Input_RIGHT)) {
 1643              		.loc 1 471 0
 1644 0052 40F20003 		movw	r3, #:lower16:IO004_Handle3
 1645 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle3
 1646 005a 5B68     		ldr	r3, [r3, #4]
 1647 005c 5A6A     		ldr	r2, [r3, #36]
 1648 005e 40F20003 		movw	r3, #:lower16:IO004_Handle3
 1649 0062 C0F20003 		movt	r3, #:upper16:IO004_Handle3
 1650 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1651 0068 22FA03F3 		lsr	r3, r2, r3
 1652 006c 03F00103 		and	r3, r3, #1
 1653 0070 002B     		cmp	r3, #0
 1654 0072 15D1     		bne	.L75
 472:../Main.c     **** 		IO004_ResetPin(Enable_RIGHT);
 1655              		.loc 1 472 0
 1656 0074 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1657 0078 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1658 007c 5A68     		ldr	r2, [r3, #4]
 1659 007e 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1660 0082 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1661 0086 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1662 0088 4FF48031 		mov	r1, #65536
 1663 008c 01FA03F3 		lsl	r3, r1, r3
 1664 0090 5360     		str	r3, [r2, #4]
 473:../Main.c     **** 		error_right = 1;
 1665              		.loc 1 473 0
 1666 0092 40F20003 		movw	r3, #:lower16:error_right
 1667 0096 C0F20003 		movt	r3, #:upper16:error_right
 1668 009a 4FF00102 		mov	r2, #1
 1669 009e 1A70     		strb	r2, [r3, #0]
 1670              	.L75:
 474:../Main.c     **** 	}
 475:../Main.c     **** 
 476:../Main.c     **** }
 1671              		.loc 1 476 0
 1672 00a0 BD46     		mov	sp, r7
 1673 00a2 80BC     		pop	{r7}
 1674 00a4 7047     		bx	lr
 1675              		.cfi_endproc
 1676              	.LFE135:
 1678 00a6 00BF     		.text
 1679              	.Letext0:
 1680              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1681              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1682              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1683              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1684              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1685              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1686              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1687              		.file 10 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
 1688              		.file 11 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000f configuration
                            *COM*:00000005 data_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:26     .bss:00000000 ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:23     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:32     .bss:00000004 status_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:38     .bss:00000008 sudden_run_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:44     .bss:0000000c error_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:49     .bss:00000010 value
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:55     .bss:00000014 last_duty_right
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:61     .bss:00000018 last_duty_left
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:66     .bss:0000001c error_left
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:71     .bss:0000001d error_right
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:74     .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:79     .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1231   .text.Software_Timers_Init:00000000 Software_Timers_Init
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:182    .text.WakeUp:00000000 WakeUp
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1012   .text.configure_R:00000000 configure_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:209    .text.start_driver_signals:00000000 start_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:840    .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:264    .text.update_driver_signals:00000000 update_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:177    .text.WakeUp:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:204    .text.start_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:259    .text.update_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:501    .text.calculateDutyCicle:00000000 calculateDutyCicle
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:496    .text.calculateDutyCicle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1562   .text.floor:00000000 floor
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:741    .text.calculateDutyCicle:00000280 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:754    .text.Testando_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:759    .text.Testando_Handler:00000000 Testando_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:781    .text.ERU0_3_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:786    .text.ERU0_3_IRQHandler:00000000 ERU0_3_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:808    .text.ERU1_0_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:813    .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:835    .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1504   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:961    .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:956    .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1007   .text.configure_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1226   .text.Software_Timers_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1372   .text.Tick_Handler:00000000 Tick_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1272   .text.delayus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1277   .text.delayus:00000000 delayus
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1330   .text.delayms:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1335   .text.delayms:00000000 delayms
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1367   .text.Tick_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1438   .text.trata_erro:00000000 trata_erro
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1601   .text.error:00000000 error
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1433   .text.trata_erro:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1499   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1557   .text.floor:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccofJsID.s:1596   .text.error:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e3bdd798bb23f70d94471cb7157fa38f
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CNT001.h.53.54b2229008e37b1970e63d1faf193d82
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ERU001_Conf.h.69.cbf5f28f16df40bf2ec07157d45ebab0
                           .group:00000000 wm4.ERU002_Conf.h.49.2f1d75b23a08c83bd296d7c11c7e280b
                           .group:00000000 wm4.NVIC002_Conf.h.63.13943eb720fa25e7207fa08ab410f2a7

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle7
IO004_Handle13
PWMSP001_Handle0
PWMSP001_Start
PWMSP001_SetPwmFreq
PWMSP001_SetDutyCycle
PWMSP001_Handle1
IO004_Handle6
IO004_Handle0
IO004_Handle14
IO004_Handle12
IO004_Handle11
IO004_Handle10
IO004_DisableOutputDriver
SYSTM002_CreateTimer
SYSTM002_StartTimer
IO004_Handle1
IO004_Handle15
IO004_Handle3
