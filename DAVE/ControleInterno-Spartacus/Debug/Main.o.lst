   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	configuration,15,4
  20              		.comm	data_R,5,4
  21              		.global	ticks
  22              		.bss
  23              		.align	2
  26              	ticks:
  27 0000 00000000 		.space	4
  28              		.global	status_ticks
  29              		.align	2
  32              	status_ticks:
  33 0004 00000000 		.space	4
  34              		.global	value
  37              	value:
  38 0008 00       		.space	1
  39 0009 000000   		.section	.text.main,"ax",%progbits
  40              		.align	2
  41              		.global	main
  42              		.thumb
  43              		.thumb_func
  45              	main:
  46              	.LFB117:
  47              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: May 9, 2015
   5:../Main.c     ****  *      Author: JM
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** #include <DAVE3.h> //Declarations from DAVE3 Code Generation (includes SFR declaration)
   9:../Main.c     **** 
  10:../Main.c     **** /* DADO3:
  11:../Main.c     ****  BIT 0: BLAH2
  12:../Main.c     ****  BIT 1: BUZINA
  13:../Main.c     ****  BIT 2: ENABLE
  14:../Main.c     ****  BIT 3: ALBH2
  15:../Main.c     ****  BIT 4: BLAH1
  16:../Main.c     ****  BIT 5: ALBH1
  17:../Main.c     ****  */
  18:../Main.c     **** 
  19:../Main.c     **** /***************************************************
  20:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  21:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  22:../Main.c     ****  *Byte 1 : PWM 1
  23:../Main.c     ****  *Byte 2 : PWM 2
  24:../Main.c     ****  *Byte 3 : SENTIDOS
  25:../Main.c     ****  *Byte 4 : PWM 3 (Arma)
  26:../Main.c     ****  ***************************************************/
  27:../Main.c     **** 
  28:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  29:../Main.c     **** /***************************************************/
  30:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  31:../Main.c     **** /***************************************************/
  32:../Main.c     **** 
  33:../Main.c     **** #define NULL 0
  34:../Main.c     **** 
  35:../Main.c     **** //Defines referentes ao protocolo
  36:../Main.c     **** #define BYTES_TO_RECEIVE 5
  37:../Main.c     **** //Defines referentes ao byte DADO 3
  38:../Main.c     **** #define	BLAH2		0		//LEFT-BACK
  39:../Main.c     **** #define	BUZINA		1		//USELESS
  40:../Main.c     **** #define	ENABLE		2		//USELESS
  41:../Main.c     **** #define	ALBH2		3		//LEFT-FRONT
  42:../Main.c     **** #define	BLAH1		4		//RIGHT-BACK
  43:../Main.c     **** #define	ALBH1		5		//RIGHT-FRONT
  44:../Main.c     **** #define	LEFT_BACK	BLAH2
  45:../Main.c     **** #define	LEFT_FRONT	ALBH2
  46:../Main.c     **** #define	RIGHT_BACK	BLAH1
  47:../Main.c     **** #define	RIGHT_FRONT	ALBH1
  48:../Main.c     **** #define DATA_TEST0 BUZINA
  49:../Main.c     **** #define DATA_TEST1 ENABLE
  50:../Main.c     **** 
  51:../Main.c     **** //Defines referentes ao transceptor
  52:../Main.c     **** #define CS	 	IO004_Handle10
  53:../Main.c     **** #define CLK1 	IO004_Handle11
  54:../Main.c     **** #define DATA 	IO004_Handle12
  55:../Main.c     **** #define DR1		IO004_Handle13
  56:../Main.c     **** #define CE 		IO004_Handle14
  57:../Main.c     **** 
  58:../Main.c     **** //Defines referentes ao driver da ponte H
  59:../Main.c     **** #define ERR_INTRPT_LEFT		IO002_Handle1
  60:../Main.c     **** #define DIR_LEFT			IO004_Handle6
  61:../Main.c     **** #define Enable_LEFT			IO004_Handle7
  62:../Main.c     **** #define DvrDis_LEFT			IO004_Handle8
  63:../Main.c     **** #define ERR_Input_LEFT		IO004_Handle5
  64:../Main.c     **** #define PWM_LEFT			&PWMSP001_Handle1
  65:../Main.c     **** #define ERR_INTRPT_RIGHT	IO002_Handle0
  66:../Main.c     **** #define DIR_RIGHT			IO004_Handle0
  67:../Main.c     **** #define Enable_RIGHT		IO004_Handle1
  68:../Main.c     **** #define DvrDis_RIGHT		IO004_Handle2
  69:../Main.c     **** #define ERR_Input_RIGHT		IO004_Handle3
  70:../Main.c     **** #define PWM_RIGHT			&PWMSP001_Handle0
  71:../Main.c     **** 
  72:../Main.c     **** //Define Faiscador
  73:../Main.c     **** #define FAISCADOR			IO004_Handle9
  74:../Main.c     **** #define GND					IO004_Handle4
  75:../Main.c     **** 
  76:../Main.c     **** //Define referentes a ponte H
  77:../Main.c     **** #define PWM_LIMITATION 70
  78:../Main.c     **** #define PWM_DUTY_LIM_MAX 100
  79:../Main.c     **** #define PWM_DUTY_LIM_MIN 8
  80:../Main.c     **** #define PWM_DUTY_LIM_ZERO 0
  81:../Main.c     **** #define DIR_FRONT_LEFT 0
  82:../Main.c     **** #define DIR_REV_LEFT 1
  83:../Main.c     **** #define DIR_FRONT_RIGHT 0
  84:../Main.c     **** #define DIR_REV_RIGHT 1
  85:../Main.c     **** #define PWM_MOTOR_CUT_OFF 50
  86:../Main.c     **** #define PWM_MOTOR_RIGHT &PWMSP001_Handle0
  87:../Main.c     **** #define PWM_MOTOR_LEFT &PWMSP001_Handle1
  88:../Main.c     **** #define FREQ_MOTOR_LOCOMOTION 20000 //Hz
  89:../Main.c     **** //Defines referentes ao fail safe
  90:../Main.c     **** #define RUNNING 1
  91:../Main.c     **** #define FAIL 0
  92:../Main.c     **** 
  93:../Main.c     **** //Defines referentes a testes de locomocao
  94:../Main.c     **** #define LINEAR 	2
  95:../Main.c     **** #define DEGRAU 	0
  96:../Main.c     **** #define EXP	1
  97:../Main.c     **** 
  98:../Main.c     **** //==============================
  99:../Main.c     **** 
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 102:../Main.c     **** /***************************************************/
 103:../Main.c     **** 
 104:../Main.c     **** void Tick_Handler(void);
 105:../Main.c     **** void Testando_Handler(void);
 106:../Main.c     **** void interrupt_left(void);
 107:../Main.c     **** void interrupt_right(void);
 108:../Main.c     **** void delayms(uint32_t delay_ms);
 109:../Main.c     **** void delayus(uint32_t delay_us);
 110:../Main.c     **** void Software_Timers_Init(void);
 111:../Main.c     **** void WakeUp(void);
 112:../Main.c     **** void pulse_R(void);
 113:../Main.c     **** void configure_R(void);
 114:../Main.c     **** void read_R(void);
 115:../Main.c     **** void update_driver_signals(void);
 116:../Main.c     **** void delay(long unsigned int i);
 117:../Main.c     **** void start_driver_signals(void);
 118:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data);
 119:../Main.c     **** int floor(float value);
 120:../Main.c     **** 
 121:../Main.c     **** /***************************************************/
 122:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 123:../Main.c     **** /***************************************************/
 124:../Main.c     **** 
 125:../Main.c     **** char configuration[15];
 126:../Main.c     **** unsigned char data_R[BYTES_TO_RECEIVE];
 127:../Main.c     **** uint32_t ticks = 0UL;
 128:../Main.c     **** uint32_t status_ticks = 0UL;
 129:../Main.c     **** bool value = 0UL;
 130:../Main.c     **** 
 131:../Main.c     **** /***************************************************/
 132:../Main.c     **** /***********************MAIN************************/
 133:../Main.c     **** /***************************************************/
 134:../Main.c     **** 
 135:../Main.c     **** int main(void) {
  48              		.loc 1 135 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 8
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52 0000 80B5     		push	{r7, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 82B0     		sub	sp, sp, #8
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 16
  60 0004 00AF     		add	r7, sp, #0
  61              	.LCFI2:
  62              		.cfi_def_cfa_register 7
 136:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 137:../Main.c     **** 
 138:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
  63              		.loc 1 138 0
  64 0006 FFF7FEFF 		bl	DAVE_Init
 139:../Main.c     **** 
 140:../Main.c     **** 	Software_Timers_Init();
  65              		.loc 1 140 0
  66 000a FFF7FEFF 		bl	Software_Timers_Init
 141:../Main.c     **** 	WakeUp();
  67              		.loc 1 141 0
  68 000e FFF7FEFF 		bl	WakeUp
 142:../Main.c     **** 	configure_R();
  69              		.loc 1 142 0
  70 0012 FFF7FEFF 		bl	configure_R
 143:../Main.c     **** 
 144:../Main.c     **** 	ticks = 0;
  71              		.loc 1 144 0
  72 0016 40F20003 		movw	r3, #:lower16:ticks
  73 001a C0F20003 		movt	r3, #:upper16:ticks
  74 001e 4FF00002 		mov	r2, #0
  75 0022 1A60     		str	r2, [r3, #0]
 145:../Main.c     **** 	status_ticks = 0;
  76              		.loc 1 145 0
  77 0024 40F20003 		movw	r3, #:lower16:status_ticks
  78 0028 C0F20003 		movt	r3, #:upper16:status_ticks
  79 002c 4FF00002 		mov	r2, #0
  80 0030 1A60     		str	r2, [r3, #0]
 146:../Main.c     **** 	char status = RUNNING;
  81              		.loc 1 146 0
  82 0032 4FF00103 		mov	r3, #1
  83 0036 FB71     		strb	r3, [r7, #7]
 147:../Main.c     **** 	start_driver_signals();
  84              		.loc 1 147 0
  85 0038 FFF7FEFF 		bl	start_driver_signals
 148:../Main.c     **** 
 149:../Main.c     **** 	IO004_SetPin(Enable_LEFT);
  86              		.loc 1 149 0
  87 003c 40F20003 		movw	r3, #:lower16:IO004_Handle7
  88 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle7
  89 0044 5A68     		ldr	r2, [r3, #4]
  90 0046 40F20003 		movw	r3, #:lower16:IO004_Handle7
  91 004a C0F20003 		movt	r3, #:upper16:IO004_Handle7
  92 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  93 0050 4FF00101 		mov	r1, #1
  94 0054 01FA03F3 		lsl	r3, r1, r3
  95 0058 5360     		str	r3, [r2, #4]
  96 005a 00E0     		b	.L4
  97              	.L5:
 150:../Main.c     **** 
 151:../Main.c     **** 	while (1) {
 152:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 153:../Main.c     **** 			status_ticks = 0;
 154:../Main.c     **** 			read_R();
 155:../Main.c     **** 			update_driver_signals();
 156:../Main.c     **** 		} else {
 157:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 158:../Main.c     **** 				status = FAIL;
 159:../Main.c     **** 				start_driver_signals();
 160:../Main.c     **** 			}
 161:../Main.c     **** 		}
 162:../Main.c     **** 	}
  98              		.loc 1 162 0
  99 005c 00BF     		nop
 100              	.L4:
 152:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 101              		.loc 1 152 0
 102 005e 40F20003 		movw	r3, #:lower16:IO004_Handle13
 103 0062 C0F20003 		movt	r3, #:upper16:IO004_Handle13
 104 0066 5B68     		ldr	r3, [r3, #4]
 105 0068 5A6A     		ldr	r2, [r3, #36]
 106 006a 40F20003 		movw	r3, #:lower16:IO004_Handle13
 107 006e C0F20003 		movt	r3, #:upper16:IO004_Handle13
 108 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 109 0074 22FA03F3 		lsr	r3, r2, r3
 110 0078 03F00103 		and	r3, r3, #1
 111 007c 002B     		cmp	r3, #0
 112 007e 0BD0     		beq	.L2
 153:../Main.c     **** 			status_ticks = 0;
 113              		.loc 1 153 0
 114 0080 40F20003 		movw	r3, #:lower16:status_ticks
 115 0084 C0F20003 		movt	r3, #:upper16:status_ticks
 116 0088 4FF00002 		mov	r2, #0
 117 008c 1A60     		str	r2, [r3, #0]
 154:../Main.c     **** 			read_R();
 118              		.loc 1 154 0
 119 008e FFF7FEFF 		bl	read_R
 155:../Main.c     **** 			update_driver_signals();
 120              		.loc 1 155 0
 121 0092 FFF7FEFF 		bl	update_driver_signals
 122              		.loc 1 162 0
 123 0096 E1E7     		b	.L5
 124              	.L2:
 157:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 125              		.loc 1 157 0
 126 0098 40F20003 		movw	r3, #:lower16:status_ticks
 127 009c C0F20003 		movt	r3, #:upper16:status_ticks
 128 00a0 1A68     		ldr	r2, [r3, #0]
 129 00a2 41F28833 		movw	r3, #5000
 130 00a6 9A42     		cmp	r2, r3
 131 00a8 D8D9     		bls	.L5
 158:../Main.c     **** 				status = FAIL;
 132              		.loc 1 158 0
 133 00aa 4FF00003 		mov	r3, #0
 134 00ae FB71     		strb	r3, [r7, #7]
 159:../Main.c     **** 				start_driver_signals();
 135              		.loc 1 159 0
 136 00b0 FFF7FEFF 		bl	start_driver_signals
 137              		.loc 1 162 0
 138 00b4 D2E7     		b	.L5
 139              		.cfi_endproc
 140              	.LFE117:
 142 00b6 00BF     		.section	.text.WakeUp,"ax",%progbits
 143              		.align	2
 144              		.global	WakeUp
 145              		.thumb
 146              		.thumb_func
 148              	WakeUp:
 149              	.LFB118:
 163:../Main.c     **** 	return 0;
 164:../Main.c     **** }
 165:../Main.c     **** 
 166:../Main.c     **** void WakeUp(void) {
 150              		.loc 1 166 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 80B4     		push	{r7}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 0002 00AF     		add	r7, sp, #0
 160              	.LCFI4:
 161              		.cfi_def_cfa_register 7
 167:../Main.c     **** 
 168:../Main.c     **** 	//Enable
 169:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 170:../Main.c     **** //	delayus(100);
 171:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 172:../Main.c     **** 
 173:../Main.c     **** 	//DrvDis
 174:../Main.c     **** 	/*IO004_SetPin(IO004_Handle2);
 175:../Main.c     **** 	 delayms(1);
 176:../Main.c     **** 	 IO004_TogglePin(IO004_Handle2);*/
 177:../Main.c     **** 
 178:../Main.c     **** }
 162              		.loc 1 178 0
 163 0004 BD46     		mov	sp, r7
 164 0006 80BC     		pop	{r7}
 165 0008 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE118:
 169 000a 00BF     		.section	.text.start_driver_signals,"ax",%progbits
 170              		.align	2
 171              		.global	start_driver_signals
 172              		.thumb
 173              		.thumb_func
 175              	start_driver_signals:
 176              	.LFB119:
 179:../Main.c     **** 
 180:../Main.c     **** void start_driver_signals(void) {
 177              		.loc 1 180 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 00AF     		add	r7, sp, #0
 187              	.LCFI6:
 188              		.cfi_def_cfa_register 7
 181:../Main.c     **** 
 182:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 189              		.loc 1 182 0
 190 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 191 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 192 000c FFF7FEFF 		bl	PWMSP001_Start
 183:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 193              		.loc 1 183 0
 194 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 195 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 196 0018 4FF48041 		mov	r1, #16384
 197 001c C4F29C61 		movt	r1, 18076
 198 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 184:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, PWM_DUTY_LIM_ZERO);
 199              		.loc 1 184 0
 200 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 201 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 202 002c 4FF00001 		mov	r1, #0
 203 0030 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 185:../Main.c     **** 
 186:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 204              		.loc 1 186 0
 205 0034 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 206 0038 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 207 003c FFF7FEFF 		bl	PWMSP001_Start
 187:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 208              		.loc 1 187 0
 209 0040 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 210 0044 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 211 0048 4FF48041 		mov	r1, #16384
 212 004c C4F29C61 		movt	r1, 18076
 213 0050 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 188:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, PWM_DUTY_LIM_ZERO);
 214              		.loc 1 188 0
 215 0054 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 216 0058 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 217 005c 4FF00001 		mov	r1, #0
 218 0060 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 189:../Main.c     **** 
 190:../Main.c     **** }
 219              		.loc 1 190 0
 220 0064 80BD     		pop	{r7, pc}
 221              		.cfi_endproc
 222              	.LFE119:
 224 0066 00BF     		.section	.text.update_driver_signals,"ax",%progbits
 225              		.align	2
 226              		.global	update_driver_signals
 227              		.thumb
 228              		.thumb_func
 230              	update_driver_signals:
 231              	.LFB120:
 191:../Main.c     **** 
 192:../Main.c     **** void update_driver_signals(void) {
 232              		.loc 1 192 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 24
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              	.LCFI7:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 86B0     		sub	sp, sp, #24
 242              	.LCFI8:
 243              		.cfi_def_cfa_offset 32
 244 0004 00AF     		add	r7, sp, #0
 245              	.LCFI9:
 246              		.cfi_def_cfa_register 7
 193:../Main.c     **** 
 194:../Main.c     **** 	unsigned char direction = data_R[3];
 247              		.loc 1 194 0
 248 0006 40F20003 		movw	r3, #:lower16:data_R
 249 000a C0F20003 		movt	r3, #:upper16:data_R
 250 000e DB78     		ldrb	r3, [r3, #3]
 251 0010 BB71     		strb	r3, [r7, #6]
 195:../Main.c     **** 	float duty_motor_left = PWM_DUTY_LIM_ZERO;
 252              		.loc 1 195 0
 253 0012 4FF00003 		mov	r3, #0
 254 0016 7B61     		str	r3, [r7, #20]	@ float
 196:../Main.c     **** 	float duty_motor_right = PWM_DUTY_LIM_ZERO;
 255              		.loc 1 196 0
 256 0018 4FF00003 		mov	r3, #0
 257 001c 3B61     		str	r3, [r7, #16]	@ float
 197:../Main.c     **** 	float direction_motor_left = 0;
 258              		.loc 1 197 0
 259 001e 4FF00003 		mov	r3, #0
 260 0022 FB60     		str	r3, [r7, #12]	@ float
 198:../Main.c     **** 	float direction_motor_right = 0;
 261              		.loc 1 198 0
 262 0024 4FF00003 		mov	r3, #0
 263 0028 BB60     		str	r3, [r7, #8]	@ float
 199:../Main.c     **** 
 200:../Main.c     **** 	char mode = LINEAR;
 264              		.loc 1 200 0
 265 002a 4FF00203 		mov	r3, #2
 266 002e FB71     		strb	r3, [r7, #7]
 201:../Main.c     **** 
 202:../Main.c     **** 	if (!(direction & (1 << DATA_TEST1))) {
 267              		.loc 1 202 0
 268 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 269 0032 03F00403 		and	r3, r3, #4
 270 0036 002B     		cmp	r3, #0
 271 0038 0BD1     		bne	.L9
 203:../Main.c     **** 
 204:../Main.c     **** 		if (direction & (1 << DATA_TEST0))
 272              		.loc 1 204 0
 273 003a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 274 003c 03F00203 		and	r3, r3, #2
 275 0040 002B     		cmp	r3, #0
 276 0042 03D0     		beq	.L10
 205:../Main.c     **** 			mode = EXP;
 277              		.loc 1 205 0
 278 0044 4FF00103 		mov	r3, #1
 279 0048 FB71     		strb	r3, [r7, #7]
 280 004a 02E0     		b	.L9
 281              	.L10:
 206:../Main.c     **** 		else
 207:../Main.c     **** 			mode = DEGRAU;
 282              		.loc 1 207 0
 283 004c 4FF00003 		mov	r3, #0
 284 0050 FB71     		strb	r3, [r7, #7]
 285              	.L9:
 208:../Main.c     **** 
 209:../Main.c     **** 	}
 210:../Main.c     **** 
 211:../Main.c     **** 	if (direction & (1 << LEFT_FRONT)) {
 286              		.loc 1 211 0
 287 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 288 0054 03F00803 		and	r3, r3, #8
 289 0058 002B     		cmp	r3, #0
 290 005a 15D0     		beq	.L11
 212:../Main.c     **** 
 213:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 291              		.loc 1 213 0
 292 005c 40F20003 		movw	r3, #:lower16:data_R
 293 0060 C0F20003 		movt	r3, #:upper16:data_R
 294 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 295 0066 322B     		cmp	r3, #50
 296 0068 0AD9     		bls	.L12
 214:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 297              		.loc 1 214 0
 298 006a 40F20003 		movw	r3, #:lower16:data_R
 299 006e C0F20003 		movt	r3, #:upper16:data_R
 300 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 301 0074 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 302 0076 1046     		mov	r0, r2
 303 0078 1946     		mov	r1, r3
 304 007a FFF7FEFF 		bl	calculateDutyCicle
 305 007e 7861     		str	r0, [r7, #20]	@ float
 306              	.L12:
 215:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 216:../Main.c     **** 		direction_motor_left = DIR_FRONT_LEFT;
 307              		.loc 1 216 0
 308 0080 4FF00003 		mov	r3, #0
 309 0084 FB60     		str	r3, [r7, #12]	@ float
 310 0086 19E0     		b	.L13
 311              	.L11:
 217:../Main.c     **** 
 218:../Main.c     **** 	} else if (direction & (1 << LEFT_BACK)) {
 312              		.loc 1 218 0
 313 0088 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 314 008a 03F00103 		and	r3, r3, #1
 315 008e 002B     		cmp	r3, #0
 316 0090 14D0     		beq	.L13
 219:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 317              		.loc 1 219 0
 318 0092 40F20003 		movw	r3, #:lower16:data_R
 319 0096 C0F20003 		movt	r3, #:upper16:data_R
 320 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 321 009c 322B     		cmp	r3, #50
 322 009e 0AD9     		bls	.L14
 220:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 323              		.loc 1 220 0
 324 00a0 40F20003 		movw	r3, #:lower16:data_R
 325 00a4 C0F20003 		movt	r3, #:upper16:data_R
 326 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 327 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 328 00ac 1046     		mov	r0, r2
 329 00ae 1946     		mov	r1, r3
 330 00b0 FFF7FEFF 		bl	calculateDutyCicle
 331 00b4 7861     		str	r0, [r7, #20]	@ float
 332              	.L14:
 221:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 222:../Main.c     **** 		direction_motor_left = DIR_REV_LEFT;
 333              		.loc 1 222 0
 334 00b6 4FF07E53 		mov	r3, #1065353216
 335 00ba FB60     		str	r3, [r7, #12]	@ float
 336              	.L13:
 223:../Main.c     **** 	}
 224:../Main.c     **** 
 225:../Main.c     **** 	if (direction & (1 << RIGHT_FRONT)) {
 337              		.loc 1 225 0
 338 00bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 339 00be 03F02003 		and	r3, r3, #32
 340 00c2 002B     		cmp	r3, #0
 341 00c4 15D0     		beq	.L15
 226:../Main.c     **** 
 227:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 342              		.loc 1 227 0
 343 00c6 40F20003 		movw	r3, #:lower16:data_R
 344 00ca C0F20003 		movt	r3, #:upper16:data_R
 345 00ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 346 00d0 322B     		cmp	r3, #50
 347 00d2 0AD9     		bls	.L16
 228:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 348              		.loc 1 228 0
 349 00d4 40F20003 		movw	r3, #:lower16:data_R
 350 00d8 C0F20003 		movt	r3, #:upper16:data_R
 351 00dc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 352 00de FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 353 00e0 1046     		mov	r0, r2
 354 00e2 1946     		mov	r1, r3
 355 00e4 FFF7FEFF 		bl	calculateDutyCicle
 356 00e8 3861     		str	r0, [r7, #16]	@ float
 357              	.L16:
 229:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 230:../Main.c     **** 		direction_motor_right = DIR_FRONT_RIGHT;
 358              		.loc 1 230 0
 359 00ea 4FF00003 		mov	r3, #0
 360 00ee BB60     		str	r3, [r7, #8]	@ float
 361 00f0 19E0     		b	.L17
 362              	.L15:
 231:../Main.c     **** 
 232:../Main.c     **** 	} else if (direction & (1 << RIGHT_BACK)) {
 363              		.loc 1 232 0
 364 00f2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 365 00f4 03F01003 		and	r3, r3, #16
 366 00f8 002B     		cmp	r3, #0
 367 00fa 14D0     		beq	.L17
 233:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 368              		.loc 1 233 0
 369 00fc 40F20003 		movw	r3, #:lower16:data_R
 370 0100 C0F20003 		movt	r3, #:upper16:data_R
 371 0104 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 372 0106 322B     		cmp	r3, #50
 373 0108 0AD9     		bls	.L18
 234:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 374              		.loc 1 234 0
 375 010a 40F20003 		movw	r3, #:lower16:data_R
 376 010e C0F20003 		movt	r3, #:upper16:data_R
 377 0112 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 378 0114 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 379 0116 1046     		mov	r0, r2
 380 0118 1946     		mov	r1, r3
 381 011a FFF7FEFF 		bl	calculateDutyCicle
 382 011e 3861     		str	r0, [r7, #16]	@ float
 383              	.L18:
 235:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 236:../Main.c     **** 		direction_motor_right = DIR_REV_RIGHT;
 384              		.loc 1 236 0
 385 0120 4FF07E53 		mov	r3, #1065353216
 386 0124 BB60     		str	r3, [r7, #8]	@ float
 387              	.L17:
 237:../Main.c     **** 	}
 238:../Main.c     **** 
 239:../Main.c     **** 	if (direction_motor_left) {
 388              		.loc 1 239 0
 389 0126 D7ED037A 		flds	s15, [r7, #12]
 390 012a F5EE407A 		fcmpzs	s15
 391 012e F1EE10FA 		fmstat
 392 0132 0FD0     		beq	.L19
 240:../Main.c     **** 		IO004_ResetPin(DIR_LEFT);
 393              		.loc 1 240 0
 394 0134 40F20003 		movw	r3, #:lower16:IO004_Handle6
 395 0138 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 396 013c 5A68     		ldr	r2, [r3, #4]
 397 013e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 398 0142 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 399 0146 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 400 0148 4FF48031 		mov	r1, #65536
 401 014c 01FA03F3 		lsl	r3, r1, r3
 402 0150 5360     		str	r3, [r2, #4]
 403 0152 0EE0     		b	.L20
 404              	.L19:
 241:../Main.c     **** 	} else {
 242:../Main.c     **** 		IO004_SetPin(DIR_LEFT);
 405              		.loc 1 242 0
 406 0154 40F20003 		movw	r3, #:lower16:IO004_Handle6
 407 0158 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 408 015c 5A68     		ldr	r2, [r3, #4]
 409 015e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 410 0162 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 411 0166 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 412 0168 4FF00101 		mov	r1, #1
 413 016c 01FA03F3 		lsl	r3, r1, r3
 414 0170 5360     		str	r3, [r2, #4]
 415              	.L20:
 243:../Main.c     **** 	}
 244:../Main.c     **** 
 245:../Main.c     **** 	if (direction_motor_right) {
 416              		.loc 1 245 0
 417 0172 D7ED027A 		flds	s15, [r7, #8]
 418 0176 F5EE407A 		fcmpzs	s15
 419 017a F1EE10FA 		fmstat
 420 017e 0FD0     		beq	.L21
 246:../Main.c     **** 		IO004_ResetPin(DIR_RIGHT);
 421              		.loc 1 246 0
 422 0180 40F20003 		movw	r3, #:lower16:IO004_Handle0
 423 0184 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 424 0188 5A68     		ldr	r2, [r3, #4]
 425 018a 40F20003 		movw	r3, #:lower16:IO004_Handle0
 426 018e C0F20003 		movt	r3, #:upper16:IO004_Handle0
 427 0192 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 428 0194 4FF48031 		mov	r1, #65536
 429 0198 01FA03F3 		lsl	r3, r1, r3
 430 019c 5360     		str	r3, [r2, #4]
 431 019e 0EE0     		b	.L22
 432              	.L21:
 247:../Main.c     **** 	} else {
 248:../Main.c     **** 		IO004_SetPin(DIR_RIGHT);
 433              		.loc 1 248 0
 434 01a0 40F20003 		movw	r3, #:lower16:IO004_Handle0
 435 01a4 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 436 01a8 5A68     		ldr	r2, [r3, #4]
 437 01aa 40F20003 		movw	r3, #:lower16:IO004_Handle0
 438 01ae C0F20003 		movt	r3, #:upper16:IO004_Handle0
 439 01b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 440 01b4 4FF00101 		mov	r1, #1
 441 01b8 01FA03F3 		lsl	r3, r1, r3
 442 01bc 5360     		str	r3, [r2, #4]
 443              	.L22:
 249:../Main.c     **** 	}
 250:../Main.c     **** 
 251:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, duty_motor_right);
 444              		.loc 1 251 0
 445 01be 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 446 01c2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 447 01c6 3969     		ldr	r1, [r7, #16]	@ float
 448 01c8 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 252:../Main.c     **** 
 253:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, duty_motor_left);
 449              		.loc 1 253 0
 450 01cc 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 451 01d0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 452 01d4 7969     		ldr	r1, [r7, #20]	@ float
 453 01d6 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 254:../Main.c     **** 
 255:../Main.c     **** }
 454              		.loc 1 255 0
 455 01da 07F11807 		add	r7, r7, #24
 456 01de BD46     		mov	sp, r7
 457 01e0 80BD     		pop	{r7, pc}
 458              		.cfi_endproc
 459              	.LFE120:
 461 01e2 00BF     		.section	.text.calculateDutyCicle,"ax",%progbits
 462              		.align	2
 463              		.global	calculateDutyCicle
 464              		.thumb
 465              		.thumb_func
 467              	calculateDutyCicle:
 468              	.LFB121:
 256:../Main.c     **** 
 257:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data) {
 469              		.loc 1 257 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 40
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473 0000 80B5     		push	{r7, lr}
 474              	.LCFI10:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0002 8AB0     		sub	sp, sp, #40
 479              	.LCFI11:
 480              		.cfi_def_cfa_offset 48
 481 0004 00AF     		add	r7, sp, #0
 482              	.LCFI12:
 483              		.cfi_def_cfa_register 7
 484 0006 0246     		mov	r2, r0
 485 0008 0B46     		mov	r3, r1
 486 000a FA71     		strb	r2, [r7, #7]
 487 000c BB71     		strb	r3, [r7, #6]
 258:../Main.c     **** 
 259:../Main.c     **** 	unsigned char range = 255 - PWM_MOTOR_CUT_OFF;
 488              		.loc 1 259 0
 489 000e 4FF0CD03 		mov	r3, #205
 490 0012 87F82330 		strb	r3, [r7, #35]
 260:../Main.c     **** 
 261:../Main.c     **** 	unsigned char pwm_duty_limit = data_R[0];
 491              		.loc 1 261 0
 492 0016 40F20003 		movw	r3, #:lower16:data_R
 493 001a C0F20003 		movt	r3, #:upper16:data_R
 494 001e 1B78     		ldrb	r3, [r3, #0]
 495 0020 87F82230 		strb	r3, [r7, #34]
 262:../Main.c     **** 
 263:../Main.c     **** 	if (mode == LINEAR) {
 496              		.loc 1 263 0
 497 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 498 0026 022B     		cmp	r3, #2
 499 0028 19D1     		bne	.L24
 264:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 265:../Main.c     **** 				+ ((100 - PWM_DUTY_LIM_MIN)
 266:../Main.c     **** 						* (((float) data) - PWM_MOTOR_CUT_OFF)) / range;
 500              		.loc 1 266 0
 501 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 502 002c 06EE903A 		fmsr	s13, r3	@ int
 503 0030 B8EE667A 		fuitos	s14, s13
 504 0034 DFED927A 		flds	s15, .L40
 505 0038 37EE677A 		fsubs	s14, s14, s15
 506 003c DFED917A 		flds	s15, .L40+4
 507 0040 27EE277A 		fmuls	s14, s14, s15
 508 0044 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 509 0048 06EE903A 		fmsr	s13, r3	@ int
 510 004c F8EEE67A 		fsitos	s15, s13
 511 0050 87EE277A 		fdivs	s14, s14, s15
 264:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 512              		.loc 1 264 0
 513 0054 F2EE007A 		fconsts	s15, #32
 514 0058 77EE277A 		fadds	s15, s14, s15
 515 005c 09E1     		b	.L25
 516              	.L24:
 267:../Main.c     **** 
 268:../Main.c     **** 	} else if (mode == EXP) {
 517              		.loc 1 268 0
 518 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 519 0060 012B     		cmp	r3, #1
 520 0062 40F0C180 		bne	.L26
 521              	.LBB4:
 269:../Main.c     **** 
 270:../Main.c     **** 		//MODO GAMBS ON
 271:../Main.c     **** 
 272:../Main.c     **** //		int correctedData = ((255*pwm_duty_limit - PWM_MOTOR_CUT_OFF)*data)/(255*pwm_duty_limit) + PWM_
 273:../Main.c     **** 		int duty_cicle;
 274:../Main.c     **** 
 275:../Main.c     **** 		float value = 100.0f*data/((pwm_duty_limit/100.0f)*255.0f);
 522              		.loc 1 275 0
 523 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 524 0068 07EE903A 		fmsr	s15, r3	@ int
 525 006c B8EEE77A 		fsitos	s14, s15
 526 0070 DFED857A 		flds	s15, .L40+8
 527 0074 27EE277A 		fmuls	s14, s14, s15
 528 0078 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 529 007c 07EE903A 		fmsr	s15, r3	@ int
 530 0080 F8EEE76A 		fsitos	s13, s15
 531 0084 DFED807A 		flds	s15, .L40+8
 532 0088 C6EEA76A 		fdivs	s13, s13, s15
 533 008c DFED7F7A 		flds	s15, .L40+12
 534 0090 66EEA77A 		fmuls	s15, s13, s15
 535 0094 C7EE277A 		fdivs	s15, s14, s15
 536 0098 C7ED077A 		fsts	s15, [r7, #28]
 276:../Main.c     **** 
 277:../Main.c     **** 		if(value < 10){
 537              		.loc 1 277 0
 538 009c 97ED077A 		flds	s14, [r7, #28]
 539 00a0 F2EE047A 		fconsts	s15, #36
 540 00a4 B4EEE77A 		fcmpes	s14, s15
 541 00a8 F1EE10FA 		fmstat
 542 00ac 03D5     		bpl	.L37
 543              	.L34:
 278:../Main.c     **** 			duty_cicle = 0;
 544              		.loc 1 278 0
 545 00ae 4FF00003 		mov	r3, #0
 546 00b2 7B62     		str	r3, [r7, #36]
 547 00b4 93E0     		b	.L29
 548              	.L37:
 279:../Main.c     **** 		}else if(value < 65){
 549              		.loc 1 279 0
 550 00b6 97ED077A 		flds	s14, [r7, #28]
 551 00ba DFED757A 		flds	s15, .L40+16
 552 00be B4EEE77A 		fcmpes	s14, s15
 553 00c2 F1EE10FA 		fmstat
 554 00c6 24D5     		bpl	.L38
 555              	.L35:
 280:../Main.c     **** 			duty_cicle = (value -10)*(33 - PWM_DUTY_LIM_MIN)*(pwm_duty_limit/100.0f)/(55.0f);
 556              		.loc 1 280 0
 557 00c8 97ED077A 		flds	s14, [r7, #28]
 558 00cc F2EE047A 		fconsts	s15, #36
 559 00d0 37EE677A 		fsubs	s14, s14, s15
 560 00d4 F3EE097A 		fconsts	s15, #57
 561 00d8 27EE277A 		fmuls	s14, s14, s15
 562 00dc 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 563 00e0 07EE903A 		fmsr	s15, r3	@ int
 564 00e4 F8EEE76A 		fsitos	s13, s15
 565 00e8 DFED677A 		flds	s15, .L40+8
 566 00ec C6EEA77A 		fdivs	s15, s13, s15
 567 00f0 27EE277A 		fmuls	s14, s14, s15
 568 00f4 DFED677A 		flds	s15, .L40+20
 569 00f8 C7EE277A 		fdivs	s15, s14, s15
 570 00fc FDEEE77A 		ftosizs	s15, s15
 571 0100 C7ED097A 		fsts	s15, [r7, #36]	@ int
 281:../Main.c     **** 			if(duty_cicle < PWM_DUTY_LIM_MIN)
 572              		.loc 1 281 0
 573 0104 7B6A     		ldr	r3, [r7, #36]
 574 0106 072B     		cmp	r3, #7
 575 0108 69DC     		bgt	.L29
 282:../Main.c     **** 				duty_cicle = 0;
 576              		.loc 1 282 0
 577 010a 4FF00003 		mov	r3, #0
 578 010e 7B62     		str	r3, [r7, #36]
 579 0110 65E0     		b	.L29
 580              	.L38:
 283:../Main.c     **** 		}else if(value < 90){
 581              		.loc 1 283 0
 582 0112 97ED077A 		flds	s14, [r7, #28]
 583 0116 DFED607A 		flds	s15, .L40+24
 584 011a B4EEE77A 		fcmpes	s14, s15
 585 011e F1EE10FA 		fmstat
 586 0122 2ED5     		bpl	.L39
 587              	.L36:
 284:../Main.c     **** 			duty_cicle = (value - 65)*33*(pwm_duty_limit/100.0f)/(25.0f) + 33*(pwm_duty_limit/100.0f);
 588              		.loc 1 284 0
 589 0124 97ED077A 		flds	s14, [r7, #28]
 590 0128 DFED597A 		flds	s15, .L40+16
 591 012c 37EE677A 		fsubs	s14, s14, s15
 592 0130 DFED5A7A 		flds	s15, .L40+28
 593 0134 27EE277A 		fmuls	s14, s14, s15
 594 0138 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 595 013c 07EE903A 		fmsr	s15, r3	@ int
 596 0140 F8EEE76A 		fsitos	s13, s15
 597 0144 DFED507A 		flds	s15, .L40+8
 598 0148 C6EEA77A 		fdivs	s15, s13, s15
 599 014c 27EE277A 		fmuls	s14, s14, s15
 600 0150 F3EE097A 		fconsts	s15, #57
 601 0154 87EE277A 		fdivs	s14, s14, s15
 602 0158 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 603 015c 07EE903A 		fmsr	s15, r3	@ int
 604 0160 F8EEE76A 		fsitos	s13, s15
 605 0164 DFED487A 		flds	s15, .L40+8
 606 0168 C6EEA76A 		fdivs	s13, s13, s15
 607 016c DFED4B7A 		flds	s15, .L40+28
 608 0170 66EEA77A 		fmuls	s15, s13, s15
 609 0174 77EE277A 		fadds	s15, s14, s15
 610 0178 FDEEE77A 		ftosizs	s15, s15
 611 017c C7ED097A 		fsts	s15, [r7, #36]	@ int
 612 0180 2DE0     		b	.L29
 613              	.L39:
 285:../Main.c     **** 		}else{
 286:../Main.c     **** 			duty_cicle = (value - 90)*33*(pwm_duty_limit/100.0f)/(10.0f) + 66*(pwm_duty_limit/100.0f);
 614              		.loc 1 286 0
 615 0182 97ED077A 		flds	s14, [r7, #28]
 616 0186 DFED447A 		flds	s15, .L40+24
 617 018a 37EE677A 		fsubs	s14, s14, s15
 618 018e DFED437A 		flds	s15, .L40+28
 619 0192 27EE277A 		fmuls	s14, s14, s15
 620 0196 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 621 019a 07EE903A 		fmsr	s15, r3	@ int
 622 019e F8EEE76A 		fsitos	s13, s15
 623 01a2 DFED397A 		flds	s15, .L40+8
 624 01a6 C6EEA77A 		fdivs	s15, s13, s15
 625 01aa 27EE277A 		fmuls	s14, s14, s15
 626 01ae F2EE047A 		fconsts	s15, #36
 627 01b2 87EE277A 		fdivs	s14, s14, s15
 628 01b6 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 629 01ba 07EE903A 		fmsr	s15, r3	@ int
 630 01be F8EEE76A 		fsitos	s13, s15
 631 01c2 DFED317A 		flds	s15, .L40+8
 632 01c6 C6EEA76A 		fdivs	s13, s13, s15
 633 01ca DFED357A 		flds	s15, .L40+32
 634 01ce 66EEA77A 		fmuls	s15, s13, s15
 635 01d2 77EE277A 		fadds	s15, s14, s15
 636 01d6 FDEEE77A 		ftosizs	s15, s15
 637 01da C7ED097A 		fsts	s15, [r7, #36]	@ int
 638              	.L29:
 287:../Main.c     **** 		}
 288:../Main.c     **** 
 289:../Main.c     **** 		return duty_cicle;
 639              		.loc 1 289 0
 640 01de D7ED097A 		flds	s15, [r7, #36]	@ int
 641 01e2 F8EEE77A 		fsitos	s15, s15
 642 01e6 44E0     		b	.L25
 643              	.L26:
 644              	.LBE4:
 645              	.LBB5:
 290:../Main.c     **** 		//MODO GAMBS OFF
 291:../Main.c     **** 
 292:../Main.c     **** 	} else { // DEGRAU
 293:../Main.c     **** 
 294:../Main.c     **** 		int nDegrau = 4;
 646              		.loc 1 294 0
 647 01e8 4FF00403 		mov	r3, #4
 648 01ec BB61     		str	r3, [r7, #24]
 295:../Main.c     **** 		float larguraDegrau = range / nDegrau;
 649              		.loc 1 295 0
 650 01ee 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 651 01f2 BB69     		ldr	r3, [r7, #24]
 652 01f4 92FBF3F3 		sdiv	r3, r2, r3
 653 01f8 06EE903A 		fmsr	s13, r3	@ int
 654 01fc F8EEE67A 		fsitos	s15, s13
 655 0200 C7ED057A 		fsts	s15, [r7, #20]
 296:../Main.c     **** 		float alturaDegrau = PWM_DUTY_LIM_MAX*pwm_duty_limit / (100.0f*(nDegrau - 1));
 656              		.loc 1 296 0
 657 0204 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 658 0208 4FF06402 		mov	r2, #100
 659 020c 02FB03F3 		mul	r3, r2, r3
 660 0210 07EE903A 		fmsr	s15, r3	@ int
 661 0214 B8EEE77A 		fsitos	s14, s15
 662 0218 BB69     		ldr	r3, [r7, #24]
 663 021a 03F1FF33 		add	r3, r3, #-1
 664 021e 07EE903A 		fmsr	s15, r3	@ int
 665 0222 F8EEE76A 		fsitos	s13, s15
 666 0226 DFED187A 		flds	s15, .L40+8
 667 022a 66EEA77A 		fmuls	s15, s13, s15
 668 022e C7EE277A 		fdivs	s15, s14, s15
 669 0232 C7ED047A 		fsts	s15, [r7, #16]
 297:../Main.c     **** 
 298:../Main.c     **** 		int sinalDegrau = floor((data / larguraDegrau)) * alturaDegrau;
 670              		.loc 1 298 0
 671 0236 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 672 0238 06EE903A 		fmsr	s13, r3	@ int
 673 023c B8EEE67A 		fsitos	s14, s13
 674 0240 D7ED057A 		flds	s15, [r7, #20]
 675 0244 C7EE277A 		fdivs	s15, s14, s15
 676 0248 17EE900A 		fmrs	r0, s15
 677 024c FFF7FEFF 		bl	floor
 678 0250 0346     		mov	r3, r0
 679 0252 07EE903A 		fmsr	s15, r3	@ int
 680 0256 B8EEE77A 		fsitos	s14, s15
 681 025a D7ED047A 		flds	s15, [r7, #16]
 682 025e 67EE277A 		fmuls	s15, s14, s15
 683 0262 FDEEE77A 		ftosizs	s15, s15
 684 0266 C7ED037A 		fsts	s15, [r7, #12]	@ int
 299:../Main.c     **** 
 300:../Main.c     **** 		return sinalDegrau;
 685              		.loc 1 300 0
 686 026a D7ED037A 		flds	s15, [r7, #12]	@ int
 687 026e F8EEE77A 		fsitos	s15, s15
 688              	.L25:
 689 0272 17EE903A 		fmrs	r3, s15
 690              	.LBE5:
 301:../Main.c     **** 
 302:../Main.c     **** 	}
 303:../Main.c     **** 
 304:../Main.c     **** }
 691              		.loc 1 304 0
 692 0276 1846     		mov	r0, r3	@ float
 693 0278 07F12807 		add	r7, r7, #40
 694 027c BD46     		mov	sp, r7
 695 027e 80BD     		pop	{r7, pc}
 696              	.L41:
 697              		.align	2
 698              	.L40:
 699 0280 00004842 		.word	1112014848
 700 0284 0000B842 		.word	1119354880
 701 0288 0000C842 		.word	1120403456
 702 028c 00007F43 		.word	1132396544
 703 0290 00008242 		.word	1115815936
 704 0294 00005C42 		.word	1113325568
 705 0298 0000B442 		.word	1119092736
 706 029c 00000442 		.word	1107558400
 707 02a0 00008442 		.word	1115947008
 708              		.cfi_endproc
 709              	.LFE121:
 711              		.section	.text.Testando_Handler,"ax",%progbits
 712              		.align	2
 713              		.global	Testando_Handler
 714              		.thumb
 715              		.thumb_func
 717              	Testando_Handler:
 718              	.LFB122:
 305:../Main.c     **** 
 306:../Main.c     **** void Testando_Handler(void) {
 719              		.loc 1 306 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 1, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724 0000 80B4     		push	{r7}
 725              	.LCFI13:
 726              		.cfi_def_cfa_offset 4
 727              		.cfi_offset 7, -4
 728 0002 00AF     		add	r7, sp, #0
 729              	.LCFI14:
 730              		.cfi_def_cfa_register 7
 307:../Main.c     **** 
 308:../Main.c     **** 	uint32_t status;
 309:../Main.c     **** 
 310:../Main.c     **** 	/*status = RD_REG(ERU001_Handle0.ERURegs->EXICON[ERU001_Handle0.InputChannel],ERU_EXICON_FL_Msk , 
 311:../Main.c     **** 
 312:../Main.c     **** 	 if(status)
 313:../Main.c     **** 	 {
 314:../Main.c     **** 	 IO004_ResetPin(IO004_Handle6);		// ERU event received, turn on LED
 315:../Main.c     **** 	 ERU001_ClearFlag(ERU001_Handle0);	// Clears the Status Flag
 316:../Main.c     **** 	 }*/
 317:../Main.c     **** }
 731              		.loc 1 317 0
 732 0004 BD46     		mov	sp, r7
 733 0006 80BC     		pop	{r7}
 734 0008 7047     		bx	lr
 735              		.cfi_endproc
 736              	.LFE122:
 738 000a 00BF     		.section	.text.ERU0_3_IRQHandler,"ax",%progbits
 739              		.align	2
 740              		.global	ERU0_3_IRQHandler
 741              		.thumb
 742              		.thumb_func
 744              	ERU0_3_IRQHandler:
 745              	.LFB123:
 318:../Main.c     **** 
 319:../Main.c     **** void interrupt_left(void) {
 746              		.loc 1 319 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0000 80B4     		push	{r7}
 752              	.LCFI15:
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 7, -4
 755 0002 00AF     		add	r7, sp, #0
 756              	.LCFI16:
 757              		.cfi_def_cfa_register 7
 320:../Main.c     **** 
 321:../Main.c     **** }
 758              		.loc 1 321 0
 759 0004 BD46     		mov	sp, r7
 760 0006 80BC     		pop	{r7}
 761 0008 7047     		bx	lr
 762              		.cfi_endproc
 763              	.LFE123:
 765 000a 00BF     		.section	.text.ERU1_0_IRQHandler,"ax",%progbits
 766              		.align	2
 767              		.global	ERU1_0_IRQHandler
 768              		.thumb
 769              		.thumb_func
 771              	ERU1_0_IRQHandler:
 772              	.LFB124:
 322:../Main.c     **** 
 323:../Main.c     **** void interrupt_right(void) {
 773              		.loc 1 323 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 0000 80B4     		push	{r7}
 779              	.LCFI17:
 780              		.cfi_def_cfa_offset 4
 781              		.cfi_offset 7, -4
 782 0002 00AF     		add	r7, sp, #0
 783              	.LCFI18:
 784              		.cfi_def_cfa_register 7
 324:../Main.c     **** 
 325:../Main.c     **** }
 785              		.loc 1 325 0
 786 0004 BD46     		mov	sp, r7
 787 0006 80BC     		pop	{r7}
 788 0008 7047     		bx	lr
 789              		.cfi_endproc
 790              	.LFE124:
 792 000a 00BF     		.section	.text.read_R,"ax",%progbits
 793              		.align	2
 794              		.global	read_R
 795              		.thumb
 796              		.thumb_func
 798              	read_R:
 799              	.LFB125:
 326:../Main.c     **** 
 327:../Main.c     **** /***************************************************/
 328:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 329:../Main.c     **** /***************************************************/
 330:../Main.c     **** 
 331:../Main.c     **** void read_R() {
 800              		.loc 1 331 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 16
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804 0000 80B5     		push	{r7, lr}
 805              	.LCFI19:
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 84B0     		sub	sp, sp, #16
 810              	.LCFI20:
 811              		.cfi_def_cfa_offset 24
 812 0004 00AF     		add	r7, sp, #0
 813              	.LCFI21:
 814              		.cfi_def_cfa_register 7
 332:../Main.c     **** 	int i, j;
 333:../Main.c     **** 	IO004_ResetPin(CE);
 815              		.loc 1 333 0
 816 0006 40F20003 		movw	r3, #:lower16:IO004_Handle14
 817 000a C0F20003 		movt	r3, #:upper16:IO004_Handle14
 818 000e 5A68     		ldr	r2, [r3, #4]
 819 0010 40F20003 		movw	r3, #:lower16:IO004_Handle14
 820 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 821 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 822 001a 4FF48031 		mov	r1, #65536
 823 001e 01FA03F3 		lsl	r3, r1, r3
 824 0022 5360     		str	r3, [r2, #4]
 334:../Main.c     **** 	delay(50000);
 825              		.loc 1 334 0
 826 0024 4CF25030 		movw	r0, #50000
 827 0028 FFF7FEFF 		bl	delay
 335:../Main.c     **** 	uint8_t temp = 0;
 828              		.loc 1 335 0
 829 002c 4FF00003 		mov	r3, #0
 830 0030 FB71     		strb	r3, [r7, #7]
 336:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 831              		.loc 1 336 0
 832 0032 4FF00003 		mov	r3, #0
 833 0036 BB60     		str	r3, [r7, #8]
 834 0038 36E0     		b	.L46
 835              	.L50:
 337:../Main.c     **** 		for (i = 7; i > -1; i--) {
 836              		.loc 1 337 0
 837 003a 4FF00703 		mov	r3, #7
 838 003e FB60     		str	r3, [r7, #12]
 839 0040 20E0     		b	.L47
 840              	.L49:
 338:../Main.c     **** 			if (IO004_ReadPin(DATA))
 841              		.loc 1 338 0
 842 0042 40F20003 		movw	r3, #:lower16:IO004_Handle12
 843 0046 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 844 004a 5B68     		ldr	r3, [r3, #4]
 845 004c 5A6A     		ldr	r2, [r3, #36]
 846 004e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 847 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 848 0056 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 849 0058 22FA03F3 		lsr	r3, r2, r3
 850 005c 03F00103 		and	r3, r3, #1
 851 0060 002B     		cmp	r3, #0
 852 0062 09D0     		beq	.L48
 339:../Main.c     **** 				temp |= (1 << i);
 853              		.loc 1 339 0
 854 0064 4FF00102 		mov	r2, #1
 855 0068 FB68     		ldr	r3, [r7, #12]
 856 006a 02FA03F3 		lsl	r3, r2, r3
 857 006e DAB2     		uxtb	r2, r3
 858 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 859 0072 1343     		orrs	r3, r3, r2
 860 0074 DBB2     		uxtb	r3, r3
 861 0076 FB71     		strb	r3, [r7, #7]
 862              	.L48:
 340:../Main.c     **** 			pulse_R();
 863              		.loc 1 340 0
 864 0078 FFF7FEFF 		bl	pulse_R
 337:../Main.c     **** 		for (i = 7; i > -1; i--) {
 865              		.loc 1 337 0
 866 007c FB68     		ldr	r3, [r7, #12]
 867 007e 03F1FF33 		add	r3, r3, #-1
 868 0082 FB60     		str	r3, [r7, #12]
 869              	.L47:
 337:../Main.c     **** 		for (i = 7; i > -1; i--) {
 870              		.loc 1 337 0 is_stmt 0 discriminator 1
 871 0084 FB68     		ldr	r3, [r7, #12]
 872 0086 002B     		cmp	r3, #0
 873 0088 DBDA     		bge	.L49
 341:../Main.c     **** 		}
 342:../Main.c     **** 		data_R[j] = temp;
 874              		.loc 1 342 0 is_stmt 1
 875 008a 40F20003 		movw	r3, #:lower16:data_R
 876 008e C0F20003 		movt	r3, #:upper16:data_R
 877 0092 BA68     		ldr	r2, [r7, #8]
 878 0094 9B18     		adds	r3, r3, r2
 879 0096 FA79     		ldrb	r2, [r7, #7]
 880 0098 1A70     		strb	r2, [r3, #0]
 343:../Main.c     **** 		temp = 0;
 881              		.loc 1 343 0
 882 009a 4FF00003 		mov	r3, #0
 883 009e FB71     		strb	r3, [r7, #7]
 336:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 884              		.loc 1 336 0
 885 00a0 BB68     		ldr	r3, [r7, #8]
 886 00a2 03F10103 		add	r3, r3, #1
 887 00a6 BB60     		str	r3, [r7, #8]
 888              	.L46:
 336:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 889              		.loc 1 336 0 is_stmt 0 discriminator 1
 890 00a8 BB68     		ldr	r3, [r7, #8]
 891 00aa 042B     		cmp	r3, #4
 892 00ac C5DD     		ble	.L50
 344:../Main.c     **** 	}
 345:../Main.c     **** 	IO004_SetPin(CE);
 893              		.loc 1 345 0 is_stmt 1
 894 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle14
 895 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 896 00b6 5A68     		ldr	r2, [r3, #4]
 897 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 898 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 899 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 900 00c2 4FF00101 		mov	r1, #1
 901 00c6 01FA03F3 		lsl	r3, r1, r3
 902 00ca 5360     		str	r3, [r2, #4]
 346:../Main.c     **** 	delay(50000);
 903              		.loc 1 346 0
 904 00cc 4CF25030 		movw	r0, #50000
 905 00d0 FFF7FEFF 		bl	delay
 347:../Main.c     **** }
 906              		.loc 1 347 0
 907 00d4 07F11007 		add	r7, r7, #16
 908 00d8 BD46     		mov	sp, r7
 909 00da 80BD     		pop	{r7, pc}
 910              		.cfi_endproc
 911              	.LFE125:
 913              		.section	.text.pulse_R,"ax",%progbits
 914              		.align	2
 915              		.global	pulse_R
 916              		.thumb
 917              		.thumb_func
 919              	pulse_R:
 920              	.LFB126:
 348:../Main.c     **** 
 349:../Main.c     **** void pulse_R() {
 921              		.loc 1 349 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 0
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925 0000 80B5     		push	{r7, lr}
 926              	.LCFI22:
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 7, -8
 929              		.cfi_offset 14, -4
 930 0002 00AF     		add	r7, sp, #0
 931              	.LCFI23:
 932              		.cfi_def_cfa_register 7
 350:../Main.c     **** 	delay(300);
 933              		.loc 1 350 0
 934 0004 4FF49670 		mov	r0, #300
 935 0008 FFF7FEFF 		bl	delay
 351:../Main.c     **** 	IO004_SetPin(CLK1);
 936              		.loc 1 351 0
 937 000c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 938 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 939 0014 5A68     		ldr	r2, [r3, #4]
 940 0016 40F20003 		movw	r3, #:lower16:IO004_Handle11
 941 001a C0F20003 		movt	r3, #:upper16:IO004_Handle11
 942 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 943 0020 4FF00101 		mov	r1, #1
 944 0024 01FA03F3 		lsl	r3, r1, r3
 945 0028 5360     		str	r3, [r2, #4]
 352:../Main.c     **** 	delay(300);
 946              		.loc 1 352 0
 947 002a 4FF49670 		mov	r0, #300
 948 002e FFF7FEFF 		bl	delay
 353:../Main.c     **** 	IO004_ResetPin(CLK1);
 949              		.loc 1 353 0
 950 0032 40F20003 		movw	r3, #:lower16:IO004_Handle11
 951 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 952 003a 5A68     		ldr	r2, [r3, #4]
 953 003c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 954 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 955 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 956 0046 4FF48031 		mov	r1, #65536
 957 004a 01FA03F3 		lsl	r3, r1, r3
 958 004e 5360     		str	r3, [r2, #4]
 354:../Main.c     **** }
 959              		.loc 1 354 0
 960 0050 80BD     		pop	{r7, pc}
 961              		.cfi_endproc
 962              	.LFE126:
 964 0052 00BF     		.section	.text.configure_R,"ax",%progbits
 965              		.align	2
 966              		.global	configure_R
 967              		.thumb
 968              		.thumb_func
 970              	configure_R:
 971              	.LFB127:
 355:../Main.c     **** 
 356:../Main.c     **** void configure_R() {
 972              		.loc 1 356 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 8
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0000 80B5     		push	{r7, lr}
 977              	.LCFI24:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 82B0     		sub	sp, sp, #8
 982              	.LCFI25:
 983              		.cfi_def_cfa_offset 16
 984 0004 00AF     		add	r7, sp, #0
 985              	.LCFI26:
 986              		.cfi_def_cfa_register 7
 357:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 358:../Main.c     **** 	configuration[0] = 0xC5; //RF_CH# e OP_MODE 0b11000101
 987              		.loc 1 358 0
 988 0006 40F20003 		movw	r3, #:lower16:configuration
 989 000a C0F20003 		movt	r3, #:upper16:configuration
 990 000e 4FF0C502 		mov	r2, #197
 991 0012 1A70     		strb	r2, [r3, #0]
 359:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 992              		.loc 1 359 0
 993 0014 40F20003 		movw	r3, #:lower16:configuration
 994 0018 C0F20003 		movt	r3, #:upper16:configuration
 995 001c 4FF04F02 		mov	r2, #79
 996 0020 5A70     		strb	r2, [r3, #1]
 360:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 997              		.loc 1 360 0
 998 0022 40F20003 		movw	r3, #:lower16:configuration
 999 0026 C0F20003 		movt	r3, #:upper16:configuration
 1000 002a 4FF0A302 		mov	r2, #163
 1001 002e 9A70     		strb	r2, [r3, #2]
 361:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1002              		.loc 1 361 0
 1003 0030 40F20003 		movw	r3, #:lower16:configuration
 1004 0034 C0F20003 		movt	r3, #:upper16:configuration
 1005 0038 4FF0EE02 		mov	r2, #238
 1006 003c DA70     		strb	r2, [r3, #3]
 362:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1007              		.loc 1 362 0
 1008 003e 40F20003 		movw	r3, #:lower16:configuration
 1009 0042 C0F20003 		movt	r3, #:upper16:configuration
 1010 0046 4FF0DD02 		mov	r2, #221
 1011 004a 1A71     		strb	r2, [r3, #4]
 363:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1012              		.loc 1 363 0
 1013 004c 40F20003 		movw	r3, #:lower16:configuration
 1014 0050 C0F20003 		movt	r3, #:upper16:configuration
 1015 0054 4FF0CC02 		mov	r2, #204
 1016 0058 5A71     		strb	r2, [r3, #5]
 364:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1017              		.loc 1 364 0
 1018 005a 40F20003 		movw	r3, #:lower16:configuration
 1019 005e C0F20003 		movt	r3, #:upper16:configuration
 1020 0062 4FF0BB02 		mov	r2, #187
 1021 0066 9A71     		strb	r2, [r3, #6]
 365:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1022              		.loc 1 365 0
 1023 0068 40F20003 		movw	r3, #:lower16:configuration
 1024 006c C0F20003 		movt	r3, #:upper16:configuration
 1025 0070 4FF0AA02 		mov	r2, #170
 1026 0074 DA71     		strb	r2, [r3, #7]
 366:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1027              		.loc 1 366 0
 1028 0076 40F20003 		movw	r3, #:lower16:configuration
 1029 007a C0F20003 		movt	r3, #:upper16:configuration
 1030 007e 4FF00002 		mov	r2, #0
 1031 0082 1A72     		strb	r2, [r3, #8]
 367:../Main.c     **** 	configuration[9] = 0b00000000;
 1032              		.loc 1 367 0
 1033 0084 40F20003 		movw	r3, #:lower16:configuration
 1034 0088 C0F20003 		movt	r3, #:upper16:configuration
 1035 008c 4FF00002 		mov	r2, #0
 1036 0090 5A72     		strb	r2, [r3, #9]
 368:../Main.c     **** 	configuration[10] = 0b00000000;
 1037              		.loc 1 368 0
 1038 0092 40F20003 		movw	r3, #:lower16:configuration
 1039 0096 C0F20003 		movt	r3, #:upper16:configuration
 1040 009a 4FF00002 		mov	r2, #0
 1041 009e 9A72     		strb	r2, [r3, #10]
 369:../Main.c     **** 	configuration[11] = 0b00000000;
 1042              		.loc 1 369 0
 1043 00a0 40F20003 		movw	r3, #:lower16:configuration
 1044 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1045 00a8 4FF00002 		mov	r2, #0
 1046 00ac DA72     		strb	r2, [r3, #11]
 370:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1047              		.loc 1 370 0
 1048 00ae 40F20003 		movw	r3, #:lower16:configuration
 1049 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1050 00b6 4FF00002 		mov	r2, #0
 1051 00ba 1A73     		strb	r2, [r3, #12]
 371:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1052              		.loc 1 371 0
 1053 00bc 40F20003 		movw	r3, #:lower16:configuration
 1054 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1055 00c4 4FF02802 		mov	r2, #40
 1056 00c8 5A73     		strb	r2, [r3, #13]
 372:../Main.c     **** 	configuration[14] = 0b00000000;
 1057              		.loc 1 372 0
 1058 00ca 40F20003 		movw	r3, #:lower16:configuration
 1059 00ce C0F20003 		movt	r3, #:upper16:configuration
 1060 00d2 4FF00002 		mov	r2, #0
 1061 00d6 9A73     		strb	r2, [r3, #14]
 373:../Main.c     **** 
 374:../Main.c     **** 	IO004_ResetPin(CE);
 1062              		.loc 1 374 0
 1063 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1064 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1065 00e0 5A68     		ldr	r2, [r3, #4]
 1066 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1067 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1068 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1069 00ec 4FF48031 		mov	r1, #65536
 1070 00f0 01FA03F3 		lsl	r3, r1, r3
 1071 00f4 5360     		str	r3, [r2, #4]
 375:../Main.c     **** 	IO004_SetPin(CS);
 1072              		.loc 1 375 0
 1073 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1074 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1075 00fe 5A68     		ldr	r2, [r3, #4]
 1076 0100 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1077 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1078 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1079 010a 4FF00101 		mov	r1, #1
 1080 010e 01FA03F3 		lsl	r3, r1, r3
 1081 0112 5360     		str	r3, [r2, #4]
 376:../Main.c     **** 	int i, j;
 377:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1082              		.loc 1 377 0
 1083 0114 4FF00E03 		mov	r3, #14
 1084 0118 7B60     		str	r3, [r7, #4]
 1085 011a 3FE0     		b	.L53
 1086              	.L58:
 378:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1087              		.loc 1 378 0
 1088 011c 4FF00703 		mov	r3, #7
 1089 0120 3B60     		str	r3, [r7, #0]
 1090 0122 34E0     		b	.L54
 1091              	.L57:
 379:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1092              		.loc 1 379 0
 1093 0124 40F20003 		movw	r3, #:lower16:configuration
 1094 0128 C0F20003 		movt	r3, #:upper16:configuration
 1095 012c 7A68     		ldr	r2, [r7, #4]
 1096 012e 9B18     		adds	r3, r3, r2
 1097 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1098 0132 1A46     		mov	r2, r3
 1099 0134 4FF00101 		mov	r1, #1
 1100 0138 3B68     		ldr	r3, [r7, #0]
 1101 013a 01FA03F3 		lsl	r3, r1, r3
 1102 013e 1340     		ands	r3, r3, r2
 1103 0140 002B     		cmp	r3, #0
 1104 0142 0FDD     		ble	.L55
 380:../Main.c     **** 				IO004_SetPin(DATA);
 1105              		.loc 1 380 0
 1106 0144 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1107 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1108 014c 5A68     		ldr	r2, [r3, #4]
 1109 014e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1110 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1111 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1112 0158 4FF00101 		mov	r1, #1
 1113 015c 01FA03F3 		lsl	r3, r1, r3
 1114 0160 5360     		str	r3, [r2, #4]
 1115 0162 0EE0     		b	.L56
 1116              	.L55:
 381:../Main.c     **** 			else
 382:../Main.c     **** 				IO004_ResetPin(DATA);
 1117              		.loc 1 382 0
 1118 0164 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1119 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1120 016c 5A68     		ldr	r2, [r3, #4]
 1121 016e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1122 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1123 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1124 0178 4FF48031 		mov	r1, #65536
 1125 017c 01FA03F3 		lsl	r3, r1, r3
 1126 0180 5360     		str	r3, [r2, #4]
 1127              	.L56:
 383:../Main.c     **** 			;
 384:../Main.c     **** 			pulse_R();
 1128              		.loc 1 384 0
 1129 0182 FFF7FEFF 		bl	pulse_R
 378:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1130              		.loc 1 378 0
 1131 0186 3B68     		ldr	r3, [r7, #0]
 1132 0188 03F1FF33 		add	r3, r3, #-1
 1133 018c 3B60     		str	r3, [r7, #0]
 1134              	.L54:
 378:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1135              		.loc 1 378 0 is_stmt 0 discriminator 1
 1136 018e 3B68     		ldr	r3, [r7, #0]
 1137 0190 002B     		cmp	r3, #0
 1138 0192 C7DA     		bge	.L57
 377:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1139              		.loc 1 377 0 is_stmt 1
 1140 0194 7B68     		ldr	r3, [r7, #4]
 1141 0196 03F1FF33 		add	r3, r3, #-1
 1142 019a 7B60     		str	r3, [r7, #4]
 1143              	.L53:
 377:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1144              		.loc 1 377 0 is_stmt 0 discriminator 1
 1145 019c 7B68     		ldr	r3, [r7, #4]
 1146 019e 002B     		cmp	r3, #0
 1147 01a0 BCDA     		bge	.L58
 385:../Main.c     **** 		}
 386:../Main.c     **** 	}
 387:../Main.c     **** 	IO004_DisableOutputDriver(&DATA, IO004_CONT_POLLING);
 1148              		.loc 1 387 0 is_stmt 1
 1149 01a2 40F20000 		movw	r0, #:lower16:IO004_Handle12
 1150 01a6 C0F20000 		movt	r0, #:upper16:IO004_Handle12
 1151 01aa 4FF00301 		mov	r1, #3
 1152 01ae FFF7FEFF 		bl	IO004_DisableOutputDriver
 388:../Main.c     **** 	IO004_ResetPin(CS);
 1153              		.loc 1 388 0
 1154 01b2 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1155 01b6 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1156 01ba 5A68     		ldr	r2, [r3, #4]
 1157 01bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1158 01c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1159 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1160 01c6 4FF48031 		mov	r1, #65536
 1161 01ca 01FA03F3 		lsl	r3, r1, r3
 1162 01ce 5360     		str	r3, [r2, #4]
 389:../Main.c     **** 	IO004_SetPin(CE);
 1163              		.loc 1 389 0
 1164 01d0 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1165 01d4 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1166 01d8 5A68     		ldr	r2, [r3, #4]
 1167 01da 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1168 01de C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1169 01e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1170 01e4 4FF00101 		mov	r1, #1
 1171 01e8 01FA03F3 		lsl	r3, r1, r3
 1172 01ec 5360     		str	r3, [r2, #4]
 390:../Main.c     **** 	delay(50000);
 1173              		.loc 1 390 0
 1174 01ee 4CF25030 		movw	r0, #50000
 1175 01f2 FFF7FEFF 		bl	delay
 391:../Main.c     **** }
 1176              		.loc 1 391 0
 1177 01f6 07F10807 		add	r7, r7, #8
 1178 01fa BD46     		mov	sp, r7
 1179 01fc 80BD     		pop	{r7, pc}
 1180              		.cfi_endproc
 1181              	.LFE127:
 1183 01fe 00BF     		.section	.text.Software_Timers_Init,"ax",%progbits
 1184              		.align	2
 1185              		.global	Software_Timers_Init
 1186              		.thumb
 1187              		.thumb_func
 1189              	Software_Timers_Init:
 1190              	.LFB128:
 392:../Main.c     **** 
 393:../Main.c     **** /***************************************************/
 394:../Main.c     **** /****************FUNCOES TEMPORAIS******************/
 395:../Main.c     **** /***************************************************/
 396:../Main.c     **** 
 397:../Main.c     **** void Software_Timers_Init() {
 1191              		.loc 1 397 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 8
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              	.LCFI27:
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 82B0     		sub	sp, sp, #8
 1201              	.LCFI28:
 1202              		.cfi_def_cfa_offset 16
 1203 0004 00AF     		add	r7, sp, #0
 1204              	.LCFI29:
 1205              		.cfi_def_cfa_register 7
 398:../Main.c     **** 	handle_t TaskTimerId;
 399:../Main.c     **** 
 400:../Main.c     **** 	TaskTimerId = SYSTM002_CreateTimer(SYSTM002_SYSTICK_INTERVAL,
 1206              		.loc 1 400 0
 1207 0006 4FF06400 		mov	r0, #100
 1208 000a 4FF00101 		mov	r1, #1
 1209 000e 40F20002 		movw	r2, #:lower16:Tick_Handler
 1210 0012 C0F20002 		movt	r2, #:upper16:Tick_Handler
 1211 0016 4FF00003 		mov	r3, #0
 1212 001a FFF7FEFF 		bl	SYSTM002_CreateTimer
 1213 001e 7860     		str	r0, [r7, #4]
 401:../Main.c     **** 			SYSTM002_PERIODIC, &Tick_Handler, NULL);
 402:../Main.c     **** 	if (TaskTimerId != 0) {
 1214              		.loc 1 402 0
 1215 0020 7B68     		ldr	r3, [r7, #4]
 1216 0022 002B     		cmp	r3, #0
 1217 0024 02D0     		beq	.L59
 403:../Main.c     **** //Timer created successfully so start it
 404:../Main.c     **** 		SYSTM002_StartTimer(TaskTimerId);
 1218              		.loc 1 404 0
 1219 0026 7868     		ldr	r0, [r7, #4]
 1220 0028 FFF7FEFF 		bl	SYSTM002_StartTimer
 1221              	.L59:
 405:../Main.c     **** 	}
 406:../Main.c     **** }
 1222              		.loc 1 406 0
 1223 002c 07F10807 		add	r7, r7, #8
 1224 0030 BD46     		mov	sp, r7
 1225 0032 80BD     		pop	{r7, pc}
 1226              		.cfi_endproc
 1227              	.LFE128:
 1229              		.section	.text.delayus,"ax",%progbits
 1230              		.align	2
 1231              		.global	delayus
 1232              		.thumb
 1233              		.thumb_func
 1235              	delayus:
 1236              	.LFB129:
 407:../Main.c     **** 
 408:../Main.c     **** void delayus(uint32_t delay_us) {
 1237              		.loc 1 408 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 16
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242 0000 80B4     		push	{r7}
 1243              	.LCFI30:
 1244              		.cfi_def_cfa_offset 4
 1245              		.cfi_offset 7, -4
 1246 0002 85B0     		sub	sp, sp, #20
 1247              	.LCFI31:
 1248              		.cfi_def_cfa_offset 24
 1249 0004 00AF     		add	r7, sp, #0
 1250              	.LCFI32:
 1251              		.cfi_def_cfa_register 7
 1252 0006 7860     		str	r0, [r7, #4]
 409:../Main.c     **** 	uint32_t currenttick = ticks;
 1253              		.loc 1 409 0
 1254 0008 40F20003 		movw	r3, #:lower16:ticks
 1255 000c C0F20003 		movt	r3, #:upper16:ticks
 1256 0010 1B68     		ldr	r3, [r3, #0]
 1257 0012 FB60     		str	r3, [r7, #12]
 410:../Main.c     **** 	while (ticks - currenttick < (delay_us / SYSTM002_SYSTICK_INTERVAL))
 1258              		.loc 1 410 0
 1259 0014 00BF     		nop
 1260              	.L62:
 1261              		.loc 1 410 0 is_stmt 0 discriminator 1
 1262 0016 40F20003 		movw	r3, #:lower16:ticks
 1263 001a C0F20003 		movt	r3, #:upper16:ticks
 1264 001e 1A68     		ldr	r2, [r3, #0]
 1265 0020 FB68     		ldr	r3, [r7, #12]
 1266 0022 D21A     		subs	r2, r2, r3
 1267 0024 7968     		ldr	r1, [r7, #4]
 1268 0026 48F21F53 		movw	r3, #34079
 1269 002a C5F2EB13 		movt	r3, 20971
 1270 002e A3FB0103 		umull	r0, r3, r3, r1
 1271 0032 4FEA5313 		lsr	r3, r3, #5
 1272 0036 9A42     		cmp	r2, r3
 1273 0038 EDD3     		bcc	.L62
 411:../Main.c     **** 		;
 412:../Main.c     **** 	ticks = 0;
 1274              		.loc 1 412 0 is_stmt 1
 1275 003a 40F20003 		movw	r3, #:lower16:ticks
 1276 003e C0F20003 		movt	r3, #:upper16:ticks
 1277 0042 4FF00002 		mov	r2, #0
 1278 0046 1A60     		str	r2, [r3, #0]
 413:../Main.c     **** }
 1279              		.loc 1 413 0
 1280 0048 07F11407 		add	r7, r7, #20
 1281 004c BD46     		mov	sp, r7
 1282 004e 80BC     		pop	{r7}
 1283 0050 7047     		bx	lr
 1284              		.cfi_endproc
 1285              	.LFE129:
 1287 0052 00BF     		.section	.text.delayms,"ax",%progbits
 1288              		.align	2
 1289              		.global	delayms
 1290              		.thumb
 1291              		.thumb_func
 1293              	delayms:
 1294              	.LFB130:
 414:../Main.c     **** 
 415:../Main.c     **** void delayms(uint32_t delay_ms) {
 1295              		.loc 1 415 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 8
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299 0000 80B5     		push	{r7, lr}
 1300              	.LCFI33:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 82B0     		sub	sp, sp, #8
 1305              	.LCFI34:
 1306              		.cfi_def_cfa_offset 16
 1307 0004 00AF     		add	r7, sp, #0
 1308              	.LCFI35:
 1309              		.cfi_def_cfa_register 7
 1310 0006 7860     		str	r0, [r7, #4]
 416:../Main.c     **** 	delayus(1000 * delay_ms);
 1311              		.loc 1 416 0
 1312 0008 7B68     		ldr	r3, [r7, #4]
 1313 000a 4FF47A72 		mov	r2, #1000
 1314 000e 02FB03F3 		mul	r3, r2, r3
 1315 0012 1846     		mov	r0, r3
 1316 0014 FFF7FEFF 		bl	delayus
 417:../Main.c     **** }
 1317              		.loc 1 417 0
 1318 0018 07F10807 		add	r7, r7, #8
 1319 001c BD46     		mov	sp, r7
 1320 001e 80BD     		pop	{r7, pc}
 1321              		.cfi_endproc
 1322              	.LFE130:
 1324              		.section	.text.Tick_Handler,"ax",%progbits
 1325              		.align	2
 1326              		.global	Tick_Handler
 1327              		.thumb
 1328              		.thumb_func
 1330              	Tick_Handler:
 1331              	.LFB131:
 418:../Main.c     **** 
 419:../Main.c     **** void Tick_Handler(void) {
 1332              		.loc 1 419 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 1337 0000 80B4     		push	{r7}
 1338              	.LCFI36:
 1339              		.cfi_def_cfa_offset 4
 1340              		.cfi_offset 7, -4
 1341 0002 00AF     		add	r7, sp, #0
 1342              	.LCFI37:
 1343              		.cfi_def_cfa_register 7
 420:../Main.c     **** 	ticks++;
 1344              		.loc 1 420 0
 1345 0004 40F20003 		movw	r3, #:lower16:ticks
 1346 0008 C0F20003 		movt	r3, #:upper16:ticks
 1347 000c 1B68     		ldr	r3, [r3, #0]
 1348 000e 03F10102 		add	r2, r3, #1
 1349 0012 40F20003 		movw	r3, #:lower16:ticks
 1350 0016 C0F20003 		movt	r3, #:upper16:ticks
 1351 001a 1A60     		str	r2, [r3, #0]
 421:../Main.c     **** 	status_ticks++;
 1352              		.loc 1 421 0
 1353 001c 40F20003 		movw	r3, #:lower16:status_ticks
 1354 0020 C0F20003 		movt	r3, #:upper16:status_ticks
 1355 0024 1B68     		ldr	r3, [r3, #0]
 1356 0026 03F10102 		add	r2, r3, #1
 1357 002a 40F20003 		movw	r3, #:lower16:status_ticks
 1358 002e C0F20003 		movt	r3, #:upper16:status_ticks
 1359 0032 1A60     		str	r2, [r3, #0]
 422:../Main.c     **** }
 1360              		.loc 1 422 0
 1361 0034 BD46     		mov	sp, r7
 1362 0036 80BC     		pop	{r7}
 1363 0038 7047     		bx	lr
 1364              		.cfi_endproc
 1365              	.LFE131:
 1367 003a 00BF     		.section	.text.delay,"ax",%progbits
 1368              		.align	2
 1369              		.global	delay
 1370              		.thumb
 1371              		.thumb_func
 1373              	delay:
 1374              	.LFB132:
 423:../Main.c     **** 
 424:../Main.c     **** void delay(long unsigned int i) {
 1375              		.loc 1 424 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 8
 1378              		@ frame_needed = 1, uses_anonymous_args = 0
 1379              		@ link register save eliminated.
 1380 0000 80B4     		push	{r7}
 1381              	.LCFI38:
 1382              		.cfi_def_cfa_offset 4
 1383              		.cfi_offset 7, -4
 1384 0002 83B0     		sub	sp, sp, #12
 1385              	.LCFI39:
 1386              		.cfi_def_cfa_offset 16
 1387 0004 00AF     		add	r7, sp, #0
 1388              	.LCFI40:
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
 425:../Main.c     **** 	while (i--) {
 1391              		.loc 1 425 0
 1392 0008 00E0     		b	.L66
 1393              	.L67:
 1394              	.LBB6:
 1395              	.LBB7:
 1396              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1397              		.loc 2 327 0
 1398              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1399 000a 00BF     		nop
 1400              	@ 0 "" 2
 1401              		.thumb
 1402              	.L66:
 1403              	.LBE7:
 1404              	.LBE6:
 1405              		.loc 1 425 0 discriminator 1
 1406 000c 7B68     		ldr	r3, [r7, #4]
 1407 000e 002B     		cmp	r3, #0
 1408 0010 0CBF     		ite	eq
 1409 0012 0023     		moveq	r3, #0
 1410 0014 0123     		movne	r3, #1
 1411 0016 DBB2     		uxtb	r3, r3
 1412 0018 7A68     		ldr	r2, [r7, #4]
 1413 001a 02F1FF32 		add	r2, r2, #-1
 1414 001e 7A60     		str	r2, [r7, #4]
 1415 0020 002B     		cmp	r3, #0
 1416 0022 F2D1     		bne	.L67
 426:../Main.c     **** 
 427:../Main.c     **** 		__NOP();
 428:../Main.c     **** 	}
 429:../Main.c     **** }
 1417              		.loc 1 429 0
 1418 0024 07F10C07 		add	r7, r7, #12
 1419 0028 BD46     		mov	sp, r7
 1420 002a 80BC     		pop	{r7}
 1421 002c 7047     		bx	lr
 1422              		.cfi_endproc
 1423              	.LFE132:
 1425 002e 00BF     		.section	.text.floor,"ax",%progbits
 1426              		.align	2
 1427              		.global	floor
 1428              		.thumb
 1429              		.thumb_func
 1431              	floor:
 1432              	.LFB133:
 430:../Main.c     **** 
 431:../Main.c     **** int floor(float value){
 1433              		.loc 1 431 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 16
 1436              		@ frame_needed = 1, uses_anonymous_args = 0
 1437              		@ link register save eliminated.
 1438 0000 80B4     		push	{r7}
 1439              	.LCFI41:
 1440              		.cfi_def_cfa_offset 4
 1441              		.cfi_offset 7, -4
 1442 0002 85B0     		sub	sp, sp, #20
 1443              	.LCFI42:
 1444              		.cfi_def_cfa_offset 24
 1445 0004 00AF     		add	r7, sp, #0
 1446              	.LCFI43:
 1447              		.cfi_def_cfa_register 7
 1448 0006 7860     		str	r0, [r7, #4]	@ float
 432:../Main.c     **** 	int a = value;
 1449              		.loc 1 432 0
 1450 0008 D7ED017A 		flds	s15, [r7, #4]
 1451 000c FDEEE77A 		ftosizs	s15, s15
 1452 0010 C7ED037A 		fsts	s15, [r7, #12]	@ int
 433:../Main.c     **** 	return a;
 1453              		.loc 1 433 0
 1454 0014 FB68     		ldr	r3, [r7, #12]
 434:../Main.c     **** }
 1455              		.loc 1 434 0
 1456 0016 1846     		mov	r0, r3
 1457 0018 07F11407 		add	r7, r7, #20
 1458 001c BD46     		mov	sp, r7
 1459 001e 80BC     		pop	{r7}
 1460 0020 7047     		bx	lr
 1461              		.cfi_endproc
 1462              	.LFE133:
 1464 0022 00BF     		.text
 1465              	.Letext0:
 1466              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1467              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1468              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1469              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1470              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1471              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1472              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1473              		.file 10 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
 1474              		.file 11 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000f configuration
                            *COM*:00000005 data_R
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:26     .bss:00000000 ticks
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:23     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:32     .bss:00000004 status_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:37     .bss:00000008 value
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:40     .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:45     .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1189   .text.Software_Timers_Init:00000000 Software_Timers_Init
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:148    .text.WakeUp:00000000 WakeUp
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:970    .text.configure_R:00000000 configure_R
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:175    .text.start_driver_signals:00000000 start_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:798    .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:230    .text.update_driver_signals:00000000 update_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:143    .text.WakeUp:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:170    .text.start_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:225    .text.update_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:467    .text.calculateDutyCicle:00000000 calculateDutyCicle
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:462    .text.calculateDutyCicle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1431   .text.floor:00000000 floor
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:699    .text.calculateDutyCicle:00000280 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:712    .text.Testando_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:717    .text.Testando_Handler:00000000 Testando_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:739    .text.ERU0_3_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:744    .text.ERU0_3_IRQHandler:00000000 ERU0_3_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:766    .text.ERU1_0_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:771    .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:793    .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1373   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:919    .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:914    .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:965    .text.configure_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1184   .text.Software_Timers_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1330   .text.Tick_Handler:00000000 Tick_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1230   .text.delayus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1235   .text.delayus:00000000 delayus
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1288   .text.delayms:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1293   .text.delayms:00000000 delayms
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1325   .text.Tick_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1368   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cco5PXFJ.s:1426   .text.floor:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e3bdd798bb23f70d94471cb7157fa38f
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.2b7f5ec7311f4adf3e25cf7854109544
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CNT001.h.53.54b2229008e37b1970e63d1faf193d82
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ERU001_Conf.h.69.cbf5f28f16df40bf2ec07157d45ebab0
                           .group:00000000 wm4.ERU002_Conf.h.49.2f1d75b23a08c83bd296d7c11c7e280b
                           .group:00000000 wm4.NVIC002_Conf.h.63.13943eb720fa25e7207fa08ab410f2a7

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle7
IO004_Handle13
PWMSP001_Handle0
PWMSP001_Start
PWMSP001_SetPwmFreq
PWMSP001_SetDutyCycle
PWMSP001_Handle1
IO004_Handle6
IO004_Handle0
IO004_Handle14
IO004_Handle12
IO004_Handle11
IO004_Handle10
IO004_DisableOutputDriver
SYSTM002_CreateTimer
SYSTM002_StartTimer
