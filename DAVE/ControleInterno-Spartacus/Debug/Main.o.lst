   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	configuration,15,4
  20              		.comm	data_R,5,4
  21              		.global	ticks
  22              		.bss
  23              		.align	2
  26              	ticks:
  27 0000 00000000 		.space	4
  28              		.global	status_ticks
  29              		.align	2
  32              	status_ticks:
  33 0004 00000000 		.space	4
  34              		.global	sudden_run_ticks
  35              		.align	2
  38              	sudden_run_ticks:
  39 0008 00000000 		.space	4
  40              		.global	error_ticks
  41              		.align	2
  44              	error_ticks:
  45 000c 00000000 		.space	4
  46              		.global	value
  49              	value:
  50 0010 00       		.space	1
  51              		.global	last_duty_right
  52 0011 000000   		.align	2
  55              	last_duty_right:
  56 0014 00000000 		.space	4
  57              		.global	last_duty_left
  58              		.align	2
  61              	last_duty_left:
  62 0018 00000000 		.space	4
  63              		.global	error_left
  66              	error_left:
  67 001c 00       		.space	1
  68              		.global	error_right
  71              	error_right:
  72 001d 00       		.space	1
  73              		.global	MagicWord
  74              		.data
  75              		.align	2
  78              	MagicWord:
  79 0000 FECAADAB 		.word	-1414673666
  80              		.global	count
  81              		.bss
  82 001e 0000     		.align	2
  85              	count:
  86 0020 00000000 		.space	4
  87              		.section	.text.main,"ax",%progbits
  88              		.align	2
  89              		.global	main
  90              		.thumb
  91              		.thumb_func
  93              	main:
  94              	.LFB117:
  95              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: May 9, 2015
   5:../Main.c     ****  *      Author: JM
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** #include <DAVE3.h> //Declarations from DAVE3 Code Generation (includes SFR declaration)
   9:../Main.c     **** /* DADO3:
  10:../Main.c     ****  BIT 0: BLAH2
  11:../Main.c     ****  BIT 1: BUZINA
  12:../Main.c     ****  BIT 2: ENABLE
  13:../Main.c     ****  BIT 3: ALBH2
  14:../Main.c     ****  BIT 4: BLAH1
  15:../Main.c     ****  BIT 5: ALBH1
  16:../Main.c     ****  */
  17:../Main.c     **** 
  18:../Main.c     **** /***************************************************
  19:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  20:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  21:../Main.c     ****  *Byte 1 : PWM 1
  22:../Main.c     ****  *Byte 2 : PWM 2
  23:../Main.c     ****  *Byte 3 : SENTIDOS
  24:../Main.c     ****  *Byte 4 : PWM 3 (Arma)
  25:../Main.c     ****  ***************************************************/
  26:../Main.c     **** 
  27:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  28:../Main.c     **** /***************************************************/
  29:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  30:../Main.c     **** /***************************************************/
  31:../Main.c     **** 
  32:../Main.c     **** #define NULL 0
  33:../Main.c     **** 
  34:../Main.c     **** //Defines referentes ao protocolo
  35:../Main.c     **** #define BYTES_TO_RECEIVE 5
  36:../Main.c     **** //Defines referentes ao byte DADO 3
  37:../Main.c     **** #define	BLAH2		0		//LEFT-BACK
  38:../Main.c     **** #define	BUZINA		1		//USELESS
  39:../Main.c     **** #define	ENABLE		2		//USELESS
  40:../Main.c     **** #define	ALBH2		3		//LEFT-FRONT
  41:../Main.c     **** #define	BLAH1		4		//RIGHT-BACK
  42:../Main.c     **** #define	ALBH1		5		//RIGHT-FRONT
  43:../Main.c     **** #define	LEFT_BACK	BLAH2
  44:../Main.c     **** #define	LEFT_FRONT	ALBH2
  45:../Main.c     **** #define	RIGHT_BACK	BLAH1
  46:../Main.c     **** #define	RIGHT_FRONT	ALBH1
  47:../Main.c     **** #define DATA_TEST0 BUZINA
  48:../Main.c     **** #define DATA_TEST1 ENABLE
  49:../Main.c     **** 
  50:../Main.c     **** //Defines referentes ao transceptor
  51:../Main.c     **** #define CS	 	IO004_Handle10
  52:../Main.c     **** #define CLK1 	IO004_Handle11
  53:../Main.c     **** #define DATA 	IO004_Handle12
  54:../Main.c     **** #define DR1		IO004_Handle13
  55:../Main.c     **** #define CE 		IO004_Handle14
  56:../Main.c     **** 
  57:../Main.c     **** //Defines referentes ao driver da ponte H
  58:../Main.c     **** #define ERR_INTRPT_LEFT		IO002_Handle1
  59:../Main.c     **** #define DIR_LEFT			IO004_Handle6
  60:../Main.c     **** #define Enable_LEFT			IO004_Handle7
  61:../Main.c     **** #define DvrDis_LEFT			IO004_Handle8
  62:../Main.c     **** #define ERR_Input_LEFT		IO004_Handle15
  63:../Main.c     **** #define PWM_LEFT			&PWMSP001_Handle1
  64:../Main.c     **** #define ERR_INTRPT_RIGHT	IO002_Handle0
  65:../Main.c     **** #define DIR_RIGHT			IO004_Handle0
  66:../Main.c     **** #define Enable_RIGHT		IO004_Handle1
  67:../Main.c     **** #define DvrDis_RIGHT		IO004_Handle2
  68:../Main.c     **** #define ERR_Input_RIGHT		IO004_Handle3
  69:../Main.c     **** #define PWM_RIGHT			&PWMSP001_Handle0
  70:../Main.c     **** 
  71:../Main.c     **** //Define Faiscador
  72:../Main.c     **** #define FAISCADOR			IO004_Handle9
  73:../Main.c     **** #define GND					IO004_Handle4
  74:../Main.c     **** 
  75:../Main.c     **** //Define referentes a ponte H
  76:../Main.c     **** #define PWM_LIMITATION 70
  77:../Main.c     **** #define PWM_DUTY_LIM_MAX 100
  78:../Main.c     **** #define PWM_DUTY_LIM_MIN 8
  79:../Main.c     **** #define PWM_DUTY_LIM_ZERO 0
  80:../Main.c     **** #define DIR_FRONT_LEFT 0
  81:../Main.c     **** #define DIR_REV_LEFT 1
  82:../Main.c     **** #define DIR_FRONT_RIGHT 0
  83:../Main.c     **** #define DIR_REV_RIGHT 1
  84:../Main.c     **** #define PWM_MOTOR_CUT_OFF 50
  85:../Main.c     **** #define PWM_MOTOR_RIGHT &PWMSP001_Handle0
  86:../Main.c     **** #define PWM_MOTOR_LEFT &PWMSP001_Handle1
  87:../Main.c     **** #define FREQ_MOTOR_LOCOMOTION 30000 //Hz
  88:../Main.c     **** //Defines referentes ao fail safe
  89:../Main.c     **** #define RUNNING 1
  90:../Main.c     **** #define FAIL 0
  91:../Main.c     **** 
  92:../Main.c     **** //Defines referentes a testes de locomocao
  93:../Main.c     **** #define LINEAR 	2
  94:../Main.c     **** #define DEGRAU 	0
  95:../Main.c     **** #define EXP	1
  96:../Main.c     **** 
  97:../Main.c     **** //==============================
  98:../Main.c     **** 
  99:../Main.c     **** /***************************************************/
 100:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 101:../Main.c     **** /***************************************************/
 102:../Main.c     **** 
 103:../Main.c     **** void Tick_Handler(void);
 104:../Main.c     **** void Testando_Handler(void);
 105:../Main.c     **** void interrupt_left(void);
 106:../Main.c     **** void interrupt_right(void);
 107:../Main.c     **** void delayms(uint32_t delay_ms);
 108:../Main.c     **** void delayus(uint32_t delay_us);
 109:../Main.c     **** void Software_Timers_Init(void);
 110:../Main.c     **** void WakeUp(void);
 111:../Main.c     **** void pulse_R(void);
 112:../Main.c     **** void configure_R(void);
 113:../Main.c     **** void read_R(void);
 114:../Main.c     **** void update_driver_signals(void);
 115:../Main.c     **** void delay(long unsigned int i);
 116:../Main.c     **** void start_driver_signals(void);
 117:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data);
 118:../Main.c     **** int floor(float value);
 119:../Main.c     **** void error(void);
 120:../Main.c     **** void MyFunction(void);
 121:../Main.c     **** 
 122:../Main.c     **** /***************************************************/
 123:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 124:../Main.c     **** /***************************************************/
 125:../Main.c     **** 
 126:../Main.c     **** char configuration[15];
 127:../Main.c     **** unsigned char data_R[BYTES_TO_RECEIVE];
 128:../Main.c     **** uint32_t ticks = 0UL;
 129:../Main.c     **** uint32_t status_ticks = 0UL;
 130:../Main.c     **** uint32_t sudden_run_ticks = 0UL;
 131:../Main.c     **** uint32_t error_ticks = 0UL;
 132:../Main.c     **** bool value = 0UL;
 133:../Main.c     **** float last_duty_right = 0;
 134:../Main.c     **** float last_duty_left = 0;
 135:../Main.c     **** char error_left = 0;
 136:../Main.c     **** char error_right = 0;
 137:../Main.c     **** uint32_t MagicWord = 0xABADCAFE;
 138:../Main.c     **** uint32_t count = 0;
 139:../Main.c     **** 
 140:../Main.c     **** /***************************************************/
 141:../Main.c     **** /***********************MAIN************************/
 142:../Main.c     **** /***************************************************/
 143:../Main.c     **** 
 144:../Main.c     **** int main(void) {
  96              		.loc 1 144 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 8
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100 0000 80B5     		push	{r7, lr}
 101              	.LCFI0:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 82B0     		sub	sp, sp, #8
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 16
 108 0004 00AF     		add	r7, sp, #0
 109              	.LCFI2:
 110              		.cfi_def_cfa_register 7
 111              	.L2:
 145:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 146:../Main.c     **** 	teste: DAVE_Init(); // Initialization of DAVE Apps
 112              		.loc 1 146 0
 113 0006 FFF7FEFF 		bl	DAVE_Init
 147:../Main.c     **** 
 148:../Main.c     **** 	Software_Timers_Init();
 114              		.loc 1 148 0
 115 000a FFF7FEFF 		bl	Software_Timers_Init
 149:../Main.c     **** 	WakeUp();
 116              		.loc 1 149 0
 117 000e FFF7FEFF 		bl	WakeUp
 150:../Main.c     **** 	configure_R();
 118              		.loc 1 150 0
 119 0012 FFF7FEFF 		bl	configure_R
 151:../Main.c     **** 
 152:../Main.c     **** 	ticks = 0UL;
 120              		.loc 1 152 0
 121 0016 40F20003 		movw	r3, #:lower16:ticks
 122 001a C0F20003 		movt	r3, #:upper16:ticks
 123 001e 4FF00002 		mov	r2, #0
 124 0022 1A60     		str	r2, [r3, #0]
 153:../Main.c     **** 	status_ticks = 0UL;
 125              		.loc 1 153 0
 126 0024 40F20003 		movw	r3, #:lower16:status_ticks
 127 0028 C0F20003 		movt	r3, #:upper16:status_ticks
 128 002c 4FF00002 		mov	r2, #0
 129 0030 1A60     		str	r2, [r3, #0]
 154:../Main.c     **** 	char status = RUNNING;
 130              		.loc 1 154 0
 131 0032 4FF00103 		mov	r3, #1
 132 0036 FB71     		strb	r3, [r7, #7]
 155:../Main.c     **** 	start_driver_signals();
 133              		.loc 1 155 0
 134 0038 FFF7FEFF 		bl	start_driver_signals
 156:../Main.c     **** 
 157:../Main.c     **** 	IO004_SetPin(Enable_LEFT);
 135              		.loc 1 157 0
 136 003c 40F20003 		movw	r3, #:lower16:IO004_Handle7
 137 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 138 0044 5A68     		ldr	r2, [r3, #4]
 139 0046 40F20003 		movw	r3, #:lower16:IO004_Handle7
 140 004a C0F20003 		movt	r3, #:upper16:IO004_Handle7
 141 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 142 0050 4FF00101 		mov	r1, #1
 143 0054 01FA03F3 		lsl	r3, r1, r3
 144 0058 5360     		str	r3, [r2, #4]
 158:../Main.c     **** 
 159:../Main.c     **** 	handle_t Timerld;
 160:../Main.c     **** 	RESET001_InfoType RESETn;
 161:../Main.c     **** 	WDT001_Enable();
 145              		.loc 1 161 0
 146 005a 4FF40043 		mov	r3, #32768
 147 005e C5F20003 		movt	r3, 20480
 148 0062 4FF40042 		mov	r2, #32768
 149 0066 C5F20002 		movt	r2, 20480
 150 006a 5268     		ldr	r2, [r2, #4]
 151 006c 42F00102 		orr	r2, r2, #1
 152 0070 5A60     		str	r2, [r3, #4]
 162:../Main.c     **** 
 163:../Main.c     **** 	/*To get the information of the last reset*/
 164:../Main.c     **** 	RESETn = RESET001_GetResetInfo();
 153              		.loc 1 164 0
 154 0072 FFF7FEFF 		bl	RESET001_GetResetInfo
 155 0076 0346     		mov	r3, r0
 156 0078 BB71     		strb	r3, [r7, #6]
 165:../Main.c     **** 	/*Mask for WDT reset*/
 166:../Main.c     **** 	RESETn &= WDT_RESET;
 157              		.loc 1 166 0
 158 007a BB79     		ldrb	r3, [r7, #6]
 159 007c 03F02003 		and	r3, r3, #32
 160 0080 BB71     		strb	r3, [r7, #6]
 161 0082 00E0     		b	.L6
 162              	.L7:
 167:../Main.c     **** 
 168:../Main.c     **** 	/*Service WDT in window period*/
 169:../Main.c     **** 	//Timerld = SYSTM002_CreateTimer(2000, SYSTM001_PERIODIC, MyFunction, NULL);
 170:../Main.c     **** 	/*Start Timer for WDT servicing*/
 171:../Main.c     **** 	//SYSTM002_StartTimer(Timerld);
 172:../Main.c     **** 	while (1) {
 173:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 174:../Main.c     **** 			if (status == FAIL) {
 175:../Main.c     **** 				IO004_SetPin(Enable_LEFT);
 176:../Main.c     **** 				IO004_SetPin(Enable_RIGHT);
 177:../Main.c     **** 				WDT001_Service(MagicWord);
 178:../Main.c     **** 				status = RUNNING;
 179:../Main.c     **** 			}
 180:../Main.c     **** 			status_ticks = 0;
 181:../Main.c     **** 			read_R();
 182:../Main.c     **** 			update_driver_signals();
 183:../Main.c     **** 		} else {
 184:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 185:../Main.c     **** 				IO004_ResetPin(Enable_LEFT);
 186:../Main.c     **** 				IO004_ResetPin(Enable_RIGHT);
 187:../Main.c     **** 				status = FAIL;
 188:../Main.c     **** 				start_driver_signals();
 189:../Main.c     **** 				//goto teste;
 190:../Main.c     **** 			}
 191:../Main.c     **** 		}
 192:../Main.c     **** 	}
 163              		.loc 1 192 0
 164 0084 00BF     		nop
 165              	.L6:
 173:../Main.c     **** 		if (IO004_ReadPin(DR1)) {
 166              		.loc 1 173 0
 167 0086 40F20003 		movw	r3, #:lower16:IO004_Handle13
 168 008a C0F20003 		movt	r3, #:upper16:IO004_Handle13
 169 008e 5B68     		ldr	r3, [r3, #4]
 170 0090 5A6A     		ldr	r2, [r3, #36]
 171 0092 40F20003 		movw	r3, #:lower16:IO004_Handle13
 172 0096 C0F20003 		movt	r3, #:upper16:IO004_Handle13
 173 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 174 009c 22FA03F3 		lsr	r3, r2, r3
 175 00a0 03F00103 		and	r3, r3, #1
 176 00a4 002B     		cmp	r3, #0
 177 00a6 39D0     		beq	.L3
 174:../Main.c     **** 			if (status == FAIL) {
 178              		.loc 1 174 0
 179 00a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 180 00aa 002B     		cmp	r3, #0
 181 00ac 2AD1     		bne	.L4
 175:../Main.c     **** 				IO004_SetPin(Enable_LEFT);
 182              		.loc 1 175 0
 183 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle7
 184 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 185 00b6 5A68     		ldr	r2, [r3, #4]
 186 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle7
 187 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle7
 188 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 189 00c2 4FF00101 		mov	r1, #1
 190 00c6 01FA03F3 		lsl	r3, r1, r3
 191 00ca 5360     		str	r3, [r2, #4]
 176:../Main.c     **** 				IO004_SetPin(Enable_RIGHT);
 192              		.loc 1 176 0
 193 00cc 40F20003 		movw	r3, #:lower16:IO004_Handle1
 194 00d0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 195 00d4 5A68     		ldr	r2, [r3, #4]
 196 00d6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 197 00da C0F20003 		movt	r3, #:upper16:IO004_Handle1
 198 00de 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 199 00e0 4FF00101 		mov	r1, #1
 200 00e4 01FA03F3 		lsl	r3, r1, r3
 201 00e8 5360     		str	r3, [r2, #4]
 177:../Main.c     **** 				WDT001_Service(MagicWord);
 202              		.loc 1 177 0
 203 00ea 4FF40043 		mov	r3, #32768
 204 00ee C5F20003 		movt	r3, 20480
 205 00f2 40F20002 		movw	r2, #:lower16:MagicWord
 206 00f6 C0F20002 		movt	r2, #:upper16:MagicWord
 207 00fa 1268     		ldr	r2, [r2, #0]
 208 00fc 9A60     		str	r2, [r3, #8]
 178:../Main.c     **** 				status = RUNNING;
 209              		.loc 1 178 0
 210 00fe 4FF00103 		mov	r3, #1
 211 0102 FB71     		strb	r3, [r7, #7]
 212              	.L4:
 180:../Main.c     **** 			status_ticks = 0;
 213              		.loc 1 180 0
 214 0104 40F20003 		movw	r3, #:lower16:status_ticks
 215 0108 C0F20003 		movt	r3, #:upper16:status_ticks
 216 010c 4FF00002 		mov	r2, #0
 217 0110 1A60     		str	r2, [r3, #0]
 181:../Main.c     **** 			read_R();
 218              		.loc 1 181 0
 219 0112 FFF7FEFF 		bl	read_R
 182:../Main.c     **** 			update_driver_signals();
 220              		.loc 1 182 0
 221 0116 FFF7FEFF 		bl	update_driver_signals
 222              		.loc 1 192 0
 223 011a B3E7     		b	.L7
 224              	.L3:
 184:../Main.c     **** 			if (status_ticks > 5000) { //0.5s
 225              		.loc 1 184 0
 226 011c 40F20003 		movw	r3, #:lower16:status_ticks
 227 0120 C0F20003 		movt	r3, #:upper16:status_ticks
 228 0124 1A68     		ldr	r2, [r3, #0]
 229 0126 41F28833 		movw	r3, #5000
 230 012a 9A42     		cmp	r2, r3
 231 012c AAD9     		bls	.L7
 185:../Main.c     **** 				IO004_ResetPin(Enable_LEFT);
 232              		.loc 1 185 0
 233 012e 40F20003 		movw	r3, #:lower16:IO004_Handle7
 234 0132 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 235 0136 5A68     		ldr	r2, [r3, #4]
 236 0138 40F20003 		movw	r3, #:lower16:IO004_Handle7
 237 013c C0F20003 		movt	r3, #:upper16:IO004_Handle7
 238 0140 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 239 0142 4FF48031 		mov	r1, #65536
 240 0146 01FA03F3 		lsl	r3, r1, r3
 241 014a 5360     		str	r3, [r2, #4]
 186:../Main.c     **** 				IO004_ResetPin(Enable_RIGHT);
 242              		.loc 1 186 0
 243 014c 40F20003 		movw	r3, #:lower16:IO004_Handle1
 244 0150 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 245 0154 5A68     		ldr	r2, [r3, #4]
 246 0156 40F20003 		movw	r3, #:lower16:IO004_Handle1
 247 015a C0F20003 		movt	r3, #:upper16:IO004_Handle1
 248 015e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 249 0160 4FF48031 		mov	r1, #65536
 250 0164 01FA03F3 		lsl	r3, r1, r3
 251 0168 5360     		str	r3, [r2, #4]
 187:../Main.c     **** 				status = FAIL;
 252              		.loc 1 187 0
 253 016a 4FF00003 		mov	r3, #0
 254 016e FB71     		strb	r3, [r7, #7]
 188:../Main.c     **** 				start_driver_signals();
 255              		.loc 1 188 0
 256 0170 FFF7FEFF 		bl	start_driver_signals
 257              		.loc 1 192 0
 258 0174 86E7     		b	.L7
 259              		.cfi_endproc
 260              	.LFE117:
 262 0176 00BF     		.section	.text.WakeUp,"ax",%progbits
 263              		.align	2
 264              		.global	WakeUp
 265              		.thumb
 266              		.thumb_func
 268              	WakeUp:
 269              	.LFB118:
 193:../Main.c     **** 	return 0;
 194:../Main.c     **** }
 195:../Main.c     **** 
 196:../Main.c     **** void WakeUp(void) {
 270              		.loc 1 196 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 275 0000 80B4     		push	{r7}
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 4
 278              		.cfi_offset 7, -4
 279 0002 00AF     		add	r7, sp, #0
 280              	.LCFI4:
 281              		.cfi_def_cfa_register 7
 197:../Main.c     **** 
 198:../Main.c     **** 	//Enable
 199:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 200:../Main.c     **** //	delayus(100);
 201:../Main.c     **** //	IO004_TogglePin(IO004_Handle1);
 202:../Main.c     **** 
 203:../Main.c     **** 	//DrvDis
 204:../Main.c     **** 	/*IO004_SetPin(IO004_Handle2);
 205:../Main.c     **** 	 delayms(1);
 206:../Main.c     **** 	 IO004_TogglePin(IO004_Handle2);*/
 207:../Main.c     **** 
 208:../Main.c     **** }
 282              		.loc 1 208 0
 283 0004 BD46     		mov	sp, r7
 284 0006 80BC     		pop	{r7}
 285 0008 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE118:
 289 000a 00BF     		.section	.text.start_driver_signals,"ax",%progbits
 290              		.align	2
 291              		.global	start_driver_signals
 292              		.thumb
 293              		.thumb_func
 295              	start_driver_signals:
 296              	.LFB119:
 209:../Main.c     **** 
 210:../Main.c     **** void start_driver_signals(void) {
 297              		.loc 1 210 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301 0000 80B5     		push	{r7, lr}
 302              	.LCFI5:
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0002 00AF     		add	r7, sp, #0
 307              	.LCFI6:
 308              		.cfi_def_cfa_register 7
 211:../Main.c     **** 
 212:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_RIGHT);
 309              		.loc 1 212 0
 310 0004 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 311 0008 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 312 000c FFF7FEFF 		bl	PWMSP001_Start
 213:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_RIGHT, FREQ_MOTOR_LOCOMOTION);
 313              		.loc 1 213 0
 314 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 315 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 316 0018 4FF4C041 		mov	r1, #24576
 317 001c C4F2EA61 		movt	r1, 18154
 318 0020 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 214:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, PWM_DUTY_LIM_ZERO);
 319              		.loc 1 214 0
 320 0024 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 321 0028 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 322 002c 4FF00001 		mov	r1, #0
 323 0030 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 215:../Main.c     **** 
 216:../Main.c     **** 	PWMSP001_Start(PWM_MOTOR_LEFT);
 324              		.loc 1 216 0
 325 0034 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 326 0038 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 327 003c FFF7FEFF 		bl	PWMSP001_Start
 217:../Main.c     **** 	PWMSP001_SetPwmFreq(PWM_MOTOR_LEFT, FREQ_MOTOR_LOCOMOTION);
 328              		.loc 1 217 0
 329 0040 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 330 0044 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 331 0048 4FF4C041 		mov	r1, #24576
 332 004c C4F2EA61 		movt	r1, 18154
 333 0050 FFF7FEFF 		bl	PWMSP001_SetPwmFreq
 218:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, PWM_DUTY_LIM_ZERO);
 334              		.loc 1 218 0
 335 0054 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 336 0058 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 337 005c 4FF00001 		mov	r1, #0
 338 0060 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 219:../Main.c     **** 
 220:../Main.c     **** }
 339              		.loc 1 220 0
 340 0064 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE119:
 344 0066 00BF     		.section	.text.update_driver_signals,"ax",%progbits
 345              		.align	2
 346              		.global	update_driver_signals
 347              		.thumb
 348              		.thumb_func
 350              	update_driver_signals:
 351              	.LFB120:
 221:../Main.c     **** 
 222:../Main.c     **** void update_driver_signals(void) {
 352              		.loc 1 222 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 24
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              	.LCFI7:
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 86B0     		sub	sp, sp, #24
 362              	.LCFI8:
 363              		.cfi_def_cfa_offset 32
 364 0004 00AF     		add	r7, sp, #0
 365              	.LCFI9:
 366              		.cfi_def_cfa_register 7
 223:../Main.c     **** 
 224:../Main.c     **** 	unsigned char direction = data_R[3];
 367              		.loc 1 224 0
 368 0006 40F20003 		movw	r3, #:lower16:data_R
 369 000a C0F20003 		movt	r3, #:upper16:data_R
 370 000e DB78     		ldrb	r3, [r3, #3]
 371 0010 BB71     		strb	r3, [r7, #6]
 225:../Main.c     **** 	float duty_motor_left = PWM_DUTY_LIM_ZERO;
 372              		.loc 1 225 0
 373 0012 4FF00003 		mov	r3, #0
 374 0016 7B61     		str	r3, [r7, #20]	@ float
 226:../Main.c     **** 	float duty_motor_right = PWM_DUTY_LIM_ZERO;
 375              		.loc 1 226 0
 376 0018 4FF00003 		mov	r3, #0
 377 001c 3B61     		str	r3, [r7, #16]	@ float
 227:../Main.c     **** 	float direction_motor_left = 0;
 378              		.loc 1 227 0
 379 001e 4FF00003 		mov	r3, #0
 380 0022 FB60     		str	r3, [r7, #12]	@ float
 228:../Main.c     **** 	float direction_motor_right = 0;
 381              		.loc 1 228 0
 382 0024 4FF00003 		mov	r3, #0
 383 0028 BB60     		str	r3, [r7, #8]	@ float
 229:../Main.c     **** 
 230:../Main.c     **** 	char mode = LINEAR;
 384              		.loc 1 230 0
 385 002a 4FF00203 		mov	r3, #2
 386 002e FB71     		strb	r3, [r7, #7]
 231:../Main.c     **** 
 232:../Main.c     **** 	if (!(direction & (1 << DATA_TEST1))) {
 387              		.loc 1 232 0
 388 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 389 0032 03F00403 		and	r3, r3, #4
 390 0036 002B     		cmp	r3, #0
 391 0038 0BD1     		bne	.L11
 233:../Main.c     **** 
 234:../Main.c     **** 		if (direction & (1 << DATA_TEST0))
 392              		.loc 1 234 0
 393 003a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 003c 03F00203 		and	r3, r3, #2
 395 0040 002B     		cmp	r3, #0
 396 0042 03D0     		beq	.L12
 235:../Main.c     **** 			mode = EXP;
 397              		.loc 1 235 0
 398 0044 4FF00103 		mov	r3, #1
 399 0048 FB71     		strb	r3, [r7, #7]
 400 004a 02E0     		b	.L11
 401              	.L12:
 236:../Main.c     **** 		else
 237:../Main.c     **** 			mode = DEGRAU;
 402              		.loc 1 237 0
 403 004c 4FF00003 		mov	r3, #0
 404 0050 FB71     		strb	r3, [r7, #7]
 405              	.L11:
 238:../Main.c     **** 
 239:../Main.c     **** 	}
 240:../Main.c     **** 
 241:../Main.c     **** 	if (direction & (1 << LEFT_FRONT)) {
 406              		.loc 1 241 0
 407 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 408 0054 03F00803 		and	r3, r3, #8
 409 0058 002B     		cmp	r3, #0
 410 005a 15D0     		beq	.L13
 242:../Main.c     **** 
 243:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 411              		.loc 1 243 0
 412 005c 40F20003 		movw	r3, #:lower16:data_R
 413 0060 C0F20003 		movt	r3, #:upper16:data_R
 414 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 415 0066 322B     		cmp	r3, #50
 416 0068 0AD9     		bls	.L14
 244:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 417              		.loc 1 244 0
 418 006a 40F20003 		movw	r3, #:lower16:data_R
 419 006e C0F20003 		movt	r3, #:upper16:data_R
 420 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 421 0074 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 422 0076 1046     		mov	r0, r2
 423 0078 1946     		mov	r1, r3
 424 007a FFF7FEFF 		bl	calculateDutyCicle
 425 007e 7861     		str	r0, [r7, #20]	@ float
 426              	.L14:
 245:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 246:../Main.c     **** 		direction_motor_left = DIR_FRONT_LEFT;
 427              		.loc 1 246 0
 428 0080 4FF00003 		mov	r3, #0
 429 0084 FB60     		str	r3, [r7, #12]	@ float
 430 0086 19E0     		b	.L15
 431              	.L13:
 247:../Main.c     **** 
 248:../Main.c     **** 	} else if (direction & (1 << LEFT_BACK)) {
 432              		.loc 1 248 0
 433 0088 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 434 008a 03F00103 		and	r3, r3, #1
 435 008e 002B     		cmp	r3, #0
 436 0090 14D0     		beq	.L15
 249:../Main.c     **** 		if (data_R[1] > PWM_MOTOR_CUT_OFF)
 437              		.loc 1 249 0
 438 0092 40F20003 		movw	r3, #:lower16:data_R
 439 0096 C0F20003 		movt	r3, #:upper16:data_R
 440 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 441 009c 322B     		cmp	r3, #50
 442 009e 0AD9     		bls	.L16
 250:../Main.c     **** 			duty_motor_left = calculateDutyCicle(mode, data_R[1]);
 443              		.loc 1 250 0
 444 00a0 40F20003 		movw	r3, #:lower16:data_R
 445 00a4 C0F20003 		movt	r3, #:upper16:data_R
 446 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 447 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 448 00ac 1046     		mov	r0, r2
 449 00ae 1946     		mov	r1, r3
 450 00b0 FFF7FEFF 		bl	calculateDutyCicle
 451 00b4 7861     		str	r0, [r7, #20]	@ float
 452              	.L16:
 251:../Main.c     **** //			duty_motor_left = (((float) data_R[1]) / 255) * 100.0f;
 252:../Main.c     **** 		direction_motor_left = DIR_REV_LEFT;
 453              		.loc 1 252 0
 454 00b6 4FF07E53 		mov	r3, #1065353216
 455 00ba FB60     		str	r3, [r7, #12]	@ float
 456              	.L15:
 253:../Main.c     **** 	}
 254:../Main.c     **** 
 255:../Main.c     **** 	if (direction & (1 << RIGHT_FRONT)) {
 457              		.loc 1 255 0
 458 00bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 459 00be 03F02003 		and	r3, r3, #32
 460 00c2 002B     		cmp	r3, #0
 461 00c4 15D0     		beq	.L17
 256:../Main.c     **** 
 257:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 462              		.loc 1 257 0
 463 00c6 40F20003 		movw	r3, #:lower16:data_R
 464 00ca C0F20003 		movt	r3, #:upper16:data_R
 465 00ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 466 00d0 322B     		cmp	r3, #50
 467 00d2 0AD9     		bls	.L18
 258:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 468              		.loc 1 258 0
 469 00d4 40F20003 		movw	r3, #:lower16:data_R
 470 00d8 C0F20003 		movt	r3, #:upper16:data_R
 471 00dc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 472 00de FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 473 00e0 1046     		mov	r0, r2
 474 00e2 1946     		mov	r1, r3
 475 00e4 FFF7FEFF 		bl	calculateDutyCicle
 476 00e8 3861     		str	r0, [r7, #16]	@ float
 477              	.L18:
 259:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 260:../Main.c     **** 		direction_motor_right = DIR_FRONT_RIGHT;
 478              		.loc 1 260 0
 479 00ea 4FF00003 		mov	r3, #0
 480 00ee BB60     		str	r3, [r7, #8]	@ float
 481 00f0 19E0     		b	.L19
 482              	.L17:
 261:../Main.c     **** 
 262:../Main.c     **** 	} else if (direction & (1 << RIGHT_BACK)) {
 483              		.loc 1 262 0
 484 00f2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 485 00f4 03F01003 		and	r3, r3, #16
 486 00f8 002B     		cmp	r3, #0
 487 00fa 14D0     		beq	.L19
 263:../Main.c     **** 		if (data_R[2] > PWM_MOTOR_CUT_OFF)
 488              		.loc 1 263 0
 489 00fc 40F20003 		movw	r3, #:lower16:data_R
 490 0100 C0F20003 		movt	r3, #:upper16:data_R
 491 0104 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 492 0106 322B     		cmp	r3, #50
 493 0108 0AD9     		bls	.L20
 264:../Main.c     **** 			duty_motor_right = calculateDutyCicle(mode, data_R[2]);
 494              		.loc 1 264 0
 495 010a 40F20003 		movw	r3, #:lower16:data_R
 496 010e C0F20003 		movt	r3, #:upper16:data_R
 497 0112 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 498 0114 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 499 0116 1046     		mov	r0, r2
 500 0118 1946     		mov	r1, r3
 501 011a FFF7FEFF 		bl	calculateDutyCicle
 502 011e 3861     		str	r0, [r7, #16]	@ float
 503              	.L20:
 265:../Main.c     **** //			duty_motor_right = (((float) data_R[2]) / 255) * 100.0f;
 266:../Main.c     **** 		direction_motor_right = DIR_REV_RIGHT;
 504              		.loc 1 266 0
 505 0120 4FF07E53 		mov	r3, #1065353216
 506 0124 BB60     		str	r3, [r7, #8]	@ float
 507              	.L19:
 267:../Main.c     **** 	}
 268:../Main.c     **** 
 269:../Main.c     **** 	if (direction_motor_left) {
 508              		.loc 1 269 0
 509 0126 D7ED037A 		flds	s15, [r7, #12]
 510 012a F5EE407A 		fcmpzs	s15
 511 012e F1EE10FA 		fmstat
 512 0132 0FD0     		beq	.L21
 270:../Main.c     **** 		IO004_ResetPin(DIR_LEFT);
 513              		.loc 1 270 0
 514 0134 40F20003 		movw	r3, #:lower16:IO004_Handle6
 515 0138 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 516 013c 5A68     		ldr	r2, [r3, #4]
 517 013e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 518 0142 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 519 0146 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 520 0148 4FF48031 		mov	r1, #65536
 521 014c 01FA03F3 		lsl	r3, r1, r3
 522 0150 5360     		str	r3, [r2, #4]
 523 0152 0EE0     		b	.L22
 524              	.L21:
 271:../Main.c     **** 	} else {
 272:../Main.c     **** 		IO004_SetPin(DIR_LEFT);
 525              		.loc 1 272 0
 526 0154 40F20003 		movw	r3, #:lower16:IO004_Handle6
 527 0158 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 528 015c 5A68     		ldr	r2, [r3, #4]
 529 015e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 530 0162 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 531 0166 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 532 0168 4FF00101 		mov	r1, #1
 533 016c 01FA03F3 		lsl	r3, r1, r3
 534 0170 5360     		str	r3, [r2, #4]
 535              	.L22:
 273:../Main.c     **** 	}
 274:../Main.c     **** 
 275:../Main.c     **** 	if (direction_motor_right) {
 536              		.loc 1 275 0
 537 0172 D7ED027A 		flds	s15, [r7, #8]
 538 0176 F5EE407A 		fcmpzs	s15
 539 017a F1EE10FA 		fmstat
 540 017e 0FD0     		beq	.L23
 276:../Main.c     **** 		IO004_ResetPin(DIR_RIGHT);
 541              		.loc 1 276 0
 542 0180 40F20003 		movw	r3, #:lower16:IO004_Handle0
 543 0184 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 544 0188 5A68     		ldr	r2, [r3, #4]
 545 018a 40F20003 		movw	r3, #:lower16:IO004_Handle0
 546 018e C0F20003 		movt	r3, #:upper16:IO004_Handle0
 547 0192 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 548 0194 4FF48031 		mov	r1, #65536
 549 0198 01FA03F3 		lsl	r3, r1, r3
 550 019c 5360     		str	r3, [r2, #4]
 551 019e 0EE0     		b	.L24
 552              	.L23:
 277:../Main.c     **** 	} else {
 278:../Main.c     **** 		IO004_SetPin(DIR_RIGHT);
 553              		.loc 1 278 0
 554 01a0 40F20003 		movw	r3, #:lower16:IO004_Handle0
 555 01a4 C0F20003 		movt	r3, #:upper16:IO004_Handle0
 556 01a8 5A68     		ldr	r2, [r3, #4]
 557 01aa 40F20003 		movw	r3, #:lower16:IO004_Handle0
 558 01ae C0F20003 		movt	r3, #:upper16:IO004_Handle0
 559 01b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 560 01b4 4FF00101 		mov	r1, #1
 561 01b8 01FA03F3 		lsl	r3, r1, r3
 562 01bc 5360     		str	r3, [r2, #4]
 563              	.L24:
 279:../Main.c     **** 	}
 280:../Main.c     **** 
 281:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_RIGHT, duty_motor_right);
 564              		.loc 1 281 0
 565 01be 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
 566 01c2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
 567 01c6 3969     		ldr	r1, [r7, #16]	@ float
 568 01c8 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 282:../Main.c     **** 
 283:../Main.c     **** 	PWMSP001_SetDutyCycle(PWM_MOTOR_LEFT, duty_motor_left);
 569              		.loc 1 283 0
 570 01cc 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 571 01d0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 572 01d4 7969     		ldr	r1, [r7, #20]	@ float
 573 01d6 FFF7FEFF 		bl	PWMSP001_SetDutyCycle
 284:../Main.c     **** 
 285:../Main.c     **** }
 574              		.loc 1 285 0
 575 01da 07F11807 		add	r7, r7, #24
 576 01de BD46     		mov	sp, r7
 577 01e0 80BD     		pop	{r7, pc}
 578              		.cfi_endproc
 579              	.LFE120:
 581 01e2 00BF     		.section	.text.calculateDutyCicle,"ax",%progbits
 582              		.align	2
 583              		.global	calculateDutyCicle
 584              		.thumb
 585              		.thumb_func
 587              	calculateDutyCicle:
 588              	.LFB121:
 286:../Main.c     **** 
 287:../Main.c     **** float calculateDutyCicle(char mode, unsigned char data) {
 589              		.loc 1 287 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 40
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              	.LCFI10:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 8AB0     		sub	sp, sp, #40
 599              	.LCFI11:
 600              		.cfi_def_cfa_offset 48
 601 0004 00AF     		add	r7, sp, #0
 602              	.LCFI12:
 603              		.cfi_def_cfa_register 7
 604 0006 0246     		mov	r2, r0
 605 0008 0B46     		mov	r3, r1
 606 000a FA71     		strb	r2, [r7, #7]
 607 000c BB71     		strb	r3, [r7, #6]
 288:../Main.c     **** 
 289:../Main.c     **** 	unsigned char range = 255 - PWM_MOTOR_CUT_OFF;
 608              		.loc 1 289 0
 609 000e 4FF0CD03 		mov	r3, #205
 610 0012 87F82330 		strb	r3, [r7, #35]
 290:../Main.c     **** 
 291:../Main.c     **** 	unsigned char pwm_duty_limit = data_R[0];
 611              		.loc 1 291 0
 612 0016 40F20003 		movw	r3, #:lower16:data_R
 613 001a C0F20003 		movt	r3, #:upper16:data_R
 614 001e 1B78     		ldrb	r3, [r3, #0]
 615 0020 87F82230 		strb	r3, [r7, #34]
 292:../Main.c     **** 
 293:../Main.c     **** 	if (mode == LINEAR) {
 616              		.loc 1 293 0
 617 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 618 0026 022B     		cmp	r3, #2
 619 0028 19D1     		bne	.L26
 294:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 295:../Main.c     **** 				+ ((100 - PWM_DUTY_LIM_MIN)
 296:../Main.c     **** 						* (((float) data) - PWM_MOTOR_CUT_OFF)) / range;
 620              		.loc 1 296 0
 621 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 622 002c 06EE903A 		fmsr	s13, r3	@ int
 623 0030 B8EE667A 		fuitos	s14, s13
 624 0034 DFED927A 		flds	s15, .L42
 625 0038 37EE677A 		fsubs	s14, s14, s15
 626 003c DFED917A 		flds	s15, .L42+4
 627 0040 27EE277A 		fmuls	s14, s14, s15
 628 0044 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 629 0048 06EE903A 		fmsr	s13, r3	@ int
 630 004c F8EEE67A 		fsitos	s15, s13
 631 0050 87EE277A 		fdivs	s14, s14, s15
 294:../Main.c     **** 		return PWM_DUTY_LIM_MIN
 632              		.loc 1 294 0
 633 0054 F2EE007A 		fconsts	s15, #32
 634 0058 77EE277A 		fadds	s15, s14, s15
 635 005c 09E1     		b	.L27
 636              	.L26:
 297:../Main.c     **** 
 298:../Main.c     **** 	} else if (mode == EXP) {
 637              		.loc 1 298 0
 638 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 639 0060 012B     		cmp	r3, #1
 640 0062 40F0C180 		bne	.L28
 641              	.LBB4:
 299:../Main.c     **** 
 300:../Main.c     **** 		//MODO GAMBS ON
 301:../Main.c     **** 
 302:../Main.c     **** //		int correctedData = ((255*pwm_duty_limit - PWM_MOTOR_CUT_OFF)*data)/(255*pwm_duty_limit) + PWM_
 303:../Main.c     **** 		int duty_cicle;
 304:../Main.c     **** 
 305:../Main.c     **** 		float value = 100.0f * data / ((pwm_duty_limit / 100.0f) * 255.0f);
 642              		.loc 1 305 0
 643 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 644 0068 07EE903A 		fmsr	s15, r3	@ int
 645 006c B8EEE77A 		fsitos	s14, s15
 646 0070 DFED857A 		flds	s15, .L42+8
 647 0074 27EE277A 		fmuls	s14, s14, s15
 648 0078 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 649 007c 07EE903A 		fmsr	s15, r3	@ int
 650 0080 F8EEE76A 		fsitos	s13, s15
 651 0084 DFED807A 		flds	s15, .L42+8
 652 0088 C6EEA76A 		fdivs	s13, s13, s15
 653 008c DFED7F7A 		flds	s15, .L42+12
 654 0090 66EEA77A 		fmuls	s15, s13, s15
 655 0094 C7EE277A 		fdivs	s15, s14, s15
 656 0098 C7ED077A 		fsts	s15, [r7, #28]
 306:../Main.c     **** 
 307:../Main.c     **** 		if (value < 10) {
 657              		.loc 1 307 0
 658 009c 97ED077A 		flds	s14, [r7, #28]
 659 00a0 F2EE047A 		fconsts	s15, #36
 660 00a4 B4EEE77A 		fcmpes	s14, s15
 661 00a8 F1EE10FA 		fmstat
 662 00ac 03D5     		bpl	.L39
 663              	.L36:
 308:../Main.c     **** 			duty_cicle = 0;
 664              		.loc 1 308 0
 665 00ae 4FF00003 		mov	r3, #0
 666 00b2 7B62     		str	r3, [r7, #36]
 667 00b4 93E0     		b	.L31
 668              	.L39:
 309:../Main.c     **** 		} else if (value < 75) {
 669              		.loc 1 309 0
 670 00b6 97ED077A 		flds	s14, [r7, #28]
 671 00ba DFED757A 		flds	s15, .L42+16
 672 00be B4EEE77A 		fcmpes	s14, s15
 673 00c2 F1EE10FA 		fmstat
 674 00c6 24D5     		bpl	.L40
 675              	.L37:
 310:../Main.c     **** 			duty_cicle = (value - 10) * (33 - PWM_DUTY_LIM_MIN)
 676              		.loc 1 310 0
 677 00c8 97ED077A 		flds	s14, [r7, #28]
 678 00cc F2EE047A 		fconsts	s15, #36
 679 00d0 37EE677A 		fsubs	s14, s14, s15
 680 00d4 F3EE097A 		fconsts	s15, #57
 681 00d8 27EE277A 		fmuls	s14, s14, s15
 311:../Main.c     **** 					* (pwm_duty_limit / 100.0f) / (65.0f);
 682              		.loc 1 311 0
 683 00dc 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 684 00e0 07EE903A 		fmsr	s15, r3	@ int
 685 00e4 F8EEE76A 		fsitos	s13, s15
 686 00e8 DFED677A 		flds	s15, .L42+8
 687 00ec C6EEA77A 		fdivs	s15, s13, s15
 688 00f0 27EE277A 		fmuls	s14, s14, s15
 689 00f4 DFED677A 		flds	s15, .L42+20
 690 00f8 C7EE277A 		fdivs	s15, s14, s15
 310:../Main.c     **** 			duty_cicle = (value - 10) * (33 - PWM_DUTY_LIM_MIN)
 691              		.loc 1 310 0
 692 00fc FDEEE77A 		ftosizs	s15, s15
 693 0100 C7ED097A 		fsts	s15, [r7, #36]	@ int
 312:../Main.c     **** 			if (duty_cicle < PWM_DUTY_LIM_MIN)
 694              		.loc 1 312 0
 695 0104 7B6A     		ldr	r3, [r7, #36]
 696 0106 072B     		cmp	r3, #7
 697 0108 69DC     		bgt	.L31
 313:../Main.c     **** 				duty_cicle = 0;
 698              		.loc 1 313 0
 699 010a 4FF00003 		mov	r3, #0
 700 010e 7B62     		str	r3, [r7, #36]
 701 0110 65E0     		b	.L31
 702              	.L40:
 314:../Main.c     **** 		} else if (value < 90) {
 703              		.loc 1 314 0
 704 0112 97ED077A 		flds	s14, [r7, #28]
 705 0116 DFED607A 		flds	s15, .L42+24
 706 011a B4EEE77A 		fcmpes	s14, s15
 707 011e F1EE10FA 		fmstat
 708 0122 2ED5     		bpl	.L41
 709              	.L38:
 315:../Main.c     **** 			duty_cicle = (value - 75) * 33 * (pwm_duty_limit / 100.0f) / (25.0f)
 710              		.loc 1 315 0
 711 0124 97ED077A 		flds	s14, [r7, #28]
 712 0128 DFED597A 		flds	s15, .L42+16
 713 012c 37EE677A 		fsubs	s14, s14, s15
 714 0130 DFED5A7A 		flds	s15, .L42+28
 715 0134 27EE277A 		fmuls	s14, s14, s15
 716 0138 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 717 013c 07EE903A 		fmsr	s15, r3	@ int
 718 0140 F8EEE76A 		fsitos	s13, s15
 719 0144 DFED507A 		flds	s15, .L42+8
 720 0148 C6EEA77A 		fdivs	s15, s13, s15
 721 014c 27EE277A 		fmuls	s14, s14, s15
 722 0150 F3EE097A 		fconsts	s15, #57
 723 0154 87EE277A 		fdivs	s14, s14, s15
 316:../Main.c     **** 					+ 33 * (pwm_duty_limit / 100.0f);
 724              		.loc 1 316 0
 725 0158 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 726 015c 07EE903A 		fmsr	s15, r3	@ int
 727 0160 F8EEE76A 		fsitos	s13, s15
 728 0164 DFED487A 		flds	s15, .L42+8
 729 0168 C6EEA76A 		fdivs	s13, s13, s15
 730 016c DFED4B7A 		flds	s15, .L42+28
 731 0170 66EEA77A 		fmuls	s15, s13, s15
 732 0174 77EE277A 		fadds	s15, s14, s15
 315:../Main.c     **** 			duty_cicle = (value - 75) * 33 * (pwm_duty_limit / 100.0f) / (25.0f)
 733              		.loc 1 315 0
 734 0178 FDEEE77A 		ftosizs	s15, s15
 735 017c C7ED097A 		fsts	s15, [r7, #36]	@ int
 736 0180 2DE0     		b	.L31
 737              	.L41:
 317:../Main.c     **** 		} else {
 318:../Main.c     **** 			duty_cicle = (value - 90) * 33 * (pwm_duty_limit / 100.0f) / (10.0f)
 738              		.loc 1 318 0
 739 0182 97ED077A 		flds	s14, [r7, #28]
 740 0186 DFED447A 		flds	s15, .L42+24
 741 018a 37EE677A 		fsubs	s14, s14, s15
 742 018e DFED437A 		flds	s15, .L42+28
 743 0192 27EE277A 		fmuls	s14, s14, s15
 744 0196 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 745 019a 07EE903A 		fmsr	s15, r3	@ int
 746 019e F8EEE76A 		fsitos	s13, s15
 747 01a2 DFED397A 		flds	s15, .L42+8
 748 01a6 C6EEA77A 		fdivs	s15, s13, s15
 749 01aa 27EE277A 		fmuls	s14, s14, s15
 750 01ae F2EE047A 		fconsts	s15, #36
 751 01b2 87EE277A 		fdivs	s14, s14, s15
 319:../Main.c     **** 					+ 66 * (pwm_duty_limit / 100.0f);
 752              		.loc 1 319 0
 753 01b6 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 754 01ba 07EE903A 		fmsr	s15, r3	@ int
 755 01be F8EEE76A 		fsitos	s13, s15
 756 01c2 DFED317A 		flds	s15, .L42+8
 757 01c6 C6EEA76A 		fdivs	s13, s13, s15
 758 01ca DFED357A 		flds	s15, .L42+32
 759 01ce 66EEA77A 		fmuls	s15, s13, s15
 760 01d2 77EE277A 		fadds	s15, s14, s15
 318:../Main.c     **** 			duty_cicle = (value - 90) * 33 * (pwm_duty_limit / 100.0f) / (10.0f)
 761              		.loc 1 318 0
 762 01d6 FDEEE77A 		ftosizs	s15, s15
 763 01da C7ED097A 		fsts	s15, [r7, #36]	@ int
 764              	.L31:
 320:../Main.c     **** 		}
 321:../Main.c     **** 
 322:../Main.c     **** 		return duty_cicle;
 765              		.loc 1 322 0
 766 01de D7ED097A 		flds	s15, [r7, #36]	@ int
 767 01e2 F8EEE77A 		fsitos	s15, s15
 768 01e6 44E0     		b	.L27
 769              	.L28:
 770              	.LBE4:
 771              	.LBB5:
 323:../Main.c     **** 		//MODO GAMBS OFF
 324:../Main.c     **** 
 325:../Main.c     **** 	} else { // DEGRAU
 326:../Main.c     **** 
 327:../Main.c     **** 		int nDegrau = 4;
 772              		.loc 1 327 0
 773 01e8 4FF00403 		mov	r3, #4
 774 01ec BB61     		str	r3, [r7, #24]
 328:../Main.c     **** 		float larguraDegrau = range / nDegrau;
 775              		.loc 1 328 0
 776 01ee 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 777 01f2 BB69     		ldr	r3, [r7, #24]
 778 01f4 92FBF3F3 		sdiv	r3, r2, r3
 779 01f8 06EE903A 		fmsr	s13, r3	@ int
 780 01fc F8EEE67A 		fsitos	s15, s13
 781 0200 C7ED057A 		fsts	s15, [r7, #20]
 329:../Main.c     **** 		float alturaDegrau = PWM_DUTY_LIM_MAX * pwm_duty_limit
 782              		.loc 1 329 0
 783 0204 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 784 0208 4FF06402 		mov	r2, #100
 785 020c 02FB03F3 		mul	r3, r2, r3
 330:../Main.c     **** 				/ (100.0f * (nDegrau - 1));
 786              		.loc 1 330 0
 787 0210 07EE903A 		fmsr	s15, r3	@ int
 788 0214 B8EEE77A 		fsitos	s14, s15
 789 0218 BB69     		ldr	r3, [r7, #24]
 790 021a 03F1FF33 		add	r3, r3, #-1
 791 021e 07EE903A 		fmsr	s15, r3	@ int
 792 0222 F8EEE76A 		fsitos	s13, s15
 793 0226 DFED187A 		flds	s15, .L42+8
 794 022a 66EEA77A 		fmuls	s15, s13, s15
 329:../Main.c     **** 		float alturaDegrau = PWM_DUTY_LIM_MAX * pwm_duty_limit
 795              		.loc 1 329 0
 796 022e C7EE277A 		fdivs	s15, s14, s15
 797 0232 C7ED047A 		fsts	s15, [r7, #16]
 331:../Main.c     **** 
 332:../Main.c     **** 		int sinalDegrau = floor((data / larguraDegrau)) * alturaDegrau;
 798              		.loc 1 332 0
 799 0236 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 800 0238 06EE903A 		fmsr	s13, r3	@ int
 801 023c B8EEE67A 		fsitos	s14, s13
 802 0240 D7ED057A 		flds	s15, [r7, #20]
 803 0244 C7EE277A 		fdivs	s15, s14, s15
 804 0248 17EE900A 		fmrs	r0, s15
 805 024c FFF7FEFF 		bl	floor
 806 0250 0346     		mov	r3, r0
 807 0252 07EE903A 		fmsr	s15, r3	@ int
 808 0256 B8EEE77A 		fsitos	s14, s15
 809 025a D7ED047A 		flds	s15, [r7, #16]
 810 025e 67EE277A 		fmuls	s15, s14, s15
 811 0262 FDEEE77A 		ftosizs	s15, s15
 812 0266 C7ED037A 		fsts	s15, [r7, #12]	@ int
 333:../Main.c     **** 
 334:../Main.c     **** 		return sinalDegrau;
 813              		.loc 1 334 0
 814 026a D7ED037A 		flds	s15, [r7, #12]	@ int
 815 026e F8EEE77A 		fsitos	s15, s15
 816              	.L27:
 817 0272 17EE903A 		fmrs	r3, s15
 818              	.LBE5:
 335:../Main.c     **** 
 336:../Main.c     **** 	}
 337:../Main.c     **** 
 338:../Main.c     **** }
 819              		.loc 1 338 0
 820 0276 1846     		mov	r0, r3	@ float
 821 0278 07F12807 		add	r7, r7, #40
 822 027c BD46     		mov	sp, r7
 823 027e 80BD     		pop	{r7, pc}
 824              	.L43:
 825              		.align	2
 826              	.L42:
 827 0280 00004842 		.word	1112014848
 828 0284 0000B842 		.word	1119354880
 829 0288 0000C842 		.word	1120403456
 830 028c 00007F43 		.word	1132396544
 831 0290 00009642 		.word	1117126656
 832 0294 00008242 		.word	1115815936
 833 0298 0000B442 		.word	1119092736
 834 029c 00000442 		.word	1107558400
 835 02a0 00008442 		.word	1115947008
 836              		.cfi_endproc
 837              	.LFE121:
 839              		.section	.text.Testando_Handler,"ax",%progbits
 840              		.align	2
 841              		.global	Testando_Handler
 842              		.thumb
 843              		.thumb_func
 845              	Testando_Handler:
 846              	.LFB122:
 339:../Main.c     **** 
 340:../Main.c     **** void Testando_Handler(void) {
 847              		.loc 1 340 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852 0000 80B4     		push	{r7}
 853              	.LCFI13:
 854              		.cfi_def_cfa_offset 4
 855              		.cfi_offset 7, -4
 856 0002 00AF     		add	r7, sp, #0
 857              	.LCFI14:
 858              		.cfi_def_cfa_register 7
 341:../Main.c     **** 
 342:../Main.c     **** 	uint32_t status;
 343:../Main.c     **** 
 344:../Main.c     **** 	/*status = RD_REG(ERU001_Handle0.ERURegs->EXICON[ERU001_Handle0.InputChannel],ERU_EXICON_FL_Msk , 
 345:../Main.c     **** 
 346:../Main.c     **** 	 if(status)
 347:../Main.c     **** 	 {
 348:../Main.c     **** 	 IO004_ResetPin(IO004_Handle6);		// ERU event received, turn on LED
 349:../Main.c     **** 	 ERU001_ClearFlag(ERU001_Handle0);	// Clears the Status Flag
 350:../Main.c     **** 	 }*/
 351:../Main.c     **** }
 859              		.loc 1 351 0
 860 0004 BD46     		mov	sp, r7
 861 0006 80BC     		pop	{r7}
 862 0008 7047     		bx	lr
 863              		.cfi_endproc
 864              	.LFE122:
 866 000a 00BF     		.section	.text.ERU0_3_IRQHandler,"ax",%progbits
 867              		.align	2
 868              		.global	ERU0_3_IRQHandler
 869              		.thumb
 870              		.thumb_func
 872              	ERU0_3_IRQHandler:
 873              	.LFB123:
 352:../Main.c     **** 
 353:../Main.c     **** void interrupt_left(void) {
 874              		.loc 1 353 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 1, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879 0000 80B4     		push	{r7}
 880              	.LCFI15:
 881              		.cfi_def_cfa_offset 4
 882              		.cfi_offset 7, -4
 883 0002 00AF     		add	r7, sp, #0
 884              	.LCFI16:
 885              		.cfi_def_cfa_register 7
 354:../Main.c     **** 
 355:../Main.c     **** }
 886              		.loc 1 355 0
 887 0004 BD46     		mov	sp, r7
 888 0006 80BC     		pop	{r7}
 889 0008 7047     		bx	lr
 890              		.cfi_endproc
 891              	.LFE123:
 893 000a 00BF     		.section	.text.ERU1_0_IRQHandler,"ax",%progbits
 894              		.align	2
 895              		.global	ERU1_0_IRQHandler
 896              		.thumb
 897              		.thumb_func
 899              	ERU1_0_IRQHandler:
 900              	.LFB124:
 356:../Main.c     **** 
 357:../Main.c     **** void interrupt_right(void) {
 901              		.loc 1 357 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 1, uses_anonymous_args = 0
 905              		@ link register save eliminated.
 906 0000 80B4     		push	{r7}
 907              	.LCFI17:
 908              		.cfi_def_cfa_offset 4
 909              		.cfi_offset 7, -4
 910 0002 00AF     		add	r7, sp, #0
 911              	.LCFI18:
 912              		.cfi_def_cfa_register 7
 358:../Main.c     **** 
 359:../Main.c     **** }
 913              		.loc 1 359 0
 914 0004 BD46     		mov	sp, r7
 915 0006 80BC     		pop	{r7}
 916 0008 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE124:
 920 000a 00BF     		.section	.text.read_R,"ax",%progbits
 921              		.align	2
 922              		.global	read_R
 923              		.thumb
 924              		.thumb_func
 926              	read_R:
 927              	.LFB125:
 360:../Main.c     **** 
 361:../Main.c     **** /***************************************************/
 362:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 363:../Main.c     **** /***************************************************/
 364:../Main.c     **** 
 365:../Main.c     **** void read_R() {
 928              		.loc 1 365 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 16
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 80B5     		push	{r7, lr}
 933              	.LCFI19:
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 84B0     		sub	sp, sp, #16
 938              	.LCFI20:
 939              		.cfi_def_cfa_offset 24
 940 0004 00AF     		add	r7, sp, #0
 941              	.LCFI21:
 942              		.cfi_def_cfa_register 7
 366:../Main.c     **** 	int i, j;
 367:../Main.c     **** 	IO004_ResetPin(CE);
 943              		.loc 1 367 0
 944 0006 40F20003 		movw	r3, #:lower16:IO004_Handle14
 945 000a C0F20003 		movt	r3, #:upper16:IO004_Handle14
 946 000e 5A68     		ldr	r2, [r3, #4]
 947 0010 40F20003 		movw	r3, #:lower16:IO004_Handle14
 948 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 949 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 950 001a 4FF48031 		mov	r1, #65536
 951 001e 01FA03F3 		lsl	r3, r1, r3
 952 0022 5360     		str	r3, [r2, #4]
 368:../Main.c     **** 	delay(50000);
 953              		.loc 1 368 0
 954 0024 4CF25030 		movw	r0, #50000
 955 0028 FFF7FEFF 		bl	delay
 369:../Main.c     **** 	uint8_t temp = 0;
 956              		.loc 1 369 0
 957 002c 4FF00003 		mov	r3, #0
 958 0030 FB71     		strb	r3, [r7, #7]
 370:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 959              		.loc 1 370 0
 960 0032 4FF00003 		mov	r3, #0
 961 0036 BB60     		str	r3, [r7, #8]
 962 0038 36E0     		b	.L48
 963              	.L52:
 371:../Main.c     **** 		for (i = 7; i > -1; i--) {
 964              		.loc 1 371 0
 965 003a 4FF00703 		mov	r3, #7
 966 003e FB60     		str	r3, [r7, #12]
 967 0040 20E0     		b	.L49
 968              	.L51:
 372:../Main.c     **** 			if (IO004_ReadPin(DATA))
 969              		.loc 1 372 0
 970 0042 40F20003 		movw	r3, #:lower16:IO004_Handle12
 971 0046 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 972 004a 5B68     		ldr	r3, [r3, #4]
 973 004c 5A6A     		ldr	r2, [r3, #36]
 974 004e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 975 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 976 0056 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 977 0058 22FA03F3 		lsr	r3, r2, r3
 978 005c 03F00103 		and	r3, r3, #1
 979 0060 002B     		cmp	r3, #0
 980 0062 09D0     		beq	.L50
 373:../Main.c     **** 				temp |= (1 << i);
 981              		.loc 1 373 0
 982 0064 4FF00102 		mov	r2, #1
 983 0068 FB68     		ldr	r3, [r7, #12]
 984 006a 02FA03F3 		lsl	r3, r2, r3
 985 006e DAB2     		uxtb	r2, r3
 986 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 987 0072 1343     		orrs	r3, r3, r2
 988 0074 DBB2     		uxtb	r3, r3
 989 0076 FB71     		strb	r3, [r7, #7]
 990              	.L50:
 374:../Main.c     **** 			pulse_R();
 991              		.loc 1 374 0
 992 0078 FFF7FEFF 		bl	pulse_R
 371:../Main.c     **** 		for (i = 7; i > -1; i--) {
 993              		.loc 1 371 0
 994 007c FB68     		ldr	r3, [r7, #12]
 995 007e 03F1FF33 		add	r3, r3, #-1
 996 0082 FB60     		str	r3, [r7, #12]
 997              	.L49:
 371:../Main.c     **** 		for (i = 7; i > -1; i--) {
 998              		.loc 1 371 0 is_stmt 0 discriminator 1
 999 0084 FB68     		ldr	r3, [r7, #12]
 1000 0086 002B     		cmp	r3, #0
 1001 0088 DBDA     		bge	.L51
 375:../Main.c     **** 		}
 376:../Main.c     **** 		data_R[j] = temp;
 1002              		.loc 1 376 0 is_stmt 1
 1003 008a 40F20003 		movw	r3, #:lower16:data_R
 1004 008e C0F20003 		movt	r3, #:upper16:data_R
 1005 0092 BA68     		ldr	r2, [r7, #8]
 1006 0094 9B18     		adds	r3, r3, r2
 1007 0096 FA79     		ldrb	r2, [r7, #7]
 1008 0098 1A70     		strb	r2, [r3, #0]
 377:../Main.c     **** 		temp = 0;
 1009              		.loc 1 377 0
 1010 009a 4FF00003 		mov	r3, #0
 1011 009e FB71     		strb	r3, [r7, #7]
 370:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 1012              		.loc 1 370 0
 1013 00a0 BB68     		ldr	r3, [r7, #8]
 1014 00a2 03F10103 		add	r3, r3, #1
 1015 00a6 BB60     		str	r3, [r7, #8]
 1016              	.L48:
 370:../Main.c     **** 	for (j = 0; j < BYTES_TO_RECEIVE; j++) {
 1017              		.loc 1 370 0 is_stmt 0 discriminator 1
 1018 00a8 BB68     		ldr	r3, [r7, #8]
 1019 00aa 042B     		cmp	r3, #4
 1020 00ac C5DD     		ble	.L52
 378:../Main.c     **** 	}
 379:../Main.c     **** 	IO004_SetPin(CE);
 1021              		.loc 1 379 0 is_stmt 1
 1022 00ae 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1023 00b2 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1024 00b6 5A68     		ldr	r2, [r3, #4]
 1025 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1026 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1027 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1028 00c2 4FF00101 		mov	r1, #1
 1029 00c6 01FA03F3 		lsl	r3, r1, r3
 1030 00ca 5360     		str	r3, [r2, #4]
 380:../Main.c     **** 	delay(50000);
 1031              		.loc 1 380 0
 1032 00cc 4CF25030 		movw	r0, #50000
 1033 00d0 FFF7FEFF 		bl	delay
 381:../Main.c     **** }
 1034              		.loc 1 381 0
 1035 00d4 07F11007 		add	r7, r7, #16
 1036 00d8 BD46     		mov	sp, r7
 1037 00da 80BD     		pop	{r7, pc}
 1038              		.cfi_endproc
 1039              	.LFE125:
 1041              		.section	.text.pulse_R,"ax",%progbits
 1042              		.align	2
 1043              		.global	pulse_R
 1044              		.thumb
 1045              		.thumb_func
 1047              	pulse_R:
 1048              	.LFB126:
 382:../Main.c     **** 
 383:../Main.c     **** void pulse_R() {
 1049              		.loc 1 383 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 1, uses_anonymous_args = 0
 1053 0000 80B5     		push	{r7, lr}
 1054              	.LCFI22:
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 7, -8
 1057              		.cfi_offset 14, -4
 1058 0002 00AF     		add	r7, sp, #0
 1059              	.LCFI23:
 1060              		.cfi_def_cfa_register 7
 384:../Main.c     **** 	delay(300);
 1061              		.loc 1 384 0
 1062 0004 4FF49670 		mov	r0, #300
 1063 0008 FFF7FEFF 		bl	delay
 385:../Main.c     **** 	IO004_SetPin(CLK1);
 1064              		.loc 1 385 0
 1065 000c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1066 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1067 0014 5A68     		ldr	r2, [r3, #4]
 1068 0016 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1069 001a C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1070 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1071 0020 4FF00101 		mov	r1, #1
 1072 0024 01FA03F3 		lsl	r3, r1, r3
 1073 0028 5360     		str	r3, [r2, #4]
 386:../Main.c     **** 	delay(300);
 1074              		.loc 1 386 0
 1075 002a 4FF49670 		mov	r0, #300
 1076 002e FFF7FEFF 		bl	delay
 387:../Main.c     **** 	IO004_ResetPin(CLK1);
 1077              		.loc 1 387 0
 1078 0032 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1079 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1080 003a 5A68     		ldr	r2, [r3, #4]
 1081 003c 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1082 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1083 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1084 0046 4FF48031 		mov	r1, #65536
 1085 004a 01FA03F3 		lsl	r3, r1, r3
 1086 004e 5360     		str	r3, [r2, #4]
 388:../Main.c     **** }
 1087              		.loc 1 388 0
 1088 0050 80BD     		pop	{r7, pc}
 1089              		.cfi_endproc
 1090              	.LFE126:
 1092 0052 00BF     		.section	.text.configure_R,"ax",%progbits
 1093              		.align	2
 1094              		.global	configure_R
 1095              		.thumb
 1096              		.thumb_func
 1098              	configure_R:
 1099              	.LFB127:
 389:../Main.c     **** 
 390:../Main.c     **** void configure_R() {
 1100              		.loc 1 390 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 8
 1103              		@ frame_needed = 1, uses_anonymous_args = 0
 1104 0000 80B5     		push	{r7, lr}
 1105              	.LCFI24:
 1106              		.cfi_def_cfa_offset 8
 1107              		.cfi_offset 7, -8
 1108              		.cfi_offset 14, -4
 1109 0002 82B0     		sub	sp, sp, #8
 1110              	.LCFI25:
 1111              		.cfi_def_cfa_offset 16
 1112 0004 00AF     		add	r7, sp, #0
 1113              	.LCFI26:
 1114              		.cfi_def_cfa_register 7
 391:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 392:../Main.c     **** 	configuration[0] = 0xC5; //RF_CH# e OP_MODE 0b11000101
 1115              		.loc 1 392 0
 1116 0006 40F20003 		movw	r3, #:lower16:configuration
 1117 000a C0F20003 		movt	r3, #:upper16:configuration
 1118 000e 4FF0C502 		mov	r2, #197
 1119 0012 1A70     		strb	r2, [r3, #0]
 393:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1120              		.loc 1 393 0
 1121 0014 40F20003 		movw	r3, #:lower16:configuration
 1122 0018 C0F20003 		movt	r3, #:upper16:configuration
 1123 001c 4FF04F02 		mov	r2, #79
 1124 0020 5A70     		strb	r2, [r3, #1]
 394:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 1125              		.loc 1 394 0
 1126 0022 40F20003 		movw	r3, #:lower16:configuration
 1127 0026 C0F20003 		movt	r3, #:upper16:configuration
 1128 002a 4FF0A302 		mov	r2, #163
 1129 002e 9A70     		strb	r2, [r3, #2]
 395:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1130              		.loc 1 395 0
 1131 0030 40F20003 		movw	r3, #:lower16:configuration
 1132 0034 C0F20003 		movt	r3, #:upper16:configuration
 1133 0038 4FF0EE02 		mov	r2, #238
 1134 003c DA70     		strb	r2, [r3, #3]
 396:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1135              		.loc 1 396 0
 1136 003e 40F20003 		movw	r3, #:lower16:configuration
 1137 0042 C0F20003 		movt	r3, #:upper16:configuration
 1138 0046 4FF0DD02 		mov	r2, #221
 1139 004a 1A71     		strb	r2, [r3, #4]
 397:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1140              		.loc 1 397 0
 1141 004c 40F20003 		movw	r3, #:lower16:configuration
 1142 0050 C0F20003 		movt	r3, #:upper16:configuration
 1143 0054 4FF0CC02 		mov	r2, #204
 1144 0058 5A71     		strb	r2, [r3, #5]
 398:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1145              		.loc 1 398 0
 1146 005a 40F20003 		movw	r3, #:lower16:configuration
 1147 005e C0F20003 		movt	r3, #:upper16:configuration
 1148 0062 4FF0BB02 		mov	r2, #187
 1149 0066 9A71     		strb	r2, [r3, #6]
 399:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1150              		.loc 1 399 0
 1151 0068 40F20003 		movw	r3, #:lower16:configuration
 1152 006c C0F20003 		movt	r3, #:upper16:configuration
 1153 0070 4FF0AA02 		mov	r2, #170
 1154 0074 DA71     		strb	r2, [r3, #7]
 400:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1155              		.loc 1 400 0
 1156 0076 40F20003 		movw	r3, #:lower16:configuration
 1157 007a C0F20003 		movt	r3, #:upper16:configuration
 1158 007e 4FF00002 		mov	r2, #0
 1159 0082 1A72     		strb	r2, [r3, #8]
 401:../Main.c     **** 	configuration[9] = 0b00000000;
 1160              		.loc 1 401 0
 1161 0084 40F20003 		movw	r3, #:lower16:configuration
 1162 0088 C0F20003 		movt	r3, #:upper16:configuration
 1163 008c 4FF00002 		mov	r2, #0
 1164 0090 5A72     		strb	r2, [r3, #9]
 402:../Main.c     **** 	configuration[10] = 0b00000000;
 1165              		.loc 1 402 0
 1166 0092 40F20003 		movw	r3, #:lower16:configuration
 1167 0096 C0F20003 		movt	r3, #:upper16:configuration
 1168 009a 4FF00002 		mov	r2, #0
 1169 009e 9A72     		strb	r2, [r3, #10]
 403:../Main.c     **** 	configuration[11] = 0b00000000;
 1170              		.loc 1 403 0
 1171 00a0 40F20003 		movw	r3, #:lower16:configuration
 1172 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1173 00a8 4FF00002 		mov	r2, #0
 1174 00ac DA72     		strb	r2, [r3, #11]
 404:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1175              		.loc 1 404 0
 1176 00ae 40F20003 		movw	r3, #:lower16:configuration
 1177 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1178 00b6 4FF00002 		mov	r2, #0
 1179 00ba 1A73     		strb	r2, [r3, #12]
 405:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1180              		.loc 1 405 0
 1181 00bc 40F20003 		movw	r3, #:lower16:configuration
 1182 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1183 00c4 4FF02802 		mov	r2, #40
 1184 00c8 5A73     		strb	r2, [r3, #13]
 406:../Main.c     **** 	configuration[14] = 0b00000000;
 1185              		.loc 1 406 0
 1186 00ca 40F20003 		movw	r3, #:lower16:configuration
 1187 00ce C0F20003 		movt	r3, #:upper16:configuration
 1188 00d2 4FF00002 		mov	r2, #0
 1189 00d6 9A73     		strb	r2, [r3, #14]
 407:../Main.c     **** 
 408:../Main.c     **** 	IO004_ResetPin(CE);
 1190              		.loc 1 408 0
 1191 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1192 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1193 00e0 5A68     		ldr	r2, [r3, #4]
 1194 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1195 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1196 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1197 00ec 4FF48031 		mov	r1, #65536
 1198 00f0 01FA03F3 		lsl	r3, r1, r3
 1199 00f4 5360     		str	r3, [r2, #4]
 409:../Main.c     **** 	IO004_SetPin(CS);
 1200              		.loc 1 409 0
 1201 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1202 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1203 00fe 5A68     		ldr	r2, [r3, #4]
 1204 0100 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1205 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1206 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1207 010a 4FF00101 		mov	r1, #1
 1208 010e 01FA03F3 		lsl	r3, r1, r3
 1209 0112 5360     		str	r3, [r2, #4]
 410:../Main.c     **** 	int i, j;
 411:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1210              		.loc 1 411 0
 1211 0114 4FF00E03 		mov	r3, #14
 1212 0118 7B60     		str	r3, [r7, #4]
 1213 011a 3FE0     		b	.L55
 1214              	.L60:
 412:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1215              		.loc 1 412 0
 1216 011c 4FF00703 		mov	r3, #7
 1217 0120 3B60     		str	r3, [r7, #0]
 1218 0122 34E0     		b	.L56
 1219              	.L59:
 413:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1220              		.loc 1 413 0
 1221 0124 40F20003 		movw	r3, #:lower16:configuration
 1222 0128 C0F20003 		movt	r3, #:upper16:configuration
 1223 012c 7A68     		ldr	r2, [r7, #4]
 1224 012e 9B18     		adds	r3, r3, r2
 1225 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1226 0132 1A46     		mov	r2, r3
 1227 0134 4FF00101 		mov	r1, #1
 1228 0138 3B68     		ldr	r3, [r7, #0]
 1229 013a 01FA03F3 		lsl	r3, r1, r3
 1230 013e 1340     		ands	r3, r3, r2
 1231 0140 002B     		cmp	r3, #0
 1232 0142 0FDD     		ble	.L57
 414:../Main.c     **** 				IO004_SetPin(DATA);
 1233              		.loc 1 414 0
 1234 0144 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1235 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1236 014c 5A68     		ldr	r2, [r3, #4]
 1237 014e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1238 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1239 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1240 0158 4FF00101 		mov	r1, #1
 1241 015c 01FA03F3 		lsl	r3, r1, r3
 1242 0160 5360     		str	r3, [r2, #4]
 1243 0162 0EE0     		b	.L58
 1244              	.L57:
 415:../Main.c     **** 			else
 416:../Main.c     **** 				IO004_ResetPin(DATA);
 1245              		.loc 1 416 0
 1246 0164 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1247 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1248 016c 5A68     		ldr	r2, [r3, #4]
 1249 016e 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1250 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1251 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1252 0178 4FF48031 		mov	r1, #65536
 1253 017c 01FA03F3 		lsl	r3, r1, r3
 1254 0180 5360     		str	r3, [r2, #4]
 1255              	.L58:
 417:../Main.c     **** 			;
 418:../Main.c     **** 			pulse_R();
 1256              		.loc 1 418 0
 1257 0182 FFF7FEFF 		bl	pulse_R
 412:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1258              		.loc 1 412 0
 1259 0186 3B68     		ldr	r3, [r7, #0]
 1260 0188 03F1FF33 		add	r3, r3, #-1
 1261 018c 3B60     		str	r3, [r7, #0]
 1262              	.L56:
 412:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1263              		.loc 1 412 0 is_stmt 0 discriminator 1
 1264 018e 3B68     		ldr	r3, [r7, #0]
 1265 0190 002B     		cmp	r3, #0
 1266 0192 C7DA     		bge	.L59
 411:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1267              		.loc 1 411 0 is_stmt 1
 1268 0194 7B68     		ldr	r3, [r7, #4]
 1269 0196 03F1FF33 		add	r3, r3, #-1
 1270 019a 7B60     		str	r3, [r7, #4]
 1271              	.L55:
 411:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1272              		.loc 1 411 0 is_stmt 0 discriminator 1
 1273 019c 7B68     		ldr	r3, [r7, #4]
 1274 019e 002B     		cmp	r3, #0
 1275 01a0 BCDA     		bge	.L60
 419:../Main.c     **** 		}
 420:../Main.c     **** 	}
 421:../Main.c     **** 	IO004_DisableOutputDriver(&DATA, IO004_CONT_POLLING);
 1276              		.loc 1 421 0 is_stmt 1
 1277 01a2 40F20000 		movw	r0, #:lower16:IO004_Handle12
 1278 01a6 C0F20000 		movt	r0, #:upper16:IO004_Handle12
 1279 01aa 4FF00301 		mov	r1, #3
 1280 01ae FFF7FEFF 		bl	IO004_DisableOutputDriver
 422:../Main.c     **** 	IO004_ResetPin(CS);
 1281              		.loc 1 422 0
 1282 01b2 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1283 01b6 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1284 01ba 5A68     		ldr	r2, [r3, #4]
 1285 01bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1286 01c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1287 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1288 01c6 4FF48031 		mov	r1, #65536
 1289 01ca 01FA03F3 		lsl	r3, r1, r3
 1290 01ce 5360     		str	r3, [r2, #4]
 423:../Main.c     **** 	IO004_SetPin(CE);
 1291              		.loc 1 423 0
 1292 01d0 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1293 01d4 C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1294 01d8 5A68     		ldr	r2, [r3, #4]
 1295 01da 40F20003 		movw	r3, #:lower16:IO004_Handle14
 1296 01de C0F20003 		movt	r3, #:upper16:IO004_Handle14
 1297 01e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1298 01e4 4FF00101 		mov	r1, #1
 1299 01e8 01FA03F3 		lsl	r3, r1, r3
 1300 01ec 5360     		str	r3, [r2, #4]
 424:../Main.c     **** 	delay(50000);
 1301              		.loc 1 424 0
 1302 01ee 4CF25030 		movw	r0, #50000
 1303 01f2 FFF7FEFF 		bl	delay
 425:../Main.c     **** }
 1304              		.loc 1 425 0
 1305 01f6 07F10807 		add	r7, r7, #8
 1306 01fa BD46     		mov	sp, r7
 1307 01fc 80BD     		pop	{r7, pc}
 1308              		.cfi_endproc
 1309              	.LFE127:
 1311 01fe 00BF     		.section	.text.Software_Timers_Init,"ax",%progbits
 1312              		.align	2
 1313              		.global	Software_Timers_Init
 1314              		.thumb
 1315              		.thumb_func
 1317              	Software_Timers_Init:
 1318              	.LFB128:
 426:../Main.c     **** 
 427:../Main.c     **** /***************************************************/
 428:../Main.c     **** /****************FUNCOES TEMPORAIS******************/
 429:../Main.c     **** /***************************************************/
 430:../Main.c     **** 
 431:../Main.c     **** void Software_Timers_Init() {
 1319              		.loc 1 431 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 8
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              	.LCFI27:
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 82B0     		sub	sp, sp, #8
 1329              	.LCFI28:
 1330              		.cfi_def_cfa_offset 16
 1331 0004 00AF     		add	r7, sp, #0
 1332              	.LCFI29:
 1333              		.cfi_def_cfa_register 7
 432:../Main.c     **** 	handle_t TaskTimerId;
 433:../Main.c     **** 
 434:../Main.c     **** 	TaskTimerId = SYSTM002_CreateTimer(SYSTM002_SYSTICK_INTERVAL,
 1334              		.loc 1 434 0
 1335 0006 4FF06400 		mov	r0, #100
 1336 000a 4FF00101 		mov	r1, #1
 1337 000e 40F20002 		movw	r2, #:lower16:Tick_Handler
 1338 0012 C0F20002 		movt	r2, #:upper16:Tick_Handler
 1339 0016 4FF00003 		mov	r3, #0
 1340 001a FFF7FEFF 		bl	SYSTM002_CreateTimer
 1341 001e 7860     		str	r0, [r7, #4]
 435:../Main.c     **** 			SYSTM002_PERIODIC, &Tick_Handler, NULL);
 436:../Main.c     **** 	if (TaskTimerId != 0) {
 1342              		.loc 1 436 0
 1343 0020 7B68     		ldr	r3, [r7, #4]
 1344 0022 002B     		cmp	r3, #0
 1345 0024 02D0     		beq	.L61
 437:../Main.c     **** //Timer created successfully so start it
 438:../Main.c     **** 		SYSTM002_StartTimer(TaskTimerId);
 1346              		.loc 1 438 0
 1347 0026 7868     		ldr	r0, [r7, #4]
 1348 0028 FFF7FEFF 		bl	SYSTM002_StartTimer
 1349              	.L61:
 439:../Main.c     **** 	}
 440:../Main.c     **** }
 1350              		.loc 1 440 0
 1351 002c 07F10807 		add	r7, r7, #8
 1352 0030 BD46     		mov	sp, r7
 1353 0032 80BD     		pop	{r7, pc}
 1354              		.cfi_endproc
 1355              	.LFE128:
 1357              		.section	.text.delayus,"ax",%progbits
 1358              		.align	2
 1359              		.global	delayus
 1360              		.thumb
 1361              		.thumb_func
 1363              	delayus:
 1364              	.LFB129:
 441:../Main.c     **** 
 442:../Main.c     **** void delayus(uint32_t delay_us) {
 1365              		.loc 1 442 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 16
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 1370 0000 80B4     		push	{r7}
 1371              	.LCFI30:
 1372              		.cfi_def_cfa_offset 4
 1373              		.cfi_offset 7, -4
 1374 0002 85B0     		sub	sp, sp, #20
 1375              	.LCFI31:
 1376              		.cfi_def_cfa_offset 24
 1377 0004 00AF     		add	r7, sp, #0
 1378              	.LCFI32:
 1379              		.cfi_def_cfa_register 7
 1380 0006 7860     		str	r0, [r7, #4]
 443:../Main.c     **** 	uint32_t currenttick = ticks;
 1381              		.loc 1 443 0
 1382 0008 40F20003 		movw	r3, #:lower16:ticks
 1383 000c C0F20003 		movt	r3, #:upper16:ticks
 1384 0010 1B68     		ldr	r3, [r3, #0]
 1385 0012 FB60     		str	r3, [r7, #12]
 444:../Main.c     **** 	while (ticks - currenttick < (delay_us / SYSTM002_SYSTICK_INTERVAL))
 1386              		.loc 1 444 0
 1387 0014 00BF     		nop
 1388              	.L64:
 1389              		.loc 1 444 0 is_stmt 0 discriminator 1
 1390 0016 40F20003 		movw	r3, #:lower16:ticks
 1391 001a C0F20003 		movt	r3, #:upper16:ticks
 1392 001e 1A68     		ldr	r2, [r3, #0]
 1393 0020 FB68     		ldr	r3, [r7, #12]
 1394 0022 D21A     		subs	r2, r2, r3
 1395 0024 7968     		ldr	r1, [r7, #4]
 1396 0026 48F21F53 		movw	r3, #34079
 1397 002a C5F2EB13 		movt	r3, 20971
 1398 002e A3FB0103 		umull	r0, r3, r3, r1
 1399 0032 4FEA5313 		lsr	r3, r3, #5
 1400 0036 9A42     		cmp	r2, r3
 1401 0038 EDD3     		bcc	.L64
 445:../Main.c     **** 		;
 446:../Main.c     **** 	ticks = 0;
 1402              		.loc 1 446 0 is_stmt 1
 1403 003a 40F20003 		movw	r3, #:lower16:ticks
 1404 003e C0F20003 		movt	r3, #:upper16:ticks
 1405 0042 4FF00002 		mov	r2, #0
 1406 0046 1A60     		str	r2, [r3, #0]
 447:../Main.c     **** }
 1407              		.loc 1 447 0
 1408 0048 07F11407 		add	r7, r7, #20
 1409 004c BD46     		mov	sp, r7
 1410 004e 80BC     		pop	{r7}
 1411 0050 7047     		bx	lr
 1412              		.cfi_endproc
 1413              	.LFE129:
 1415 0052 00BF     		.section	.text.delayms,"ax",%progbits
 1416              		.align	2
 1417              		.global	delayms
 1418              		.thumb
 1419              		.thumb_func
 1421              	delayms:
 1422              	.LFB130:
 448:../Main.c     **** 
 449:../Main.c     **** void delayms(uint32_t delay_ms) {
 1423              		.loc 1 449 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 8
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              	.LCFI33:
 1429              		.cfi_def_cfa_offset 8
 1430              		.cfi_offset 7, -8
 1431              		.cfi_offset 14, -4
 1432 0002 82B0     		sub	sp, sp, #8
 1433              	.LCFI34:
 1434              		.cfi_def_cfa_offset 16
 1435 0004 00AF     		add	r7, sp, #0
 1436              	.LCFI35:
 1437              		.cfi_def_cfa_register 7
 1438 0006 7860     		str	r0, [r7, #4]
 450:../Main.c     **** 	delayus(1000 * delay_ms);
 1439              		.loc 1 450 0
 1440 0008 7B68     		ldr	r3, [r7, #4]
 1441 000a 4FF47A72 		mov	r2, #1000
 1442 000e 02FB03F3 		mul	r3, r2, r3
 1443 0012 1846     		mov	r0, r3
 1444 0014 FFF7FEFF 		bl	delayus
 451:../Main.c     **** }
 1445              		.loc 1 451 0
 1446 0018 07F10807 		add	r7, r7, #8
 1447 001c BD46     		mov	sp, r7
 1448 001e 80BD     		pop	{r7, pc}
 1449              		.cfi_endproc
 1450              	.LFE130:
 1452              		.section	.text.Tick_Handler,"ax",%progbits
 1453              		.align	2
 1454              		.global	Tick_Handler
 1455              		.thumb
 1456              		.thumb_func
 1458              	Tick_Handler:
 1459              	.LFB131:
 452:../Main.c     **** 
 453:../Main.c     **** void Tick_Handler(void) {
 1460              		.loc 1 453 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 1, uses_anonymous_args = 0
 1464              		@ link register save eliminated.
 1465 0000 80B4     		push	{r7}
 1466              	.LCFI36:
 1467              		.cfi_def_cfa_offset 4
 1468              		.cfi_offset 7, -4
 1469 0002 00AF     		add	r7, sp, #0
 1470              	.LCFI37:
 1471              		.cfi_def_cfa_register 7
 454:../Main.c     **** 	//ticks++;
 455:../Main.c     **** 	status_ticks++;
 1472              		.loc 1 455 0
 1473 0004 40F20003 		movw	r3, #:lower16:status_ticks
 1474 0008 C0F20003 		movt	r3, #:upper16:status_ticks
 1475 000c 1B68     		ldr	r3, [r3, #0]
 1476 000e 03F10102 		add	r2, r3, #1
 1477 0012 40F20003 		movw	r3, #:lower16:status_ticks
 1478 0016 C0F20003 		movt	r3, #:upper16:status_ticks
 1479 001a 1A60     		str	r2, [r3, #0]
 456:../Main.c     **** 	error_ticks++;
 1480              		.loc 1 456 0
 1481 001c 40F20003 		movw	r3, #:lower16:error_ticks
 1482 0020 C0F20003 		movt	r3, #:upper16:error_ticks
 1483 0024 1B68     		ldr	r3, [r3, #0]
 1484 0026 03F10102 		add	r2, r3, #1
 1485 002a 40F20003 		movw	r3, #:lower16:error_ticks
 1486 002e C0F20003 		movt	r3, #:upper16:error_ticks
 1487 0032 1A60     		str	r2, [r3, #0]
 457:../Main.c     **** //	if(error_ticks == 1)
 458:../Main.c     **** //		trata_erro();
 459:../Main.c     **** //	if (error_ticks >= 100) {
 460:../Main.c     **** //		error_ticks = 0;
 461:../Main.c     **** //		error();
 462:../Main.c     **** //	}
 463:../Main.c     **** }
 1488              		.loc 1 463 0
 1489 0034 BD46     		mov	sp, r7
 1490 0036 80BC     		pop	{r7}
 1491 0038 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE131:
 1495 003a 00BF     		.section	.text.trata_erro,"ax",%progbits
 1496              		.align	2
 1497              		.global	trata_erro
 1498              		.thumb
 1499              		.thumb_func
 1501              	trata_erro:
 1502              	.LFB132:
 464:../Main.c     **** 
 465:../Main.c     **** void trata_erro(void) {
 1503              		.loc 1 465 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 1, uses_anonymous_args = 0
 1507              		@ link register save eliminated.
 1508 0000 80B4     		push	{r7}
 1509              	.LCFI38:
 1510              		.cfi_def_cfa_offset 4
 1511              		.cfi_offset 7, -4
 1512 0002 00AF     		add	r7, sp, #0
 1513              	.LCFI39:
 1514              		.cfi_def_cfa_register 7
 466:../Main.c     **** 
 467:../Main.c     **** 	if (error_left) {
 1515              		.loc 1 467 0
 1516 0004 40F20003 		movw	r3, #:lower16:error_left
 1517 0008 C0F20003 		movt	r3, #:upper16:error_left
 1518 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1519 000e 002B     		cmp	r3, #0
 1520 0010 16D0     		beq	.L68
 468:../Main.c     **** 		error_left = 0;
 1521              		.loc 1 468 0
 1522 0012 40F20003 		movw	r3, #:lower16:error_left
 1523 0016 C0F20003 		movt	r3, #:upper16:error_left
 1524 001a 4FF00002 		mov	r2, #0
 1525 001e 1A70     		strb	r2, [r3, #0]
 469:../Main.c     **** 		IO004_SetPin(Enable_LEFT);
 1526              		.loc 1 469 0
 1527 0020 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1528 0024 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1529 0028 5A68     		ldr	r2, [r3, #4]
 1530 002a 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1531 002e C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1532 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1533 0034 4FF00101 		mov	r1, #1
 1534 0038 01FA03F3 		lsl	r3, r1, r3
 1535 003c 5360     		str	r3, [r2, #4]
 1536 003e 15E0     		b	.L67
 1537              	.L68:
 470:../Main.c     **** 	} else {
 471:../Main.c     **** 		error_right = 0;
 1538              		.loc 1 471 0
 1539 0040 40F20003 		movw	r3, #:lower16:error_right
 1540 0044 C0F20003 		movt	r3, #:upper16:error_right
 1541 0048 4FF00002 		mov	r2, #0
 1542 004c 1A70     		strb	r2, [r3, #0]
 472:../Main.c     **** 		IO004_SetPin(Enable_RIGHT);
 1543              		.loc 1 472 0
 1544 004e 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1545 0052 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1546 0056 5A68     		ldr	r2, [r3, #4]
 1547 0058 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1548 005c C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1549 0060 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1550 0062 4FF00101 		mov	r1, #1
 1551 0066 01FA03F3 		lsl	r3, r1, r3
 1552 006a 5360     		str	r3, [r2, #4]
 1553              	.L67:
 473:../Main.c     **** 	}
 474:../Main.c     **** }
 1554              		.loc 1 474 0
 1555 006c BD46     		mov	sp, r7
 1556 006e 80BC     		pop	{r7}
 1557 0070 7047     		bx	lr
 1558              		.cfi_endproc
 1559              	.LFE132:
 1561 0072 00BF     		.section	.text.delay,"ax",%progbits
 1562              		.align	2
 1563              		.global	delay
 1564              		.thumb
 1565              		.thumb_func
 1567              	delay:
 1568              	.LFB133:
 475:../Main.c     **** 
 476:../Main.c     **** void delay(long unsigned int i) {
 1569              		.loc 1 476 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 8
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 1574 0000 80B4     		push	{r7}
 1575              	.LCFI40:
 1576              		.cfi_def_cfa_offset 4
 1577              		.cfi_offset 7, -4
 1578 0002 83B0     		sub	sp, sp, #12
 1579              	.LCFI41:
 1580              		.cfi_def_cfa_offset 16
 1581 0004 00AF     		add	r7, sp, #0
 1582              	.LCFI42:
 1583              		.cfi_def_cfa_register 7
 1584 0006 7860     		str	r0, [r7, #4]
 477:../Main.c     **** 	while (i--) {
 1585              		.loc 1 477 0
 1586 0008 00E0     		b	.L71
 1587              	.L72:
 1588              	.LBB6:
 1589              	.LBB7:
 1590              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1591              		.loc 2 327 0
 1592              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1593 000a 00BF     		nop
 1594              	@ 0 "" 2
 1595              		.thumb
 1596              	.L71:
 1597              	.LBE7:
 1598              	.LBE6:
 1599              		.loc 1 477 0 discriminator 1
 1600 000c 7B68     		ldr	r3, [r7, #4]
 1601 000e 002B     		cmp	r3, #0
 1602 0010 0CBF     		ite	eq
 1603 0012 0023     		moveq	r3, #0
 1604 0014 0123     		movne	r3, #1
 1605 0016 DBB2     		uxtb	r3, r3
 1606 0018 7A68     		ldr	r2, [r7, #4]
 1607 001a 02F1FF32 		add	r2, r2, #-1
 1608 001e 7A60     		str	r2, [r7, #4]
 1609 0020 002B     		cmp	r3, #0
 1610 0022 F2D1     		bne	.L72
 478:../Main.c     **** 
 479:../Main.c     **** 		__NOP();
 480:../Main.c     **** 	}
 481:../Main.c     **** }
 1611              		.loc 1 481 0
 1612 0024 07F10C07 		add	r7, r7, #12
 1613 0028 BD46     		mov	sp, r7
 1614 002a 80BC     		pop	{r7}
 1615 002c 7047     		bx	lr
 1616              		.cfi_endproc
 1617              	.LFE133:
 1619 002e 00BF     		.section	.text.floor,"ax",%progbits
 1620              		.align	2
 1621              		.global	floor
 1622              		.thumb
 1623              		.thumb_func
 1625              	floor:
 1626              	.LFB134:
 482:../Main.c     **** 
 483:../Main.c     **** int floor(float value) {
 1627              		.loc 1 483 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 16
 1630              		@ frame_needed = 1, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
 1632 0000 80B4     		push	{r7}
 1633              	.LCFI43:
 1634              		.cfi_def_cfa_offset 4
 1635              		.cfi_offset 7, -4
 1636 0002 85B0     		sub	sp, sp, #20
 1637              	.LCFI44:
 1638              		.cfi_def_cfa_offset 24
 1639 0004 00AF     		add	r7, sp, #0
 1640              	.LCFI45:
 1641              		.cfi_def_cfa_register 7
 1642 0006 7860     		str	r0, [r7, #4]	@ float
 484:../Main.c     **** 	int a = value;
 1643              		.loc 1 484 0
 1644 0008 D7ED017A 		flds	s15, [r7, #4]
 1645 000c FDEEE77A 		ftosizs	s15, s15
 1646 0010 C7ED037A 		fsts	s15, [r7, #12]	@ int
 485:../Main.c     **** 	return a;
 1647              		.loc 1 485 0
 1648 0014 FB68     		ldr	r3, [r7, #12]
 486:../Main.c     **** }
 1649              		.loc 1 486 0
 1650 0016 1846     		mov	r0, r3
 1651 0018 07F11407 		add	r7, r7, #20
 1652 001c BD46     		mov	sp, r7
 1653 001e 80BC     		pop	{r7}
 1654 0020 7047     		bx	lr
 1655              		.cfi_endproc
 1656              	.LFE134:
 1658 0022 00BF     		.section	.text.error,"ax",%progbits
 1659              		.align	2
 1660              		.global	error
 1661              		.thumb
 1662              		.thumb_func
 1664              	error:
 1665              	.LFB135:
 487:../Main.c     **** 
 488:../Main.c     **** void error(void) {
 1666              		.loc 1 488 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 1671 0000 80B4     		push	{r7}
 1672              	.LCFI46:
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 7, -4
 1675 0002 00AF     		add	r7, sp, #0
 1676              	.LCFI47:
 1677              		.cfi_def_cfa_register 7
 489:../Main.c     **** 
 490:../Main.c     **** 	if (!IO004_ReadPin(ERR_Input_LEFT)) {
 1678              		.loc 1 490 0
 1679 0004 40F20003 		movw	r3, #:lower16:IO004_Handle15
 1680 0008 C0F20003 		movt	r3, #:upper16:IO004_Handle15
 1681 000c 5B68     		ldr	r3, [r3, #4]
 1682 000e 5A6A     		ldr	r2, [r3, #36]
 1683 0010 40F20003 		movw	r3, #:lower16:IO004_Handle15
 1684 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle15
 1685 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1686 001a 22FA03F3 		lsr	r3, r2, r3
 1687 001e 03F00103 		and	r3, r3, #1
 1688 0022 002B     		cmp	r3, #0
 1689 0024 15D1     		bne	.L76
 491:../Main.c     **** 		IO004_ResetPin(Enable_LEFT);
 1690              		.loc 1 491 0
 1691 0026 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1692 002a C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1693 002e 5A68     		ldr	r2, [r3, #4]
 1694 0030 40F20003 		movw	r3, #:lower16:IO004_Handle7
 1695 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 1696 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1697 003a 4FF48031 		mov	r1, #65536
 1698 003e 01FA03F3 		lsl	r3, r1, r3
 1699 0042 5360     		str	r3, [r2, #4]
 492:../Main.c     **** 		error_left = 1;
 1700              		.loc 1 492 0
 1701 0044 40F20003 		movw	r3, #:lower16:error_left
 1702 0048 C0F20003 		movt	r3, #:upper16:error_left
 1703 004c 4FF00102 		mov	r2, #1
 1704 0050 1A70     		strb	r2, [r3, #0]
 1705              	.L76:
 493:../Main.c     **** 	}
 494:../Main.c     **** 
 495:../Main.c     **** 	if (!IO004_ReadPin(ERR_Input_RIGHT)) {
 1706              		.loc 1 495 0
 1707 0052 40F20003 		movw	r3, #:lower16:IO004_Handle3
 1708 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle3
 1709 005a 5B68     		ldr	r3, [r3, #4]
 1710 005c 5A6A     		ldr	r2, [r3, #36]
 1711 005e 40F20003 		movw	r3, #:lower16:IO004_Handle3
 1712 0062 C0F20003 		movt	r3, #:upper16:IO004_Handle3
 1713 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1714 0068 22FA03F3 		lsr	r3, r2, r3
 1715 006c 03F00103 		and	r3, r3, #1
 1716 0070 002B     		cmp	r3, #0
 1717 0072 15D1     		bne	.L75
 496:../Main.c     **** 		IO004_ResetPin(Enable_RIGHT);
 1718              		.loc 1 496 0
 1719 0074 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1720 0078 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1721 007c 5A68     		ldr	r2, [r3, #4]
 1722 007e 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1723 0082 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1724 0086 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1725 0088 4FF48031 		mov	r1, #65536
 1726 008c 01FA03F3 		lsl	r3, r1, r3
 1727 0090 5360     		str	r3, [r2, #4]
 497:../Main.c     **** 		error_right = 1;
 1728              		.loc 1 497 0
 1729 0092 40F20003 		movw	r3, #:lower16:error_right
 1730 0096 C0F20003 		movt	r3, #:upper16:error_right
 1731 009a 4FF00102 		mov	r2, #1
 1732 009e 1A70     		strb	r2, [r3, #0]
 1733              	.L75:
 498:../Main.c     **** 	}
 499:../Main.c     **** 
 500:../Main.c     **** }
 1734              		.loc 1 500 0
 1735 00a0 BD46     		mov	sp, r7
 1736 00a2 80BC     		pop	{r7}
 1737 00a4 7047     		bx	lr
 1738              		.cfi_endproc
 1739              	.LFE135:
 1741 00a6 00BF     		.section	.text.MyFunction,"ax",%progbits
 1742              		.align	2
 1743              		.global	MyFunction
 1744              		.thumb
 1745              		.thumb_func
 1747              	MyFunction:
 1748              	.LFB136:
 501:../Main.c     **** 
 502:../Main.c     **** void MyFunction() {
 1749              		.loc 1 502 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 1754 0000 80B4     		push	{r7}
 1755              	.LCFI48:
 1756              		.cfi_def_cfa_offset 4
 1757              		.cfi_offset 7, -4
 1758 0002 00AF     		add	r7, sp, #0
 1759              	.LCFI49:
 1760              		.cfi_def_cfa_register 7
 503:../Main.c     **** 	if (status_ticks > 10000) {
 1761              		.loc 1 503 0
 1762 0004 40F20003 		movw	r3, #:lower16:status_ticks
 1763 0008 C0F20003 		movt	r3, #:upper16:status_ticks
 1764 000c 1A68     		ldr	r2, [r3, #0]
 1765 000e 42F21073 		movw	r3, #10000
 1766 0012 9A42     		cmp	r2, r3
 1767 0014 15D9     		bls	.L78
 504:../Main.c     **** 		/*Service WDT for 5 times and the 6th time reset should occur.*/
 505:../Main.c     **** 		WDT001_Service(MagicWord);
 1768              		.loc 1 505 0
 1769 0016 4FF40043 		mov	r3, #32768
 1770 001a C5F20003 		movt	r3, 20480
 1771 001e 40F20002 		movw	r2, #:lower16:MagicWord
 1772 0022 C0F20002 		movt	r2, #:upper16:MagicWord
 1773 0026 1268     		ldr	r2, [r2, #0]
 1774 0028 9A60     		str	r2, [r3, #8]
 506:../Main.c     **** 		count++;
 1775              		.loc 1 506 0
 1776 002a 40F20003 		movw	r3, #:lower16:count
 1777 002e C0F20003 		movt	r3, #:upper16:count
 1778 0032 1B68     		ldr	r3, [r3, #0]
 1779 0034 03F10102 		add	r2, r3, #1
 1780 0038 40F20003 		movw	r3, #:lower16:count
 1781 003c C0F20003 		movt	r3, #:upper16:count
 1782 0040 1A60     		str	r2, [r3, #0]
 1783              	.L78:
 507:../Main.c     **** 	}
 508:../Main.c     **** }
 1784              		.loc 1 508 0
 1785 0042 BD46     		mov	sp, r7
 1786 0044 80BC     		pop	{r7}
 1787 0046 7047     		bx	lr
 1788              		.cfi_endproc
 1789              	.LFE136:
 1791              		.text
 1792              	.Letext0:
 1793              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1794              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1795              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1796              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1797              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1798              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1799              		.file 9 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\ControleI
 1800              		.file 10 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
 1801              		.file 11 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1802              		.file 12 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
 1803              		.file 13 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Controle
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000f configuration
                            *COM*:00000005 data_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:26     .bss:00000000 ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:23     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:32     .bss:00000004 status_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:38     .bss:00000008 sudden_run_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:44     .bss:0000000c error_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:49     .bss:00000010 value
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:55     .bss:00000014 last_duty_right
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:61     .bss:00000018 last_duty_left
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:66     .bss:0000001c error_left
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:71     .bss:0000001d error_right
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:78     .data:00000000 MagicWord
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:75     .data:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:85     .bss:00000020 count
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:88     .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:93     .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1317   .text.Software_Timers_Init:00000000 Software_Timers_Init
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:268    .text.WakeUp:00000000 WakeUp
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1098   .text.configure_R:00000000 configure_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:295    .text.start_driver_signals:00000000 start_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:926    .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:350    .text.update_driver_signals:00000000 update_driver_signals
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:263    .text.WakeUp:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:290    .text.start_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:345    .text.update_driver_signals:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:587    .text.calculateDutyCicle:00000000 calculateDutyCicle
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:582    .text.calculateDutyCicle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1625   .text.floor:00000000 floor
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:827    .text.calculateDutyCicle:00000280 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:840    .text.Testando_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:845    .text.Testando_Handler:00000000 Testando_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:867    .text.ERU0_3_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:872    .text.ERU0_3_IRQHandler:00000000 ERU0_3_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:894    .text.ERU1_0_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:899    .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:921    .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1567   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1047   .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1042   .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1093   .text.configure_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1312   .text.Software_Timers_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1458   .text.Tick_Handler:00000000 Tick_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1358   .text.delayus:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1363   .text.delayus:00000000 delayus
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1416   .text.delayms:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1421   .text.delayms:00000000 delayms
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1453   .text.Tick_Handler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1496   .text.trata_erro:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1501   .text.trata_erro:00000000 trata_erro
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1562   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1620   .text.floor:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1659   .text.error:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1664   .text.error:00000000 error
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1742   .text.MyFunction:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccwY6Sw4.s:1747   .text.MyFunction:00000000 MyFunction
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e3bdd798bb23f70d94471cb7157fa38f
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.30c263516f6a2d50f9535345c116cddb
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.CNT001.h.53.54b2229008e37b1970e63d1faf193d82
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ERU001_Conf.h.69.cbf5f28f16df40bf2ec07157d45ebab0
                           .group:00000000 wm4.ERU002_Conf.h.49.2f1d75b23a08c83bd296d7c11c7e280b
                           .group:00000000 wm4.NVIC002_Conf.h.63.13943eb720fa25e7207fa08ab410f2a7
                           .group:00000000 wm4.WDT001.h.50.255ce6a2a58bdd6da7d43650f1d62aa2

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle7
RESET001_GetResetInfo
IO004_Handle13
IO004_Handle1
PWMSP001_Handle0
PWMSP001_Start
PWMSP001_SetPwmFreq
PWMSP001_SetDutyCycle
PWMSP001_Handle1
IO004_Handle6
IO004_Handle0
IO004_Handle14
IO004_Handle12
IO004_Handle11
IO004_Handle10
IO004_DisableOutputDriver
SYSTM002_CreateTimer
SYSTM002_StartTimer
IO004_Handle15
IO004_Handle3
