   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ADCGroup001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADCGROUP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	ADCGROUP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	ADCGROUP001_Init:
  26              	.LFB117:
  27              		.file 1 "../Dave/Generated/src/ADCGROUP001/ADCGroup001.c"
   1:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  DAVE App Name : ADCGROUP001       App Version: 1.0.26               
   3:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   7:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   8:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*CODE_BLOCK_BEGIN[ADCGROUP001.c]*/
   9:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  10:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  11:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  14:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  17:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  may be used to endorse or promote products derived from this software without**
  24:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  26:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  38:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  42:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ********************************************************************************
  43:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  44:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  45:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  46:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  47:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  49:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** AUTHOR   : DAVE App Developer                                              **
  50:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  51:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  53:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MODIFICATION DATE : 29 Jan, 2014                                           **
  54:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  55:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  56:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  57:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  58:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Author(s) Identity                                    **
  59:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ********************************************************************************
  60:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  61:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** Initials     Name                                                          **
  62:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** CM           DAVE App Developer                                            **
  63:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** SSAM         Sridhar Sampath                                               **
  64:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** ---------------------------------------------------------------------------**
  65:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  66:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  67:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
  68:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @file ADCGROUP001.c
  69:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  70:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This file contains ADCGROUP001 App API definitions
  71:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  72:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * Change History:
  73:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * Date       version       Details
  74:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 01-Jan-2013   1.0.6    Initial code added for XMC1000
  75:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 29-Jan-2013   1.0.8    Merging with XMC1000 done
  76:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 09-Apr-2013   1.0.12   Channel selection style is removed and made EMXCSS=1
  77:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        always
  78:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 24-Apr-2013   1.0.14   Ported to XMC4500 step AB
  79:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 11-Jun-2013   1.0.16   1.Variable name in manifest is corrected.
  80:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        2.In the Header comment section device name changed to
  81:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                         XMC1000.
  82:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        3.copy right year changed to 2013
  83:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 11-Sep-2013   1.0.20   1. Analog converter control(ANONC) Code sequence
  84:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                           corrected.
  85:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        2. Added support for the following devices under
  86:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        XMC1200 and XMC1300 Series - XMC1201, XMC1202, XMC1301
  87:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 29-Jan-2014   1.0.24   Error codes are added in various functions, that can 
  88:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        be logged with DBG002 App.
  89:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
  90:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  91:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  92:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ** INCLUDE FILES                                                             **
  93:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ******************************************************************************/
  94:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #include <DAVE3.h>
  95:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  96:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  97:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*****************************************************************************
  98:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
  99:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *****************************************************************************/
 100:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*These definitions are included here to avoid compilation errors,
 101:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 102:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  as empty*/
 103:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #ifndef _DBG002_H_
 104:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 105:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_RegisterCallBack(A,B,C)
 106:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_I(e)
 107:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IG(e,g)
 108:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IH(e,h)
 109:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IP(e,p)
 110:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGH(e,g,h)
 111:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGP(e,g,p)
 112:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IHP(e,h,p)
 113:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGHP(e,g,h,p)
 114:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_N(e)
 115:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NG(e,g)
 116:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NH(e,h)
 117:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NP(e,p)
 118:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGH(e,g,h)
 119:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGP(e,g,p)
 120:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NHP(e,h,p)
 121:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGHP(e,g,h,p)
 122:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ID(e)
 123:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IS(e)
 124:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ISG(e,g)
 125:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 126:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 127:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 128:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 129:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 130:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 131:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 132:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 133:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 134:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_MESSAGEID_LITERAL
 135:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 136:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #endif/* End of defintions of dummy Debug Log macros*/
 137:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 138:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
 139:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @cond INTERNAL_DOCS
 140:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 141:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 142:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 143:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Type Definitions                              **
 144:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 145:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define APP_GID DBG002_GID_ADCGROUP001
 146:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 147:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 148:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Private Function Declarations:
 149:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 150:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
 151:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This function initializes the app.
 152:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 153:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
 154:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 155:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @return  NOne <BR>
 156:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 157:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Reentrancy:  Yes</b><BR>
 158:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 159:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 160:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 161:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr );
 162:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 163:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 164:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Constant Definitions                           **
 165:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 166:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 167:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 168:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Variable Definitions                           **
 169:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 170:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 171:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 172:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Constant Definitions                          **
 173:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 174:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 175:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 176:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Function like macro definitions                            **
 177:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 178:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 179:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 180:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Function Definitions                          **
 181:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 182:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 183:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 184:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Public Function Definitions                           **
 185:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 186:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 187:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 188:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 189:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /** This function initializes the app */
 190:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_Init(void)
 191:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  28              		.loc 1 191 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 192:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*Initialize the global app */
 193:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGLOB001_Init();
  40              		.loc 1 193 0
  41 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 194:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGROUP001_lInit(&ADCGROUP001_Handle0);   //master
  42              		.loc 1 194 0
  43 0008 40F20000 		movw	r0, #:lower16:ADCGROUP001_Handle0
  44 000c C0F20000 		movt	r0, #:upper16:ADCGROUP001_Handle0
  45 0010 FFF7FEFF 		bl	ADCGROUP001_lInit
 195:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 196:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(ADCGLOB001_StartUpCalibrationInit() == (uint32_t)DAVEApp_SUCCESS)
  46              		.loc 1 196 0
  47 0014 FFF7FEFF 		bl	ADCGLOB001_StartUpCalibrationInit
  48 0018 0346     		mov	r3, r0
  49 001a 002B     		cmp	r3, #0
  50 001c 05D1     		bne	.L1
 197:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {    
 198:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      ADCGROUP001_GetStartupCalStatus(&ADCGROUP001_Handle0); 
  51              		.loc 1 198 0
  52 001e 40F20000 		movw	r0, #:lower16:ADCGROUP001_Handle0
  53 0022 C0F20000 		movt	r0, #:upper16:ADCGROUP001_Handle0
  54 0026 FFF7FEFF 		bl	ADCGROUP001_GetStartupCalStatus
  55              	.L1:
 199:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 200:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 201:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
  56              		.loc 1 201 0
  57 002a 80BD     		pop	{r7, pc}
  58              		.cfi_endproc
  59              	.LFE117:
  61              		.section	.text.ADCGROUP001_lInit,"ax",%progbits
  62              		.align	2
  63              		.global	ADCGROUP001_lInit
  64              		.thumb
  65              		.thumb_func
  67              	ADCGROUP001_lInit:
  68              	.LFB118:
 202:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 203:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*
 204:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * This Function initializes the adcgroup App. Local function is used to
 205:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * initialize all the instances of the app.
 206:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 207:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr )
 208:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  69              		.loc 1 208 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 24
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI2:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 87B0     		sub	sp, sp, #28
  79              	.LCFI3:
  80              		.cfi_def_cfa_offset 32
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI4:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
 209:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
  85              		.loc 1 209 0
  86 0008 4FF00103 		mov	r3, #1
  87 000c 7B61     		str	r3, [r7, #20]
 210:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 211:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 212:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */
 213:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 214:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 215:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
  88              		.loc 1 215 0
  89 000e 7B68     		ldr	r3, [r7, #4]
  90 0010 1B69     		ldr	r3, [r3, #16]
  91 0012 3B61     		str	r3, [r7, #16]
 216:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
  92              		.loc 1 216 0
  93 0014 7B68     		ldr	r3, [r7, #4]
  94 0016 5B69     		ldr	r3, [r3, #20]
  95 0018 FB60     		str	r3, [r7, #12]
 217:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 218:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_UNINITIALIZED))
  96              		.loc 1 218 0
  97 001a 7B68     		ldr	r3, [r7, #4]
  98 001c DB68     		ldr	r3, [r3, #12]
  99 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 100 0020 002B     		cmp	r3, #0
 101 0022 40F0B780 		bne	.L3
 219:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 220:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 221:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Post calibration enable\disable */
 222:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Msk,
 102              		.loc 1 222 0
 103 0026 7B68     		ldr	r3, [r7, #4]
 104 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 105 002a 1A46     		mov	r2, r3
 106 002c 7B68     		ldr	r3, [r7, #4]
 107 002e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 108 0030 03F11003 		add	r3, r3, #16
 109 0034 02FA03F3 		lsl	r3, r2, r3
 110 0038 03F48032 		and	r2, r3, #65536
 111 003c 3B69     		ldr	r3, [r7, #16]
 112 003e D3F88030 		ldr	r3, [r3, #128]
 113 0042 23F48033 		bic	r3, r3, #65536
 114 0046 1A43     		orrs	r2, r2, r3
 115 0048 3B69     		ldr	r3, [r7, #16]
 116 004a C3F88020 		str	r2, [r3, #128]
 223:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + HandlePtr->kGroupNo), HandlePtr->kPostCalibration);
 224:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 225:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Arbitration mode */
 226:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ARBM_Msk, VADC_G_ARBCFG_ARBM_Pos,
 117              		.loc 1 226 0
 118 004e 7B68     		ldr	r3, [r7, #4]
 119 0050 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 120 0052 4FEAC313 		lsl	r3, r3, #7
 121 0056 DAB2     		uxtb	r2, r3
 122 0058 FB68     		ldr	r3, [r7, #12]
 123 005a D3F88030 		ldr	r3, [r3, #128]
 124 005e 23F08003 		bic	r3, r3, #128
 125 0062 1A43     		orrs	r2, r2, r3
 126 0064 FB68     		ldr	r3, [r7, #12]
 127 0066 C3F88020 		str	r2, [r3, #128]
 227:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                          (uint32_t)HandlePtr->kArbitrationMode);
 228:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 229:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 0 */
 230:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk,
 128              		.loc 1 230 0
 129 006a 7B68     		ldr	r3, [r7, #4]
 130 006c 9B88     		ldrh	r3, [r3, #4]
 131 006e 4FEA0352 		lsl	r2, r3, #20
 132 0072 4FEA1252 		lsr	r2, r2, #20
 133 0076 FB68     		ldr	r3, [r7, #12]
 134 0078 D3F8B830 		ldr	r3, [r3, #184]
 135 007c 23F47F63 		bic	r3, r3, #4080
 136 0080 23F00F03 		bic	r3, r3, #15
 137 0084 1A43     		orrs	r2, r2, r3
 138 0086 FB68     		ldr	r3, [r7, #12]
 139 0088 C3F8B820 		str	r2, [r3, #184]
 231:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)HandlePtr->kGrpBoundary0);
 232:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 233:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 1 */
 234:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk,
 140              		.loc 1 234 0
 141 008c 7B68     		ldr	r3, [r7, #4]
 142 008e DB88     		ldrh	r3, [r3, #6]
 143 0090 4FEA0342 		lsl	r2, r3, #16
 144 0094 4FF00003 		mov	r3, #0
 145 0098 C0F6FF73 		movt	r3, 4095
 146 009c 1340     		ands	r3, r3, r2
 147 009e FA68     		ldr	r2, [r7, #12]
 148 00a0 D2F8B820 		ldr	r2, [r2, #184]
 149 00a4 22F07F62 		bic	r2, r2, #267386880
 150 00a8 22F47022 		bic	r2, r2, #983040
 151 00ac 1A43     		orrs	r2, r2, r3
 152 00ae FB68     		ldr	r3, [r7, #12]
 153 00b0 C3F8B820 		str	r2, [r3, #184]
 235:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)HandlePtr->kGrpBoundary1);
 236:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 237:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 238:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Enable write control for EMUX configuration.
 239:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set the EMUX coding scheme, EMUX mode, EMUX start select.
 240:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 241:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMUXCTR
 154              		.loc 1 241 0
 155 00b4 FB68     		ldr	r3, [r7, #12]
 156 00b6 D3F8F021 		ldr	r2, [r3, #496]
 242:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXCodeScheme \
 157              		.loc 1 242 0
 158 00ba 7B68     		ldr	r3, [r7, #4]
 159 00bc 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 243:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD
 160              		.loc 1 243 0
 161 00be 4FEA0373 		lsl	r3, r3, #28
 162 00c2 03F08051 		and	r1, r3, #268435456
 244:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXStartSelect  \
 163              		.loc 1 244 0
 164 00c6 7B68     		ldr	r3, [r7, #4]
 165 00c8 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 245:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMUXSET_Pos) & VADC_G_EMUXCTR_EMUXS
 166              		.loc 1 245 0
 167 00ca 03F00703 		and	r3, r3, #7
 243:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD
 168              		.loc 1 243 0
 169 00ce 1943     		orrs	r1, r1, r3
 246:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXMode \
 170              		.loc 1 246 0
 171 00d0 7B68     		ldr	r3, [r7, #4]
 172 00d2 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 247:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUX
 173              		.loc 1 247 0
 174 00d4 4FEA8363 		lsl	r3, r3, #26
 175 00d8 03F04063 		and	r3, r3, #201326592
 241:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMUXCTR
 176              		.loc 1 241 0
 177 00dc 0B43     		orrs	r3, r3, r1
 178 00de 1343     		orrs	r3, r3, r2
 179 00e0 43F00042 		orr	r2, r3, #-2147483648
 180 00e4 FB68     		ldr	r3, [r7, #12]
 181 00e6 C3F8F021 		str	r2, [r3, #496]
 248:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 249:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,
 250:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set EMUX sample time control for class 0.
 251:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 252:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 182              		.loc 1 252 0
 183 00ea FB68     		ldr	r3, [r7, #12]
 184 00ec D3F8A020 		ldr	r2, [r3, #160]
 185 00f0 7B68     		ldr	r3, [r7, #4]
 186 00f2 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 253:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 187              		.loc 1 253 0
 188 00f4 4FEA0323 		lsl	r3, r3, #8
 189 00f8 03F4E061 		and	r1, r3, #1792
 254:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass0 \
 190              		.loc 1 254 0
 191 00fc 7B68     		ldr	r3, [r7, #4]
 192 00fe 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 255:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 193              		.loc 1 255 0
 194 0100 4FEA0363 		lsl	r3, r3, #24
 195 0104 03F0E063 		and	r3, r3, #117440512
 253:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 196              		.loc 1 253 0
 197 0108 1943     		orrs	r1, r1, r3
 256:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass0 \
 198              		.loc 1 256 0
 199 010a 7B68     		ldr	r3, [r7, #4]
 200 010c 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 257:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 201              		.loc 1 257 0
 202 010e 03F01F03 		and	r3, r3, #31
 255:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 203              		.loc 1 255 0
 204 0112 1943     		orrs	r1, r1, r3
 258:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass0 \
 205              		.loc 1 258 0
 206 0114 7B68     		ldr	r3, [r7, #4]
 207 0116 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 259:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE_Msk
 208              		.loc 1 259 0
 209 0118 4FEA0343 		lsl	r3, r3, #16
 210 011c 03F4F813 		and	r3, r3, #2031616
 252:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 211              		.loc 1 252 0
 212 0120 0B43     		orrs	r3, r3, r1
 213 0122 1A43     		orrs	r2, r2, r3
 214 0124 FB68     		ldr	r3, [r7, #12]
 215 0126 C3F8A020 		str	r2, [r3, #160]
 260:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 261:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 262:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,
 263:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * EMUX sample time control for class 1.
 264:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 265:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 216              		.loc 1 265 0
 217 012a FB68     		ldr	r3, [r7, #12]
 218 012c D3F8A420 		ldr	r2, [r3, #164]
 219 0130 7B68     		ldr	r3, [r7, #4]
 220 0132 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 266:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 221              		.loc 1 266 0
 222 0134 4FEA0323 		lsl	r3, r3, #8
 223 0138 03F4E061 		and	r1, r3, #1792
 267:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass1 \
 224              		.loc 1 267 0
 225 013c 7B68     		ldr	r3, [r7, #4]
 226 013e 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 268:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 227              		.loc 1 268 0
 228 0140 4FEA0363 		lsl	r3, r3, #24
 229 0144 03F0E063 		and	r3, r3, #117440512
 266:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 230              		.loc 1 266 0
 231 0148 1943     		orrs	r1, r1, r3
 269:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass1 \
 232              		.loc 1 269 0
 233 014a 7B68     		ldr	r3, [r7, #4]
 234 014c DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 270:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 235              		.loc 1 270 0
 236 014e 03F01F03 		and	r3, r3, #31
 268:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 237              		.loc 1 268 0
 238 0152 1943     		orrs	r1, r1, r3
 271:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass1 \
 239              		.loc 1 271 0
 240 0154 7B68     		ldr	r3, [r7, #4]
 241 0156 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 272:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                     << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE
 242              		.loc 1 272 0
 243 0158 4FEA0343 		lsl	r3, r3, #16
 244 015c 03F4F813 		and	r3, r3, #2031616
 265:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 245              		.loc 1 265 0
 246 0160 0B43     		orrs	r3, r3, r1
 247 0162 1A43     		orrs	r2, r2, r3
 248 0164 FB68     		ldr	r3, [r7, #12]
 249 0166 C3F8A420 		str	r2, [r3, #164]
 273:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*  Converter is permanently on */
 274:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ANONC_Msk,
 250              		.loc 1 274 0
 251 016a 7B68     		ldr	r3, [r7, #4]
 252 016c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 253 016e 03F00302 		and	r2, r3, #3
 254 0172 FB68     		ldr	r3, [r7, #12]
 255 0174 D3F88030 		ldr	r3, [r3, #128]
 256 0178 23F00303 		bic	r3, r3, #3
 257 017c 1A43     		orrs	r2, r2, r3
 258 017e FB68     		ldr	r3, [r7, #12]
 259 0180 C3F88020 		str	r2, [r3, #128]
 275:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****            VADC_G_ARBCFG_ANONC_Pos, (uint32_t)HandlePtr->kAnalogConverterCtrl);
 276:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 277:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the App State to Initialized */
 278:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     HandlePtr->DynamicHandlePtr->State = ADCGROUP001_INITIALIZED;
 260              		.loc 1 278 0
 261 0184 7B68     		ldr	r3, [r7, #4]
 262 0186 DB68     		ldr	r3, [r3, #12]
 263 0188 4FF00102 		mov	r2, #1
 264 018c 1A70     		strb	r2, [r3, #0]
 279:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 280:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     Status &= (uint32_t)DAVEApp_SUCCESS;
 265              		.loc 1 280 0
 266 018e 4FF00003 		mov	r3, #0
 267 0192 7B61     		str	r3, [r7, #20]
 268              	.L3:
 281:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 282:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 283:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 284:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 285:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 286:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 287:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 269              		.loc 1 287 0
 270 0194 07F11C07 		add	r7, r7, #28
 271 0198 BD46     		mov	sp, r7
 272 019a 80BC     		pop	{r7}
 273 019c 7047     		bx	lr
 274              		.cfi_endproc
 275              	.LFE118:
 277 019e 00BF     		.section	.text.ADCGROUP001_Deinit,"ax",%progbits
 278              		.align	2
 279              		.global	ADCGROUP001_Deinit
 280              		.thumb
 281              		.thumb_func
 283              	ADCGROUP001_Deinit:
 284              	.LFB119:
 288:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 289:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function resets the adcgroup001 app */
 290:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_Deinit(const ADCGROUP001_HandleType *HandlePtr )
 291:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 285              		.loc 1 291 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 24
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0000 80B4     		push	{r7}
 291              	.LCFI5:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 7, -4
 294 0002 87B0     		sub	sp, sp, #28
 295              	.LCFI6:
 296              		.cfi_def_cfa_offset 32
 297 0004 00AF     		add	r7, sp, #0
 298              	.LCFI7:
 299              		.cfi_def_cfa_register 7
 300 0006 7860     		str	r0, [r7, #4]
 292:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 301              		.loc 1 292 0
 302 0008 4FF00103 		mov	r3, #1
 303 000c 7B61     		str	r3, [r7, #20]
 293:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 294:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 295:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 296:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */
 297:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 298:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 299:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 304              		.loc 1 299 0
 305 000e 7B68     		ldr	r3, [r7, #4]
 306 0010 1B69     		ldr	r3, [r3, #16]
 307 0012 3B61     		str	r3, [r7, #16]
 300:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 308              		.loc 1 300 0
 309 0014 7B68     		ldr	r3, [r7, #4]
 310 0016 5B69     		ldr	r3, [r3, #20]
 311 0018 FB60     		str	r3, [r7, #12]
 301:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 302:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 312              		.loc 1 302 0
 313 001a 7B68     		ldr	r3, [r7, #4]
 314 001c DB68     		ldr	r3, [r3, #12]
 315 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 316 0020 012B     		cmp	r3, #1
 317 0022 28D1     		bne	.L6
 303:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 304:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Post calibration enable\disable */
 305:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     CLR_BIT(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Pos);
 318              		.loc 1 305 0
 319 0024 3B69     		ldr	r3, [r7, #16]
 320 0026 D3F88030 		ldr	r3, [r3, #128]
 321 002a 23F48032 		bic	r2, r3, #65536
 322 002e 3B69     		ldr	r3, [r7, #16]
 323 0030 C3F88020 		str	r2, [r3, #128]
 306:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 307:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Arbitration mode */
 308:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ARBCFG = (uint32_t)0x00;
 324              		.loc 1 308 0
 325 0034 FB68     		ldr	r3, [r7, #12]
 326 0036 4FF00002 		mov	r2, #0
 327 003a C3F88020 		str	r2, [r3, #128]
 309:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 310:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Group specific boundary */
 311:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->BOUND = (uint32_t)0x00;
 328              		.loc 1 311 0
 329 003e FB68     		ldr	r3, [r7, #12]
 330 0040 4FF00002 		mov	r2, #0
 331 0044 C3F8B820 		str	r2, [r3, #184]
 312:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 313:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* ReSet the EMUX control register */
 314:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR = (uint32_t)(0X80000000);
 332              		.loc 1 314 0
 333 0048 FB68     		ldr	r3, [r7, #12]
 334 004a 4FF00042 		mov	r2, #-2147483648
 335 004e C3F8F021 		str	r2, [r3, #496]
 315:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 316:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 0 input register*/
 317:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] = (uint32_t)0x00;
 336              		.loc 1 317 0
 337 0052 FB68     		ldr	r3, [r7, #12]
 338 0054 4FF00002 		mov	r2, #0
 339 0058 C3F8A020 		str	r2, [r3, #160]
 318:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 1 input register*/
 319:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] = (uint32_t)0x00;
 340              		.loc 1 319 0
 341 005c FB68     		ldr	r3, [r7, #12]
 342 005e 4FF00002 		mov	r2, #0
 343 0062 C3F8A420 		str	r2, [r3, #164]
 320:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 321:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the App State to Initialized */
 322:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     HandlePtr->DynamicHandlePtr->State = ADCGROUP001_UNINITIALIZED;
 344              		.loc 1 322 0
 345 0066 7B68     		ldr	r3, [r7, #4]
 346 0068 DB68     		ldr	r3, [r3, #12]
 347 006a 4FF00002 		mov	r2, #0
 348 006e 1A70     		strb	r2, [r3, #0]
 323:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 324:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 349              		.loc 1 324 0
 350 0070 4FF00003 		mov	r3, #0
 351 0074 7B61     		str	r3, [r7, #20]
 352              	.L6:
 325:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 326:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 327:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 328:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 329:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 330:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 331:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 353              		.loc 1 331 0
 354 0076 7B69     		ldr	r3, [r7, #20]
 332:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 355              		.loc 1 332 0
 356 0078 1846     		mov	r0, r3
 357 007a 07F11C07 		add	r7, r7, #28
 358 007e BD46     		mov	sp, r7
 359 0080 80BC     		pop	{r7}
 360 0082 7047     		bx	lr
 361              		.cfi_endproc
 362              	.LFE119:
 364              		.section	.text.ADCGROUP001_GetStartupCalStatus,"ax",%progbits
 365              		.align	2
 366              		.global	ADCGROUP001_GetStartupCalStatus
 367              		.thumb
 368              		.thumb_func
 370              	ADCGROUP001_GetStartupCalStatus:
 371              	.LFB120:
 333:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 334:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function checks the status of calibration */
 335:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_GetStartupCalStatus(const ADCGROUP001_HandleType *HandlePtr)
 336:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 372              		.loc 1 336 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 16
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377 0000 80B4     		push	{r7}
 378              	.LCFI8:
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 7, -4
 381 0002 85B0     		sub	sp, sp, #20
 382              	.LCFI9:
 383              		.cfi_def_cfa_offset 24
 384 0004 00AF     		add	r7, sp, #0
 385              	.LCFI10:
 386              		.cfi_def_cfa_register 7
 387 0006 7860     		str	r0, [r7, #4]
 337:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     uint32_t Status=1;
 388              		.loc 1 337 0
 389 0008 4FF00103 		mov	r3, #1
 390 000c FB60     		str	r3, [r7, #12]
 391              	.L9:
 338:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 339:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     do
 340:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 341:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         Status = RD_REG(HandlePtr->VADCGroupPtr->ARBCFG,VADC_G_ARBCFG_CAL_Msk,VADC_G_ARBCFG_CAL_Pos
 392              		.loc 1 341 0 discriminator 1
 393 000e 7B68     		ldr	r3, [r7, #4]
 394 0010 5B69     		ldr	r3, [r3, #20]
 395 0012 D3F88030 		ldr	r3, [r3, #128]
 396 0016 03F08053 		and	r3, r3, #268435456
 397 001a 4FEA1373 		lsr	r3, r3, #28
 398 001e FB60     		str	r3, [r7, #12]
 342:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 343:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     while(Status==1);
 399              		.loc 1 343 0 discriminator 1
 400 0020 FB68     		ldr	r3, [r7, #12]
 401 0022 012B     		cmp	r3, #1
 402 0024 F3D0     		beq	.L9
 344:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 345:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     return Status;
 403              		.loc 1 345 0
 404 0026 FB68     		ldr	r3, [r7, #12]
 346:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 405              		.loc 1 346 0
 406 0028 1846     		mov	r0, r3
 407 002a 07F11407 		add	r7, r7, #20
 408 002e BD46     		mov	sp, r7
 409 0030 80BC     		pop	{r7}
 410 0032 7047     		bx	lr
 411              		.cfi_endproc
 412              	.LFE120:
 414              		.section	.text.ADCGROUP001_SetGroupBound0,"ax",%progbits
 415              		.align	2
 416              		.global	ADCGROUP001_SetGroupBound0
 417              		.thumb
 418              		.thumb_func
 420              	ADCGROUP001_SetGroupBound0:
 421              	.LFB121:
 347:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 348:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 349:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 0 */
 350:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound0(const ADCGROUP001_HandleType *HandlePtr,
 351:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 352:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 422              		.loc 1 352 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 16
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 427 0000 80B4     		push	{r7}
 428              	.LCFI11:
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 7, -4
 431 0002 85B0     		sub	sp, sp, #20
 432              	.LCFI12:
 433              		.cfi_def_cfa_offset 24
 434 0004 00AF     		add	r7, sp, #0
 435              	.LCFI13:
 436              		.cfi_def_cfa_register 7
 437 0006 7860     		str	r0, [r7, #4]
 438 0008 0B46     		mov	r3, r1
 439 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 353:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 440              		.loc 1 353 0
 441 000c 4FF00103 		mov	r3, #1
 442 0010 FB60     		str	r3, [r7, #12]
 354:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 355:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 356:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 443              		.loc 1 356 0
 444 0012 7B68     		ldr	r3, [r7, #4]
 445 0014 5B69     		ldr	r3, [r3, #20]
 446 0016 BB60     		str	r3, [r7, #8]
 357:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 358:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 447              		.loc 1 358 0
 448 0018 7B68     		ldr	r3, [r7, #4]
 449 001a DB68     		ldr	r3, [r3, #12]
 450 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 451 001e 012B     		cmp	r3, #1
 452 0020 1AD1     		bne	.L12
 359:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 360:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 453              		.loc 1 360 0
 454 0022 7B88     		ldrh	r3, [r7, #2]
 455 0024 B3F5805F 		cmp	r3, #4096
 456 0028 13D8     		bhi	.L13
 361:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 362:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 363:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk,
 457              		.loc 1 363 0
 458 002a 7B88     		ldrh	r3, [r7, #2]
 459 002c 4FEA0352 		lsl	r2, r3, #20
 460 0030 4FEA1252 		lsr	r2, r2, #20
 461 0034 BB68     		ldr	r3, [r7, #8]
 462 0036 D3F8B830 		ldr	r3, [r3, #184]
 463 003a 23F47F63 		bic	r3, r3, #4080
 464 003e 23F00F03 		bic	r3, r3, #15
 465 0042 1A43     		orrs	r2, r2, r3
 466 0044 BB68     		ldr	r3, [r7, #8]
 467 0046 C3F8B820 		str	r2, [r3, #184]
 364:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)BoundaryValue);
 365:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 468              		.loc 1 365 0
 469 004a 4FF00003 		mov	r3, #0
 470 004e FB60     		str	r3, [r7, #12]
 471 0050 02E0     		b	.L12
 472              	.L13:
 366:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 367:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 368:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 369:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 473              		.loc 1 369 0
 474 0052 4FF00203 		mov	r3, #2
 475 0056 FB60     		str	r3, [r7, #12]
 476              	.L12:
 370:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 371:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 372:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 373:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 374:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 375:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 376:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 377:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 378:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 477              		.loc 1 378 0
 478 0058 FB68     		ldr	r3, [r7, #12]
 379:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 479              		.loc 1 379 0
 480 005a 1846     		mov	r0, r3
 481 005c 07F11407 		add	r7, r7, #20
 482 0060 BD46     		mov	sp, r7
 483 0062 80BC     		pop	{r7}
 484 0064 7047     		bx	lr
 485              		.cfi_endproc
 486              	.LFE121:
 488 0066 00BF     		.section	.text.ADCGROUP001_SetGroupBound1,"ax",%progbits
 489              		.align	2
 490              		.global	ADCGROUP001_SetGroupBound1
 491              		.thumb
 492              		.thumb_func
 494              	ADCGROUP001_SetGroupBound1:
 495              	.LFB122:
 380:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 381:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 382:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 1 */
 383:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound1(const ADCGROUP001_HandleType *HandlePtr,
 384:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 385:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 496              		.loc 1 385 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              	.LCFI14:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 0002 85B0     		sub	sp, sp, #20
 506              	.LCFI15:
 507              		.cfi_def_cfa_offset 24
 508 0004 00AF     		add	r7, sp, #0
 509              	.LCFI16:
 510              		.cfi_def_cfa_register 7
 511 0006 7860     		str	r0, [r7, #4]
 512 0008 0B46     		mov	r3, r1
 513 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 386:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 514              		.loc 1 386 0
 515 000c 4FF00103 		mov	r3, #1
 516 0010 FB60     		str	r3, [r7, #12]
 387:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 388:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 389:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 517              		.loc 1 389 0
 518 0012 7B68     		ldr	r3, [r7, #4]
 519 0014 5B69     		ldr	r3, [r3, #20]
 520 0016 BB60     		str	r3, [r7, #8]
 390:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 391:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 521              		.loc 1 391 0
 522 0018 7B68     		ldr	r3, [r7, #4]
 523 001a DB68     		ldr	r3, [r3, #12]
 524 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 525 001e 012B     		cmp	r3, #1
 526 0020 1DD1     		bne	.L16
 392:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 393:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 527              		.loc 1 393 0
 528 0022 7B88     		ldrh	r3, [r7, #2]
 529 0024 B3F5805F 		cmp	r3, #4096
 530 0028 16D8     		bhi	.L17
 394:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 395:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 396:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk,
 531              		.loc 1 396 0
 532 002a 7B88     		ldrh	r3, [r7, #2]
 533 002c 4FEA0342 		lsl	r2, r3, #16
 534 0030 4FF00003 		mov	r3, #0
 535 0034 C0F6FF73 		movt	r3, 4095
 536 0038 1340     		ands	r3, r3, r2
 537 003a BA68     		ldr	r2, [r7, #8]
 538 003c D2F8B820 		ldr	r2, [r2, #184]
 539 0040 22F07F62 		bic	r2, r2, #267386880
 540 0044 22F47022 		bic	r2, r2, #983040
 541 0048 1A43     		orrs	r2, r2, r3
 542 004a BB68     		ldr	r3, [r7, #8]
 543 004c C3F8B820 		str	r2, [r3, #184]
 397:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)BoundaryValue);
 398:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 544              		.loc 1 398 0
 545 0050 4FF00003 		mov	r3, #0
 546 0054 FB60     		str	r3, [r7, #12]
 547 0056 02E0     		b	.L16
 548              	.L17:
 399:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 400:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 401:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 402:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 549              		.loc 1 402 0
 550 0058 4FF00203 		mov	r3, #2
 551 005c FB60     		str	r3, [r7, #12]
 552              	.L16:
 403:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 404:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 405:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 406:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 407:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 408:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 409:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 410:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 411:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 553              		.loc 1 411 0
 554 005e FB68     		ldr	r3, [r7, #12]
 412:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 555              		.loc 1 412 0
 556 0060 1846     		mov	r0, r3
 557 0062 07F11407 		add	r7, r7, #20
 558 0066 BD46     		mov	sp, r7
 559 0068 80BC     		pop	{r7}
 560 006a 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE122:
 564              		.section	.text.ADCGROUP001_ActiveGroupServiceRequestNode,"ax",%progbits
 565              		.align	2
 566              		.global	ADCGROUP001_ActiveGroupServiceRequestNode
 567              		.thumb
 568              		.thumb_func
 570              	ADCGROUP001_ActiveGroupServiceRequestNode:
 571              	.LFB123:
 413:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 414:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 415:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates group specific service request node */
 416:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveGroupServiceRequestNode(
 417:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 418:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 572              		.loc 1 418 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 16
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI17:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 85B0     		sub	sp, sp, #20
 582              	.LCFI18:
 583              		.cfi_def_cfa_offset 24
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI19:
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 588 0008 0B46     		mov	r3, r1
 589 000a FB70     		strb	r3, [r7, #3]
 419:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 590              		.loc 1 419 0
 591 000c 4FF00103 		mov	r3, #1
 592 0010 FB60     		str	r3, [r7, #12]
 420:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 421:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 422:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 593              		.loc 1 422 0
 594 0012 7B68     		ldr	r3, [r7, #4]
 595 0014 5B69     		ldr	r3, [r3, #20]
 596 0016 BB60     		str	r3, [r7, #8]
 423:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 424:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 597              		.loc 1 424 0
 598 0018 7B68     		ldr	r3, [r7, #4]
 599 001a DB68     		ldr	r3, [r3, #12]
 600 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 601 001e 012B     		cmp	r3, #1
 602 0020 23D1     		bne	.L20
 425:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 426:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 603              		.loc 1 426 0
 604 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 605 0024 032B     		cmp	r3, #3
 606 0026 1DD8     		bhi	.L21
 427:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 428:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activate the Group specific service request node */
 429:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 607              		.loc 1 429 0
 608 0028 BB68     		ldr	r3, [r7, #8]
 609 002a D3F8C821 		ldr	r2, [r3, #456]
 610 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 611 0030 4FF00101 		mov	r1, #1
 612 0034 01FA03F3 		lsl	r3, r1, r3
 613 0038 6FEA0303 		mvn	r3, r3
 614 003c 1A40     		ands	r2, r2, r3
 615 003e BB68     		ldr	r3, [r7, #8]
 616 0040 C3F8C821 		str	r2, [r3, #456]
 430:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 617              		.loc 1 430 0
 618 0044 BB68     		ldr	r3, [r7, #8]
 619 0046 D3F8C821 		ldr	r2, [r3, #456]
 620 004a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 621 004c 4FF00101 		mov	r1, #1
 622 0050 01FA03F3 		lsl	r3, r1, r3
 623 0054 1A43     		orrs	r2, r2, r3
 624 0056 BB68     		ldr	r3, [r7, #8]
 625 0058 C3F8C821 		str	r2, [r3, #456]
 431:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 626              		.loc 1 431 0
 627 005c 4FF00003 		mov	r3, #0
 628 0060 FB60     		str	r3, [r7, #12]
 629 0062 02E0     		b	.L20
 630              	.L21:
 432:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 433:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 434:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 435:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 631              		.loc 1 435 0
 632 0064 4FF00203 		mov	r3, #2
 633 0068 FB60     		str	r3, [r7, #12]
 634              	.L20:
 436:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 437:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 438:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 439:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 440:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 441:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 442:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 443:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 444:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 635              		.loc 1 444 0
 636 006a FB68     		ldr	r3, [r7, #12]
 445:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 637              		.loc 1 445 0
 638 006c 1846     		mov	r0, r3
 639 006e 07F11407 		add	r7, r7, #20
 640 0072 BD46     		mov	sp, r7
 641 0074 80BC     		pop	{r7}
 642 0076 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE123:
 646              		.section	.text.ADCGROUP001_DeActiveGroupServiceRequestNode,"ax",%progbits
 647              		.align	2
 648              		.global	ADCGROUP001_DeActiveGroupServiceRequestNode
 649              		.thumb
 650              		.thumb_func
 652              	ADCGROUP001_DeActiveGroupServiceRequestNode:
 653              	.LFB124:
 446:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 447:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function deactivates group specific service request node */
 448:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveGroupServiceRequestNode(
 449:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 450:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 654              		.loc 1 450 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 16
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 80B4     		push	{r7}
 660              	.LCFI20:
 661              		.cfi_def_cfa_offset 4
 662              		.cfi_offset 7, -4
 663 0002 85B0     		sub	sp, sp, #20
 664              	.LCFI21:
 665              		.cfi_def_cfa_offset 24
 666 0004 00AF     		add	r7, sp, #0
 667              	.LCFI22:
 668              		.cfi_def_cfa_register 7
 669 0006 7860     		str	r0, [r7, #4]
 670 0008 0B46     		mov	r3, r1
 671 000a FB70     		strb	r3, [r7, #3]
 451:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 672              		.loc 1 451 0
 673 000c 4FF00103 		mov	r3, #1
 674 0010 FB60     		str	r3, [r7, #12]
 452:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 453:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 454:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 675              		.loc 1 454 0
 676 0012 7B68     		ldr	r3, [r7, #4]
 677 0014 5B69     		ldr	r3, [r3, #20]
 678 0016 BB60     		str	r3, [r7, #8]
 455:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 456:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 679              		.loc 1 456 0
 680 0018 7B68     		ldr	r3, [r7, #4]
 681 001a DB68     		ldr	r3, [r3, #12]
 682 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 683 001e 012B     		cmp	r3, #1
 684 0020 17D1     		bne	.L24
 457:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 458:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 685              		.loc 1 458 0
 686 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 687 0024 032B     		cmp	r3, #3
 688 0026 11D8     		bhi	.L25
 459:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 460:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the Group specific service request node */
 461:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 689              		.loc 1 461 0
 690 0028 BB68     		ldr	r3, [r7, #8]
 691 002a D3F8C821 		ldr	r2, [r3, #456]
 692 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 693 0030 4FF00101 		mov	r1, #1
 694 0034 01FA03F3 		lsl	r3, r1, r3
 695 0038 6FEA0303 		mvn	r3, r3
 696 003c 1A40     		ands	r2, r2, r3
 697 003e BB68     		ldr	r3, [r7, #8]
 698 0040 C3F8C821 		str	r2, [r3, #456]
 462:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 699              		.loc 1 462 0
 700 0044 4FF00003 		mov	r3, #0
 701 0048 FB60     		str	r3, [r7, #12]
 702 004a 02E0     		b	.L24
 703              	.L25:
 463:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 464:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 465:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 466:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 704              		.loc 1 466 0
 705 004c 4FF00203 		mov	r3, #2
 706 0050 FB60     		str	r3, [r7, #12]
 707              	.L24:
 467:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 468:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 469:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 470:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 471:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 472:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 473:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 474:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 475:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 708              		.loc 1 475 0
 709 0052 FB68     		ldr	r3, [r7, #12]
 476:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 710              		.loc 1 476 0
 711 0054 1846     		mov	r0, r3
 712 0056 07F11407 		add	r7, r7, #20
 713 005a BD46     		mov	sp, r7
 714 005c 80BC     		pop	{r7}
 715 005e 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE124:
 719              		.section	.text.ADCGROUP001_ActiveSharedServiceRequestNode,"ax",%progbits
 720              		.align	2
 721              		.global	ADCGROUP001_ActiveSharedServiceRequestNode
 722              		.thumb
 723              		.thumb_func
 725              	ADCGROUP001_ActiveSharedServiceRequestNode:
 726              	.LFB125:
 477:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 478:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates the shared service request node. */
 479:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveSharedServiceRequestNode(
 480:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 481:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 727              		.loc 1 481 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 16
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 0000 80B4     		push	{r7}
 733              	.LCFI23:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 7, -4
 736 0002 85B0     		sub	sp, sp, #20
 737              	.LCFI24:
 738              		.cfi_def_cfa_offset 24
 739 0004 00AF     		add	r7, sp, #0
 740              	.LCFI25:
 741              		.cfi_def_cfa_register 7
 742 0006 7860     		str	r0, [r7, #4]
 743 0008 0B46     		mov	r3, r1
 744 000a FB70     		strb	r3, [r7, #3]
 482:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 745              		.loc 1 482 0
 746 000c 4FF00103 		mov	r3, #1
 747 0010 FB60     		str	r3, [r7, #12]
 483:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 484:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 485:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 748              		.loc 1 485 0
 749 0012 7B68     		ldr	r3, [r7, #4]
 750 0014 5B69     		ldr	r3, [r3, #20]
 751 0016 BB60     		str	r3, [r7, #8]
 486:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 487:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 752              		.loc 1 487 0
 753 0018 7B68     		ldr	r3, [r7, #4]
 754 001a DB68     		ldr	r3, [r3, #12]
 755 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 756 001e 012B     		cmp	r3, #1
 757 0020 27D1     		bne	.L28
 488:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 489:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 758              		.loc 1 489 0
 759 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 760 0024 032B     		cmp	r3, #3
 761 0026 21D8     		bhi	.L29
 490:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 491:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activates the shared service request node. */
 492:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 762              		.loc 1 492 0
 763 0028 BB68     		ldr	r3, [r7, #8]
 764 002a D3F8C821 		ldr	r2, [r3, #456]
 765 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 766 0030 03F10803 		add	r3, r3, #8
 767 0034 4FF00101 		mov	r1, #1
 768 0038 01FA03F3 		lsl	r3, r1, r3
 769 003c 6FEA0303 		mvn	r3, r3
 770 0040 1A40     		ands	r2, r2, r3
 771 0042 BB68     		ldr	r3, [r7, #8]
 772 0044 C3F8C821 		str	r2, [r3, #456]
 493:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 773              		.loc 1 493 0
 774 0048 BB68     		ldr	r3, [r7, #8]
 775 004a D3F8C821 		ldr	r2, [r3, #456]
 776 004e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 777 0050 03F10803 		add	r3, r3, #8
 778 0054 4FF00101 		mov	r1, #1
 779 0058 01FA03F3 		lsl	r3, r1, r3
 780 005c 1A43     		orrs	r2, r2, r3
 781 005e BB68     		ldr	r3, [r7, #8]
 782 0060 C3F8C821 		str	r2, [r3, #456]
 494:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 495:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 783              		.loc 1 495 0
 784 0064 4FF00003 		mov	r3, #0
 785 0068 FB60     		str	r3, [r7, #12]
 786 006a 02E0     		b	.L28
 787              	.L29:
 496:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 497:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 498:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 499:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 788              		.loc 1 499 0
 789 006c 4FF00203 		mov	r3, #2
 790 0070 FB60     		str	r3, [r7, #12]
 791              	.L28:
 500:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 501:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 502:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 503:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 504:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 505:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 506:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 507:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 508:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 792              		.loc 1 508 0
 793 0072 FB68     		ldr	r3, [r7, #12]
 509:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 794              		.loc 1 509 0
 795 0074 1846     		mov	r0, r3
 796 0076 07F11407 		add	r7, r7, #20
 797 007a BD46     		mov	sp, r7
 798 007c 80BC     		pop	{r7}
 799 007e 7047     		bx	lr
 800              		.cfi_endproc
 801              	.LFE125:
 803              		.section	.text.ADCGROUP001_DeActiveSharedServiceRequestNode,"ax",%progbits
 804              		.align	2
 805              		.global	ADCGROUP001_DeActiveSharedServiceRequestNode
 806              		.thumb
 807              		.thumb_func
 809              	ADCGROUP001_DeActiveSharedServiceRequestNode:
 810              	.LFB126:
 510:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 511:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This deactivates the shared service request node.*/
 512:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveSharedServiceRequestNode(
 513:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 514:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 811              		.loc 1 514 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 16
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816 0000 80B4     		push	{r7}
 817              	.LCFI26:
 818              		.cfi_def_cfa_offset 4
 819              		.cfi_offset 7, -4
 820 0002 85B0     		sub	sp, sp, #20
 821              	.LCFI27:
 822              		.cfi_def_cfa_offset 24
 823 0004 00AF     		add	r7, sp, #0
 824              	.LCFI28:
 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
 827 0008 0B46     		mov	r3, r1
 828 000a FB70     		strb	r3, [r7, #3]
 515:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 829              		.loc 1 515 0
 830 000c 4FF00103 		mov	r3, #1
 831 0010 FB60     		str	r3, [r7, #12]
 516:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 517:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 518:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 832              		.loc 1 518 0
 833 0012 7B68     		ldr	r3, [r7, #4]
 834 0014 5B69     		ldr	r3, [r3, #20]
 835 0016 BB60     		str	r3, [r7, #8]
 519:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 520:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 836              		.loc 1 520 0
 837 0018 7B68     		ldr	r3, [r7, #4]
 838 001a DB68     		ldr	r3, [r3, #12]
 839 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 840 001e 012B     		cmp	r3, #1
 841 0020 19D1     		bne	.L32
 521:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 522:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 842              		.loc 1 522 0
 843 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 844 0024 032B     		cmp	r3, #3
 845 0026 13D8     		bhi	.L33
 523:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 524:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the shared service request node.*/
 525:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 846              		.loc 1 525 0
 847 0028 BB68     		ldr	r3, [r7, #8]
 848 002a D3F8C821 		ldr	r2, [r3, #456]
 849 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 850 0030 03F10803 		add	r3, r3, #8
 851 0034 4FF00101 		mov	r1, #1
 852 0038 01FA03F3 		lsl	r3, r1, r3
 853 003c 6FEA0303 		mvn	r3, r3
 854 0040 1A40     		ands	r2, r2, r3
 855 0042 BB68     		ldr	r3, [r7, #8]
 856 0044 C3F8C821 		str	r2, [r3, #456]
 526:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 527:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 857              		.loc 1 527 0
 858 0048 4FF00003 		mov	r3, #0
 859 004c FB60     		str	r3, [r7, #12]
 860 004e 02E0     		b	.L32
 861              	.L33:
 528:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 529:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 530:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 531:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 862              		.loc 1 531 0
 863 0050 4FF00203 		mov	r3, #2
 864 0054 FB60     		str	r3, [r7, #12]
 865              	.L32:
 532:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 533:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 534:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 535:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 536:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 537:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 538:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 539:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 540:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 866              		.loc 1 540 0
 867 0056 FB68     		ldr	r3, [r7, #12]
 541:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 868              		.loc 1 541 0
 869 0058 1846     		mov	r0, r3
 870 005a 07F11407 		add	r7, r7, #20
 871 005e BD46     		mov	sp, r7
 872 0060 80BC     		pop	{r7}
 873 0062 7047     		bx	lr
 874              		.cfi_endproc
 875              	.LFE126:
 877              		.section	.text.ADCGROUP001_EMUXStartSelection,"ax",%progbits
 878              		.align	2
 879              		.global	ADCGROUP001_EMUXStartSelection
 880              		.thumb
 881              		.thumb_func
 883              	ADCGROUP001_EMUXStartSelection:
 884              	.LFB127:
 542:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 543:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 544:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the value of EMUX start selection. */
 545:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_EMUXStartSelection(
 546:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t StartSelectionValue)
 547:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 885              		.loc 1 547 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 16
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 890 0000 80B4     		push	{r7}
 891              	.LCFI29:
 892              		.cfi_def_cfa_offset 4
 893              		.cfi_offset 7, -4
 894 0002 85B0     		sub	sp, sp, #20
 895              	.LCFI30:
 896              		.cfi_def_cfa_offset 24
 897 0004 00AF     		add	r7, sp, #0
 898              	.LCFI31:
 899              		.cfi_def_cfa_register 7
 900 0006 7860     		str	r0, [r7, #4]
 901 0008 0B46     		mov	r3, r1
 902 000a FB70     		strb	r3, [r7, #3]
 548:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 903              		.loc 1 548 0
 904 000c 4FF00103 		mov	r3, #1
 905 0010 FB60     		str	r3, [r7, #12]
 549:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 550:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 551:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 906              		.loc 1 551 0
 907 0012 7B68     		ldr	r3, [r7, #4]
 908 0014 5B69     		ldr	r3, [r3, #20]
 909 0016 BB60     		str	r3, [r7, #8]
 552:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 553:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 910              		.loc 1 553 0
 911 0018 7B68     		ldr	r3, [r7, #4]
 912 001a DB68     		ldr	r3, [r3, #12]
 913 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 914 001e 012B     		cmp	r3, #1
 915 0020 15D1     		bne	.L36
 554:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 555:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( StartSelectionValue <= (uint8_t)ADCGROUP001_MAX_ADC_GROUP_CHANNEL)
 916              		.loc 1 555 0
 917 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 918 0024 082B     		cmp	r3, #8
 919 0026 0FD8     		bhi	.L37
 556:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 557:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX start selection */
 558:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXSET_Msk,
 920              		.loc 1 558 0
 921 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 922 002a 03F00702 		and	r2, r3, #7
 923 002e BB68     		ldr	r3, [r7, #8]
 924 0030 D3F8F031 		ldr	r3, [r3, #496]
 925 0034 23F00703 		bic	r3, r3, #7
 926 0038 1A43     		orrs	r2, r2, r3
 927 003a BB68     		ldr	r3, [r7, #8]
 928 003c C3F8F021 		str	r2, [r3, #496]
 559:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                      VADC_G_EMUXCTR_EMUXSET_Pos, (uint32_t)StartSelectionValue);
 560:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 929              		.loc 1 560 0
 930 0040 4FF00003 		mov	r3, #0
 931 0044 FB60     		str	r3, [r7, #12]
 932 0046 02E0     		b	.L36
 933              	.L37:
 561:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 562:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 563:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 564:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 934              		.loc 1 564 0
 935 0048 4FF00203 		mov	r3, #2
 936 004c FB60     		str	r3, [r7, #12]
 937              	.L36:
 565:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 566:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 567:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 568:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 569:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 570:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 571:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 572:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 573:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 938              		.loc 1 573 0
 939 004e FB68     		ldr	r3, [r7, #12]
 574:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 940              		.loc 1 574 0
 941 0050 1846     		mov	r0, r3
 942 0052 07F11407 		add	r7, r7, #20
 943 0056 BD46     		mov	sp, r7
 944 0058 80BC     		pop	{r7}
 945 005a 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE127:
 949              		.section	.text.ADCGROUP001_GetEMUXStartSelection,"ax",%progbits
 950              		.align	2
 951              		.global	ADCGROUP001_GetEMUXStartSelection
 952              		.thumb
 953              		.thumb_func
 955              	ADCGROUP001_GetEMUXStartSelection:
 956              	.LFB128:
 575:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 576:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function gets the value of EMUX start selection. */
 577:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_GetEMUXStartSelection(
 578:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****        const ADCGROUP001_HandleType *HandlePtr, uint8_t *StartSelectionValuePtr)
 579:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 957              		.loc 1 579 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 16
 960              		@ frame_needed = 1, uses_anonymous_args = 0
 961              		@ link register save eliminated.
 962 0000 80B4     		push	{r7}
 963              	.LCFI32:
 964              		.cfi_def_cfa_offset 4
 965              		.cfi_offset 7, -4
 966 0002 85B0     		sub	sp, sp, #20
 967              	.LCFI33:
 968              		.cfi_def_cfa_offset 24
 969 0004 00AF     		add	r7, sp, #0
 970              	.LCFI34:
 971              		.cfi_def_cfa_register 7
 972 0006 7860     		str	r0, [r7, #4]
 973 0008 3960     		str	r1, [r7, #0]
 580:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 974              		.loc 1 580 0
 975 000a 4FF00103 		mov	r3, #1
 976 000e FB60     		str	r3, [r7, #12]
 581:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 582:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 583:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 977              		.loc 1 583 0
 978 0010 7B68     		ldr	r3, [r7, #4]
 979 0012 5B69     		ldr	r3, [r3, #20]
 980 0014 BB60     		str	r3, [r7, #8]
 584:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 585:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 981              		.loc 1 585 0
 982 0016 7B68     		ldr	r3, [r7, #4]
 983 0018 DB68     		ldr	r3, [r3, #12]
 984 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 985 001c 012B     		cmp	r3, #1
 986 001e 12D1     		bne	.L40
 586:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 587:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(StartSelectionValuePtr != NULL)
 987              		.loc 1 587 0
 988 0020 3B68     		ldr	r3, [r7, #0]
 989 0022 002B     		cmp	r3, #0
 990 0024 0CD0     		beq	.L41
 588:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 589:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Get the EMUX start selection*/
 590:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       *StartSelectionValuePtr = (uint8_t)RD_REG( VADCGroupPtr->EMUXCTR,
 991              		.loc 1 590 0
 992 0026 BB68     		ldr	r3, [r7, #8]
 993 0028 D3F8F031 		ldr	r3, [r3, #496]
 994 002c DBB2     		uxtb	r3, r3
 995 002e 03F00703 		and	r3, r3, #7
 996 0032 DAB2     		uxtb	r2, r3
 997 0034 3B68     		ldr	r3, [r7, #0]
 998 0036 1A70     		strb	r2, [r3, #0]
 591:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                         VADC_G_EMUXCTR_EMUXSET_Msk, VADC_G_EMUXCTR_EMUXSET_Pos);
 592:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 999              		.loc 1 592 0
 1000 0038 4FF00003 		mov	r3, #0
 1001 003c FB60     		str	r3, [r7, #12]
 1002 003e 02E0     		b	.L40
 1003              	.L41:
 593:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 594:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 595:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 596:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1004              		.loc 1 596 0
 1005 0040 4FF00203 		mov	r3, #2
 1006 0044 FB60     		str	r3, [r7, #12]
 1007              	.L40:
 597:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 598:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 599:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 600:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 601:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 602:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 603:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 604:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 605:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1008              		.loc 1 605 0
 1009 0046 FB68     		ldr	r3, [r7, #12]
 606:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1010              		.loc 1 606 0
 1011 0048 1846     		mov	r0, r3
 1012 004a 07F11407 		add	r7, r7, #20
 1013 004e BD46     		mov	sp, r7
 1014 0050 80BC     		pop	{r7}
 1015 0052 7047     		bx	lr
 1016              		.cfi_endproc
 1017              	.LFE128:
 1019              		.section	.text.ADCGROUP001_SetEMUXChannelSelect,"ax",%progbits
 1020              		.align	2
 1021              		.global	ADCGROUP001_SetEMUXChannelSelect
 1022              		.thumb
 1023              		.thumb_func
 1025              	ADCGROUP001_SetEMUXChannelSelect:
 1026              	.LFB129:
 607:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 608:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX channel select. */
 609:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXChannelSelect(
 610:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t ChannelSelectValue)
 611:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1027              		.loc 1 611 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 16
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 1032 0000 80B4     		push	{r7}
 1033              	.LCFI35:
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 7, -4
 1036 0002 85B0     		sub	sp, sp, #20
 1037              	.LCFI36:
 1038              		.cfi_def_cfa_offset 24
 1039 0004 00AF     		add	r7, sp, #0
 1040              	.LCFI37:
 1041              		.cfi_def_cfa_register 7
 1042 0006 7860     		str	r0, [r7, #4]
 1043 0008 0B46     		mov	r3, r1
 1044 000a FB70     		strb	r3, [r7, #3]
 612:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1045              		.loc 1 612 0
 1046 000c 4FF00103 		mov	r3, #1
 1047 0010 FB60     		str	r3, [r7, #12]
 613:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 614:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 615:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1048              		.loc 1 615 0
 1049 0012 7B68     		ldr	r3, [r7, #4]
 1050 0014 5B69     		ldr	r3, [r3, #20]
 1051 0016 BB60     		str	r3, [r7, #8]
 616:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 617:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1052              		.loc 1 617 0
 1053 0018 7B68     		ldr	r3, [r7, #4]
 1054 001a DB68     		ldr	r3, [r3, #12]
 1055 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1056 001e 012B     		cmp	r3, #1
 1057 0020 17D1     		bne	.L44
 618:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 619:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( ChannelSelectValue <= (uint8_t)ADCGROUP001_TOTAL_ADC_CHANNEL )
 1058              		.loc 1 619 0
 1059 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1060 0024 202B     		cmp	r3, #32
 1061 0026 11D8     		bhi	.L45
 620:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 621:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX channel select*/
 622:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXCH_Msk,
 1062              		.loc 1 622 0
 1063 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1064 002a 4FEA0343 		lsl	r3, r3, #16
 1065 002e 03F4F812 		and	r2, r3, #2031616
 1066 0032 BB68     		ldr	r3, [r7, #8]
 1067 0034 D3F8F031 		ldr	r3, [r3, #496]
 1068 0038 23F4F813 		bic	r3, r3, #2031616
 1069 003c 1A43     		orrs	r2, r2, r3
 1070 003e BB68     		ldr	r3, [r7, #8]
 1071 0040 C3F8F021 		str	r2, [r3, #496]
 623:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                        VADC_G_EMUXCTR_EMUXCH_Pos, (uint32_t)ChannelSelectValue);
 624:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 625:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1072              		.loc 1 625 0
 1073 0044 4FF00003 		mov	r3, #0
 1074 0048 FB60     		str	r3, [r7, #12]
 1075 004a 02E0     		b	.L44
 1076              	.L45:
 626:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 627:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 628:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 629:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1077              		.loc 1 629 0
 1078 004c 4FF00203 		mov	r3, #2
 1079 0050 FB60     		str	r3, [r7, #12]
 1080              	.L44:
 630:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 631:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 632:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 633:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 634:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 635:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 636:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 637:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 638:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1081              		.loc 1 638 0
 1082 0052 FB68     		ldr	r3, [r7, #12]
 639:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1083              		.loc 1 639 0
 1084 0054 1846     		mov	r0, r3
 1085 0056 07F11407 		add	r7, r7, #20
 1086 005a BD46     		mov	sp, r7
 1087 005c 80BC     		pop	{r7}
 1088 005e 7047     		bx	lr
 1089              		.cfi_endproc
 1090              	.LFE129:
 1092              		.section	.text.ADCGROUP001_SetEMUXMode,"ax",%progbits
 1093              		.align	2
 1094              		.global	ADCGROUP001_SetEMUXMode
 1095              		.thumb
 1096              		.thumb_func
 1098              	ADCGROUP001_SetEMUXMode:
 1099              	.LFB130:
 640:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 641:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX mode. */
 642:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXMode(const ADCGROUP001_HandleType *HandlePtr,
 643:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                   uint8_t Mode)
 644:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1100              		.loc 1 644 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 24
 1103              		@ frame_needed = 1, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105 0000 80B4     		push	{r7}
 1106              	.LCFI38:
 1107              		.cfi_def_cfa_offset 4
 1108              		.cfi_offset 7, -4
 1109 0002 87B0     		sub	sp, sp, #28
 1110              	.LCFI39:
 1111              		.cfi_def_cfa_offset 32
 1112 0004 00AF     		add	r7, sp, #0
 1113              	.LCFI40:
 1114              		.cfi_def_cfa_register 7
 1115 0006 7860     		str	r0, [r7, #4]
 1116 0008 0B46     		mov	r3, r1
 1117 000a FB70     		strb	r3, [r7, #3]
 645:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1118              		.loc 1 645 0
 1119 000c 4FF00103 		mov	r3, #1
 1120 0010 7B61     		str	r3, [r7, #20]
 646:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t ModeTemp;
 647:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 648:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 649:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1121              		.loc 1 649 0
 1122 0012 7B68     		ldr	r3, [r7, #4]
 1123 0014 5B69     		ldr	r3, [r3, #20]
 1124 0016 3B61     		str	r3, [r7, #16]
 650:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 651:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1125              		.loc 1 651 0
 1126 0018 7B68     		ldr	r3, [r7, #4]
 1127 001a DB68     		ldr	r3, [r3, #12]
 1128 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1129 001e 012B     		cmp	r3, #1
 1130 0020 1FD1     		bne	.L48
 652:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 653:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(Mode <= (uint8_t)ADCGROUP001_SEQUENCEMODE)
 1131              		.loc 1 653 0
 1132 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1133 0024 032B     		cmp	r3, #3
 1134 0026 19D8     		bhi	.L49
 654:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 655:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX mode*/
 656:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp = VADCGroupPtr->EMUXCTR;
 1135              		.loc 1 656 0
 1136 0028 3B69     		ldr	r3, [r7, #16]
 1137 002a D3F8F031 		ldr	r3, [r3, #496]
 1138 002e FB60     		str	r3, [r7, #12]
 657:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMUXMODE_Msk);
 1139              		.loc 1 657 0
 1140 0030 FB68     		ldr	r3, [r7, #12]
 1141 0032 23F04063 		bic	r3, r3, #201326592
 1142 0036 FB60     		str	r3, [r7, #12]
 658:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 659:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                       (((uint32_t)Mode << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUXMODE_Ms
 1143              		.loc 1 659 0
 1144 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1145 003a 4FEA8363 		lsl	r3, r3, #26
 1146 003e 03F04062 		and	r2, r3, #201326592
 658:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1147              		.loc 1 658 0
 1148 0042 FB68     		ldr	r3, [r7, #12]
 1149 0044 1343     		orrs	r3, r3, r2
 1150 0046 43F00043 		orr	r3, r3, #-2147483648
 1151 004a FB60     		str	r3, [r7, #12]
 660:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = ModeTemp;
 1152              		.loc 1 660 0
 1153 004c 3B69     		ldr	r3, [r7, #16]
 1154 004e FA68     		ldr	r2, [r7, #12]
 1155 0050 C3F8F021 		str	r2, [r3, #496]
 661:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 662:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1156              		.loc 1 662 0
 1157 0054 4FF00003 		mov	r3, #0
 1158 0058 7B61     		str	r3, [r7, #20]
 1159 005a 02E0     		b	.L48
 1160              	.L49:
 663:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 664:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 665:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 666:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1161              		.loc 1 666 0
 1162 005c 4FF00203 		mov	r3, #2
 1163 0060 7B61     		str	r3, [r7, #20]
 1164              	.L48:
 667:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 668:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 669:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 670:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 671:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 672:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 673:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 674:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 675:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1165              		.loc 1 675 0
 1166 0062 7B69     		ldr	r3, [r7, #20]
 676:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1167              		.loc 1 676 0
 1168 0064 1846     		mov	r0, r3
 1169 0066 07F11C07 		add	r7, r7, #28
 1170 006a BD46     		mov	sp, r7
 1171 006c 80BC     		pop	{r7}
 1172 006e 7047     		bx	lr
 1173              		.cfi_endproc
 1174              	.LFE130:
 1176              		.section	.text.ADCGROUP001_SetEMUXCodeScheme,"ax",%progbits
 1177              		.align	2
 1178              		.global	ADCGROUP001_SetEMUXCodeScheme
 1179              		.thumb
 1180              		.thumb_func
 1182              	ADCGROUP001_SetEMUXCodeScheme:
 1183              	.LFB131:
 677:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 678:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 679:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX coding scheme. */
 680:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXCodeScheme(const ADCGROUP001_HandleType *HandlePtr,
 681:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                             uint8_t CodeScheme)
 682:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1184              		.loc 1 682 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 24
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188              		@ link register save eliminated.
 1189 0000 80B4     		push	{r7}
 1190              	.LCFI41:
 1191              		.cfi_def_cfa_offset 4
 1192              		.cfi_offset 7, -4
 1193 0002 87B0     		sub	sp, sp, #28
 1194              	.LCFI42:
 1195              		.cfi_def_cfa_offset 32
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI43:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 0B46     		mov	r3, r1
 1201 000a FB70     		strb	r3, [r7, #3]
 683:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1202              		.loc 1 683 0
 1203 000c 4FF00103 		mov	r3, #1
 1204 0010 7B61     		str	r3, [r7, #20]
 684:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t CodeSchemeTemp = (uint32_t)0;
 1205              		.loc 1 684 0
 1206 0012 4FF00003 		mov	r3, #0
 1207 0016 3B61     		str	r3, [r7, #16]
 685:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 686:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 687:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1208              		.loc 1 687 0
 1209 0018 7B68     		ldr	r3, [r7, #4]
 1210 001a 5B69     		ldr	r3, [r3, #20]
 1211 001c FB60     		str	r3, [r7, #12]
 688:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 689:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1212              		.loc 1 689 0
 1213 001e 7B68     		ldr	r3, [r7, #4]
 1214 0020 DB68     		ldr	r3, [r3, #12]
 1215 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1216 0024 012B     		cmp	r3, #1
 1217 0026 1FD1     		bne	.L52
 690:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 691:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(CodeScheme <= (uint8_t)ADCGROUP001_GRAYCODE)
 1218              		.loc 1 691 0
 1219 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1220 002a 012B     		cmp	r3, #1
 1221 002c 19D8     		bhi	.L53
 692:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 693:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX code scheme*/
 694:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp = VADCGroupPtr->EMUXCTR;
 1222              		.loc 1 694 0
 1223 002e FB68     		ldr	r3, [r7, #12]
 1224 0030 D3F8F031 		ldr	r3, [r3, #496]
 1225 0034 3B61     		str	r3, [r7, #16]
 695:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMXCOD_Msk);
 1226              		.loc 1 695 0
 1227 0036 3B69     		ldr	r3, [r7, #16]
 1228 0038 23F08053 		bic	r3, r3, #268435456
 1229 003c 3B61     		str	r3, [r7, #16]
 696:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 697:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)CodeScheme << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD_Ms
 1230              		.loc 1 697 0
 1231 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1232 0040 4FEA0373 		lsl	r3, r3, #28
 1233 0044 03F08052 		and	r2, r3, #268435456
 696:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1234              		.loc 1 696 0
 1235 0048 3B69     		ldr	r3, [r7, #16]
 1236 004a 1343     		orrs	r3, r3, r2
 1237 004c 43F00043 		orr	r3, r3, #-2147483648
 1238 0050 3B61     		str	r3, [r7, #16]
 698:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = CodeSchemeTemp;
 1239              		.loc 1 698 0
 1240 0052 FB68     		ldr	r3, [r7, #12]
 1241 0054 3A69     		ldr	r2, [r7, #16]
 1242 0056 C3F8F021 		str	r2, [r3, #496]
 699:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 700:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1243              		.loc 1 700 0
 1244 005a 4FF00003 		mov	r3, #0
 1245 005e 7B61     		str	r3, [r7, #20]
 1246 0060 02E0     		b	.L52
 1247              	.L53:
 701:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 702:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 703:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 704:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1248              		.loc 1 704 0
 1249 0062 4FF00203 		mov	r3, #2
 1250 0066 7B61     		str	r3, [r7, #20]
 1251              	.L52:
 705:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 706:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 707:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 708:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 709:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 710:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 711:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 712:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 713:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1252              		.loc 1 713 0
 1253 0068 7B69     		ldr	r3, [r7, #20]
 714:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1254              		.loc 1 714 0
 1255 006a 1846     		mov	r0, r3
 1256 006c 07F11C07 		add	r7, r7, #28
 1257 0070 BD46     		mov	sp, r7
 1258 0072 80BC     		pop	{r7}
 1259 0074 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE131:
 1263 0076 00BF     		.section	.text.ADCGROUP001_SetGroupClass0SampleTime,"ax",%progbits
 1264              		.align	2
 1265              		.global	ADCGROUP001_SetGroupClass0SampleTime
 1266              		.thumb
 1267              		.thumb_func
 1269              	ADCGROUP001_SetGroupClass0SampleTime:
 1270              	.LFB132:
 715:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 716:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 717:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0SampleTime(
 718:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 719:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 720:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1271              		.loc 1 720 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 16
 1274              		@ frame_needed = 1, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276 0000 80B4     		push	{r7}
 1277              	.LCFI44:
 1278              		.cfi_def_cfa_offset 4
 1279              		.cfi_offset 7, -4
 1280 0002 85B0     		sub	sp, sp, #20
 1281              	.LCFI45:
 1282              		.cfi_def_cfa_offset 24
 1283 0004 00AF     		add	r7, sp, #0
 1284              	.LCFI46:
 1285              		.cfi_def_cfa_register 7
 1286 0006 7860     		str	r0, [r7, #4]
 1287 0008 0B46     		mov	r3, r1
 1288 000a FB70     		strb	r3, [r7, #3]
 721:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1289              		.loc 1 721 0
 1290 000c 4FF00103 		mov	r3, #1
 1291 0010 FB60     		str	r3, [r7, #12]
 722:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 723:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 724:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1292              		.loc 1 724 0
 1293 0012 7B68     		ldr	r3, [r7, #4]
 1294 0014 5B69     		ldr	r3, [r3, #20]
 1295 0016 BB60     		str	r3, [r7, #8]
 725:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 726:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1296              		.loc 1 726 0
 1297 0018 7B68     		ldr	r3, [r7, #4]
 1298 001a DB68     		ldr	r3, [r3, #12]
 1299 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1300 001e 012B     		cmp	r3, #1
 1301 0020 15D1     		bne	.L56
 727:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 728:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1302              		.loc 1 728 0
 1303 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1304 0024 1F2B     		cmp	r3, #31
 1305 0026 0FD8     		bhi	.L57
 729:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 730:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 0 */
 731:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCS_Msk,
 1306              		.loc 1 731 0
 1307 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1308 002a 03F01F02 		and	r2, r3, #31
 1309 002e BB68     		ldr	r3, [r7, #8]
 1310 0030 D3F8A030 		ldr	r3, [r3, #160]
 1311 0034 23F01F03 		bic	r3, r3, #31
 1312 0038 1A43     		orrs	r2, r2, r3
 1313 003a BB68     		ldr	r3, [r7, #8]
 1314 003c C3F8A020 		str	r2, [r3, #160]
 732:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);
 733:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 734:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1315              		.loc 1 734 0
 1316 0040 4FF00003 		mov	r3, #0
 1317 0044 FB60     		str	r3, [r7, #12]
 1318 0046 02E0     		b	.L56
 1319              	.L57:
 735:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 736:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 737:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 738:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1320              		.loc 1 738 0
 1321 0048 4FF00203 		mov	r3, #2
 1322 004c FB60     		str	r3, [r7, #12]
 1323              	.L56:
 739:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 740:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 741:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 742:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 743:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 744:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 745:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 746:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 747:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1324              		.loc 1 747 0
 1325 004e FB68     		ldr	r3, [r7, #12]
 748:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1326              		.loc 1 748 0
 1327 0050 1846     		mov	r0, r3
 1328 0052 07F11407 		add	r7, r7, #20
 1329 0056 BD46     		mov	sp, r7
 1330 0058 80BC     		pop	{r7}
 1331 005a 7047     		bx	lr
 1332              		.cfi_endproc
 1333              	.LFE132:
 1335              		.section	.text.ADCGROUP001_SetGroupClass1SampleTime,"ax",%progbits
 1336              		.align	2
 1337              		.global	ADCGROUP001_SetGroupClass1SampleTime
 1338              		.thumb
 1339              		.thumb_func
 1341              	ADCGROUP001_SetGroupClass1SampleTime:
 1342              	.LFB133:
 749:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 750:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 751:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 752:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1SampleTime(
 753:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 754:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 755:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1343              		.loc 1 755 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 16
 1346              		@ frame_needed = 1, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 1348 0000 80B4     		push	{r7}
 1349              	.LCFI47:
 1350              		.cfi_def_cfa_offset 4
 1351              		.cfi_offset 7, -4
 1352 0002 85B0     		sub	sp, sp, #20
 1353              	.LCFI48:
 1354              		.cfi_def_cfa_offset 24
 1355 0004 00AF     		add	r7, sp, #0
 1356              	.LCFI49:
 1357              		.cfi_def_cfa_register 7
 1358 0006 7860     		str	r0, [r7, #4]
 1359 0008 0B46     		mov	r3, r1
 1360 000a FB70     		strb	r3, [r7, #3]
 756:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1361              		.loc 1 756 0
 1362 000c 4FF00103 		mov	r3, #1
 1363 0010 FB60     		str	r3, [r7, #12]
 757:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 758:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 759:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1364              		.loc 1 759 0
 1365 0012 7B68     		ldr	r3, [r7, #4]
 1366 0014 5B69     		ldr	r3, [r3, #20]
 1367 0016 BB60     		str	r3, [r7, #8]
 760:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 761:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1368              		.loc 1 761 0
 1369 0018 7B68     		ldr	r3, [r7, #4]
 1370 001a DB68     		ldr	r3, [r3, #12]
 1371 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1372 001e 012B     		cmp	r3, #1
 1373 0020 15D1     		bne	.L60
 762:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 763:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1374              		.loc 1 763 0
 1375 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1376 0024 1F2B     		cmp	r3, #31
 1377 0026 0FD8     		bhi	.L61
 764:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 765:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 1 */
 766:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCS_Msk,
 1378              		.loc 1 766 0
 1379 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1380 002a 03F01F02 		and	r2, r3, #31
 1381 002e BB68     		ldr	r3, [r7, #8]
 1382 0030 D3F8A430 		ldr	r3, [r3, #164]
 1383 0034 23F01F03 		bic	r3, r3, #31
 1384 0038 1A43     		orrs	r2, r2, r3
 1385 003a BB68     		ldr	r3, [r7, #8]
 1386 003c C3F8A420 		str	r2, [r3, #164]
 767:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);
 768:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 769:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1387              		.loc 1 769 0
 1388 0040 4FF00003 		mov	r3, #0
 1389 0044 FB60     		str	r3, [r7, #12]
 1390 0046 02E0     		b	.L60
 1391              	.L61:
 770:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 771:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 772:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 773:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1392              		.loc 1 773 0
 1393 0048 4FF00203 		mov	r3, #2
 1394 004c FB60     		str	r3, [r7, #12]
 1395              	.L60:
 774:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 775:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 776:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 777:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 778:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 779:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 780:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 781:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 782:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1396              		.loc 1 782 0
 1397 004e FB68     		ldr	r3, [r7, #12]
 783:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1398              		.loc 1 783 0
 1399 0050 1846     		mov	r0, r3
 1400 0052 07F11407 		add	r7, r7, #20
 1401 0056 BD46     		mov	sp, r7
 1402 0058 80BC     		pop	{r7}
 1403 005a 7047     		bx	lr
 1404              		.cfi_endproc
 1405              	.LFE133:
 1407              		.section	.text.ADCGROUP001_SetGroupClass0EmuxSampleTime,"ax",%progbits
 1408              		.align	2
 1409              		.global	ADCGROUP001_SetGroupClass0EmuxSampleTime
 1410              		.thumb
 1411              		.thumb_func
 1413              	ADCGROUP001_SetGroupClass0EmuxSampleTime:
 1414              	.LFB134:
 784:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 785:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 786:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 787:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxSampleTime(
 788:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 789:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 790:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1415              		.loc 1 790 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 16
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419              		@ link register save eliminated.
 1420 0000 80B4     		push	{r7}
 1421              	.LCFI50:
 1422              		.cfi_def_cfa_offset 4
 1423              		.cfi_offset 7, -4
 1424 0002 85B0     		sub	sp, sp, #20
 1425              	.LCFI51:
 1426              		.cfi_def_cfa_offset 24
 1427 0004 00AF     		add	r7, sp, #0
 1428              	.LCFI52:
 1429              		.cfi_def_cfa_register 7
 1430 0006 7860     		str	r0, [r7, #4]
 1431 0008 0B46     		mov	r3, r1
 1432 000a FB70     		strb	r3, [r7, #3]
 791:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1433              		.loc 1 791 0
 1434 000c 4FF00103 		mov	r3, #1
 1435 0010 FB60     		str	r3, [r7, #12]
 792:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 793:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 794:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1436              		.loc 1 794 0
 1437 0012 7B68     		ldr	r3, [r7, #4]
 1438 0014 5B69     		ldr	r3, [r3, #20]
 1439 0016 BB60     		str	r3, [r7, #8]
 795:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 796:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1440              		.loc 1 796 0
 1441 0018 7B68     		ldr	r3, [r7, #4]
 1442 001a DB68     		ldr	r3, [r3, #12]
 1443 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1444 001e 012B     		cmp	r3, #1
 1445 0020 17D1     		bne	.L64
 797:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 798:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1446              		.loc 1 798 0
 1447 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1448 0024 1F2B     		cmp	r3, #31
 1449 0026 11D8     		bhi	.L65
 799:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 800:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 0 */
 801:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCE_Msk,
 1450              		.loc 1 801 0
 1451 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1452 002a 4FEA0343 		lsl	r3, r3, #16
 1453 002e 03F4F812 		and	r2, r3, #2031616
 1454 0032 BB68     		ldr	r3, [r7, #8]
 1455 0034 D3F8A030 		ldr	r3, [r3, #160]
 1456 0038 23F4F813 		bic	r3, r3, #2031616
 1457 003c 1A43     		orrs	r2, r2, r3
 1458 003e BB68     		ldr	r3, [r7, #8]
 1459 0040 C3F8A020 		str	r2, [r3, #160]
 802:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 803:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 804:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1460              		.loc 1 804 0
 1461 0044 4FF00003 		mov	r3, #0
 1462 0048 FB60     		str	r3, [r7, #12]
 1463 004a 02E0     		b	.L64
 1464              	.L65:
 805:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 806:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 807:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 808:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1465              		.loc 1 808 0
 1466 004c 4FF00203 		mov	r3, #2
 1467 0050 FB60     		str	r3, [r7, #12]
 1468              	.L64:
 809:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 810:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 811:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 812:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 813:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 814:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 815:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 816:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 817:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1469              		.loc 1 817 0
 1470 0052 FB68     		ldr	r3, [r7, #12]
 818:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1471              		.loc 1 818 0
 1472 0054 1846     		mov	r0, r3
 1473 0056 07F11407 		add	r7, r7, #20
 1474 005a BD46     		mov	sp, r7
 1475 005c 80BC     		pop	{r7}
 1476 005e 7047     		bx	lr
 1477              		.cfi_endproc
 1478              	.LFE134:
 1480              		.section	.text.ADCGROUP001_SetGroupClass1EmuxSampleTime,"ax",%progbits
 1481              		.align	2
 1482              		.global	ADCGROUP001_SetGroupClass1EmuxSampleTime
 1483              		.thumb
 1484              		.thumb_func
 1486              	ADCGROUP001_SetGroupClass1EmuxSampleTime:
 1487              	.LFB135:
 819:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 820:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 821:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 822:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxSampleTime(
 823:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 824:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 825:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1488              		.loc 1 825 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 16
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492              		@ link register save eliminated.
 1493 0000 80B4     		push	{r7}
 1494              	.LCFI53:
 1495              		.cfi_def_cfa_offset 4
 1496              		.cfi_offset 7, -4
 1497 0002 85B0     		sub	sp, sp, #20
 1498              	.LCFI54:
 1499              		.cfi_def_cfa_offset 24
 1500 0004 00AF     		add	r7, sp, #0
 1501              	.LCFI55:
 1502              		.cfi_def_cfa_register 7
 1503 0006 7860     		str	r0, [r7, #4]
 1504 0008 0B46     		mov	r3, r1
 1505 000a FB70     		strb	r3, [r7, #3]
 826:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1506              		.loc 1 826 0
 1507 000c 4FF00103 		mov	r3, #1
 1508 0010 FB60     		str	r3, [r7, #12]
 827:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 828:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 829:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1509              		.loc 1 829 0
 1510 0012 7B68     		ldr	r3, [r7, #4]
 1511 0014 5B69     		ldr	r3, [r3, #20]
 1512 0016 BB60     		str	r3, [r7, #8]
 830:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 831:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1513              		.loc 1 831 0
 1514 0018 7B68     		ldr	r3, [r7, #4]
 1515 001a DB68     		ldr	r3, [r3, #12]
 1516 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1517 001e 012B     		cmp	r3, #1
 1518 0020 17D1     		bne	.L68
 832:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 833:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1519              		.loc 1 833 0
 1520 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1521 0024 1F2B     		cmp	r3, #31
 1522 0026 11D8     		bhi	.L69
 834:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 835:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 1 */
 836:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCE_Msk,
 1523              		.loc 1 836 0
 1524 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1525 002a 4FEA0343 		lsl	r3, r3, #16
 1526 002e 03F4F812 		and	r2, r3, #2031616
 1527 0032 BB68     		ldr	r3, [r7, #8]
 1528 0034 D3F8A430 		ldr	r3, [r3, #164]
 1529 0038 23F4F813 		bic	r3, r3, #2031616
 1530 003c 1A43     		orrs	r2, r2, r3
 1531 003e BB68     		ldr	r3, [r7, #8]
 1532 0040 C3F8A420 		str	r2, [r3, #164]
 837:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                   VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 838:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1533              		.loc 1 838 0
 1534 0044 4FF00003 		mov	r3, #0
 1535 0048 FB60     		str	r3, [r7, #12]
 1536 004a 02E0     		b	.L68
 1537              	.L69:
 839:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 840:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 841:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 842:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1538              		.loc 1 842 0
 1539 004c 4FF00203 		mov	r3, #2
 1540 0050 FB60     		str	r3, [r7, #12]
 1541              	.L68:
 843:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 844:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 845:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 846:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 847:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 848:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 849:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 850:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 851:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1542              		.loc 1 851 0
 1543 0052 FB68     		ldr	r3, [r7, #12]
 852:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1544              		.loc 1 852 0
 1545 0054 1846     		mov	r0, r3
 1546 0056 07F11407 		add	r7, r7, #20
 1547 005a BD46     		mov	sp, r7
 1548 005c 80BC     		pop	{r7}
 1549 005e 7047     		bx	lr
 1550              		.cfi_endproc
 1551              	.LFE135:
 1553              		.section	.text.ADCGROUP001_SetGroupClass0ConvMode,"ax",%progbits
 1554              		.align	2
 1555              		.global	ADCGROUP001_SetGroupClass0ConvMode
 1556              		.thumb
 1557              		.thumb_func
 1559              	ADCGROUP001_SetGroupClass0ConvMode:
 1560              	.LFB136:
 853:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 854:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 855:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode in group class 0 */
 856:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0ConvMode(
 857:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr,
 858:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 859:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1561              		.loc 1 859 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 16
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565              		@ link register save eliminated.
 1566 0000 80B4     		push	{r7}
 1567              	.LCFI56:
 1568              		.cfi_def_cfa_offset 4
 1569              		.cfi_offset 7, -4
 1570 0002 85B0     		sub	sp, sp, #20
 1571              	.LCFI57:
 1572              		.cfi_def_cfa_offset 24
 1573 0004 00AF     		add	r7, sp, #0
 1574              	.LCFI58:
 1575              		.cfi_def_cfa_register 7
 1576 0006 7860     		str	r0, [r7, #4]
 1577 0008 0B46     		mov	r3, r1
 1578 000a FB70     		strb	r3, [r7, #3]
 860:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1579              		.loc 1 860 0
 1580 000c 4FF00103 		mov	r3, #1
 1581 0010 FB60     		str	r3, [r7, #12]
 861:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 862:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 863:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1582              		.loc 1 863 0
 1583 0012 7B68     		ldr	r3, [r7, #4]
 1584 0014 5B69     		ldr	r3, [r3, #20]
 1585 0016 BB60     		str	r3, [r7, #8]
 864:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 865:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1586              		.loc 1 865 0
 1587 0018 7B68     		ldr	r3, [r7, #4]
 1588 001a DB68     		ldr	r3, [r3, #12]
 1589 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1590 001e 012B     		cmp	r3, #1
 1591 0020 1AD1     		bne	.L72
 866:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 867:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1592              		.loc 1 867 0
 1593 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1594 0024 022B     		cmp	r3, #2
 1595 0026 02D9     		bls	.L73
 1596              		.loc 1 867 0 is_stmt 0 discriminator 1
 1597 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1598 002a 052B     		cmp	r3, #5
 1599 002c 11D1     		bne	.L74
 1600              	.L73:
 868:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 869:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 870:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 0 */
 871:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CMS_Msk,
 1601              		.loc 1 871 0 is_stmt 1
 1602 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1603 0030 4FEA0323 		lsl	r3, r3, #8
 1604 0034 03F4E062 		and	r2, r3, #1792
 1605 0038 BB68     		ldr	r3, [r7, #8]
 1606 003a D3F8A030 		ldr	r3, [r3, #160]
 1607 003e 23F4E063 		bic	r3, r3, #1792
 1608 0042 1A43     		orrs	r2, r2, r3
 1609 0044 BB68     		ldr	r3, [r7, #8]
 1610 0046 C3F8A020 		str	r2, [r3, #160]
 872:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 873:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 874:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1611              		.loc 1 874 0
 1612 004a 4FF00003 		mov	r3, #0
 1613 004e FB60     		str	r3, [r7, #12]
 1614 0050 02E0     		b	.L72
 1615              	.L74:
 875:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 876:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 877:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 878:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1616              		.loc 1 878 0
 1617 0052 4FF00203 		mov	r3, #2
 1618 0056 FB60     		str	r3, [r7, #12]
 1619              	.L72:
 879:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 880:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 881:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 882:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 883:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 884:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 885:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 886:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 887:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1620              		.loc 1 887 0
 1621 0058 FB68     		ldr	r3, [r7, #12]
 888:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1622              		.loc 1 888 0
 1623 005a 1846     		mov	r0, r3
 1624 005c 07F11407 		add	r7, r7, #20
 1625 0060 BD46     		mov	sp, r7
 1626 0062 80BC     		pop	{r7}
 1627 0064 7047     		bx	lr
 1628              		.cfi_endproc
 1629              	.LFE136:
 1631 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass1ConvMode,"ax",%progbits
 1632              		.align	2
 1633              		.global	ADCGROUP001_SetGroupClass1ConvMode
 1634              		.thumb
 1635              		.thumb_func
 1637              	ADCGROUP001_SetGroupClass1ConvMode:
 1638              	.LFB137:
 889:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 890:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 891:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode */
 892:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1ConvMode(
 893:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr,
 894:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 895:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1639              		.loc 1 895 0
 1640              		.cfi_startproc
 1641              		@ args = 0, pretend = 0, frame = 16
 1642              		@ frame_needed = 1, uses_anonymous_args = 0
 1643              		@ link register save eliminated.
 1644 0000 80B4     		push	{r7}
 1645              	.LCFI59:
 1646              		.cfi_def_cfa_offset 4
 1647              		.cfi_offset 7, -4
 1648 0002 85B0     		sub	sp, sp, #20
 1649              	.LCFI60:
 1650              		.cfi_def_cfa_offset 24
 1651 0004 00AF     		add	r7, sp, #0
 1652              	.LCFI61:
 1653              		.cfi_def_cfa_register 7
 1654 0006 7860     		str	r0, [r7, #4]
 1655 0008 0B46     		mov	r3, r1
 1656 000a FB70     		strb	r3, [r7, #3]
 896:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1657              		.loc 1 896 0
 1658 000c 4FF00103 		mov	r3, #1
 1659 0010 FB60     		str	r3, [r7, #12]
 897:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 898:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 899:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1660              		.loc 1 899 0
 1661 0012 7B68     		ldr	r3, [r7, #4]
 1662 0014 5B69     		ldr	r3, [r3, #20]
 1663 0016 BB60     		str	r3, [r7, #8]
 900:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 901:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1664              		.loc 1 901 0
 1665 0018 7B68     		ldr	r3, [r7, #4]
 1666 001a DB68     		ldr	r3, [r3, #12]
 1667 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1668 001e 012B     		cmp	r3, #1
 1669 0020 1AD1     		bne	.L78
 902:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 903:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1670              		.loc 1 903 0
 1671 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1672 0024 022B     		cmp	r3, #2
 1673 0026 02D9     		bls	.L79
 1674              		.loc 1 903 0 is_stmt 0 discriminator 1
 1675 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1676 002a 052B     		cmp	r3, #5
 1677 002c 11D1     		bne	.L80
 1678              	.L79:
 904:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 905:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 906:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 1 */
 907:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CMS_Msk,
 1679              		.loc 1 907 0 is_stmt 1
 1680 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1681 0030 4FEA0323 		lsl	r3, r3, #8
 1682 0034 03F4E062 		and	r2, r3, #1792
 1683 0038 BB68     		ldr	r3, [r7, #8]
 1684 003a D3F8A430 		ldr	r3, [r3, #164]
 1685 003e 23F4E063 		bic	r3, r3, #1792
 1686 0042 1A43     		orrs	r2, r2, r3
 1687 0044 BB68     		ldr	r3, [r7, #8]
 1688 0046 C3F8A420 		str	r2, [r3, #164]
 908:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 909:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1689              		.loc 1 909 0
 1690 004a 4FF00003 		mov	r3, #0
 1691 004e FB60     		str	r3, [r7, #12]
 1692 0050 02E0     		b	.L78
 1693              	.L80:
 910:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 911:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 912:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 913:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1694              		.loc 1 913 0
 1695 0052 4FF00203 		mov	r3, #2
 1696 0056 FB60     		str	r3, [r7, #12]
 1697              	.L78:
 914:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 915:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 916:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 917:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 918:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 919:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 920:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 921:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 922:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1698              		.loc 1 922 0
 1699 0058 FB68     		ldr	r3, [r7, #12]
 923:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1700              		.loc 1 923 0
 1701 005a 1846     		mov	r0, r3
 1702 005c 07F11407 		add	r7, r7, #20
 1703 0060 BD46     		mov	sp, r7
 1704 0062 80BC     		pop	{r7}
 1705 0064 7047     		bx	lr
 1706              		.cfi_endproc
 1707              	.LFE137:
 1709 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass0EmuxConvMode,"ax",%progbits
 1710              		.align	2
 1711              		.global	ADCGROUP001_SetGroupClass0EmuxConvMode
 1712              		.thumb
 1713              		.thumb_func
 1715              	ADCGROUP001_SetGroupClass0EmuxConvMode:
 1716              	.LFB138:
 924:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 925:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 926:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 927:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxConvMode(
 928:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 929:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 930:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 931:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1717              		.loc 1 931 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 16
 1720              		@ frame_needed = 1, uses_anonymous_args = 0
 1721              		@ link register save eliminated.
 1722 0000 80B4     		push	{r7}
 1723              	.LCFI62:
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 7, -4
 1726 0002 85B0     		sub	sp, sp, #20
 1727              	.LCFI63:
 1728              		.cfi_def_cfa_offset 24
 1729 0004 00AF     		add	r7, sp, #0
 1730              	.LCFI64:
 1731              		.cfi_def_cfa_register 7
 1732 0006 7860     		str	r0, [r7, #4]
 1733 0008 0B46     		mov	r3, r1
 1734 000a FB70     		strb	r3, [r7, #3]
 932:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1735              		.loc 1 932 0
 1736 000c 4FF00103 		mov	r3, #1
 1737 0010 FB60     		str	r3, [r7, #12]
 933:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 934:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 935:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1738              		.loc 1 935 0
 1739 0012 7B68     		ldr	r3, [r7, #4]
 1740 0014 5B69     		ldr	r3, [r3, #20]
 1741 0016 BB60     		str	r3, [r7, #8]
 936:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 937:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1742              		.loc 1 937 0
 1743 0018 7B68     		ldr	r3, [r7, #4]
 1744 001a DB68     		ldr	r3, [r3, #12]
 1745 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1746 001e 012B     		cmp	r3, #1
 1747 0020 1AD1     		bne	.L84
 938:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 939:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1748              		.loc 1 939 0
 1749 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1750 0024 022B     		cmp	r3, #2
 1751 0026 02D9     		bls	.L85
 1752              		.loc 1 939 0 is_stmt 0 discriminator 1
 1753 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1754 002a 052B     		cmp	r3, #5
 1755 002c 11D1     		bne	.L86
 1756              	.L85:
 940:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 941:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 942:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 0 */
 943:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CME_Msk,
 1757              		.loc 1 943 0 is_stmt 1
 1758 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1759 0030 4FEA0363 		lsl	r3, r3, #24
 1760 0034 03F0E062 		and	r2, r3, #117440512
 1761 0038 BB68     		ldr	r3, [r7, #8]
 1762 003a D3F8A030 		ldr	r3, [r3, #160]
 1763 003e 23F0E063 		bic	r3, r3, #117440512
 1764 0042 1A43     		orrs	r2, r2, r3
 1765 0044 BB68     		ldr	r3, [r7, #8]
 1766 0046 C3F8A020 		str	r2, [r3, #160]
 944:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 945:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 946:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1767              		.loc 1 946 0
 1768 004a 4FF00003 		mov	r3, #0
 1769 004e FB60     		str	r3, [r7, #12]
 1770 0050 02E0     		b	.L84
 1771              	.L86:
 947:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 948:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 949:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 950:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1772              		.loc 1 950 0
 1773 0052 4FF00203 		mov	r3, #2
 1774 0056 FB60     		str	r3, [r7, #12]
 1775              	.L84:
 951:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 952:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 953:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 954:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 955:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 956:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 957:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 958:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 959:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1776              		.loc 1 959 0
 1777 0058 FB68     		ldr	r3, [r7, #12]
 960:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1778              		.loc 1 960 0
 1779 005a 1846     		mov	r0, r3
 1780 005c 07F11407 		add	r7, r7, #20
 1781 0060 BD46     		mov	sp, r7
 1782 0062 80BC     		pop	{r7}
 1783 0064 7047     		bx	lr
 1784              		.cfi_endproc
 1785              	.LFE138:
 1787 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass1EmuxConvMode,"ax",%progbits
 1788              		.align	2
 1789              		.global	ADCGROUP001_SetGroupClass1EmuxConvMode
 1790              		.thumb
 1791              		.thumb_func
 1793              	ADCGROUP001_SetGroupClass1EmuxConvMode:
 1794              	.LFB139:
 961:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 962:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 963:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 964:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxConvMode(
 965:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 966:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 967:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 968:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1795              		.loc 1 968 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 16
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799              		@ link register save eliminated.
 1800 0000 80B4     		push	{r7}
 1801              	.LCFI65:
 1802              		.cfi_def_cfa_offset 4
 1803              		.cfi_offset 7, -4
 1804 0002 85B0     		sub	sp, sp, #20
 1805              	.LCFI66:
 1806              		.cfi_def_cfa_offset 24
 1807 0004 00AF     		add	r7, sp, #0
 1808              	.LCFI67:
 1809              		.cfi_def_cfa_register 7
 1810 0006 7860     		str	r0, [r7, #4]
 1811 0008 0B46     		mov	r3, r1
 1812 000a FB70     		strb	r3, [r7, #3]
 969:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1813              		.loc 1 969 0
 1814 000c 4FF00103 		mov	r3, #1
 1815 0010 FB60     		str	r3, [r7, #12]
 970:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 971:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 972:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1816              		.loc 1 972 0
 1817 0012 7B68     		ldr	r3, [r7, #4]
 1818 0014 5B69     		ldr	r3, [r3, #20]
 1819 0016 BB60     		str	r3, [r7, #8]
 973:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 974:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1820              		.loc 1 974 0
 1821 0018 7B68     		ldr	r3, [r7, #4]
 1822 001a DB68     		ldr	r3, [r3, #12]
 1823 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1824 001e 012B     		cmp	r3, #1
 1825 0020 1AD1     		bne	.L90
 975:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 976:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1826              		.loc 1 976 0
 1827 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1828 0024 022B     		cmp	r3, #2
 1829 0026 02D9     		bls	.L91
 1830              		.loc 1 976 0 is_stmt 0 discriminator 1
 1831 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1832 002a 052B     		cmp	r3, #5
 1833 002c 11D1     		bne	.L92
 1834              	.L91:
 977:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 978:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 979:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 1 */
 980:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CME_Msk,
 1835              		.loc 1 980 0 is_stmt 1
 1836 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1837 0030 4FEA0363 		lsl	r3, r3, #24
 1838 0034 03F0E062 		and	r2, r3, #117440512
 1839 0038 BB68     		ldr	r3, [r7, #8]
 1840 003a D3F8A430 		ldr	r3, [r3, #164]
 1841 003e 23F0E063 		bic	r3, r3, #117440512
 1842 0042 1A43     		orrs	r2, r2, r3
 1843 0044 BB68     		ldr	r3, [r7, #8]
 1844 0046 C3F8A420 		str	r2, [r3, #164]
 981:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 982:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 983:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1845              		.loc 1 983 0
 1846 004a 4FF00003 		mov	r3, #0
 1847 004e FB60     		str	r3, [r7, #12]
 1848 0050 02E0     		b	.L90
 1849              	.L92:
 984:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 985:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 986:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 987:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1850              		.loc 1 987 0
 1851 0052 4FF00203 		mov	r3, #2
 1852 0056 FB60     		str	r3, [r7, #12]
 1853              	.L90:
 988:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 989:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 990:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 991:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 992:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 993:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 994:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 995:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 996:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1854              		.loc 1 996 0
 1855 0058 FB68     		ldr	r3, [r7, #12]
 997:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1856              		.loc 1 997 0
 1857 005a 1846     		mov	r0, r3
 1858 005c 07F11407 		add	r7, r7, #20
 1859 0060 BD46     		mov	sp, r7
 1860 0062 80BC     		pop	{r7}
 1861 0064 7047     		bx	lr
 1862              		.cfi_endproc
 1863              	.LFE139:
 1865 0066 00BF     		.section	.text.ADCGROUP001_SetEMUXSampleTimeControl,"ax",%progbits
 1866              		.align	2
 1867              		.global	ADCGROUP001_SetEMUXSampleTimeControl
 1868              		.thumb
 1869              		.thumb_func
 1871              	ADCGROUP001_SetEMUXSampleTimeControl:
 1872              	.LFB140:
 998:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 999:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1000:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX sample time control. */
1001:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXSampleTimeControl(
1002:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                   const ADCGROUP001_HandleType *HandlePtr, uint8_t ControlValue)
1003:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1873              		.loc 1 1003 0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 24
 1876              		@ frame_needed = 1, uses_anonymous_args = 0
 1877              		@ link register save eliminated.
 1878 0000 80B4     		push	{r7}
 1879              	.LCFI68:
 1880              		.cfi_def_cfa_offset 4
 1881              		.cfi_offset 7, -4
 1882 0002 87B0     		sub	sp, sp, #28
 1883              	.LCFI69:
 1884              		.cfi_def_cfa_offset 32
 1885 0004 00AF     		add	r7, sp, #0
 1886              	.LCFI70:
 1887              		.cfi_def_cfa_register 7
 1888 0006 7860     		str	r0, [r7, #4]
 1889 0008 0B46     		mov	r3, r1
 1890 000a FB70     		strb	r3, [r7, #3]
1004:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1891              		.loc 1 1004 0
 1892 000c 4FF00103 		mov	r3, #1
 1893 0010 7B61     		str	r3, [r7, #20]
1005:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t SampleTimeCtrl;
1006:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
1007:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
1008:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1894              		.loc 1 1008 0
 1895 0012 7B68     		ldr	r3, [r7, #4]
 1896 0014 5B69     		ldr	r3, [r3, #20]
 1897 0016 3B61     		str	r3, [r7, #16]
1009:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1010:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1898              		.loc 1 1010 0
 1899 0018 7B68     		ldr	r3, [r7, #4]
 1900 001a DB68     		ldr	r3, [r3, #12]
 1901 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1902 001e 012B     		cmp	r3, #1
 1903 0020 1FD1     		bne	.L96
1011:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1012:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(ControlValue <= (uint8_t)SET)
 1904              		.loc 1 1012 0
 1905 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1906 0024 012B     		cmp	r3, #1
 1907 0026 19D8     		bhi	.L97
1013:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1014:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX sample time control */
1015:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl = VADCGroupPtr->EMUXCTR;
 1908              		.loc 1 1015 0
 1909 0028 3B69     		ldr	r3, [r7, #16]
 1910 002a D3F8F031 		ldr	r3, [r3, #496]
 1911 002e FB60     		str	r3, [r7, #12]
1016:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl &= (uint32_t)~(VADC_G_EMUXCTR_EMXST_Msk);
 1912              		.loc 1 1016 0
 1913 0030 FB68     		ldr	r3, [r7, #12]
 1914 0032 23F00053 		bic	r3, r3, #536870912
 1915 0036 FB60     		str	r3, [r7, #12]
1017:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
1018:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)ControlValue << VADC_G_EMUXCTR_EMXST_Pos) & VADC_G_EMUXCTR_EMXST_Ms
 1916              		.loc 1 1018 0
 1917 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1918 003a 4FEA4373 		lsl	r3, r3, #29
 1919 003e 03F00052 		and	r2, r3, #536870912
1017:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
 1920              		.loc 1 1017 0
 1921 0042 FB68     		ldr	r3, [r7, #12]
 1922 0044 1343     		orrs	r3, r3, r2
 1923 0046 43F00043 		orr	r3, r3, #-2147483648
 1924 004a FB60     		str	r3, [r7, #12]
1019:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = SampleTimeCtrl;
 1925              		.loc 1 1019 0
 1926 004c 3B69     		ldr	r3, [r7, #16]
 1927 004e FA68     		ldr	r2, [r7, #12]
 1928 0050 C3F8F021 		str	r2, [r3, #496]
1020:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1021:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1929              		.loc 1 1021 0
 1930 0054 4FF00003 		mov	r3, #0
 1931 0058 7B61     		str	r3, [r7, #20]
 1932 005a 02E0     		b	.L96
 1933              	.L97:
1022:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1023:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
1024:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1025:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1934              		.loc 1 1025 0
 1935 005c 4FF00203 		mov	r3, #2
 1936 0060 7B61     		str	r3, [r7, #20]
 1937              	.L96:
1026:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1027:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1028:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1029:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
1030:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1031:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1032:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1033:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1034:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1938              		.loc 1 1034 0
 1939 0062 7B69     		ldr	r3, [r7, #20]
1035:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1940              		.loc 1 1035 0
 1941 0064 1846     		mov	r0, r3
 1942 0066 07F11C07 		add	r7, r7, #28
 1943 006a BD46     		mov	sp, r7
 1944 006c 80BC     		pop	{r7}
 1945 006e 7047     		bx	lr
 1946              		.cfi_endproc
 1947              	.LFE140:
 1949              		.text
 1950              	.Letext0:
 1951              		.file 2 "c:\\dave-3.1.10\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../ar
 1952              		.file 3 "C:\\DAVE-3.1.10\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.
 1953              		.file 4 "C:\\DAVE_3.1.10_Workspace\\ADC001_Example1\\Dave\\Generated\\inc\\DAVESupport/../../inc/L
 1954              		.file 5 "C:\\DAVE_3.1.10_Workspace\\ADC001_Example1\\Dave\\Generated\\inc\\DAVESupport/../../inc/A
 1955              		.file 6 "C:\\DAVE-3.1.10\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1956              		.file 7 "C:\\DAVE_3.1.10_Workspace\\ADC001_Example1\\Dave\\Generated\\inc\\DAVESupport/../../inc/A
DEFINED SYMBOLS
                            *ABS*:00000000 ADCGroup001.c
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:20     .text.ADCGROUP001_Init:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:25     .text.ADCGROUP001_Init:00000000 ADCGROUP001_Init
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:67     .text.ADCGROUP001_lInit:00000000 ADCGROUP001_lInit
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:370    .text.ADCGROUP001_GetStartupCalStatus:00000000 ADCGROUP001_GetStartupCalStatus
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:62     .text.ADCGROUP001_lInit:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:278    .text.ADCGROUP001_Deinit:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:283    .text.ADCGROUP001_Deinit:00000000 ADCGROUP001_Deinit
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:365    .text.ADCGROUP001_GetStartupCalStatus:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:415    .text.ADCGROUP001_SetGroupBound0:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:420    .text.ADCGROUP001_SetGroupBound0:00000000 ADCGROUP001_SetGroupBound0
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:489    .text.ADCGROUP001_SetGroupBound1:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:494    .text.ADCGROUP001_SetGroupBound1:00000000 ADCGROUP001_SetGroupBound1
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:565    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:570    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 ADCGROUP001_ActiveGroupServiceRequestNode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:647    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:652    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 ADCGROUP001_DeActiveGroupServiceRequestNode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:720    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:725    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 ADCGROUP001_ActiveSharedServiceRequestNode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:804    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:809    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 ADCGROUP001_DeActiveSharedServiceRequestNode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:878    .text.ADCGROUP001_EMUXStartSelection:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:883    .text.ADCGROUP001_EMUXStartSelection:00000000 ADCGROUP001_EMUXStartSelection
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:950    .text.ADCGROUP001_GetEMUXStartSelection:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:955    .text.ADCGROUP001_GetEMUXStartSelection:00000000 ADCGROUP001_GetEMUXStartSelection
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1020   .text.ADCGROUP001_SetEMUXChannelSelect:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1025   .text.ADCGROUP001_SetEMUXChannelSelect:00000000 ADCGROUP001_SetEMUXChannelSelect
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1093   .text.ADCGROUP001_SetEMUXMode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1098   .text.ADCGROUP001_SetEMUXMode:00000000 ADCGROUP001_SetEMUXMode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1177   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1182   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 ADCGROUP001_SetEMUXCodeScheme
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1264   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1269   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 ADCGROUP001_SetGroupClass0SampleTime
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1336   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1341   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 ADCGROUP001_SetGroupClass1SampleTime
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1408   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1413   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass0EmuxSampleTime
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1481   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1486   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass1EmuxSampleTime
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1554   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1559   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 ADCGROUP001_SetGroupClass0ConvMode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1632   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1637   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 ADCGROUP001_SetGroupClass1ConvMode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1710   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1715   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 ADCGROUP001_SetGroupClass0EmuxConvMode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1788   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1793   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 ADCGROUP001_SetGroupClass1EmuxConvMode
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1866   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 $t
C:\Users\ThomasJu\AppData\Local\Temp\ccS73Wog.s:1871   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 ADCGROUP001_SetEMUXSampleTimeControl
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e9ce17ad1e95e60f9b7364a48ad252e4
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.6a563b5a45d32cec26f5b514b510065d
                           .group:00000000 wm4.NVIC002_Conf.h.62.36db970f6153b5da024017b80c7220d8
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.ADCGROUP001.h.64.1a67eefa54ffa3e3b9429093742c873c
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADCGROUP001_Handle0
ADCGLOB001_StartUpCalibrationInit
