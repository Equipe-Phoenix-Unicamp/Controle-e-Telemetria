   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.data
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.word	turbo
  26              		.global	l_dois
  27              		.bss
  28              		.align	2
  31              	l_dois:
  32 0000 00000000 		.space	4
  33              		.global	l_tres
  34              		.align	2
  37              	l_tres:
  38 0004 00000000 		.space	4
  39              		.global	r_um
  40              		.data
  41              		.align	2
  44              	r_um:
  45 0004 00000000 		.word	turbo
  46              		.global	r_dois
  47              		.bss
  48              		.align	2
  51              	r_dois:
  52 0008 00000000 		.space	4
  53              		.global	r_tres
  54              		.align	2
  57              	r_tres:
  58 000c 00000000 		.space	4
  59              		.global	cross
  60              		.data
  61              		.align	2
  64              	cross:
  65 0008 00000000 		.word	flip
  66              		.global	sqr
  67              		.align	2
  70              	sqr:
  71 000c 00000000 		.word	changeMode
  72              		.global	triangle
  73              		.align	2
  76              	triangle:
  77 0010 00000000 		.word	changeMode
  78              		.global	circle
  79              		.align	2
  82              	circle:
  83 0014 00000000 		.word	changeMode
  84              		.global	left
  85              		.bss
  86              		.align	2
  89              	left:
  90 0010 00000000 		.space	4
  91              		.global	right
  92              		.align	2
  95              	right:
  96 0014 00000000 		.space	4
  97              		.global	up
  98              		.align	2
 101              	up:
 102 0018 00000000 		.space	4
 103              		.global	down
 104              		.align	2
 107              	down:
 108 001c 00000000 		.space	4
 109              		.global	start
 110              		.align	2
 113              	start:
 114 0020 00000000 		.space	4
 115              		.global	select
 116              		.align	2
 119              	select:
 120 0024 00000000 		.space	4
 121              		.global	l_um_state
 124              	l_um_state:
 125 0028 00       		.space	1
 126              		.global	l_dois_state
 129              	l_dois_state:
 130 0029 00       		.space	1
 131              		.global	l_tres_state
 134              	l_tres_state:
 135 002a 00       		.space	1
 136              		.global	r_um_state
 139              	r_um_state:
 140 002b 00       		.space	1
 141              		.global	r_dois_state
 144              	r_dois_state:
 145 002c 00       		.space	1
 146              		.global	r_tres_state
 149              	r_tres_state:
 150 002d 00       		.space	1
 151              		.global	cross_state
 154              	cross_state:
 155 002e 00       		.space	1
 156              		.global	sqr_state
 159              	sqr_state:
 160 002f 00       		.space	1
 161              		.global	triangle_state
 164              	triangle_state:
 165 0030 00       		.space	1
 166              		.global	circle_state
 169              	circle_state:
 170 0031 00       		.space	1
 171              		.global	left_state
 174              	left_state:
 175 0032 00       		.space	1
 176              		.global	right_state
 179              	right_state:
 180 0033 00       		.space	1
 181              		.global	up_state
 184              	up_state:
 185 0034 00       		.space	1
 186              		.global	down_state
 189              	down_state:
 190 0035 00       		.space	1
 191              		.global	start_state
 194              	start_state:
 195 0036 00       		.space	1
 196              		.global	select_state
 199              	select_state:
 200 0037 00       		.space	1
 201              		.global	l_um_state_before
 204              	l_um_state_before:
 205 0038 00       		.space	1
 206              		.global	l_dois_state_before
 209              	l_dois_state_before:
 210 0039 00       		.space	1
 211              		.global	l_tres_state_before
 214              	l_tres_state_before:
 215 003a 00       		.space	1
 216              		.global	r_um_state_before
 219              	r_um_state_before:
 220 003b 00       		.space	1
 221              		.global	r_dois_state_before
 224              	r_dois_state_before:
 225 003c 00       		.space	1
 226              		.global	r_tres_state_before
 229              	r_tres_state_before:
 230 003d 00       		.space	1
 231              		.global	cross_state_before
 234              	cross_state_before:
 235 003e 00       		.space	1
 236              		.global	sqr_state_before
 239              	sqr_state_before:
 240 003f 00       		.space	1
 241              		.global	triangle_state_before
 244              	triangle_state_before:
 245 0040 00       		.space	1
 246              		.global	circle_state_before
 249              	circle_state_before:
 250 0041 00       		.space	1
 251              		.global	left_state_before
 254              	left_state_before:
 255 0042 00       		.space	1
 256              		.global	right_state_before
 259              	right_state_before:
 260 0043 00       		.space	1
 261              		.global	up_state_before
 264              	up_state_before:
 265 0044 00       		.space	1
 266              		.global	down_state_before
 269              	down_state_before:
 270 0045 00       		.space	1
 271              		.global	start_state_before
 274              	start_state_before:
 275 0046 00       		.space	1
 276              		.global	select_state_before
 279              	select_state_before:
 280 0047 00       		.space	1
 281              		.comm	psxDado,24,4
 282              		.comm	configuration,15,4
 283              		.global	data_R
 284              		.data
 287              	data_R:
 288 0018 30       		.byte	48
 289              		.comm	data_E,5,4
 290              		.comm	psx_status,1,1
 291              		.global	flipped
 292              		.bss
 295              	flipped:
 296 0048 00       		.space	1
 297              		.comm	result,4,4
 298              		.comm	pwm_max,1,1
 299              		.global	mode
 300 0049 000000   		.data
 303              	mode:
 304 0019 02       		.byte	2
 305 001a 0000     		.section	.text.main,"ax",%progbits
 306              		.align	2
 307              		.global	main
 308              		.thumb
 309              		.thumb_func
 311              	main:
 312              	.LFB117:
 313              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     ****  BIT 0: BLAH2
  10:../Main.c     ****  BIT 1: BUZINA
  11:../Main.c     ****  BIT 2: ENABLE
  12:../Main.c     ****  BIT 3: ALBH2
  13:../Main.c     ****  BIT 4: BLAH1
  14:../Main.c     ****  BIT 5: ALBH1
  15:../Main.c     ****  */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 3 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 70
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_SEND 5
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0
  52:../Main.c     **** #define	BUZINA		1
  53:../Main.c     **** #define	ENABLE		2
  54:../Main.c     **** #define	ALBH2		3
  55:../Main.c     **** #define	BLAH1		4
  56:../Main.c     **** #define	ALBH1		5
  57:../Main.c     **** //Defines referentes ao transceptor
  58:../Main.c     **** #define CS	 	IO004_Handle1
  59:../Main.c     **** #define CLK1 	IO004_Handle2
  60:../Main.c     **** #define DATA 	IO004_Handle4
  61:../Main.c     **** #define DR1		IO004_Handle5
  62:../Main.c     **** #define CE 		IO004_Handle6
  63:../Main.c     **** //Defines referentes ao controle
  64:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  65:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  66:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  67:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  68:../Main.c     **** //Defines referentes aos delays do controle
  69:../Main.c     **** #define tempoInicio     300
  70:../Main.c     **** #define tempoClk        300
  71:../Main.c     **** #define tempoEntreByte  100
  72:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  73:../Main.c     **** #define LED1 IO004_Handle7
  74:../Main.c     **** #define LED2 IO004_Handle8
  75:../Main.c     **** //Defines dos botoes para realizar as callbacks
  76:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  77:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  78:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  79:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  80:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  81:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  82:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  83:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  84:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  85:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  86:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  87:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  88:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  89:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  90:../Main.c     **** #define START (psxDado[0] & (1<<3))
  91:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  92:../Main.c     **** 
  93:../Main.c     **** 
  94:../Main.c     **** 
  95:../Main.c     **** //Defines referentes a testes de locomocao
  96:../Main.c     **** #define LINEAR 	2
  97:../Main.c     **** #define DEGRAU 	0
  98:../Main.c     **** #define EXP	1
  99:../Main.c     **** 
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** /*********************INCLUDES**********************/
 102:../Main.c     **** /***************************************************/
 103:../Main.c     **** 
 104:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
 105:../Main.c     **** /***************************************************/
 106:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 107:../Main.c     **** /***************************************************/
 108:../Main.c     **** 
 109:../Main.c     **** void psxLeControle();
 110:../Main.c     **** int psxTrocaByte(int byteDado);
 111:../Main.c     **** int psxLeByte();
 112:../Main.c     **** void delay(long unsigned int i);
 113:../Main.c     **** void pulse_R();
 114:../Main.c     **** void configure_R();
 115:../Main.c     **** void configure_E();
 116:../Main.c     **** void write_E();
 117:../Main.c     **** void read_R();
 118:../Main.c     **** void delay(long unsigned int i);
 119:../Main.c     **** void printByteToInt(char a);
 120:../Main.c     **** void psxConfiguraControle();
 121:../Main.c     **** void psxEnterConfigMode();
 122:../Main.c     **** void psxExitConfigMode();
 123:../Main.c     **** void psxSetAnalogMode();
 124:../Main.c     **** void psxHandShake();
 125:../Main.c     **** void updateButtonStates();
 126:../Main.c     **** void flip(void);
 127:../Main.c     **** void turbo(void);
 128:../Main.c     **** void changeMode(char a_mode);
 129:../Main.c     **** 
 130:../Main.c     **** /***************************************************/
 131:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 132:../Main.c     **** /***************************************************/
 133:../Main.c     **** 
 134:../Main.c     **** void (*l_um)(void) = turbo;
 135:../Main.c     **** void (*l_dois)(void) = NULL;
 136:../Main.c     **** void (*l_tres)(void) = NULL;
 137:../Main.c     **** void (*r_um)(void) = turbo;
 138:../Main.c     **** void (*r_dois)(void) = NULL;
 139:../Main.c     **** void (*r_tres)(void) = NULL;
 140:../Main.c     **** void (*cross)(void) = flip;
 141:../Main.c     **** void (*sqr)(char m) = changeMode;
 142:../Main.c     **** void (*triangle)(char m) = changeMode;
 143:../Main.c     **** void (*circle)(char m) = changeMode;
 144:../Main.c     **** void (*left)(void) = NULL;
 145:../Main.c     **** void (*right)(void) = NULL;
 146:../Main.c     **** void (*up)(void) = NULL;
 147:../Main.c     **** void (*down)(void) = NULL;
 148:../Main.c     **** void (*start)(void) = NULL;
 149:../Main.c     **** void (*select)(void) = NULL;
 150:../Main.c     **** 
 151:../Main.c     **** //Variaveis de controle do joystick
 152:../Main.c     **** BOOLType l_um_state = 0;
 153:../Main.c     **** BOOLType l_dois_state = 0;
 154:../Main.c     **** BOOLType l_tres_state = 0;
 155:../Main.c     **** BOOLType r_um_state = 0;
 156:../Main.c     **** BOOLType r_dois_state = 0;
 157:../Main.c     **** BOOLType r_tres_state = 0;
 158:../Main.c     **** BOOLType cross_state = 0;
 159:../Main.c     **** BOOLType sqr_state = 0;
 160:../Main.c     **** BOOLType triangle_state = 0;
 161:../Main.c     **** BOOLType circle_state = 0;
 162:../Main.c     **** BOOLType left_state = 0;
 163:../Main.c     **** BOOLType right_state = 0;
 164:../Main.c     **** BOOLType up_state = 0;
 165:../Main.c     **** BOOLType down_state = 0;
 166:../Main.c     **** BOOLType start_state = 0;
 167:../Main.c     **** BOOLType select_state = 0;
 168:../Main.c     **** 
 169:../Main.c     **** BOOLType l_um_state_before = 0;
 170:../Main.c     **** BOOLType l_dois_state_before = 0;
 171:../Main.c     **** BOOLType l_tres_state_before = 0;
 172:../Main.c     **** BOOLType r_um_state_before = 0;
 173:../Main.c     **** BOOLType r_dois_state_before = 0;
 174:../Main.c     **** BOOLType r_tres_state_before = 0;
 175:../Main.c     **** BOOLType cross_state_before = 0;
 176:../Main.c     **** BOOLType sqr_state_before = 0;
 177:../Main.c     **** BOOLType triangle_state_before = 0;
 178:../Main.c     **** BOOLType circle_state_before = 0;
 179:../Main.c     **** BOOLType left_state_before = 0;
 180:../Main.c     **** BOOLType right_state_before = 0;
 181:../Main.c     **** BOOLType up_state_before = 0;
 182:../Main.c     **** BOOLType down_state_before = 0;
 183:../Main.c     **** BOOLType start_state_before = 0;
 184:../Main.c     **** BOOLType select_state_before = 0;
 185:../Main.c     **** 
 186:../Main.c     **** /***************************************************/
 187:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 188:../Main.c     **** /***************************************************/
 189:../Main.c     **** 
 190:../Main.c     **** int psxDado[6];
 191:../Main.c     **** char configuration[15];
 192:../Main.c     **** char data_R = '0';
 193:../Main.c     **** char data_E[BYTES_TO_SEND];
 194:../Main.c     **** uint8_t psx_status;
 195:../Main.c     **** /*Booleanos de controle para estados do robo*/
 196:../Main.c     **** BOOLType flipped = 0;
 197:../Main.c     **** ADC001_ResultHandleType result;
 198:../Main.c     **** uint8_t pwm_max;
 199:../Main.c     **** char mode = LINEAR;
 200:../Main.c     **** 
 201:../Main.c     **** /***************************************************/
 202:../Main.c     **** /***********************MAIN************************/
 203:../Main.c     **** /***************************************************/
 204:../Main.c     **** 
 205:../Main.c     **** int main(void) {
 314              		.loc 1 205 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 16
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0000 80B5     		push	{r7, lr}
 319              	.LCFI0:
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 84B0     		sub	sp, sp, #16
 324              	.LCFI1:
 325              		.cfi_def_cfa_offset 24
 326 0004 00AF     		add	r7, sp, #0
 327              	.LCFI2:
 328              		.cfi_def_cfa_register 7
 206:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 207:../Main.c     **** 	PORT0 ->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 329              		.loc 1 207 0
 330 0006 4FF40043 		mov	r3, #32768
 331 000a C4F60203 		movt	r3, 18434
 332 000e 4FF40042 		mov	r2, #32768
 333 0012 C4F60202 		movt	r2, 18434
 334 0016 526F     		ldr	r2, [r2, #116]
 335 0018 22F44042 		bic	r2, r2, #49152
 336 001c 5A67     		str	r2, [r3, #116]
 208:../Main.c     **** 	PORT0 ->HWSEL |= 0 << 14;
 337              		.loc 1 208 0
 338 001e 4FF40043 		mov	r3, #32768
 339 0022 C4F60203 		movt	r3, 18434
 340 0026 4FF40042 		mov	r2, #32768
 341 002a C4F60202 		movt	r2, 18434
 342 002e 526F     		ldr	r2, [r2, #116]
 343 0030 5A67     		str	r2, [r3, #116]
 209:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
 344              		.loc 1 209 0
 345 0032 FFF7FEFF 		bl	DAVE_Init
 210:../Main.c     **** 	//PORT0->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 211:../Main.c     **** 	//PORT0->HWSEL |= 0 << 14;
 212:../Main.c     **** 	/*Etapa de inicializacao*/
 213:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 346              		.loc 1 213 0
 347 0036 FFF7FEFF 		bl	configure_E
 214:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 215:../Main.c     **** 	//IO004_SetPin(LED2);
 216:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 217:../Main.c     **** 
 218:../Main.c     **** 	psxHandShake();
 348              		.loc 1 218 0
 349 003a FFF7FEFF 		bl	psxHandShake
 219:../Main.c     **** 	psxConfiguraControle();
 350              		.loc 1 219 0
 351 003e FFF7FEFF 		bl	psxConfiguraControle
 220:../Main.c     **** 	ADC001_GenerateLoadEvent(&ADC001_Handle0);
 352              		.loc 1 220 0
 353 0042 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 354 0046 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 355 004a FFF7FEFF 		bl	ADC001_GenerateLoadEvent
 221:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 356              		.loc 1 221 0
 357 004e 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 358 0052 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 359 0056 40F20001 		movw	r1, #:lower16:result
 360 005a C0F20001 		movt	r1, #:upper16:result
 361 005e FFF7FEFF 		bl	ADC001_GetResult
 362              	.L46:
 363              	.LBB4:
 222:../Main.c     **** 	/*Loop do controle*/
 223:../Main.c     **** 	while (1) {
 224:../Main.c     **** 		ADC001_GetResult(&ADC001_Handle0, &result);
 364              		.loc 1 224 0
 365 0062 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 366 0066 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 367 006a 40F20001 		movw	r1, #:lower16:result
 368 006e C0F20001 		movt	r1, #:upper16:result
 369 0072 FFF7FEFF 		bl	ADC001_GetResult
 225:../Main.c     **** 		pwm_max = PWM_LIM;
 370              		.loc 1 225 0
 371 0076 40F20003 		movw	r3, #:lower16:pwm_max
 372 007a C0F20003 		movt	r3, #:upper16:pwm_max
 373 007e 4FF04602 		mov	r2, #70
 374 0082 1A70     		strb	r2, [r3, #0]
 226:../Main.c     **** 		/*Inicializa o que sera mandado*/
 227:../Main.c     **** 		BOOLType blah2 = 1;
 375              		.loc 1 227 0
 376 0084 4FF00103 		mov	r3, #1
 377 0088 FB73     		strb	r3, [r7, #15]
 228:../Main.c     **** 		BOOLType buzina = 1;
 378              		.loc 1 228 0
 379 008a 4FF00103 		mov	r3, #1
 380 008e 7B72     		strb	r3, [r7, #9]
 229:../Main.c     **** 		BOOLType enable = 0;
 381              		.loc 1 229 0
 382 0090 4FF00003 		mov	r3, #0
 383 0094 3B72     		strb	r3, [r7, #8]
 230:../Main.c     **** 		BOOLType albh2 = 1;
 384              		.loc 1 230 0
 385 0096 4FF00103 		mov	r3, #1
 386 009a BB73     		strb	r3, [r7, #14]
 231:../Main.c     **** 		BOOLType blah1 = 1;
 387              		.loc 1 231 0
 388 009c 4FF00103 		mov	r3, #1
 389 00a0 7B73     		strb	r3, [r7, #13]
 232:../Main.c     **** 		BOOLType albh1 = 1;
 390              		.loc 1 232 0
 391 00a2 4FF00103 		mov	r3, #1
 392 00a6 3B73     		strb	r3, [r7, #12]
 233:../Main.c     **** 		int16_t pow1, pow2;
 234:../Main.c     **** 		/*Le controle*/
 235:../Main.c     **** 		psxLeControle();
 393              		.loc 1 235 0
 394 00a8 FFF7FEFF 		bl	psxLeControle
 236:../Main.c     **** 		if (psx_status != 140) //Nao ta analogico
 395              		.loc 1 236 0
 396 00ac 40F20003 		movw	r3, #:lower16:psx_status
 397 00b0 C0F20003 		movt	r3, #:upper16:psx_status
 398 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 399 00b6 8C2B     		cmp	r3, #140
 400 00b8 05D0     		beq	.L2
 237:../Main.c     **** 				{
 238:../Main.c     **** 			psxHandShake();
 401              		.loc 1 238 0
 402 00ba FFF7FEFF 		bl	psxHandShake
 239:../Main.c     **** 			psxConfiguraControle();
 403              		.loc 1 239 0
 404 00be FFF7FEFF 		bl	psxConfiguraControle
 240:../Main.c     **** 			continue;
 405              		.loc 1 240 0
 406 00c2 00BF     		nop
 407              	.LBE4:
 241:../Main.c     **** 		}
 242:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 243:../Main.c     **** 		if (START && start) {
 244:../Main.c     **** 			start_state = 1;
 245:../Main.c     **** 			start();
 246:../Main.c     **** 		}
 247:../Main.c     **** 		if (SELECT && select) {
 248:../Main.c     **** 			select_state = 1;
 249:../Main.c     **** 			select();
 250:../Main.c     **** 		}
 251:../Main.c     **** 		if (L_DOIS && l_dois) {
 252:../Main.c     **** 			l_dois_state = 1;
 253:../Main.c     **** 			l_dois();
 254:../Main.c     **** 		}
 255:../Main.c     **** 		if (L_UM && l_um) {
 256:../Main.c     **** 			l_um_state = 1;
 257:../Main.c     **** 			l_um();
 258:../Main.c     **** 		}
 259:../Main.c     **** 		if (L_TRES && l_tres) {
 260:../Main.c     **** 			l_tres_state = 1;
 261:../Main.c     **** 			l_tres();
 262:../Main.c     **** 		}
 263:../Main.c     **** 		if (R_UM && r_um) {
 264:../Main.c     **** 			r_um_state = 1;
 265:../Main.c     **** 			r_um();
 266:../Main.c     **** 		}
 267:../Main.c     **** 		if (R_DOIS && r_dois) {
 268:../Main.c     **** 			r_dois_state = 1;
 269:../Main.c     **** 			r_dois();
 270:../Main.c     **** 		}
 271:../Main.c     **** 		if (R_TRES && r_tres) {
 272:../Main.c     **** 			r_tres_state = 1;
 273:../Main.c     **** 			r_tres();
 274:../Main.c     **** 		}
 275:../Main.c     **** 		if (SQR && sqr) {
 276:../Main.c     **** 			sqr_state = 1;
 277:../Main.c     **** 			sqr(DEGRAU);
 278:../Main.c     **** //			changeMode(DEGRAU);
 279:../Main.c     **** 		}
 280:../Main.c     **** 		if (TRIANGLE && triangle) {
 281:../Main.c     **** 			triangle_state = 1;
 282:../Main.c     **** 			triangle(LINEAR);
 283:../Main.c     **** //			changeMode(LINEAR);
 284:../Main.c     **** 		}
 285:../Main.c     **** 		if (CIRCLE && circle) {
 286:../Main.c     **** 			circle_state = 1;
 287:../Main.c     **** 			circle(EXP);
 288:../Main.c     **** //			changeMode(EXP);
 289:../Main.c     **** 		}
 290:../Main.c     **** 		if (CROSS && cross) {
 291:../Main.c     **** 			cross_state = 1;
 292:../Main.c     **** 			cross();
 293:../Main.c     **** 		}
 294:../Main.c     **** 		if (LEFT && left) {
 295:../Main.c     **** 			left_state = 1;
 296:../Main.c     **** 			left();
 297:../Main.c     **** 		}
 298:../Main.c     **** 		if (RIGHT && right) {
 299:../Main.c     **** 			right_state = 1;
 300:../Main.c     **** 			right();
 301:../Main.c     **** 		}
 302:../Main.c     **** 		if (UP && up) {
 303:../Main.c     **** 			up_state = 1;
 304:../Main.c     **** 			up();
 305:../Main.c     **** 		}
 306:../Main.c     **** 		if (DOWN && down) {
 307:../Main.c     **** 			down_state = 1;
 308:../Main.c     **** 			down();
 309:../Main.c     **** 		}
 310:../Main.c     **** 
 311:../Main.c     **** 		//
 312:../Main.c     **** 
 313:../Main.c     **** 		data_E[0] = pwm_max;
 314:../Main.c     **** 		//if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar qua
 315:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 316:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 317:../Main.c     **** 		data_E[3] = 0;
 318:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 319:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 320:../Main.c     **** 		{
 321:../Main.c     **** 			if (pow1 < -30)
 322:../Main.c     **** 				albh2 = 0; //ok
 323:../Main.c     **** 			else if (pow1 > 30)
 324:../Main.c     **** 				blah2 = 0; //ok
 325:../Main.c     **** 			else {
 326:../Main.c     **** 				albh2 = 1;
 327:../Main.c     **** 				blah2 = 0;
 328:../Main.c     **** 			}
 329:../Main.c     **** 			if (pow2 < -30)
 330:../Main.c     **** 				albh1 = 0;
 331:../Main.c     **** 			else if (pow2 > 30)
 332:../Main.c     **** 				blah1 = 0;
 333:../Main.c     **** 			else {
 334:../Main.c     **** 				albh1 = 1;
 335:../Main.c     **** 				blah1 = 0;
 336:../Main.c     **** 			}
 337:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 338:../Main.c     **** 			if (temp > 255)
 339:../Main.c     **** 				temp = 255;
 340:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 341:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 342:../Main.c     **** 			if (temp > 255)
 343:../Main.c     **** 				temp = 255;
 344:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 345:../Main.c     **** 		} else {
 346:../Main.c     **** 			if (pow2 > 30)
 347:../Main.c     **** 				albh2 = 0; //ok
 348:../Main.c     **** 			else if (pow2 < -30)
 349:../Main.c     **** 				blah2 = 0; //ok
 350:../Main.c     **** 			else {
 351:../Main.c     **** 				albh2 = 1;
 352:../Main.c     **** 				blah2 = 0;
 353:../Main.c     **** 			}
 354:../Main.c     **** 			if (pow1 > 30)
 355:../Main.c     **** 				albh1 = 0;
 356:../Main.c     **** 			else if (pow1 < -30)
 357:../Main.c     **** 				blah1 = 0;
 358:../Main.c     **** 			else {
 359:../Main.c     **** 				albh1 = 1;
 360:../Main.c     **** 				blah1 = 0;
 361:../Main.c     **** 			}
 362:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 363:../Main.c     **** 			if (temp > 255)
 364:../Main.c     **** 				temp = 255;
 365:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 366:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 367:../Main.c     **** 			if (temp > 255)
 368:../Main.c     **** 				temp = 255;
 369:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 370:../Main.c     **** 		}
 371:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 372:../Main.c     **** 
 373:../Main.c     **** 		char data_0 = (mode & 1);
 374:../Main.c     **** 		char data_1 = ((mode >> 1) & 1);
 375:../Main.c     **** 
 376:../Main.c     **** //		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 377:../Main.c     **** //				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 378:../Main.c     **** //				| (buzina << BUZINA);
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 380:../Main.c     **** 						| (albh1 << ALBH1) | (albh2 << ALBH2) | (data_1 << ENABLE)
 381:../Main.c     **** 						| (data_0 << BUZINA);
 382:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 383:../Main.c     **** 
 384:../Main.c     **** 		write_E();
 385:../Main.c     **** 		updateButtonStates();
 386:../Main.c     **** 	}
 408              		.loc 1 386 0
 409 00c4 CDE7     		b	.L46
 410              	.L2:
 411              	.LBB5:
 243:../Main.c     **** 		if (START && start) {
 412              		.loc 1 243 0
 413 00c6 40F20003 		movw	r3, #:lower16:psxDado
 414 00ca C0F20003 		movt	r3, #:upper16:psxDado
 415 00ce 1B68     		ldr	r3, [r3, #0]
 416 00d0 03F00803 		and	r3, r3, #8
 417 00d4 002B     		cmp	r3, #0
 418 00d6 13D0     		beq	.L4
 243:../Main.c     **** 		if (START && start) {
 419              		.loc 1 243 0 is_stmt 0 discriminator 1
 420 00d8 40F20003 		movw	r3, #:lower16:start
 421 00dc C0F20003 		movt	r3, #:upper16:start
 422 00e0 1B68     		ldr	r3, [r3, #0]
 423 00e2 002B     		cmp	r3, #0
 424 00e4 0CD0     		beq	.L4
 244:../Main.c     **** 			start_state = 1;
 425              		.loc 1 244 0 is_stmt 1
 426 00e6 40F20003 		movw	r3, #:lower16:start_state
 427 00ea C0F20003 		movt	r3, #:upper16:start_state
 428 00ee 4FF00102 		mov	r2, #1
 429 00f2 1A70     		strb	r2, [r3, #0]
 245:../Main.c     **** 			start();
 430              		.loc 1 245 0
 431 00f4 40F20003 		movw	r3, #:lower16:start
 432 00f8 C0F20003 		movt	r3, #:upper16:start
 433 00fc 1B68     		ldr	r3, [r3, #0]
 434 00fe 9847     		blx	r3
 435              	.L4:
 247:../Main.c     **** 		if (SELECT && select) {
 436              		.loc 1 247 0
 437 0100 40F20003 		movw	r3, #:lower16:psxDado
 438 0104 C0F20003 		movt	r3, #:upper16:psxDado
 439 0108 1B68     		ldr	r3, [r3, #0]
 440 010a 03F00103 		and	r3, r3, #1
 441 010e 002B     		cmp	r3, #0
 442 0110 13D0     		beq	.L5
 247:../Main.c     **** 		if (SELECT && select) {
 443              		.loc 1 247 0 is_stmt 0 discriminator 1
 444 0112 40F20003 		movw	r3, #:lower16:select
 445 0116 C0F20003 		movt	r3, #:upper16:select
 446 011a 1B68     		ldr	r3, [r3, #0]
 447 011c 002B     		cmp	r3, #0
 448 011e 0CD0     		beq	.L5
 248:../Main.c     **** 			select_state = 1;
 449              		.loc 1 248 0 is_stmt 1
 450 0120 40F20003 		movw	r3, #:lower16:select_state
 451 0124 C0F20003 		movt	r3, #:upper16:select_state
 452 0128 4FF00102 		mov	r2, #1
 453 012c 1A70     		strb	r2, [r3, #0]
 249:../Main.c     **** 			select();
 454              		.loc 1 249 0
 455 012e 40F20003 		movw	r3, #:lower16:select
 456 0132 C0F20003 		movt	r3, #:upper16:select
 457 0136 1B68     		ldr	r3, [r3, #0]
 458 0138 9847     		blx	r3
 459              	.L5:
 251:../Main.c     **** 		if (L_DOIS && l_dois) {
 460              		.loc 1 251 0
 461 013a 40F20003 		movw	r3, #:lower16:psxDado
 462 013e C0F20003 		movt	r3, #:upper16:psxDado
 463 0142 5B68     		ldr	r3, [r3, #4]
 464 0144 03F00103 		and	r3, r3, #1
 465 0148 002B     		cmp	r3, #0
 466 014a 13D0     		beq	.L6
 251:../Main.c     **** 		if (L_DOIS && l_dois) {
 467              		.loc 1 251 0 is_stmt 0 discriminator 1
 468 014c 40F20003 		movw	r3, #:lower16:l_dois
 469 0150 C0F20003 		movt	r3, #:upper16:l_dois
 470 0154 1B68     		ldr	r3, [r3, #0]
 471 0156 002B     		cmp	r3, #0
 472 0158 0CD0     		beq	.L6
 252:../Main.c     **** 			l_dois_state = 1;
 473              		.loc 1 252 0 is_stmt 1
 474 015a 40F20003 		movw	r3, #:lower16:l_dois_state
 475 015e C0F20003 		movt	r3, #:upper16:l_dois_state
 476 0162 4FF00102 		mov	r2, #1
 477 0166 1A70     		strb	r2, [r3, #0]
 253:../Main.c     **** 			l_dois();
 478              		.loc 1 253 0
 479 0168 40F20003 		movw	r3, #:lower16:l_dois
 480 016c C0F20003 		movt	r3, #:upper16:l_dois
 481 0170 1B68     		ldr	r3, [r3, #0]
 482 0172 9847     		blx	r3
 483              	.L6:
 255:../Main.c     **** 		if (L_UM && l_um) {
 484              		.loc 1 255 0
 485 0174 40F20003 		movw	r3, #:lower16:psxDado
 486 0178 C0F20003 		movt	r3, #:upper16:psxDado
 487 017c 5B68     		ldr	r3, [r3, #4]
 488 017e 03F00403 		and	r3, r3, #4
 489 0182 002B     		cmp	r3, #0
 490 0184 13D0     		beq	.L7
 255:../Main.c     **** 		if (L_UM && l_um) {
 491              		.loc 1 255 0 is_stmt 0 discriminator 1
 492 0186 40F20003 		movw	r3, #:lower16:l_um
 493 018a C0F20003 		movt	r3, #:upper16:l_um
 494 018e 1B68     		ldr	r3, [r3, #0]
 495 0190 002B     		cmp	r3, #0
 496 0192 0CD0     		beq	.L7
 256:../Main.c     **** 			l_um_state = 1;
 497              		.loc 1 256 0 is_stmt 1
 498 0194 40F20003 		movw	r3, #:lower16:l_um_state
 499 0198 C0F20003 		movt	r3, #:upper16:l_um_state
 500 019c 4FF00102 		mov	r2, #1
 501 01a0 1A70     		strb	r2, [r3, #0]
 257:../Main.c     **** 			l_um();
 502              		.loc 1 257 0
 503 01a2 40F20003 		movw	r3, #:lower16:l_um
 504 01a6 C0F20003 		movt	r3, #:upper16:l_um
 505 01aa 1B68     		ldr	r3, [r3, #0]
 506 01ac 9847     		blx	r3
 507              	.L7:
 259:../Main.c     **** 		if (L_TRES && l_tres) {
 508              		.loc 1 259 0
 509 01ae 40F20003 		movw	r3, #:lower16:psxDado
 510 01b2 C0F20003 		movt	r3, #:upper16:psxDado
 511 01b6 1B68     		ldr	r3, [r3, #0]
 512 01b8 03F00403 		and	r3, r3, #4
 513 01bc 002B     		cmp	r3, #0
 514 01be 13D0     		beq	.L8
 259:../Main.c     **** 		if (L_TRES && l_tres) {
 515              		.loc 1 259 0 is_stmt 0 discriminator 1
 516 01c0 40F20003 		movw	r3, #:lower16:l_tres
 517 01c4 C0F20003 		movt	r3, #:upper16:l_tres
 518 01c8 1B68     		ldr	r3, [r3, #0]
 519 01ca 002B     		cmp	r3, #0
 520 01cc 0CD0     		beq	.L8
 260:../Main.c     **** 			l_tres_state = 1;
 521              		.loc 1 260 0 is_stmt 1
 522 01ce 40F20003 		movw	r3, #:lower16:l_tres_state
 523 01d2 C0F20003 		movt	r3, #:upper16:l_tres_state
 524 01d6 4FF00102 		mov	r2, #1
 525 01da 1A70     		strb	r2, [r3, #0]
 261:../Main.c     **** 			l_tres();
 526              		.loc 1 261 0
 527 01dc 40F20003 		movw	r3, #:lower16:l_tres
 528 01e0 C0F20003 		movt	r3, #:upper16:l_tres
 529 01e4 1B68     		ldr	r3, [r3, #0]
 530 01e6 9847     		blx	r3
 531              	.L8:
 263:../Main.c     **** 		if (R_UM && r_um) {
 532              		.loc 1 263 0
 533 01e8 40F20003 		movw	r3, #:lower16:psxDado
 534 01ec C0F20003 		movt	r3, #:upper16:psxDado
 535 01f0 5B68     		ldr	r3, [r3, #4]
 536 01f2 03F00803 		and	r3, r3, #8
 537 01f6 002B     		cmp	r3, #0
 538 01f8 13D0     		beq	.L9
 263:../Main.c     **** 		if (R_UM && r_um) {
 539              		.loc 1 263 0 is_stmt 0 discriminator 1
 540 01fa 40F20003 		movw	r3, #:lower16:r_um
 541 01fe C0F20003 		movt	r3, #:upper16:r_um
 542 0202 1B68     		ldr	r3, [r3, #0]
 543 0204 002B     		cmp	r3, #0
 544 0206 0CD0     		beq	.L9
 264:../Main.c     **** 			r_um_state = 1;
 545              		.loc 1 264 0 is_stmt 1
 546 0208 40F20003 		movw	r3, #:lower16:r_um_state
 547 020c C0F20003 		movt	r3, #:upper16:r_um_state
 548 0210 4FF00102 		mov	r2, #1
 549 0214 1A70     		strb	r2, [r3, #0]
 265:../Main.c     **** 			r_um();
 550              		.loc 1 265 0
 551 0216 40F20003 		movw	r3, #:lower16:r_um
 552 021a C0F20003 		movt	r3, #:upper16:r_um
 553 021e 1B68     		ldr	r3, [r3, #0]
 554 0220 9847     		blx	r3
 555              	.L9:
 267:../Main.c     **** 		if (R_DOIS && r_dois) {
 556              		.loc 1 267 0
 557 0222 40F20003 		movw	r3, #:lower16:psxDado
 558 0226 C0F20003 		movt	r3, #:upper16:psxDado
 559 022a 5B68     		ldr	r3, [r3, #4]
 560 022c 03F00203 		and	r3, r3, #2
 561 0230 002B     		cmp	r3, #0
 562 0232 13D0     		beq	.L10
 267:../Main.c     **** 		if (R_DOIS && r_dois) {
 563              		.loc 1 267 0 is_stmt 0 discriminator 1
 564 0234 40F20003 		movw	r3, #:lower16:r_dois
 565 0238 C0F20003 		movt	r3, #:upper16:r_dois
 566 023c 1B68     		ldr	r3, [r3, #0]
 567 023e 002B     		cmp	r3, #0
 568 0240 0CD0     		beq	.L10
 268:../Main.c     **** 			r_dois_state = 1;
 569              		.loc 1 268 0 is_stmt 1
 570 0242 40F20003 		movw	r3, #:lower16:r_dois_state
 571 0246 C0F20003 		movt	r3, #:upper16:r_dois_state
 572 024a 4FF00102 		mov	r2, #1
 573 024e 1A70     		strb	r2, [r3, #0]
 269:../Main.c     **** 			r_dois();
 574              		.loc 1 269 0
 575 0250 40F20003 		movw	r3, #:lower16:r_dois
 576 0254 C0F20003 		movt	r3, #:upper16:r_dois
 577 0258 1B68     		ldr	r3, [r3, #0]
 578 025a 9847     		blx	r3
 579              	.L10:
 271:../Main.c     **** 		if (R_TRES && r_tres) {
 580              		.loc 1 271 0
 581 025c 40F20003 		movw	r3, #:lower16:psxDado
 582 0260 C0F20003 		movt	r3, #:upper16:psxDado
 583 0264 1B68     		ldr	r3, [r3, #0]
 584 0266 03F00203 		and	r3, r3, #2
 585 026a 002B     		cmp	r3, #0
 586 026c 13D0     		beq	.L11
 271:../Main.c     **** 		if (R_TRES && r_tres) {
 587              		.loc 1 271 0 is_stmt 0 discriminator 1
 588 026e 40F20003 		movw	r3, #:lower16:r_tres
 589 0272 C0F20003 		movt	r3, #:upper16:r_tres
 590 0276 1B68     		ldr	r3, [r3, #0]
 591 0278 002B     		cmp	r3, #0
 592 027a 0CD0     		beq	.L11
 272:../Main.c     **** 			r_tres_state = 1;
 593              		.loc 1 272 0 is_stmt 1
 594 027c 40F20003 		movw	r3, #:lower16:r_tres_state
 595 0280 C0F20003 		movt	r3, #:upper16:r_tres_state
 596 0284 4FF00102 		mov	r2, #1
 597 0288 1A70     		strb	r2, [r3, #0]
 273:../Main.c     **** 			r_tres();
 598              		.loc 1 273 0
 599 028a 40F20003 		movw	r3, #:lower16:r_tres
 600 028e C0F20003 		movt	r3, #:upper16:r_tres
 601 0292 1B68     		ldr	r3, [r3, #0]
 602 0294 9847     		blx	r3
 603              	.L11:
 275:../Main.c     **** 		if (SQR && sqr) {
 604              		.loc 1 275 0
 605 0296 40F20003 		movw	r3, #:lower16:psxDado
 606 029a C0F20003 		movt	r3, #:upper16:psxDado
 607 029e 5B68     		ldr	r3, [r3, #4]
 608 02a0 03F08003 		and	r3, r3, #128
 609 02a4 002B     		cmp	r3, #0
 610 02a6 15D0     		beq	.L12
 275:../Main.c     **** 		if (SQR && sqr) {
 611              		.loc 1 275 0 is_stmt 0 discriminator 1
 612 02a8 40F20003 		movw	r3, #:lower16:sqr
 613 02ac C0F20003 		movt	r3, #:upper16:sqr
 614 02b0 1B68     		ldr	r3, [r3, #0]
 615 02b2 002B     		cmp	r3, #0
 616 02b4 0ED0     		beq	.L12
 276:../Main.c     **** 			sqr_state = 1;
 617              		.loc 1 276 0 is_stmt 1
 618 02b6 40F20003 		movw	r3, #:lower16:sqr_state
 619 02ba C0F20003 		movt	r3, #:upper16:sqr_state
 620 02be 4FF00102 		mov	r2, #1
 621 02c2 1A70     		strb	r2, [r3, #0]
 277:../Main.c     **** 			sqr(DEGRAU);
 622              		.loc 1 277 0
 623 02c4 40F20003 		movw	r3, #:lower16:sqr
 624 02c8 C0F20003 		movt	r3, #:upper16:sqr
 625 02cc 1B68     		ldr	r3, [r3, #0]
 626 02ce 4FF00000 		mov	r0, #0
 627 02d2 9847     		blx	r3
 628              	.L12:
 280:../Main.c     **** 		if (TRIANGLE && triangle) {
 629              		.loc 1 280 0
 630 02d4 40F20003 		movw	r3, #:lower16:psxDado
 631 02d8 C0F20003 		movt	r3, #:upper16:psxDado
 632 02dc 5B68     		ldr	r3, [r3, #4]
 633 02de 03F01003 		and	r3, r3, #16
 634 02e2 002B     		cmp	r3, #0
 635 02e4 15D0     		beq	.L13
 280:../Main.c     **** 		if (TRIANGLE && triangle) {
 636              		.loc 1 280 0 is_stmt 0 discriminator 1
 637 02e6 40F20003 		movw	r3, #:lower16:triangle
 638 02ea C0F20003 		movt	r3, #:upper16:triangle
 639 02ee 1B68     		ldr	r3, [r3, #0]
 640 02f0 002B     		cmp	r3, #0
 641 02f2 0ED0     		beq	.L13
 281:../Main.c     **** 			triangle_state = 1;
 642              		.loc 1 281 0 is_stmt 1
 643 02f4 40F20003 		movw	r3, #:lower16:triangle_state
 644 02f8 C0F20003 		movt	r3, #:upper16:triangle_state
 645 02fc 4FF00102 		mov	r2, #1
 646 0300 1A70     		strb	r2, [r3, #0]
 282:../Main.c     **** 			triangle(LINEAR);
 647              		.loc 1 282 0
 648 0302 40F20003 		movw	r3, #:lower16:triangle
 649 0306 C0F20003 		movt	r3, #:upper16:triangle
 650 030a 1B68     		ldr	r3, [r3, #0]
 651 030c 4FF00200 		mov	r0, #2
 652 0310 9847     		blx	r3
 653              	.L13:
 285:../Main.c     **** 		if (CIRCLE && circle) {
 654              		.loc 1 285 0
 655 0312 40F20003 		movw	r3, #:lower16:psxDado
 656 0316 C0F20003 		movt	r3, #:upper16:psxDado
 657 031a 5B68     		ldr	r3, [r3, #4]
 658 031c 03F02003 		and	r3, r3, #32
 659 0320 002B     		cmp	r3, #0
 660 0322 15D0     		beq	.L14
 285:../Main.c     **** 		if (CIRCLE && circle) {
 661              		.loc 1 285 0 is_stmt 0 discriminator 1
 662 0324 40F20003 		movw	r3, #:lower16:circle
 663 0328 C0F20003 		movt	r3, #:upper16:circle
 664 032c 1B68     		ldr	r3, [r3, #0]
 665 032e 002B     		cmp	r3, #0
 666 0330 0ED0     		beq	.L14
 286:../Main.c     **** 			circle_state = 1;
 667              		.loc 1 286 0 is_stmt 1
 668 0332 40F20003 		movw	r3, #:lower16:circle_state
 669 0336 C0F20003 		movt	r3, #:upper16:circle_state
 670 033a 4FF00102 		mov	r2, #1
 671 033e 1A70     		strb	r2, [r3, #0]
 287:../Main.c     **** 			circle(EXP);
 672              		.loc 1 287 0
 673 0340 40F20003 		movw	r3, #:lower16:circle
 674 0344 C0F20003 		movt	r3, #:upper16:circle
 675 0348 1B68     		ldr	r3, [r3, #0]
 676 034a 4FF00100 		mov	r0, #1
 677 034e 9847     		blx	r3
 678              	.L14:
 290:../Main.c     **** 		if (CROSS && cross) {
 679              		.loc 1 290 0
 680 0350 40F20003 		movw	r3, #:lower16:psxDado
 681 0354 C0F20003 		movt	r3, #:upper16:psxDado
 682 0358 5B68     		ldr	r3, [r3, #4]
 683 035a 03F04003 		and	r3, r3, #64
 684 035e 002B     		cmp	r3, #0
 685 0360 13D0     		beq	.L15
 290:../Main.c     **** 		if (CROSS && cross) {
 686              		.loc 1 290 0 is_stmt 0 discriminator 1
 687 0362 40F20003 		movw	r3, #:lower16:cross
 688 0366 C0F20003 		movt	r3, #:upper16:cross
 689 036a 1B68     		ldr	r3, [r3, #0]
 690 036c 002B     		cmp	r3, #0
 691 036e 0CD0     		beq	.L15
 291:../Main.c     **** 			cross_state = 1;
 692              		.loc 1 291 0 is_stmt 1
 693 0370 40F20003 		movw	r3, #:lower16:cross_state
 694 0374 C0F20003 		movt	r3, #:upper16:cross_state
 695 0378 4FF00102 		mov	r2, #1
 696 037c 1A70     		strb	r2, [r3, #0]
 292:../Main.c     **** 			cross();
 697              		.loc 1 292 0
 698 037e 40F20003 		movw	r3, #:lower16:cross
 699 0382 C0F20003 		movt	r3, #:upper16:cross
 700 0386 1B68     		ldr	r3, [r3, #0]
 701 0388 9847     		blx	r3
 702              	.L15:
 294:../Main.c     **** 		if (LEFT && left) {
 703              		.loc 1 294 0
 704 038a 40F20003 		movw	r3, #:lower16:psxDado
 705 038e C0F20003 		movt	r3, #:upper16:psxDado
 706 0392 1B68     		ldr	r3, [r3, #0]
 707 0394 03F08003 		and	r3, r3, #128
 708 0398 002B     		cmp	r3, #0
 709 039a 13D0     		beq	.L16
 294:../Main.c     **** 		if (LEFT && left) {
 710              		.loc 1 294 0 is_stmt 0 discriminator 1
 711 039c 40F20003 		movw	r3, #:lower16:left
 712 03a0 C0F20003 		movt	r3, #:upper16:left
 713 03a4 1B68     		ldr	r3, [r3, #0]
 714 03a6 002B     		cmp	r3, #0
 715 03a8 0CD0     		beq	.L16
 295:../Main.c     **** 			left_state = 1;
 716              		.loc 1 295 0 is_stmt 1
 717 03aa 40F20003 		movw	r3, #:lower16:left_state
 718 03ae C0F20003 		movt	r3, #:upper16:left_state
 719 03b2 4FF00102 		mov	r2, #1
 720 03b6 1A70     		strb	r2, [r3, #0]
 296:../Main.c     **** 			left();
 721              		.loc 1 296 0
 722 03b8 40F20003 		movw	r3, #:lower16:left
 723 03bc C0F20003 		movt	r3, #:upper16:left
 724 03c0 1B68     		ldr	r3, [r3, #0]
 725 03c2 9847     		blx	r3
 726              	.L16:
 298:../Main.c     **** 		if (RIGHT && right) {
 727              		.loc 1 298 0
 728 03c4 40F20003 		movw	r3, #:lower16:psxDado
 729 03c8 C0F20003 		movt	r3, #:upper16:psxDado
 730 03cc 1B68     		ldr	r3, [r3, #0]
 731 03ce 03F02003 		and	r3, r3, #32
 732 03d2 002B     		cmp	r3, #0
 733 03d4 13D0     		beq	.L17
 298:../Main.c     **** 		if (RIGHT && right) {
 734              		.loc 1 298 0 is_stmt 0 discriminator 1
 735 03d6 40F20003 		movw	r3, #:lower16:right
 736 03da C0F20003 		movt	r3, #:upper16:right
 737 03de 1B68     		ldr	r3, [r3, #0]
 738 03e0 002B     		cmp	r3, #0
 739 03e2 0CD0     		beq	.L17
 299:../Main.c     **** 			right_state = 1;
 740              		.loc 1 299 0 is_stmt 1
 741 03e4 40F20003 		movw	r3, #:lower16:right_state
 742 03e8 C0F20003 		movt	r3, #:upper16:right_state
 743 03ec 4FF00102 		mov	r2, #1
 744 03f0 1A70     		strb	r2, [r3, #0]
 300:../Main.c     **** 			right();
 745              		.loc 1 300 0
 746 03f2 40F20003 		movw	r3, #:lower16:right
 747 03f6 C0F20003 		movt	r3, #:upper16:right
 748 03fa 1B68     		ldr	r3, [r3, #0]
 749 03fc 9847     		blx	r3
 750              	.L17:
 302:../Main.c     **** 		if (UP && up) {
 751              		.loc 1 302 0
 752 03fe 40F20003 		movw	r3, #:lower16:psxDado
 753 0402 C0F20003 		movt	r3, #:upper16:psxDado
 754 0406 1B68     		ldr	r3, [r3, #0]
 755 0408 03F01003 		and	r3, r3, #16
 756 040c 002B     		cmp	r3, #0
 757 040e 13D0     		beq	.L18
 302:../Main.c     **** 		if (UP && up) {
 758              		.loc 1 302 0 is_stmt 0 discriminator 1
 759 0410 40F20003 		movw	r3, #:lower16:up
 760 0414 C0F20003 		movt	r3, #:upper16:up
 761 0418 1B68     		ldr	r3, [r3, #0]
 762 041a 002B     		cmp	r3, #0
 763 041c 0CD0     		beq	.L18
 303:../Main.c     **** 			up_state = 1;
 764              		.loc 1 303 0 is_stmt 1
 765 041e 40F20003 		movw	r3, #:lower16:up_state
 766 0422 C0F20003 		movt	r3, #:upper16:up_state
 767 0426 4FF00102 		mov	r2, #1
 768 042a 1A70     		strb	r2, [r3, #0]
 304:../Main.c     **** 			up();
 769              		.loc 1 304 0
 770 042c 40F20003 		movw	r3, #:lower16:up
 771 0430 C0F20003 		movt	r3, #:upper16:up
 772 0434 1B68     		ldr	r3, [r3, #0]
 773 0436 9847     		blx	r3
 774              	.L18:
 306:../Main.c     **** 		if (DOWN && down) {
 775              		.loc 1 306 0
 776 0438 40F20003 		movw	r3, #:lower16:psxDado
 777 043c C0F20003 		movt	r3, #:upper16:psxDado
 778 0440 1B68     		ldr	r3, [r3, #0]
 779 0442 03F04003 		and	r3, r3, #64
 780 0446 002B     		cmp	r3, #0
 781 0448 13D0     		beq	.L19
 306:../Main.c     **** 		if (DOWN && down) {
 782              		.loc 1 306 0 is_stmt 0 discriminator 1
 783 044a 40F20003 		movw	r3, #:lower16:down
 784 044e C0F20003 		movt	r3, #:upper16:down
 785 0452 1B68     		ldr	r3, [r3, #0]
 786 0454 002B     		cmp	r3, #0
 787 0456 0CD0     		beq	.L19
 307:../Main.c     **** 			down_state = 1;
 788              		.loc 1 307 0 is_stmt 1
 789 0458 40F20003 		movw	r3, #:lower16:down_state
 790 045c C0F20003 		movt	r3, #:upper16:down_state
 791 0460 4FF00102 		mov	r2, #1
 792 0464 1A70     		strb	r2, [r3, #0]
 308:../Main.c     **** 			down();
 793              		.loc 1 308 0
 794 0466 40F20003 		movw	r3, #:lower16:down
 795 046a C0F20003 		movt	r3, #:upper16:down
 796 046e 1B68     		ldr	r3, [r3, #0]
 797 0470 9847     		blx	r3
 798              	.L19:
 313:../Main.c     **** 		data_E[0] = pwm_max;
 799              		.loc 1 313 0
 800 0472 40F20003 		movw	r3, #:lower16:pwm_max
 801 0476 C0F20003 		movt	r3, #:upper16:pwm_max
 802 047a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 803 047c 40F20003 		movw	r3, #:lower16:data_E
 804 0480 C0F20003 		movt	r3, #:upper16:data_E
 805 0484 1A70     		strb	r2, [r3, #0]
 315:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 806              		.loc 1 315 0
 807 0486 40F20003 		movw	r3, #:lower16:psxDado
 808 048a C0F20003 		movt	r3, #:upper16:psxDado
 809 048e 5B69     		ldr	r3, [r3, #20]
 810 0490 9BB2     		uxth	r3, r3
 811 0492 A3F17F03 		sub	r3, r3, #127
 812 0496 9BB2     		uxth	r3, r3
 813 0498 FB80     		strh	r3, [r7, #6]	@ movhi
 316:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 814              		.loc 1 316 0
 815 049a 40F20003 		movw	r3, #:lower16:psxDado
 816 049e C0F20003 		movt	r3, #:upper16:psxDado
 817 04a2 DB68     		ldr	r3, [r3, #12]
 818 04a4 9BB2     		uxth	r3, r3
 819 04a6 A3F17F03 		sub	r3, r3, #127
 820 04aa 9BB2     		uxth	r3, r3
 821 04ac BB80     		strh	r3, [r7, #4]	@ movhi
 317:../Main.c     **** 		data_E[3] = 0;
 822              		.loc 1 317 0
 823 04ae 40F20003 		movw	r3, #:lower16:data_E
 824 04b2 C0F20003 		movt	r3, #:upper16:data_E
 825 04b6 4FF00002 		mov	r2, #0
 826 04ba DA70     		strb	r2, [r3, #3]
 319:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 827              		.loc 1 319 0
 828 04bc 40F20003 		movw	r3, #:lower16:flipped
 829 04c0 C0F20003 		movt	r3, #:upper16:flipped
 830 04c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 831 04c6 002B     		cmp	r3, #0
 832 04c8 40F09980 		bne	.L20
 321:../Main.c     **** 			if (pow1 < -30)
 833              		.loc 1 321 0
 834 04cc B7F90630 		ldrsh	r3, [r7, #6]
 835 04d0 13F11E0F 		cmn	r3, #30
 836 04d4 03DA     		bge	.L21
 322:../Main.c     **** 				albh2 = 0; //ok
 837              		.loc 1 322 0
 838 04d6 4FF00003 		mov	r3, #0
 839 04da BB73     		strb	r3, [r7, #14]
 840 04dc 0DE0     		b	.L22
 841              	.L21:
 323:../Main.c     **** 			else if (pow1 > 30)
 842              		.loc 1 323 0
 843 04de B7F90630 		ldrsh	r3, [r7, #6]
 844 04e2 1E2B     		cmp	r3, #30
 845 04e4 03DD     		ble	.L23
 324:../Main.c     **** 				blah2 = 0; //ok
 846              		.loc 1 324 0
 847 04e6 4FF00003 		mov	r3, #0
 848 04ea FB73     		strb	r3, [r7, #15]
 849 04ec 05E0     		b	.L22
 850              	.L23:
 326:../Main.c     **** 				albh2 = 1;
 851              		.loc 1 326 0
 852 04ee 4FF00103 		mov	r3, #1
 853 04f2 BB73     		strb	r3, [r7, #14]
 327:../Main.c     **** 				blah2 = 0;
 854              		.loc 1 327 0
 855 04f4 4FF00003 		mov	r3, #0
 856 04f8 FB73     		strb	r3, [r7, #15]
 857              	.L22:
 329:../Main.c     **** 			if (pow2 < -30)
 858              		.loc 1 329 0
 859 04fa B7F90430 		ldrsh	r3, [r7, #4]
 860 04fe 13F11E0F 		cmn	r3, #30
 861 0502 03DA     		bge	.L24
 330:../Main.c     **** 				albh1 = 0;
 862              		.loc 1 330 0
 863 0504 4FF00003 		mov	r3, #0
 864 0508 3B73     		strb	r3, [r7, #12]
 865 050a 0DE0     		b	.L25
 866              	.L24:
 331:../Main.c     **** 			else if (pow2 > 30)
 867              		.loc 1 331 0
 868 050c B7F90430 		ldrsh	r3, [r7, #4]
 869 0510 1E2B     		cmp	r3, #30
 870 0512 03DD     		ble	.L26
 332:../Main.c     **** 				blah1 = 0;
 871              		.loc 1 332 0
 872 0514 4FF00003 		mov	r3, #0
 873 0518 7B73     		strb	r3, [r7, #13]
 874 051a 05E0     		b	.L25
 875              	.L26:
 334:../Main.c     **** 				albh1 = 1;
 876              		.loc 1 334 0
 877 051c 4FF00103 		mov	r3, #1
 878 0520 3B73     		strb	r3, [r7, #12]
 335:../Main.c     **** 				blah1 = 0;
 879              		.loc 1 335 0
 880 0522 4FF00003 		mov	r3, #0
 881 0526 7B73     		strb	r3, [r7, #13]
 882              	.L25:
 337:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 883              		.loc 1 337 0
 884 0528 B7F90630 		ldrsh	r3, [r7, #6]
 885 052c 002B     		cmp	r3, #0
 886 052e 05DD     		ble	.L27
 337:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 887              		.loc 1 337 0 is_stmt 0 discriminator 1
 888 0530 FB88     		ldrh	r3, [r7, #6]
 889 0532 4FEA4303 		lsl	r3, r3, #1
 890 0536 9BB2     		uxth	r3, r3
 891 0538 9BB2     		uxth	r3, r3
 892 053a 08E0     		b	.L28
 893              	.L27:
 337:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 894              		.loc 1 337 0 discriminator 2
 895 053c FB88     		ldrh	r3, [r7, #6]
 896 053e 1A46     		mov	r2, r3	@ movhi
 897 0540 4FEAC232 		lsl	r2, r2, #15
 898 0544 D31A     		subs	r3, r2, r3
 899 0546 4FEA4303 		lsl	r3, r3, #1
 900 054a 9BB2     		uxth	r3, r3
 901 054c 9BB2     		uxth	r3, r3
 902              	.L28:
 337:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 903              		.loc 1 337 0 discriminator 3
 904 054e 7B81     		strh	r3, [r7, #10]	@ movhi
 338:../Main.c     **** 			if (temp > 255)
 905              		.loc 1 338 0 is_stmt 1 discriminator 3
 906 0550 B7F90A30 		ldrsh	r3, [r7, #10]
 907 0554 FF2B     		cmp	r3, #255
 908 0556 02DD     		ble	.L29
 339:../Main.c     **** 				temp = 255;
 909              		.loc 1 339 0
 910 0558 4FF0FF03 		mov	r3, #255
 911 055c 7B81     		strh	r3, [r7, #10]	@ movhi
 912              	.L29:
 340:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 913              		.loc 1 340 0
 914 055e B7F90A20 		ldrsh	r2, [r7, #10]
 915 0562 40F20003 		movw	r3, #:lower16:pwm_max
 916 0566 C0F20003 		movt	r3, #:upper16:pwm_max
 917 056a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 918 056c 03FB02F2 		mul	r2, r3, r2
 919 0570 48F21F53 		movw	r3, #34079
 920 0574 C5F2EB13 		movt	r3, 20971
 921 0578 83FB0213 		smull	r1, r3, r3, r2
 922 057c 4FEA6311 		asr	r1, r3, #5
 923 0580 4FEAE273 		asr	r3, r2, #31
 924 0584 CB1A     		subs	r3, r1, r3
 925 0586 DAB2     		uxtb	r2, r3
 926 0588 40F20003 		movw	r3, #:lower16:data_E
 927 058c C0F20003 		movt	r3, #:upper16:data_E
 928 0590 5A70     		strb	r2, [r3, #1]
 341:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 929              		.loc 1 341 0
 930 0592 B7F90430 		ldrsh	r3, [r7, #4]
 931 0596 002B     		cmp	r3, #0
 932 0598 05DD     		ble	.L30
 341:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 933              		.loc 1 341 0 is_stmt 0 discriminator 1
 934 059a BB88     		ldrh	r3, [r7, #4]
 935 059c 4FEA4303 		lsl	r3, r3, #1
 936 05a0 9BB2     		uxth	r3, r3
 937 05a2 9BB2     		uxth	r3, r3
 938 05a4 08E0     		b	.L31
 939              	.L30:
 341:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 940              		.loc 1 341 0 discriminator 2
 941 05a6 BB88     		ldrh	r3, [r7, #4]
 942 05a8 1A46     		mov	r2, r3	@ movhi
 943 05aa 4FEAC232 		lsl	r2, r2, #15
 944 05ae D31A     		subs	r3, r2, r3
 945 05b0 4FEA4303 		lsl	r3, r3, #1
 946 05b4 9BB2     		uxth	r3, r3
 947 05b6 9BB2     		uxth	r3, r3
 948              	.L31:
 341:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 949              		.loc 1 341 0 discriminator 3
 950 05b8 7B81     		strh	r3, [r7, #10]	@ movhi
 342:../Main.c     **** 			if (temp > 255)
 951              		.loc 1 342 0 is_stmt 1 discriminator 3
 952 05ba B7F90A30 		ldrsh	r3, [r7, #10]
 953 05be FF2B     		cmp	r3, #255
 954 05c0 02DD     		ble	.L32
 343:../Main.c     **** 				temp = 255;
 955              		.loc 1 343 0
 956 05c2 4FF0FF03 		mov	r3, #255
 957 05c6 7B81     		strh	r3, [r7, #10]	@ movhi
 958              	.L32:
 344:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 959              		.loc 1 344 0
 960 05c8 B7F90A20 		ldrsh	r2, [r7, #10]
 961 05cc 40F20003 		movw	r3, #:lower16:pwm_max
 962 05d0 C0F20003 		movt	r3, #:upper16:pwm_max
 963 05d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 964 05d6 03FB02F2 		mul	r2, r3, r2
 965 05da 48F21F53 		movw	r3, #34079
 966 05de C5F2EB13 		movt	r3, 20971
 967 05e2 83FB0213 		smull	r1, r3, r3, r2
 968 05e6 4FEA6311 		asr	r1, r3, #5
 969 05ea 4FEAE273 		asr	r3, r2, #31
 970 05ee CB1A     		subs	r3, r1, r3
 971 05f0 DAB2     		uxtb	r2, r3
 972 05f2 40F20003 		movw	r3, #:lower16:data_E
 973 05f6 C0F20003 		movt	r3, #:upper16:data_E
 974 05fa 9A70     		strb	r2, [r3, #2]
 975 05fc 97E0     		b	.L33
 976              	.L20:
 346:../Main.c     **** 			if (pow2 > 30)
 977              		.loc 1 346 0
 978 05fe B7F90430 		ldrsh	r3, [r7, #4]
 979 0602 1E2B     		cmp	r3, #30
 980 0604 03DD     		ble	.L34
 347:../Main.c     **** 				albh2 = 0; //ok
 981              		.loc 1 347 0
 982 0606 4FF00003 		mov	r3, #0
 983 060a BB73     		strb	r3, [r7, #14]
 984 060c 0EE0     		b	.L35
 985              	.L34:
 348:../Main.c     **** 			else if (pow2 < -30)
 986              		.loc 1 348 0
 987 060e B7F90430 		ldrsh	r3, [r7, #4]
 988 0612 13F11E0F 		cmn	r3, #30
 989 0616 03DA     		bge	.L36
 349:../Main.c     **** 				blah2 = 0; //ok
 990              		.loc 1 349 0
 991 0618 4FF00003 		mov	r3, #0
 992 061c FB73     		strb	r3, [r7, #15]
 993 061e 05E0     		b	.L35
 994              	.L36:
 351:../Main.c     **** 				albh2 = 1;
 995              		.loc 1 351 0
 996 0620 4FF00103 		mov	r3, #1
 997 0624 BB73     		strb	r3, [r7, #14]
 352:../Main.c     **** 				blah2 = 0;
 998              		.loc 1 352 0
 999 0626 4FF00003 		mov	r3, #0
 1000 062a FB73     		strb	r3, [r7, #15]
 1001              	.L35:
 354:../Main.c     **** 			if (pow1 > 30)
 1002              		.loc 1 354 0
 1003 062c B7F90630 		ldrsh	r3, [r7, #6]
 1004 0630 1E2B     		cmp	r3, #30
 1005 0632 03DD     		ble	.L37
 355:../Main.c     **** 				albh1 = 0;
 1006              		.loc 1 355 0
 1007 0634 4FF00003 		mov	r3, #0
 1008 0638 3B73     		strb	r3, [r7, #12]
 1009 063a 0EE0     		b	.L38
 1010              	.L37:
 356:../Main.c     **** 			else if (pow1 < -30)
 1011              		.loc 1 356 0
 1012 063c B7F90630 		ldrsh	r3, [r7, #6]
 1013 0640 13F11E0F 		cmn	r3, #30
 1014 0644 03DA     		bge	.L39
 357:../Main.c     **** 				blah1 = 0;
 1015              		.loc 1 357 0
 1016 0646 4FF00003 		mov	r3, #0
 1017 064a 7B73     		strb	r3, [r7, #13]
 1018 064c 05E0     		b	.L38
 1019              	.L39:
 359:../Main.c     **** 				albh1 = 1;
 1020              		.loc 1 359 0
 1021 064e 4FF00103 		mov	r3, #1
 1022 0652 3B73     		strb	r3, [r7, #12]
 360:../Main.c     **** 				blah1 = 0;
 1023              		.loc 1 360 0
 1024 0654 4FF00003 		mov	r3, #0
 1025 0658 7B73     		strb	r3, [r7, #13]
 1026              	.L38:
 362:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1027              		.loc 1 362 0
 1028 065a B7F90630 		ldrsh	r3, [r7, #6]
 1029 065e 002B     		cmp	r3, #0
 1030 0660 05DD     		ble	.L40
 362:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1031              		.loc 1 362 0 is_stmt 0 discriminator 1
 1032 0662 FB88     		ldrh	r3, [r7, #6]
 1033 0664 4FEA4303 		lsl	r3, r3, #1
 1034 0668 9BB2     		uxth	r3, r3
 1035 066a 9BB2     		uxth	r3, r3
 1036 066c 08E0     		b	.L41
 1037              	.L40:
 362:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1038              		.loc 1 362 0 discriminator 2
 1039 066e FB88     		ldrh	r3, [r7, #6]
 1040 0670 1A46     		mov	r2, r3	@ movhi
 1041 0672 4FEAC232 		lsl	r2, r2, #15
 1042 0676 D31A     		subs	r3, r2, r3
 1043 0678 4FEA4303 		lsl	r3, r3, #1
 1044 067c 9BB2     		uxth	r3, r3
 1045 067e 9BB2     		uxth	r3, r3
 1046              	.L41:
 362:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1047              		.loc 1 362 0 discriminator 3
 1048 0680 7B81     		strh	r3, [r7, #10]	@ movhi
 363:../Main.c     **** 			if (temp > 255)
 1049              		.loc 1 363 0 is_stmt 1 discriminator 3
 1050 0682 B7F90A30 		ldrsh	r3, [r7, #10]
 1051 0686 FF2B     		cmp	r3, #255
 1052 0688 02DD     		ble	.L42
 364:../Main.c     **** 				temp = 255;
 1053              		.loc 1 364 0
 1054 068a 4FF0FF03 		mov	r3, #255
 1055 068e 7B81     		strh	r3, [r7, #10]	@ movhi
 1056              	.L42:
 365:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 1057              		.loc 1 365 0
 1058 0690 B7F90A20 		ldrsh	r2, [r7, #10]
 1059 0694 40F20003 		movw	r3, #:lower16:pwm_max
 1060 0698 C0F20003 		movt	r3, #:upper16:pwm_max
 1061 069c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1062 069e 03FB02F2 		mul	r2, r3, r2
 1063 06a2 48F21F53 		movw	r3, #34079
 1064 06a6 C5F2EB13 		movt	r3, 20971
 1065 06aa 83FB0213 		smull	r1, r3, r3, r2
 1066 06ae 4FEA6311 		asr	r1, r3, #5
 1067 06b2 4FEAE273 		asr	r3, r2, #31
 1068 06b6 CB1A     		subs	r3, r1, r3
 1069 06b8 DAB2     		uxtb	r2, r3
 1070 06ba 40F20003 		movw	r3, #:lower16:data_E
 1071 06be C0F20003 		movt	r3, #:upper16:data_E
 1072 06c2 9A70     		strb	r2, [r3, #2]
 366:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1073              		.loc 1 366 0
 1074 06c4 B7F90430 		ldrsh	r3, [r7, #4]
 1075 06c8 002B     		cmp	r3, #0
 1076 06ca 05DD     		ble	.L43
 366:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1077              		.loc 1 366 0 is_stmt 0 discriminator 1
 1078 06cc BB88     		ldrh	r3, [r7, #4]
 1079 06ce 4FEA4303 		lsl	r3, r3, #1
 1080 06d2 9BB2     		uxth	r3, r3
 1081 06d4 9BB2     		uxth	r3, r3
 1082 06d6 08E0     		b	.L44
 1083              	.L43:
 366:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1084              		.loc 1 366 0 discriminator 2
 1085 06d8 BB88     		ldrh	r3, [r7, #4]
 1086 06da 1A46     		mov	r2, r3	@ movhi
 1087 06dc 4FEAC232 		lsl	r2, r2, #15
 1088 06e0 D31A     		subs	r3, r2, r3
 1089 06e2 4FEA4303 		lsl	r3, r3, #1
 1090 06e6 9BB2     		uxth	r3, r3
 1091 06e8 9BB2     		uxth	r3, r3
 1092              	.L44:
 366:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1093              		.loc 1 366 0 discriminator 3
 1094 06ea 7B81     		strh	r3, [r7, #10]	@ movhi
 367:../Main.c     **** 			if (temp > 255)
 1095              		.loc 1 367 0 is_stmt 1 discriminator 3
 1096 06ec B7F90A30 		ldrsh	r3, [r7, #10]
 1097 06f0 FF2B     		cmp	r3, #255
 1098 06f2 02DD     		ble	.L45
 368:../Main.c     **** 				temp = 255;
 1099              		.loc 1 368 0
 1100 06f4 4FF0FF03 		mov	r3, #255
 1101 06f8 7B81     		strh	r3, [r7, #10]	@ movhi
 1102              	.L45:
 369:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 1103              		.loc 1 369 0
 1104 06fa B7F90A20 		ldrsh	r2, [r7, #10]
 1105 06fe 40F20003 		movw	r3, #:lower16:pwm_max
 1106 0702 C0F20003 		movt	r3, #:upper16:pwm_max
 1107 0706 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1108 0708 03FB02F2 		mul	r2, r3, r2
 1109 070c 48F21F53 		movw	r3, #34079
 1110 0710 C5F2EB13 		movt	r3, 20971
 1111 0714 83FB0213 		smull	r1, r3, r3, r2
 1112 0718 4FEA6311 		asr	r1, r3, #5
 1113 071c 4FEAE273 		asr	r3, r2, #31
 1114 0720 CB1A     		subs	r3, r1, r3
 1115 0722 DAB2     		uxtb	r2, r3
 1116 0724 40F20003 		movw	r3, #:lower16:data_E
 1117 0728 C0F20003 		movt	r3, #:upper16:data_E
 1118 072c 5A70     		strb	r2, [r3, #1]
 1119              	.L33:
 373:../Main.c     **** 		char data_0 = (mode & 1);
 1120              		.loc 1 373 0
 1121 072e 40F20003 		movw	r3, #:lower16:mode
 1122 0732 C0F20003 		movt	r3, #:upper16:mode
 1123 0736 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1124 0738 03F00103 		and	r3, r3, #1
 1125 073c FB70     		strb	r3, [r7, #3]
 374:../Main.c     **** 		char data_1 = ((mode >> 1) & 1);
 1126              		.loc 1 374 0
 1127 073e 40F20003 		movw	r3, #:lower16:mode
 1128 0742 C0F20003 		movt	r3, #:upper16:mode
 1129 0746 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1130 0748 4FEA5303 		lsr	r3, r3, #1
 1131 074c DBB2     		uxtb	r3, r3
 1132 074e 03F00103 		and	r3, r3, #1
 1133 0752 BB70     		strb	r3, [r7, #2]
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1134              		.loc 1 379 0
 1135 0754 40F20003 		movw	r3, #:lower16:data_E
 1136 0758 C0F20003 		movt	r3, #:upper16:data_E
 1137 075c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1138 075e DAB2     		uxtb	r2, r3
 1139 0760 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1140 0762 4FEA0313 		lsl	r3, r3, #4
 1141 0766 DBB2     		uxtb	r3, r3
 1142 0768 1343     		orrs	r3, r3, r2
 1143 076a DAB2     		uxtb	r2, r3
 1144 076c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1145 076e 1343     		orrs	r3, r3, r2
 1146 0770 DAB2     		uxtb	r2, r3
 380:../Main.c     **** 						| (albh1 << ALBH1) | (albh2 << ALBH2) | (data_1 << ENABLE)
 1147              		.loc 1 380 0
 1148 0772 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 1149 0774 4FEA4313 		lsl	r3, r3, #5
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1150              		.loc 1 379 0
 1151 0778 DBB2     		uxtb	r3, r3
 1152 077a 1343     		orrs	r3, r3, r2
 1153 077c DAB2     		uxtb	r2, r3
 380:../Main.c     **** 						| (albh1 << ALBH1) | (albh2 << ALBH2) | (data_1 << ENABLE)
 1154              		.loc 1 380 0
 1155 077e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1156 0780 4FEAC303 		lsl	r3, r3, #3
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1157              		.loc 1 379 0
 1158 0784 DBB2     		uxtb	r3, r3
 1159 0786 1343     		orrs	r3, r3, r2
 1160 0788 DAB2     		uxtb	r2, r3
 380:../Main.c     **** 						| (albh1 << ALBH1) | (albh2 << ALBH2) | (data_1 << ENABLE)
 1161              		.loc 1 380 0
 1162 078a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1163 078c 4FEA8303 		lsl	r3, r3, #2
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1164              		.loc 1 379 0
 1165 0790 DBB2     		uxtb	r3, r3
 1166 0792 1343     		orrs	r3, r3, r2
 1167 0794 DAB2     		uxtb	r2, r3
 381:../Main.c     **** 						| (data_0 << BUZINA);
 1168              		.loc 1 381 0
 1169 0796 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1170 0798 4FEA4303 		lsl	r3, r3, #1
 379:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1171              		.loc 1 379 0
 1172 079c DBB2     		uxtb	r3, r3
 1173 079e 1343     		orrs	r3, r3, r2
 1174 07a0 DBB2     		uxtb	r3, r3
 1175 07a2 DAB2     		uxtb	r2, r3
 1176 07a4 40F20003 		movw	r3, #:lower16:data_E
 1177 07a8 C0F20003 		movt	r3, #:upper16:data_E
 1178 07ac DA70     		strb	r2, [r3, #3]
 382:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 1179              		.loc 1 382 0
 1180 07ae 40F20003 		movw	r3, #:lower16:result
 1181 07b2 C0F20003 		movt	r3, #:upper16:result
 1182 07b6 5B88     		ldrh	r3, [r3, #2]
 1183 07b8 4FEA1313 		lsr	r3, r3, #4
 1184 07bc 9BB2     		uxth	r3, r3
 1185 07be DAB2     		uxtb	r2, r3
 1186 07c0 40F20003 		movw	r3, #:lower16:data_E
 1187 07c4 C0F20003 		movt	r3, #:upper16:data_E
 1188 07c8 1A71     		strb	r2, [r3, #4]
 384:../Main.c     **** 		write_E();
 1189              		.loc 1 384 0
 1190 07ca FFF7FEFF 		bl	write_E
 385:../Main.c     **** 		updateButtonStates();
 1191              		.loc 1 385 0
 1192 07ce FFF7FEFF 		bl	updateButtonStates
 1193              	.LBE5:
 1194              		.loc 1 386 0
 1195 07d2 46E4     		b	.L46
 1196              		.cfi_endproc
 1197              	.LFE117:
 1199              		.section	.text.read_R,"ax",%progbits
 1200              		.align	2
 1201              		.global	read_R
 1202              		.thumb
 1203              		.thumb_func
 1205              	read_R:
 1206              	.LFB118:
 387:../Main.c     **** 	return 0;
 388:../Main.c     **** }
 389:../Main.c     **** 
 390:../Main.c     **** /***************************************************/
 391:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 392:../Main.c     **** /***************************************************/
 393:../Main.c     **** 
 394:../Main.c     **** void read_R() {
 1207              		.loc 1 394 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 8
 1210              		@ frame_needed = 1, uses_anonymous_args = 0
 1211 0000 80B5     		push	{r7, lr}
 1212              	.LCFI3:
 1213              		.cfi_def_cfa_offset 8
 1214              		.cfi_offset 7, -8
 1215              		.cfi_offset 14, -4
 1216 0002 82B0     		sub	sp, sp, #8
 1217              	.LCFI4:
 1218              		.cfi_def_cfa_offset 16
 1219 0004 00AF     		add	r7, sp, #0
 1220              	.LCFI5:
 1221              		.cfi_def_cfa_register 7
 395:../Main.c     **** 	int i;
 396:../Main.c     **** 	IO004_ResetPin(CE);
 1222              		.loc 1 396 0
 1223 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1224 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1225 000e 5A68     		ldr	r2, [r3, #4]
 1226 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1227 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1228 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1229 001a 4FF48031 		mov	r1, #65536
 1230 001e 01FA03F3 		lsl	r3, r1, r3
 1231 0022 5360     		str	r3, [r2, #4]
 397:../Main.c     **** 	delay(50000);
 1232              		.loc 1 397 0
 1233 0024 4CF25030 		movw	r0, #50000
 1234 0028 FFF7FEFF 		bl	delay
 398:../Main.c     **** 	uint8_t temp = 0;
 1235              		.loc 1 398 0
 1236 002c 4FF00003 		mov	r3, #0
 1237 0030 FB70     		strb	r3, [r7, #3]
 399:../Main.c     **** 
 400:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1238              		.loc 1 400 0
 1239 0032 4FF00703 		mov	r3, #7
 1240 0036 7B60     		str	r3, [r7, #4]
 1241 0038 20E0     		b	.L48
 1242              	.L50:
 401:../Main.c     **** 		if (IO004_ReadPin(DATA))
 1243              		.loc 1 401 0
 1244 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1245 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1246 0042 5B68     		ldr	r3, [r3, #4]
 1247 0044 5A6A     		ldr	r2, [r3, #36]
 1248 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1249 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1250 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1251 0050 22FA03F3 		lsr	r3, r2, r3
 1252 0054 03F00103 		and	r3, r3, #1
 1253 0058 002B     		cmp	r3, #0
 1254 005a 09D0     		beq	.L49
 402:../Main.c     **** 			temp |= (1 << i);
 1255              		.loc 1 402 0
 1256 005c 4FF00102 		mov	r2, #1
 1257 0060 7B68     		ldr	r3, [r7, #4]
 1258 0062 02FA03F3 		lsl	r3, r2, r3
 1259 0066 DAB2     		uxtb	r2, r3
 1260 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1261 006a 1343     		orrs	r3, r3, r2
 1262 006c DBB2     		uxtb	r3, r3
 1263 006e FB70     		strb	r3, [r7, #3]
 1264              	.L49:
 403:../Main.c     **** 		pulse_R();
 1265              		.loc 1 403 0
 1266 0070 FFF7FEFF 		bl	pulse_R
 400:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1267              		.loc 1 400 0
 1268 0074 7B68     		ldr	r3, [r7, #4]
 1269 0076 03F1FF33 		add	r3, r3, #-1
 1270 007a 7B60     		str	r3, [r7, #4]
 1271              	.L48:
 400:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1272              		.loc 1 400 0 is_stmt 0 discriminator 1
 1273 007c 7B68     		ldr	r3, [r7, #4]
 1274 007e 002B     		cmp	r3, #0
 1275 0080 DBDA     		bge	.L50
 404:../Main.c     **** 	}
 405:../Main.c     **** 	data_R = temp;
 1276              		.loc 1 405 0 is_stmt 1
 1277 0082 40F20003 		movw	r3, #:lower16:data_R
 1278 0086 C0F20003 		movt	r3, #:upper16:data_R
 1279 008a FA78     		ldrb	r2, [r7, #3]
 1280 008c 1A70     		strb	r2, [r3, #0]
 406:../Main.c     **** 	IO004_SetPin(CE);
 1281              		.loc 1 406 0
 1282 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1283 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1284 0096 5A68     		ldr	r2, [r3, #4]
 1285 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1286 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1287 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1288 00a2 4FF00101 		mov	r1, #1
 1289 00a6 01FA03F3 		lsl	r3, r1, r3
 1290 00aa 5360     		str	r3, [r2, #4]
 407:../Main.c     **** 	delay(50000);
 1291              		.loc 1 407 0
 1292 00ac 4CF25030 		movw	r0, #50000
 1293 00b0 FFF7FEFF 		bl	delay
 408:../Main.c     **** }
 1294              		.loc 1 408 0
 1295 00b4 07F10807 		add	r7, r7, #8
 1296 00b8 BD46     		mov	sp, r7
 1297 00ba 80BD     		pop	{r7, pc}
 1298              		.cfi_endproc
 1299              	.LFE118:
 1301              		.section	.text.pulse_R,"ax",%progbits
 1302              		.align	2
 1303              		.global	pulse_R
 1304              		.thumb
 1305              		.thumb_func
 1307              	pulse_R:
 1308              	.LFB119:
 409:../Main.c     **** 
 410:../Main.c     **** void pulse_R() {
 1309              		.loc 1 410 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 1, uses_anonymous_args = 0
 1313 0000 80B5     		push	{r7, lr}
 1314              	.LCFI6:
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 7, -8
 1317              		.cfi_offset 14, -4
 1318 0002 00AF     		add	r7, sp, #0
 1319              	.LCFI7:
 1320              		.cfi_def_cfa_register 7
 411:../Main.c     **** 	delay(300);
 1321              		.loc 1 411 0
 1322 0004 4FF49670 		mov	r0, #300
 1323 0008 FFF7FEFF 		bl	delay
 412:../Main.c     **** 	IO004_SetPin(CLK1);
 1324              		.loc 1 412 0
 1325 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1326 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1327 0014 5A68     		ldr	r2, [r3, #4]
 1328 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1329 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1330 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1331 0020 4FF00101 		mov	r1, #1
 1332 0024 01FA03F3 		lsl	r3, r1, r3
 1333 0028 5360     		str	r3, [r2, #4]
 413:../Main.c     **** 	delay(300);
 1334              		.loc 1 413 0
 1335 002a 4FF49670 		mov	r0, #300
 1336 002e FFF7FEFF 		bl	delay
 414:../Main.c     **** 	IO004_ResetPin(CLK1);
 1337              		.loc 1 414 0
 1338 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1339 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1340 003a 5A68     		ldr	r2, [r3, #4]
 1341 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1342 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1343 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1344 0046 4FF48031 		mov	r1, #65536
 1345 004a 01FA03F3 		lsl	r3, r1, r3
 1346 004e 5360     		str	r3, [r2, #4]
 415:../Main.c     **** }
 1347              		.loc 1 415 0
 1348 0050 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE119:
 1352 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 1353              		.align	2
 1354              		.global	configure_E
 1355              		.thumb
 1356              		.thumb_func
 1358              	configure_E:
 1359              	.LFB120:
 416:../Main.c     **** 
 417:../Main.c     **** void configure_E() {
 1360              		.loc 1 417 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 8
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364 0000 80B5     		push	{r7, lr}
 1365              	.LCFI8:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 82B0     		sub	sp, sp, #8
 1370              	.LCFI9:
 1371              		.cfi_def_cfa_offset 16
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI10:
 1374              		.cfi_def_cfa_register 7
 418:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 419:../Main.c     **** 	configuration[0] = 0xC4; //RF_CH# e OP_MODE 0b11011110
 1375              		.loc 1 419 0
 1376 0006 40F20003 		movw	r3, #:lower16:configuration
 1377 000a C0F20003 		movt	r3, #:upper16:configuration
 1378 000e 4FF0C402 		mov	r2, #196
 1379 0012 1A70     		strb	r2, [r3, #0]
 420:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1380              		.loc 1 420 0
 1381 0014 40F20003 		movw	r3, #:lower16:configuration
 1382 0018 C0F20003 		movt	r3, #:upper16:configuration
 1383 001c 4FF04F02 		mov	r2, #79
 1384 0020 5A70     		strb	r2, [r3, #1]
 421:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 1385              		.loc 1 421 0
 1386 0022 40F20003 		movw	r3, #:lower16:configuration
 1387 0026 C0F20003 		movt	r3, #:upper16:configuration
 1388 002a 4FF0A302 		mov	r2, #163
 1389 002e 9A70     		strb	r2, [r3, #2]
 422:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1390              		.loc 1 422 0
 1391 0030 40F20003 		movw	r3, #:lower16:configuration
 1392 0034 C0F20003 		movt	r3, #:upper16:configuration
 1393 0038 4FF0EE02 		mov	r2, #238
 1394 003c DA70     		strb	r2, [r3, #3]
 423:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1395              		.loc 1 423 0
 1396 003e 40F20003 		movw	r3, #:lower16:configuration
 1397 0042 C0F20003 		movt	r3, #:upper16:configuration
 1398 0046 4FF0DD02 		mov	r2, #221
 1399 004a 1A71     		strb	r2, [r3, #4]
 424:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1400              		.loc 1 424 0
 1401 004c 40F20003 		movw	r3, #:lower16:configuration
 1402 0050 C0F20003 		movt	r3, #:upper16:configuration
 1403 0054 4FF0CC02 		mov	r2, #204
 1404 0058 5A71     		strb	r2, [r3, #5]
 425:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1405              		.loc 1 425 0
 1406 005a 40F20003 		movw	r3, #:lower16:configuration
 1407 005e C0F20003 		movt	r3, #:upper16:configuration
 1408 0062 4FF0BB02 		mov	r2, #187
 1409 0066 9A71     		strb	r2, [r3, #6]
 426:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1410              		.loc 1 426 0
 1411 0068 40F20003 		movw	r3, #:lower16:configuration
 1412 006c C0F20003 		movt	r3, #:upper16:configuration
 1413 0070 4FF0AA02 		mov	r2, #170
 1414 0074 DA71     		strb	r2, [r3, #7]
 427:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1415              		.loc 1 427 0
 1416 0076 40F20003 		movw	r3, #:lower16:configuration
 1417 007a C0F20003 		movt	r3, #:upper16:configuration
 1418 007e 4FF00002 		mov	r2, #0
 1419 0082 1A72     		strb	r2, [r3, #8]
 428:../Main.c     **** 	configuration[9] = 0b00000000;
 1420              		.loc 1 428 0
 1421 0084 40F20003 		movw	r3, #:lower16:configuration
 1422 0088 C0F20003 		movt	r3, #:upper16:configuration
 1423 008c 4FF00002 		mov	r2, #0
 1424 0090 5A72     		strb	r2, [r3, #9]
 429:../Main.c     **** 	configuration[10] = 0b00000000;
 1425              		.loc 1 429 0
 1426 0092 40F20003 		movw	r3, #:lower16:configuration
 1427 0096 C0F20003 		movt	r3, #:upper16:configuration
 1428 009a 4FF00002 		mov	r2, #0
 1429 009e 9A72     		strb	r2, [r3, #10]
 430:../Main.c     **** 	configuration[11] = 0b00000000;
 1430              		.loc 1 430 0
 1431 00a0 40F20003 		movw	r3, #:lower16:configuration
 1432 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1433 00a8 4FF00002 		mov	r2, #0
 1434 00ac DA72     		strb	r2, [r3, #11]
 431:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1435              		.loc 1 431 0
 1436 00ae 40F20003 		movw	r3, #:lower16:configuration
 1437 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1438 00b6 4FF00002 		mov	r2, #0
 1439 00ba 1A73     		strb	r2, [r3, #12]
 432:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1440              		.loc 1 432 0
 1441 00bc 40F20003 		movw	r3, #:lower16:configuration
 1442 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1443 00c4 4FF02802 		mov	r2, #40
 1444 00c8 5A73     		strb	r2, [r3, #13]
 433:../Main.c     **** 	configuration[14] = 0b00000000;
 1445              		.loc 1 433 0
 1446 00ca 40F20003 		movw	r3, #:lower16:configuration
 1447 00ce C0F20003 		movt	r3, #:upper16:configuration
 1448 00d2 4FF00002 		mov	r2, #0
 1449 00d6 9A73     		strb	r2, [r3, #14]
 434:../Main.c     **** 
 435:../Main.c     **** 	IO004_ResetPin(CE);
 1450              		.loc 1 435 0
 1451 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1452 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1453 00e0 5A68     		ldr	r2, [r3, #4]
 1454 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1455 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1456 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1457 00ec 4FF48031 		mov	r1, #65536
 1458 00f0 01FA03F3 		lsl	r3, r1, r3
 1459 00f4 5360     		str	r3, [r2, #4]
 436:../Main.c     **** 	IO004_SetPin(CS);
 1460              		.loc 1 436 0
 1461 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1462 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1463 00fe 5A68     		ldr	r2, [r3, #4]
 1464 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1465 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1466 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1467 010a 4FF00101 		mov	r1, #1
 1468 010e 01FA03F3 		lsl	r3, r1, r3
 1469 0112 5360     		str	r3, [r2, #4]
 437:../Main.c     **** 	int i, j;
 438:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1470              		.loc 1 438 0
 1471 0114 4FF00E03 		mov	r3, #14
 1472 0118 7B60     		str	r3, [r7, #4]
 1473 011a 3FE0     		b	.L53
 1474              	.L58:
 439:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1475              		.loc 1 439 0
 1476 011c 4FF00703 		mov	r3, #7
 1477 0120 3B60     		str	r3, [r7, #0]
 1478 0122 34E0     		b	.L54
 1479              	.L57:
 440:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1480              		.loc 1 440 0
 1481 0124 40F20003 		movw	r3, #:lower16:configuration
 1482 0128 C0F20003 		movt	r3, #:upper16:configuration
 1483 012c 7A68     		ldr	r2, [r7, #4]
 1484 012e 9B18     		adds	r3, r3, r2
 1485 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1486 0132 1A46     		mov	r2, r3
 1487 0134 4FF00101 		mov	r1, #1
 1488 0138 3B68     		ldr	r3, [r7, #0]
 1489 013a 01FA03F3 		lsl	r3, r1, r3
 1490 013e 1340     		ands	r3, r3, r2
 1491 0140 002B     		cmp	r3, #0
 1492 0142 0FDD     		ble	.L55
 441:../Main.c     **** 				IO004_SetPin(DATA);
 1493              		.loc 1 441 0
 1494 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1495 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1496 014c 5A68     		ldr	r2, [r3, #4]
 1497 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1498 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1499 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1500 0158 4FF00101 		mov	r1, #1
 1501 015c 01FA03F3 		lsl	r3, r1, r3
 1502 0160 5360     		str	r3, [r2, #4]
 1503 0162 0EE0     		b	.L56
 1504              	.L55:
 442:../Main.c     **** 			else
 443:../Main.c     **** 				IO004_ResetPin(DATA);
 1505              		.loc 1 443 0
 1506 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1507 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1508 016c 5A68     		ldr	r2, [r3, #4]
 1509 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1510 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1511 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1512 0178 4FF48031 		mov	r1, #65536
 1513 017c 01FA03F3 		lsl	r3, r1, r3
 1514 0180 5360     		str	r3, [r2, #4]
 1515              	.L56:
 444:../Main.c     **** 			;
 445:../Main.c     **** 			pulse_R();
 1516              		.loc 1 445 0
 1517 0182 FFF7FEFF 		bl	pulse_R
 439:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1518              		.loc 1 439 0
 1519 0186 3B68     		ldr	r3, [r7, #0]
 1520 0188 03F1FF33 		add	r3, r3, #-1
 1521 018c 3B60     		str	r3, [r7, #0]
 1522              	.L54:
 439:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1523              		.loc 1 439 0 is_stmt 0 discriminator 1
 1524 018e 3B68     		ldr	r3, [r7, #0]
 1525 0190 002B     		cmp	r3, #0
 1526 0192 C7DA     		bge	.L57
 438:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1527              		.loc 1 438 0 is_stmt 1
 1528 0194 7B68     		ldr	r3, [r7, #4]
 1529 0196 03F1FF33 		add	r3, r3, #-1
 1530 019a 7B60     		str	r3, [r7, #4]
 1531              	.L53:
 438:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1532              		.loc 1 438 0 is_stmt 0 discriminator 1
 1533 019c 7B68     		ldr	r3, [r7, #4]
 1534 019e 002B     		cmp	r3, #0
 1535 01a0 BCDA     		bge	.L58
 446:../Main.c     **** 		}
 447:../Main.c     **** 	}
 448:../Main.c     **** 	IO004_ResetPin(CS);
 1536              		.loc 1 448 0 is_stmt 1
 1537 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1538 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1539 01aa 5A68     		ldr	r2, [r3, #4]
 1540 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1541 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1542 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1543 01b6 4FF48031 		mov	r1, #65536
 1544 01ba 01FA03F3 		lsl	r3, r1, r3
 1545 01be 5360     		str	r3, [r2, #4]
 449:../Main.c     **** 	delay(50000);
 1546              		.loc 1 449 0
 1547 01c0 4CF25030 		movw	r0, #50000
 1548 01c4 FFF7FEFF 		bl	delay
 450:../Main.c     **** }
 1549              		.loc 1 450 0
 1550 01c8 07F10807 		add	r7, r7, #8
 1551 01cc BD46     		mov	sp, r7
 1552 01ce 80BD     		pop	{r7, pc}
 1553              		.cfi_endproc
 1554              	.LFE120:
 1556              		.section	.text.write_E,"ax",%progbits
 1557              		.align	2
 1558              		.global	write_E
 1559              		.thumb
 1560              		.thumb_func
 1562              	write_E:
 1563              	.LFB121:
 451:../Main.c     **** void write_E() {
 1564              		.loc 1 451 0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 8
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568 0000 80B5     		push	{r7, lr}
 1569              	.LCFI11:
 1570              		.cfi_def_cfa_offset 8
 1571              		.cfi_offset 7, -8
 1572              		.cfi_offset 14, -4
 1573 0002 82B0     		sub	sp, sp, #8
 1574              	.LCFI12:
 1575              		.cfi_def_cfa_offset 16
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI13:
 1578              		.cfi_def_cfa_register 7
 452:../Main.c     **** 	int i, j;
 453:../Main.c     **** 	IO004_SetPin(CE);
 1579              		.loc 1 453 0
 1580 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1581 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1582 000e 5A68     		ldr	r2, [r3, #4]
 1583 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1584 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1585 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1586 001a 4FF00101 		mov	r1, #1
 1587 001e 01FA03F3 		lsl	r3, r1, r3
 1588 0022 5360     		str	r3, [r2, #4]
 454:../Main.c     **** 	delay(1000);
 1589              		.loc 1 454 0
 1590 0024 4FF47A70 		mov	r0, #1000
 1591 0028 FFF7FEFF 		bl	delay
 455:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1592              		.loc 1 455 0
 1593 002c 4FF00703 		mov	r3, #7
 1594 0030 7B60     		str	r3, [r7, #4]
 1595 0032 3FE0     		b	.L60
 1596              	.L65:
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1597              		.loc 1 456 0
 1598 0034 4FF00703 		mov	r3, #7
 1599 0038 3B60     		str	r3, [r7, #0]
 1600 003a 34E0     		b	.L61
 1601              	.L64:
 457:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1602              		.loc 1 457 0
 1603 003c 40F20003 		movw	r3, #:lower16:configuration
 1604 0040 C0F20003 		movt	r3, #:upper16:configuration
 1605 0044 7A68     		ldr	r2, [r7, #4]
 1606 0046 9B18     		adds	r3, r3, r2
 1607 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1608 004a 1A46     		mov	r2, r3
 1609 004c 4FF00101 		mov	r1, #1
 1610 0050 3B68     		ldr	r3, [r7, #0]
 1611 0052 01FA03F3 		lsl	r3, r1, r3
 1612 0056 1340     		ands	r3, r3, r2
 1613 0058 002B     		cmp	r3, #0
 1614 005a 0FDD     		ble	.L62
 458:../Main.c     **** 				IO004_SetPin(DATA);
 1615              		.loc 1 458 0
 1616 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1617 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1618 0064 5A68     		ldr	r2, [r3, #4]
 1619 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1620 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1621 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1622 0070 4FF00101 		mov	r1, #1
 1623 0074 01FA03F3 		lsl	r3, r1, r3
 1624 0078 5360     		str	r3, [r2, #4]
 1625 007a 0EE0     		b	.L63
 1626              	.L62:
 459:../Main.c     **** 			else
 460:../Main.c     **** 				IO004_ResetPin(DATA);
 1627              		.loc 1 460 0
 1628 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1629 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1630 0084 5A68     		ldr	r2, [r3, #4]
 1631 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1632 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1633 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1634 0090 4FF48031 		mov	r1, #65536
 1635 0094 01FA03F3 		lsl	r3, r1, r3
 1636 0098 5360     		str	r3, [r2, #4]
 1637              	.L63:
 461:../Main.c     **** 			pulse_R();
 1638              		.loc 1 461 0
 1639 009a FFF7FEFF 		bl	pulse_R
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1640              		.loc 1 456 0
 1641 009e 3B68     		ldr	r3, [r7, #0]
 1642 00a0 03F1FF33 		add	r3, r3, #-1
 1643 00a4 3B60     		str	r3, [r7, #0]
 1644              	.L61:
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1645              		.loc 1 456 0 is_stmt 0 discriminator 1
 1646 00a6 3B68     		ldr	r3, [r7, #0]
 1647 00a8 002B     		cmp	r3, #0
 1648 00aa C7DA     		bge	.L64
 455:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1649              		.loc 1 455 0 is_stmt 1
 1650 00ac 7B68     		ldr	r3, [r7, #4]
 1651 00ae 03F1FF33 		add	r3, r3, #-1
 1652 00b2 7B60     		str	r3, [r7, #4]
 1653              	.L60:
 455:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1654              		.loc 1 455 0 is_stmt 0 discriminator 1
 1655 00b4 7B68     		ldr	r3, [r7, #4]
 1656 00b6 022B     		cmp	r3, #2
 1657 00b8 BCDC     		bgt	.L65
 462:../Main.c     **** 		}
 463:../Main.c     **** 	}
 464:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1658              		.loc 1 464 0 is_stmt 1
 1659 00ba 4FF00003 		mov	r3, #0
 1660 00be 7B60     		str	r3, [r7, #4]
 1661 00c0 3FE0     		b	.L66
 1662              	.L71:
 465:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1663              		.loc 1 465 0
 1664 00c2 4FF00703 		mov	r3, #7
 1665 00c6 3B60     		str	r3, [r7, #0]
 1666 00c8 34E0     		b	.L67
 1667              	.L70:
 466:../Main.c     **** 			if ((data_E[i] & (1 << j)) > 0)
 1668              		.loc 1 466 0
 1669 00ca 40F20003 		movw	r3, #:lower16:data_E
 1670 00ce C0F20003 		movt	r3, #:upper16:data_E
 1671 00d2 7A68     		ldr	r2, [r7, #4]
 1672 00d4 9B18     		adds	r3, r3, r2
 1673 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1674 00d8 1A46     		mov	r2, r3
 1675 00da 4FF00101 		mov	r1, #1
 1676 00de 3B68     		ldr	r3, [r7, #0]
 1677 00e0 01FA03F3 		lsl	r3, r1, r3
 1678 00e4 1340     		ands	r3, r3, r2
 1679 00e6 002B     		cmp	r3, #0
 1680 00e8 0FDD     		ble	.L68
 467:../Main.c     **** 				IO004_SetPin(DATA);
 1681              		.loc 1 467 0
 1682 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1683 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1684 00f2 5A68     		ldr	r2, [r3, #4]
 1685 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1686 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1687 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1688 00fe 4FF00101 		mov	r1, #1
 1689 0102 01FA03F3 		lsl	r3, r1, r3
 1690 0106 5360     		str	r3, [r2, #4]
 1691 0108 0EE0     		b	.L69
 1692              	.L68:
 468:../Main.c     **** 			else
 469:../Main.c     **** 				IO004_ResetPin(DATA);
 1693              		.loc 1 469 0
 1694 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1695 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1696 0112 5A68     		ldr	r2, [r3, #4]
 1697 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1698 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1699 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1700 011e 4FF48031 		mov	r1, #65536
 1701 0122 01FA03F3 		lsl	r3, r1, r3
 1702 0126 5360     		str	r3, [r2, #4]
 1703              	.L69:
 470:../Main.c     **** 			pulse_R();
 1704              		.loc 1 470 0
 1705 0128 FFF7FEFF 		bl	pulse_R
 465:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1706              		.loc 1 465 0
 1707 012c 3B68     		ldr	r3, [r7, #0]
 1708 012e 03F1FF33 		add	r3, r3, #-1
 1709 0132 3B60     		str	r3, [r7, #0]
 1710              	.L67:
 465:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1711              		.loc 1 465 0 is_stmt 0 discriminator 1
 1712 0134 3B68     		ldr	r3, [r7, #0]
 1713 0136 002B     		cmp	r3, #0
 1714 0138 C7DA     		bge	.L70
 464:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1715              		.loc 1 464 0 is_stmt 1
 1716 013a 7B68     		ldr	r3, [r7, #4]
 1717 013c 03F10103 		add	r3, r3, #1
 1718 0140 7B60     		str	r3, [r7, #4]
 1719              	.L66:
 464:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1720              		.loc 1 464 0 is_stmt 0 discriminator 1
 1721 0142 7B68     		ldr	r3, [r7, #4]
 1722 0144 042B     		cmp	r3, #4
 1723 0146 BCDD     		ble	.L71
 471:../Main.c     **** 		}
 472:../Main.c     **** 	} //termina de enviar dados
 473:../Main.c     **** 	IO004_ResetPin(CE);
 1724              		.loc 1 473 0 is_stmt 1
 1725 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1726 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1727 0150 5A68     		ldr	r2, [r3, #4]
 1728 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1729 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1730 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1731 015c 4FF48031 		mov	r1, #65536
 1732 0160 01FA03F3 		lsl	r3, r1, r3
 1733 0164 5360     		str	r3, [r2, #4]
 474:../Main.c     **** 	delay(5000);
 1734              		.loc 1 474 0
 1735 0166 41F28830 		movw	r0, #5000
 1736 016a FFF7FEFF 		bl	delay
 475:../Main.c     **** }
 1737              		.loc 1 475 0
 1738 016e 07F10807 		add	r7, r7, #8
 1739 0172 BD46     		mov	sp, r7
 1740 0174 80BD     		pop	{r7, pc}
 1741              		.cfi_endproc
 1742              	.LFE121:
 1744 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1745              		.align	2
 1746              		.global	psxConfiguraControle
 1747              		.thumb
 1748              		.thumb_func
 1750              	psxConfiguraControle:
 1751              	.LFB122:
 476:../Main.c     **** /***************************************************/
 477:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 478:../Main.c     **** /***************************************************/
 479:../Main.c     **** void psxConfiguraControle() {
 1752              		.loc 1 479 0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 1, uses_anonymous_args = 0
 1756 0000 80B5     		push	{r7, lr}
 1757              	.LCFI14:
 1758              		.cfi_def_cfa_offset 8
 1759              		.cfi_offset 7, -8
 1760              		.cfi_offset 14, -4
 1761 0002 00AF     		add	r7, sp, #0
 1762              	.LCFI15:
 1763              		.cfi_def_cfa_register 7
 480:../Main.c     **** 	psxEnterConfigMode();
 1764              		.loc 1 480 0
 1765 0004 FFF7FEFF 		bl	psxEnterConfigMode
 481:../Main.c     **** 	psxSetAnalogMode();
 1766              		.loc 1 481 0
 1767 0008 FFF7FEFF 		bl	psxSetAnalogMode
 482:../Main.c     **** 	psxExitConfigMode();
 1768              		.loc 1 482 0
 1769 000c FFF7FEFF 		bl	psxExitConfigMode
 483:../Main.c     **** }
 1770              		.loc 1 483 0
 1771 0010 80BD     		pop	{r7, pc}
 1772              		.cfi_endproc
 1773              	.LFE122:
 1775 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1776              		.align	2
 1777              		.global	psxEnterConfigMode
 1778              		.thumb
 1779              		.thumb_func
 1781              	psxEnterConfigMode:
 1782              	.LFB123:
 484:../Main.c     **** 
 485:../Main.c     **** void psxEnterConfigMode() {
 1783              		.loc 1 485 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 8
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787 0000 80B5     		push	{r7, lr}
 1788              	.LCFI16:
 1789              		.cfi_def_cfa_offset 8
 1790              		.cfi_offset 7, -8
 1791              		.cfi_offset 14, -4
 1792 0002 82B0     		sub	sp, sp, #8
 1793              	.LCFI17:
 1794              		.cfi_def_cfa_offset 16
 1795 0004 00AF     		add	r7, sp, #0
 1796              	.LCFI18:
 1797              		.cfi_def_cfa_register 7
 486:../Main.c     **** 	int psxByte = 0;
 1798              		.loc 1 486 0
 1799 0006 4FF00003 		mov	r3, #0
 1800 000a 7B60     		str	r3, [r7, #4]
 487:../Main.c     **** 	IO004_SetPin(CMD);
 1801              		.loc 1 487 0
 1802 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1803 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1804 0014 5A68     		ldr	r2, [r3, #4]
 1805 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1806 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1807 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1808 0020 4FF00101 		mov	r1, #1
 1809 0024 01FA03F3 		lsl	r3, r1, r3
 1810 0028 5360     		str	r3, [r2, #4]
 488:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1811              		.loc 1 488 0
 1812 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1813 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1814 0032 5A68     		ldr	r2, [r3, #4]
 1815 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1816 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1817 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1818 003e 4FF00101 		mov	r1, #1
 1819 0042 01FA03F3 		lsl	r3, r1, r3
 1820 0046 5360     		str	r3, [r2, #4]
 489:../Main.c     **** 	IO004_ResetPin(ATT);
 1821              		.loc 1 489 0
 1822 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1823 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1824 0050 5A68     		ldr	r2, [r3, #4]
 1825 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1826 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1827 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1828 005c 4FF48031 		mov	r1, #65536
 1829 0060 01FA03F3 		lsl	r3, r1, r3
 1830 0064 5360     		str	r3, [r2, #4]
 490:../Main.c     **** 	delay(tempoInicio);
 1831              		.loc 1 490 0
 1832 0066 4FF49670 		mov	r0, #300
 1833 006a FFF7FEFF 		bl	delay
 491:../Main.c     **** 
 492:../Main.c     **** 	psxByte = 1;
 1834              		.loc 1 492 0
 1835 006e 4FF00103 		mov	r3, #1
 1836 0072 7B60     		str	r3, [r7, #4]
 493:../Main.c     **** 	psxTrocaByte(psxByte);
 1837              		.loc 1 493 0
 1838 0074 7868     		ldr	r0, [r7, #4]
 1839 0076 FFF7FEFF 		bl	psxTrocaByte
 494:../Main.c     **** 
 495:../Main.c     **** 	psxByte = 0x43;
 1840              		.loc 1 495 0
 1841 007a 4FF04303 		mov	r3, #67
 1842 007e 7B60     		str	r3, [r7, #4]
 496:../Main.c     **** 	psxTrocaByte(psxByte);
 1843              		.loc 1 496 0
 1844 0080 7868     		ldr	r0, [r7, #4]
 1845 0082 FFF7FEFF 		bl	psxTrocaByte
 497:../Main.c     **** 
 498:../Main.c     **** 	psxByte = 0;
 1846              		.loc 1 498 0
 1847 0086 4FF00003 		mov	r3, #0
 1848 008a 7B60     		str	r3, [r7, #4]
 499:../Main.c     **** 	psxTrocaByte(psxByte);
 1849              		.loc 1 499 0
 1850 008c 7868     		ldr	r0, [r7, #4]
 1851 008e FFF7FEFF 		bl	psxTrocaByte
 500:../Main.c     **** 
 501:../Main.c     **** 	psxByte = 0x1;
 1852              		.loc 1 501 0
 1853 0092 4FF00103 		mov	r3, #1
 1854 0096 7B60     		str	r3, [r7, #4]
 502:../Main.c     **** 	psxTrocaByte(psxByte);
 1855              		.loc 1 502 0
 1856 0098 7868     		ldr	r0, [r7, #4]
 1857 009a FFF7FEFF 		bl	psxTrocaByte
 503:../Main.c     **** 
 504:../Main.c     **** 	psxByte = 0;
 1858              		.loc 1 504 0
 1859 009e 4FF00003 		mov	r3, #0
 1860 00a2 7B60     		str	r3, [r7, #4]
 505:../Main.c     **** 	psxTrocaByte(psxByte);
 1861              		.loc 1 505 0
 1862 00a4 7868     		ldr	r0, [r7, #4]
 1863 00a6 FFF7FEFF 		bl	psxTrocaByte
 506:../Main.c     **** 
 507:../Main.c     **** 	IO004_SetPin(ATT);
 1864              		.loc 1 507 0
 1865 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1866 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1867 00b2 5A68     		ldr	r2, [r3, #4]
 1868 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1869 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1870 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1871 00be 4FF00101 		mov	r1, #1
 1872 00c2 01FA03F3 		lsl	r3, r1, r3
 1873 00c6 5360     		str	r3, [r2, #4]
 508:../Main.c     **** }
 1874              		.loc 1 508 0
 1875 00c8 07F10807 		add	r7, r7, #8
 1876 00cc BD46     		mov	sp, r7
 1877 00ce 80BD     		pop	{r7, pc}
 1878              		.cfi_endproc
 1879              	.LFE123:
 1881              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1882              		.align	2
 1883              		.global	psxSetAnalogMode
 1884              		.thumb
 1885              		.thumb_func
 1887              	psxSetAnalogMode:
 1888              	.LFB124:
 509:../Main.c     **** 
 510:../Main.c     **** void psxSetAnalogMode() {
 1889              		.loc 1 510 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 8
 1892              		@ frame_needed = 1, uses_anonymous_args = 0
 1893 0000 80B5     		push	{r7, lr}
 1894              	.LCFI19:
 1895              		.cfi_def_cfa_offset 8
 1896              		.cfi_offset 7, -8
 1897              		.cfi_offset 14, -4
 1898 0002 82B0     		sub	sp, sp, #8
 1899              	.LCFI20:
 1900              		.cfi_def_cfa_offset 16
 1901 0004 00AF     		add	r7, sp, #0
 1902              	.LCFI21:
 1903              		.cfi_def_cfa_register 7
 511:../Main.c     **** 	int psxByte = 0;
 1904              		.loc 1 511 0
 1905 0006 4FF00003 		mov	r3, #0
 1906 000a 7B60     		str	r3, [r7, #4]
 512:../Main.c     **** 	IO004_SetPin(CMD);
 1907              		.loc 1 512 0
 1908 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1909 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1910 0014 5A68     		ldr	r2, [r3, #4]
 1911 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1912 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1913 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1914 0020 4FF00101 		mov	r1, #1
 1915 0024 01FA03F3 		lsl	r3, r1, r3
 1916 0028 5360     		str	r3, [r2, #4]
 513:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1917              		.loc 1 513 0
 1918 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1919 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1920 0032 5A68     		ldr	r2, [r3, #4]
 1921 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1922 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1923 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1924 003e 4FF00101 		mov	r1, #1
 1925 0042 01FA03F3 		lsl	r3, r1, r3
 1926 0046 5360     		str	r3, [r2, #4]
 514:../Main.c     **** 	IO004_ResetPin(ATT);
 1927              		.loc 1 514 0
 1928 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1929 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1930 0050 5A68     		ldr	r2, [r3, #4]
 1931 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1932 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1933 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1934 005c 4FF48031 		mov	r1, #65536
 1935 0060 01FA03F3 		lsl	r3, r1, r3
 1936 0064 5360     		str	r3, [r2, #4]
 515:../Main.c     **** 	delay(tempoInicio);
 1937              		.loc 1 515 0
 1938 0066 4FF49670 		mov	r0, #300
 1939 006a FFF7FEFF 		bl	delay
 516:../Main.c     **** 
 517:../Main.c     **** 	psxByte = 1;
 1940              		.loc 1 517 0
 1941 006e 4FF00103 		mov	r3, #1
 1942 0072 7B60     		str	r3, [r7, #4]
 518:../Main.c     **** 	psxTrocaByte(psxByte);
 1943              		.loc 1 518 0
 1944 0074 7868     		ldr	r0, [r7, #4]
 1945 0076 FFF7FEFF 		bl	psxTrocaByte
 519:../Main.c     **** 
 520:../Main.c     **** 	psxByte = 0x44;
 1946              		.loc 1 520 0
 1947 007a 4FF04403 		mov	r3, #68
 1948 007e 7B60     		str	r3, [r7, #4]
 521:../Main.c     **** 	psxTrocaByte(psxByte);
 1949              		.loc 1 521 0
 1950 0080 7868     		ldr	r0, [r7, #4]
 1951 0082 FFF7FEFF 		bl	psxTrocaByte
 522:../Main.c     **** 
 523:../Main.c     **** 	psxByte = 0;
 1952              		.loc 1 523 0
 1953 0086 4FF00003 		mov	r3, #0
 1954 008a 7B60     		str	r3, [r7, #4]
 524:../Main.c     **** 	psxTrocaByte(psxByte);
 1955              		.loc 1 524 0
 1956 008c 7868     		ldr	r0, [r7, #4]
 1957 008e FFF7FEFF 		bl	psxTrocaByte
 525:../Main.c     **** 
 526:../Main.c     **** 	psxByte = 0x1;
 1958              		.loc 1 526 0
 1959 0092 4FF00103 		mov	r3, #1
 1960 0096 7B60     		str	r3, [r7, #4]
 527:../Main.c     **** 	psxTrocaByte(psxByte);
 1961              		.loc 1 527 0
 1962 0098 7868     		ldr	r0, [r7, #4]
 1963 009a FFF7FEFF 		bl	psxTrocaByte
 528:../Main.c     **** 
 529:../Main.c     **** 	psxByte = 0x3;
 1964              		.loc 1 529 0
 1965 009e 4FF00303 		mov	r3, #3
 1966 00a2 7B60     		str	r3, [r7, #4]
 530:../Main.c     **** 	psxTrocaByte(psxByte);
 1967              		.loc 1 530 0
 1968 00a4 7868     		ldr	r0, [r7, #4]
 1969 00a6 FFF7FEFF 		bl	psxTrocaByte
 531:../Main.c     **** 
 532:../Main.c     **** 	psxByte = 0;
 1970              		.loc 1 532 0
 1971 00aa 4FF00003 		mov	r3, #0
 1972 00ae 7B60     		str	r3, [r7, #4]
 533:../Main.c     **** 	psxTrocaByte(psxByte);
 1973              		.loc 1 533 0
 1974 00b0 7868     		ldr	r0, [r7, #4]
 1975 00b2 FFF7FEFF 		bl	psxTrocaByte
 534:../Main.c     **** 
 535:../Main.c     **** 	psxByte = 0;
 1976              		.loc 1 535 0
 1977 00b6 4FF00003 		mov	r3, #0
 1978 00ba 7B60     		str	r3, [r7, #4]
 536:../Main.c     **** 	psxTrocaByte(psxByte);
 1979              		.loc 1 536 0
 1980 00bc 7868     		ldr	r0, [r7, #4]
 1981 00be FFF7FEFF 		bl	psxTrocaByte
 537:../Main.c     **** 
 538:../Main.c     **** 	psxByte = 0;
 1982              		.loc 1 538 0
 1983 00c2 4FF00003 		mov	r3, #0
 1984 00c6 7B60     		str	r3, [r7, #4]
 539:../Main.c     **** 	psxTrocaByte(psxByte);
 1985              		.loc 1 539 0
 1986 00c8 7868     		ldr	r0, [r7, #4]
 1987 00ca FFF7FEFF 		bl	psxTrocaByte
 540:../Main.c     **** 
 541:../Main.c     **** 	psxByte = 0;
 1988              		.loc 1 541 0
 1989 00ce 4FF00003 		mov	r3, #0
 1990 00d2 7B60     		str	r3, [r7, #4]
 542:../Main.c     **** 	psxTrocaByte(psxByte);
 1991              		.loc 1 542 0
 1992 00d4 7868     		ldr	r0, [r7, #4]
 1993 00d6 FFF7FEFF 		bl	psxTrocaByte
 543:../Main.c     **** 
 544:../Main.c     **** 	IO004_SetPin(ATT);
 1994              		.loc 1 544 0
 1995 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1996 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1997 00e2 5A68     		ldr	r2, [r3, #4]
 1998 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1999 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2000 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2001 00ee 4FF00101 		mov	r1, #1
 2002 00f2 01FA03F3 		lsl	r3, r1, r3
 2003 00f6 5360     		str	r3, [r2, #4]
 545:../Main.c     **** }
 2004              		.loc 1 545 0
 2005 00f8 07F10807 		add	r7, r7, #8
 2006 00fc BD46     		mov	sp, r7
 2007 00fe 80BD     		pop	{r7, pc}
 2008              		.cfi_endproc
 2009              	.LFE124:
 2011              		.section	.text.psxExitConfigMode,"ax",%progbits
 2012              		.align	2
 2013              		.global	psxExitConfigMode
 2014              		.thumb
 2015              		.thumb_func
 2017              	psxExitConfigMode:
 2018              	.LFB125:
 546:../Main.c     **** 
 547:../Main.c     **** void psxExitConfigMode() {
 2019              		.loc 1 547 0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 8
 2022              		@ frame_needed = 1, uses_anonymous_args = 0
 2023 0000 80B5     		push	{r7, lr}
 2024              	.LCFI22:
 2025              		.cfi_def_cfa_offset 8
 2026              		.cfi_offset 7, -8
 2027              		.cfi_offset 14, -4
 2028 0002 82B0     		sub	sp, sp, #8
 2029              	.LCFI23:
 2030              		.cfi_def_cfa_offset 16
 2031 0004 00AF     		add	r7, sp, #0
 2032              	.LCFI24:
 2033              		.cfi_def_cfa_register 7
 548:../Main.c     **** 	int psxByte = 0;
 2034              		.loc 1 548 0
 2035 0006 4FF00003 		mov	r3, #0
 2036 000a 7B60     		str	r3, [r7, #4]
 549:../Main.c     **** 	IO004_SetPin(CMD);
 2037              		.loc 1 549 0
 2038 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2039 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2040 0014 5A68     		ldr	r2, [r3, #4]
 2041 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2042 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2043 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2044 0020 4FF00101 		mov	r1, #1
 2045 0024 01FA03F3 		lsl	r3, r1, r3
 2046 0028 5360     		str	r3, [r2, #4]
 550:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2047              		.loc 1 550 0
 2048 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2049 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2050 0032 5A68     		ldr	r2, [r3, #4]
 2051 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2052 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2053 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2054 003e 4FF00101 		mov	r1, #1
 2055 0042 01FA03F3 		lsl	r3, r1, r3
 2056 0046 5360     		str	r3, [r2, #4]
 551:../Main.c     **** 	IO004_ResetPin(ATT);
 2057              		.loc 1 551 0
 2058 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2059 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2060 0050 5A68     		ldr	r2, [r3, #4]
 2061 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2062 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2063 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2064 005c 4FF48031 		mov	r1, #65536
 2065 0060 01FA03F3 		lsl	r3, r1, r3
 2066 0064 5360     		str	r3, [r2, #4]
 552:../Main.c     **** 	delay(tempoInicio);
 2067              		.loc 1 552 0
 2068 0066 4FF49670 		mov	r0, #300
 2069 006a FFF7FEFF 		bl	delay
 553:../Main.c     **** 
 554:../Main.c     **** 	psxByte = 1;
 2070              		.loc 1 554 0
 2071 006e 4FF00103 		mov	r3, #1
 2072 0072 7B60     		str	r3, [r7, #4]
 555:../Main.c     **** 	psxTrocaByte(psxByte);
 2073              		.loc 1 555 0
 2074 0074 7868     		ldr	r0, [r7, #4]
 2075 0076 FFF7FEFF 		bl	psxTrocaByte
 556:../Main.c     **** 
 557:../Main.c     **** 	psxByte = 0x43;
 2076              		.loc 1 557 0
 2077 007a 4FF04303 		mov	r3, #67
 2078 007e 7B60     		str	r3, [r7, #4]
 558:../Main.c     **** 	psxTrocaByte(psxByte);
 2079              		.loc 1 558 0
 2080 0080 7868     		ldr	r0, [r7, #4]
 2081 0082 FFF7FEFF 		bl	psxTrocaByte
 559:../Main.c     **** 
 560:../Main.c     **** 	psxByte = 0;
 2082              		.loc 1 560 0
 2083 0086 4FF00003 		mov	r3, #0
 2084 008a 7B60     		str	r3, [r7, #4]
 561:../Main.c     **** 	psxTrocaByte(psxByte);
 2085              		.loc 1 561 0
 2086 008c 7868     		ldr	r0, [r7, #4]
 2087 008e FFF7FEFF 		bl	psxTrocaByte
 562:../Main.c     **** 
 563:../Main.c     **** 	psxByte = 0;
 2088              		.loc 1 563 0
 2089 0092 4FF00003 		mov	r3, #0
 2090 0096 7B60     		str	r3, [r7, #4]
 564:../Main.c     **** 	psxTrocaByte(psxByte);
 2091              		.loc 1 564 0
 2092 0098 7868     		ldr	r0, [r7, #4]
 2093 009a FFF7FEFF 		bl	psxTrocaByte
 565:../Main.c     **** 
 566:../Main.c     **** 	psxByte = 0x5A;
 2094              		.loc 1 566 0
 2095 009e 4FF05A03 		mov	r3, #90
 2096 00a2 7B60     		str	r3, [r7, #4]
 567:../Main.c     **** 	psxTrocaByte(psxByte);
 2097              		.loc 1 567 0
 2098 00a4 7868     		ldr	r0, [r7, #4]
 2099 00a6 FFF7FEFF 		bl	psxTrocaByte
 568:../Main.c     **** 
 569:../Main.c     **** 	psxByte = 0x5A;
 2100              		.loc 1 569 0
 2101 00aa 4FF05A03 		mov	r3, #90
 2102 00ae 7B60     		str	r3, [r7, #4]
 570:../Main.c     **** 	psxTrocaByte(psxByte);
 2103              		.loc 1 570 0
 2104 00b0 7868     		ldr	r0, [r7, #4]
 2105 00b2 FFF7FEFF 		bl	psxTrocaByte
 571:../Main.c     **** 
 572:../Main.c     **** 	psxByte = 0x5A;
 2106              		.loc 1 572 0
 2107 00b6 4FF05A03 		mov	r3, #90
 2108 00ba 7B60     		str	r3, [r7, #4]
 573:../Main.c     **** 	psxTrocaByte(psxByte);
 2109              		.loc 1 573 0
 2110 00bc 7868     		ldr	r0, [r7, #4]
 2111 00be FFF7FEFF 		bl	psxTrocaByte
 574:../Main.c     **** 
 575:../Main.c     **** 	psxByte = 0x5A;
 2112              		.loc 1 575 0
 2113 00c2 4FF05A03 		mov	r3, #90
 2114 00c6 7B60     		str	r3, [r7, #4]
 576:../Main.c     **** 	psxTrocaByte(psxByte);
 2115              		.loc 1 576 0
 2116 00c8 7868     		ldr	r0, [r7, #4]
 2117 00ca FFF7FEFF 		bl	psxTrocaByte
 577:../Main.c     **** 
 578:../Main.c     **** 	psxByte = 0x5A;
 2118              		.loc 1 578 0
 2119 00ce 4FF05A03 		mov	r3, #90
 2120 00d2 7B60     		str	r3, [r7, #4]
 579:../Main.c     **** 	psxTrocaByte(psxByte);
 2121              		.loc 1 579 0
 2122 00d4 7868     		ldr	r0, [r7, #4]
 2123 00d6 FFF7FEFF 		bl	psxTrocaByte
 580:../Main.c     **** 
 581:../Main.c     **** 	IO004_SetPin(ATT);
 2124              		.loc 1 581 0
 2125 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2126 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2127 00e2 5A68     		ldr	r2, [r3, #4]
 2128 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2129 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2130 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2131 00ee 4FF00101 		mov	r1, #1
 2132 00f2 01FA03F3 		lsl	r3, r1, r3
 2133 00f6 5360     		str	r3, [r2, #4]
 582:../Main.c     **** }
 2134              		.loc 1 582 0
 2135 00f8 07F10807 		add	r7, r7, #8
 2136 00fc BD46     		mov	sp, r7
 2137 00fe 80BD     		pop	{r7, pc}
 2138              		.cfi_endproc
 2139              	.LFE125:
 2141              		.section	.text.psxLeControle,"ax",%progbits
 2142              		.align	2
 2143              		.global	psxLeControle
 2144              		.thumb
 2145              		.thumb_func
 2147              	psxLeControle:
 2148              	.LFB126:
 583:../Main.c     **** 
 584:../Main.c     **** void psxLeControle() {
 2149              		.loc 1 584 0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 8
 2152              		@ frame_needed = 1, uses_anonymous_args = 0
 2153 0000 80B5     		push	{r7, lr}
 2154              	.LCFI25:
 2155              		.cfi_def_cfa_offset 8
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158 0002 82B0     		sub	sp, sp, #8
 2159              	.LCFI26:
 2160              		.cfi_def_cfa_offset 16
 2161 0004 00AF     		add	r7, sp, #0
 2162              	.LCFI27:
 2163              		.cfi_def_cfa_register 7
 585:../Main.c     **** 	int psxByte = 0;
 2164              		.loc 1 585 0
 2165 0006 4FF00003 		mov	r3, #0
 2166 000a 3B60     		str	r3, [r7, #0]
 586:../Main.c     **** 	int psxCont;
 587:../Main.c     **** 
 588:../Main.c     **** 	IO004_SetPin(CMD);
 2167              		.loc 1 588 0
 2168 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2169 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2170 0014 5A68     		ldr	r2, [r3, #4]
 2171 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2172 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2173 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2174 0020 4FF00101 		mov	r1, #1
 2175 0024 01FA03F3 		lsl	r3, r1, r3
 2176 0028 5360     		str	r3, [r2, #4]
 589:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2177              		.loc 1 589 0
 2178 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2179 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2180 0032 5A68     		ldr	r2, [r3, #4]
 2181 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2182 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2183 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2184 003e 4FF00101 		mov	r1, #1
 2185 0042 01FA03F3 		lsl	r3, r1, r3
 2186 0046 5360     		str	r3, [r2, #4]
 590:../Main.c     **** 	IO004_ResetPin(ATT);
 2187              		.loc 1 590 0
 2188 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2189 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2190 0050 5A68     		ldr	r2, [r3, #4]
 2191 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2192 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2193 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2194 005c 4FF48031 		mov	r1, #65536
 2195 0060 01FA03F3 		lsl	r3, r1, r3
 2196 0064 5360     		str	r3, [r2, #4]
 591:../Main.c     **** 	delay(tempoInicio);
 2197              		.loc 1 591 0
 2198 0066 4FF49670 		mov	r0, #300
 2199 006a FFF7FEFF 		bl	delay
 592:../Main.c     **** 
 593:../Main.c     **** 	psxByte = 1;
 2200              		.loc 1 593 0
 2201 006e 4FF00103 		mov	r3, #1
 2202 0072 3B60     		str	r3, [r7, #0]
 594:../Main.c     **** 	psxTrocaByte(psxByte);
 2203              		.loc 1 594 0
 2204 0074 3868     		ldr	r0, [r7, #0]
 2205 0076 FFF7FEFF 		bl	psxTrocaByte
 595:../Main.c     **** 
 596:../Main.c     **** 	psxByte = 0x42;
 2206              		.loc 1 596 0
 2207 007a 4FF04203 		mov	r3, #66
 2208 007e 3B60     		str	r3, [r7, #0]
 597:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2209              		.loc 1 597 0
 2210 0080 3868     		ldr	r0, [r7, #0]
 2211 0082 FFF7FEFF 		bl	psxTrocaByte
 2212 0086 0346     		mov	r3, r0
 2213 0088 DAB2     		uxtb	r2, r3
 2214 008a 40F20003 		movw	r3, #:lower16:psx_status
 2215 008e C0F20003 		movt	r3, #:upper16:psx_status
 2216 0092 1A70     		strb	r2, [r3, #0]
 598:../Main.c     **** 
 599:../Main.c     **** 	psxByte = 0;
 2217              		.loc 1 599 0
 2218 0094 4FF00003 		mov	r3, #0
 2219 0098 3B60     		str	r3, [r7, #0]
 600:../Main.c     **** 	psxTrocaByte(psxByte);
 2220              		.loc 1 600 0
 2221 009a 3868     		ldr	r0, [r7, #0]
 2222 009c FFF7FEFF 		bl	psxTrocaByte
 601:../Main.c     **** 
 602:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2223              		.loc 1 602 0
 2224 00a0 4FF00003 		mov	r3, #0
 2225 00a4 7B60     		str	r3, [r7, #4]
 2226 00a6 0FE0     		b	.L77
 2227              	.L78:
 603:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 2228              		.loc 1 603 0 discriminator 2
 2229 00a8 4FF00000 		mov	r0, #0
 2230 00ac FFF7FEFF 		bl	psxTrocaByte
 2231 00b0 0146     		mov	r1, r0
 2232 00b2 40F20003 		movw	r3, #:lower16:psxDado
 2233 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 2234 00ba 7A68     		ldr	r2, [r7, #4]
 2235 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 602:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2236              		.loc 1 602 0 discriminator 2
 2237 00c0 7B68     		ldr	r3, [r7, #4]
 2238 00c2 03F10103 		add	r3, r3, #1
 2239 00c6 7B60     		str	r3, [r7, #4]
 2240              	.L77:
 602:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2241              		.loc 1 602 0 is_stmt 0 discriminator 1
 2242 00c8 7B68     		ldr	r3, [r7, #4]
 2243 00ca 052B     		cmp	r3, #5
 2244 00cc ECDD     		ble	.L78
 604:../Main.c     **** 
 605:../Main.c     **** 	IO004_SetPin(ATT);
 2245              		.loc 1 605 0 is_stmt 1
 2246 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2247 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2248 00d6 5A68     		ldr	r2, [r3, #4]
 2249 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2250 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2251 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2252 00e2 4FF00101 		mov	r1, #1
 2253 00e6 01FA03F3 		lsl	r3, r1, r3
 2254 00ea 5360     		str	r3, [r2, #4]
 606:../Main.c     **** }
 2255              		.loc 1 606 0
 2256 00ec 07F10807 		add	r7, r7, #8
 2257 00f0 BD46     		mov	sp, r7
 2258 00f2 80BD     		pop	{r7, pc}
 2259              		.cfi_endproc
 2260              	.LFE126:
 2262              		.section	.text.psxHandShake,"ax",%progbits
 2263              		.align	2
 2264              		.global	psxHandShake
 2265              		.thumb
 2266              		.thumb_func
 2268              	psxHandShake:
 2269              	.LFB127:
 607:../Main.c     **** 
 608:../Main.c     **** void psxHandShake() {
 2270              		.loc 1 608 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 8
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 0000 80B5     		push	{r7, lr}
 2275              	.LCFI28:
 2276              		.cfi_def_cfa_offset 8
 2277              		.cfi_offset 7, -8
 2278              		.cfi_offset 14, -4
 2279 0002 82B0     		sub	sp, sp, #8
 2280              	.LCFI29:
 2281              		.cfi_def_cfa_offset 16
 2282 0004 00AF     		add	r7, sp, #0
 2283              	.LCFI30:
 2284              		.cfi_def_cfa_register 7
 609:../Main.c     **** 	int psxByte = 0;
 2285              		.loc 1 609 0
 2286 0006 4FF00003 		mov	r3, #0
 2287 000a 7B60     		str	r3, [r7, #4]
 610:../Main.c     **** 
 611:../Main.c     **** 	IO004_SetPin(CMD);
 2288              		.loc 1 611 0
 2289 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2290 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2291 0014 5A68     		ldr	r2, [r3, #4]
 2292 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2293 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2294 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2295 0020 4FF00101 		mov	r1, #1
 2296 0024 01FA03F3 		lsl	r3, r1, r3
 2297 0028 5360     		str	r3, [r2, #4]
 612:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2298              		.loc 1 612 0
 2299 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2300 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2301 0032 5A68     		ldr	r2, [r3, #4]
 2302 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2303 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2304 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2305 003e 4FF00101 		mov	r1, #1
 2306 0042 01FA03F3 		lsl	r3, r1, r3
 2307 0046 5360     		str	r3, [r2, #4]
 613:../Main.c     **** 	IO004_ResetPin(ATT);
 2308              		.loc 1 613 0
 2309 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2310 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2311 0050 5A68     		ldr	r2, [r3, #4]
 2312 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2313 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2314 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2315 005c 4FF48031 		mov	r1, #65536
 2316 0060 01FA03F3 		lsl	r3, r1, r3
 2317 0064 5360     		str	r3, [r2, #4]
 614:../Main.c     **** 	delay(tempoInicio);
 2318              		.loc 1 614 0
 2319 0066 4FF49670 		mov	r0, #300
 2320 006a FFF7FEFF 		bl	delay
 615:../Main.c     **** 
 616:../Main.c     **** 	psxByte = 1;
 2321              		.loc 1 616 0
 2322 006e 4FF00103 		mov	r3, #1
 2323 0072 7B60     		str	r3, [r7, #4]
 617:../Main.c     **** 	psxTrocaByte(psxByte);
 2324              		.loc 1 617 0
 2325 0074 7868     		ldr	r0, [r7, #4]
 2326 0076 FFF7FEFF 		bl	psxTrocaByte
 618:../Main.c     **** 
 619:../Main.c     **** 	psxByte = 0x42;
 2327              		.loc 1 619 0
 2328 007a 4FF04203 		mov	r3, #66
 2329 007e 7B60     		str	r3, [r7, #4]
 620:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2330              		.loc 1 620 0
 2331 0080 7868     		ldr	r0, [r7, #4]
 2332 0082 FFF7FEFF 		bl	psxTrocaByte
 2333 0086 0346     		mov	r3, r0
 2334 0088 DAB2     		uxtb	r2, r3
 2335 008a 40F20003 		movw	r3, #:lower16:psx_status
 2336 008e C0F20003 		movt	r3, #:upper16:psx_status
 2337 0092 1A70     		strb	r2, [r3, #0]
 621:../Main.c     **** 
 622:../Main.c     **** 	psxByte = 0;
 2338              		.loc 1 622 0
 2339 0094 4FF00003 		mov	r3, #0
 2340 0098 7B60     		str	r3, [r7, #4]
 623:../Main.c     **** 	psxTrocaByte(psxByte);
 2341              		.loc 1 623 0
 2342 009a 7868     		ldr	r0, [r7, #4]
 2343 009c FFF7FEFF 		bl	psxTrocaByte
 624:../Main.c     **** 
 625:../Main.c     **** 	psxByte = 0;
 2344              		.loc 1 625 0
 2345 00a0 4FF00003 		mov	r3, #0
 2346 00a4 7B60     		str	r3, [r7, #4]
 626:../Main.c     **** 	psxTrocaByte(psxByte);
 2347              		.loc 1 626 0
 2348 00a6 7868     		ldr	r0, [r7, #4]
 2349 00a8 FFF7FEFF 		bl	psxTrocaByte
 627:../Main.c     **** 
 628:../Main.c     **** 	psxByte = 0;
 2350              		.loc 1 628 0
 2351 00ac 4FF00003 		mov	r3, #0
 2352 00b0 7B60     		str	r3, [r7, #4]
 629:../Main.c     **** 	psxTrocaByte(psxByte);
 2353              		.loc 1 629 0
 2354 00b2 7868     		ldr	r0, [r7, #4]
 2355 00b4 FFF7FEFF 		bl	psxTrocaByte
 630:../Main.c     **** 
 631:../Main.c     **** 	IO004_SetPin(ATT);
 2356              		.loc 1 631 0
 2357 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2358 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2359 00c0 5A68     		ldr	r2, [r3, #4]
 2360 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2361 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2362 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2363 00cc 4FF00101 		mov	r1, #1
 2364 00d0 01FA03F3 		lsl	r3, r1, r3
 2365 00d4 5360     		str	r3, [r2, #4]
 632:../Main.c     **** }
 2366              		.loc 1 632 0
 2367 00d6 07F10807 		add	r7, r7, #8
 2368 00da BD46     		mov	sp, r7
 2369 00dc 80BD     		pop	{r7, pc}
 2370              		.cfi_endproc
 2371              	.LFE127:
 2373 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 2374              		.align	2
 2375              		.global	psxTrocaByte
 2376              		.thumb
 2377              		.thumb_func
 2379              	psxTrocaByte:
 2380              	.LFB128:
 633:../Main.c     **** 
 634:../Main.c     **** int psxTrocaByte(int byteDado) {
 2381              		.loc 1 634 0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 16
 2384              		@ frame_needed = 1, uses_anonymous_args = 0
 2385 0000 80B5     		push	{r7, lr}
 2386              	.LCFI31:
 2387              		.cfi_def_cfa_offset 8
 2388              		.cfi_offset 7, -8
 2389              		.cfi_offset 14, -4
 2390 0002 84B0     		sub	sp, sp, #16
 2391              	.LCFI32:
 2392              		.cfi_def_cfa_offset 24
 2393 0004 00AF     		add	r7, sp, #0
 2394              	.LCFI33:
 2395              		.cfi_def_cfa_register 7
 2396 0006 7860     		str	r0, [r7, #4]
 635:../Main.c     **** 	int c;
 636:../Main.c     **** 	int aux = 0;
 2397              		.loc 1 636 0
 2398 0008 4FF00003 		mov	r3, #0
 2399 000c BB60     		str	r3, [r7, #8]
 637:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2400              		.loc 1 637 0
 2401 000e 4FF00003 		mov	r3, #0
 2402 0012 FB60     		str	r3, [r7, #12]
 2403 0014 69E0     		b	.L81
 2404              	.L85:
 638:../Main.c     **** 
 639:../Main.c     **** 		if (byteDado & (0x01 << c))
 2405              		.loc 1 639 0
 2406 0016 7A68     		ldr	r2, [r7, #4]
 2407 0018 FB68     		ldr	r3, [r7, #12]
 2408 001a 42FA03F3 		asr	r3, r2, r3
 2409 001e 03F00103 		and	r3, r3, #1
 2410 0022 002B     		cmp	r3, #0
 2411 0024 0FD0     		beq	.L82
 640:../Main.c     **** 			IO004_SetPin(CMD);
 2412              		.loc 1 640 0
 2413 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2414 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2415 002e 5A68     		ldr	r2, [r3, #4]
 2416 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2417 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2418 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2419 003a 4FF00101 		mov	r1, #1
 2420 003e 01FA03F3 		lsl	r3, r1, r3
 2421 0042 5360     		str	r3, [r2, #4]
 2422 0044 0EE0     		b	.L83
 2423              	.L82:
 641:../Main.c     **** 		else
 642:../Main.c     **** 			IO004_ResetPin(CMD);
 2424              		.loc 1 642 0
 2425 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2426 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2427 004e 5A68     		ldr	r2, [r3, #4]
 2428 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2429 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2430 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2431 005a 4FF48031 		mov	r1, #65536
 2432 005e 01FA03F3 		lsl	r3, r1, r3
 2433 0062 5360     		str	r3, [r2, #4]
 2434              	.L83:
 643:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 2435              		.loc 1 643 0
 2436 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2437 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2438 006c 5A68     		ldr	r2, [r3, #4]
 2439 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2440 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2441 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2442 0078 4FF48031 		mov	r1, #65536
 2443 007c 01FA03F3 		lsl	r3, r1, r3
 2444 0080 5360     		str	r3, [r2, #4]
 644:../Main.c     **** 		delay(tempoClk);
 2445              		.loc 1 644 0
 2446 0082 4FF49670 		mov	r0, #300
 2447 0086 FFF7FEFF 		bl	delay
 645:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 2448              		.loc 1 645 0
 2449 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2450 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2451 0092 5B68     		ldr	r3, [r3, #4]
 2452 0094 5A6A     		ldr	r2, [r3, #36]
 2453 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2454 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2455 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2456 00a0 22FA03F3 		lsr	r3, r2, r3
 2457 00a4 03F00103 		and	r3, r3, #1
 2458 00a8 002B     		cmp	r3, #0
 2459 00aa 07D1     		bne	.L84
 646:../Main.c     **** 			aux = aux | (1 << c);
 2460              		.loc 1 646 0
 2461 00ac 4FF00102 		mov	r2, #1
 2462 00b0 FB68     		ldr	r3, [r7, #12]
 2463 00b2 02FA03F3 		lsl	r3, r2, r3
 2464 00b6 BA68     		ldr	r2, [r7, #8]
 2465 00b8 1343     		orrs	r3, r3, r2
 2466 00ba BB60     		str	r3, [r7, #8]
 2467              	.L84:
 647:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 2468              		.loc 1 647 0
 2469 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2470 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2471 00c4 5A68     		ldr	r2, [r3, #4]
 2472 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2473 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2474 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2475 00d0 4FF00101 		mov	r1, #1
 2476 00d4 01FA03F3 		lsl	r3, r1, r3
 2477 00d8 5360     		str	r3, [r2, #4]
 648:../Main.c     **** 		delay(tempoClk);
 2478              		.loc 1 648 0
 2479 00da 4FF49670 		mov	r0, #300
 2480 00de FFF7FEFF 		bl	delay
 637:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2481              		.loc 1 637 0
 2482 00e2 FB68     		ldr	r3, [r7, #12]
 2483 00e4 03F10103 		add	r3, r3, #1
 2484 00e8 FB60     		str	r3, [r7, #12]
 2485              	.L81:
 637:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2486              		.loc 1 637 0 is_stmt 0 discriminator 1
 2487 00ea FB68     		ldr	r3, [r7, #12]
 2488 00ec 072B     		cmp	r3, #7
 2489 00ee 92DD     		ble	.L85
 649:../Main.c     **** 	}
 650:../Main.c     **** 	IO004_SetPin(CMD);
 2490              		.loc 1 650 0 is_stmt 1
 2491 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2492 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2493 00f8 5A68     		ldr	r2, [r3, #4]
 2494 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2495 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2496 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2497 0104 4FF00101 		mov	r1, #1
 2498 0108 01FA03F3 		lsl	r3, r1, r3
 2499 010c 5360     		str	r3, [r2, #4]
 651:../Main.c     **** 	delay(tempoEntreByte);
 2500              		.loc 1 651 0
 2501 010e 4FF06400 		mov	r0, #100
 2502 0112 FFF7FEFF 		bl	delay
 652:../Main.c     **** 	return aux;
 2503              		.loc 1 652 0
 2504 0116 BB68     		ldr	r3, [r7, #8]
 653:../Main.c     **** }
 2505              		.loc 1 653 0
 2506 0118 1846     		mov	r0, r3
 2507 011a 07F11007 		add	r7, r7, #16
 2508 011e BD46     		mov	sp, r7
 2509 0120 80BD     		pop	{r7, pc}
 2510              		.cfi_endproc
 2511              	.LFE128:
 2513 0122 00BF     		.section	.text.delay,"ax",%progbits
 2514              		.align	2
 2515              		.global	delay
 2516              		.thumb
 2517              		.thumb_func
 2519              	delay:
 2520              	.LFB129:
 654:../Main.c     **** //void psxLeControle()
 655:../Main.c     **** //{
 656:../Main.c     **** //	int psxByte = 0;
 657:../Main.c     **** //	int psxCont;
 658:../Main.c     **** //
 659:../Main.c     **** //	IO004_SetPin(CMD);
 660:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 661:../Main.c     **** //	IO004_ResetPin(ATT);
 662:../Main.c     **** //	delay(tempoInicio);
 663:../Main.c     **** //
 664:../Main.c     **** //	psxByte = 1;
 665:../Main.c     **** //	psxGravaByte(psxByte);
 666:../Main.c     **** //
 667:../Main.c     **** //	psxByte = 66;
 668:../Main.c     **** //	psxGravaByte(psxByte);
 669:../Main.c     **** //
 670:../Main.c     **** //	psxByte = 0;
 671:../Main.c     **** //	psxGravaByte(psxByte);
 672:../Main.c     **** //
 673:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 674:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 675:../Main.c     **** //
 676:../Main.c     **** //	IO004_SetPin(ATT);
 677:../Main.c     **** //}
 678:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 679:../Main.c     **** //{
 680:../Main.c     **** //	int c;
 681:../Main.c     **** //	for (c=0;c<=7;c++)
 682:../Main.c     **** //	{
 683:../Main.c     **** //		if(byteDado & (0x01<<c))
 684:../Main.c     **** //			IO004_SetPin(CMD);
 685:../Main.c     **** //		else
 686:../Main.c     **** //			IO004_ResetPin(CMD);
 687:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 688:../Main.c     **** //		delay(tempoClk);
 689:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 690:../Main.c     **** //		delay(tempoClk);
 691:../Main.c     **** //	}
 692:../Main.c     **** //	IO004_SetPin(CMD);
 693:../Main.c     **** //	delay(tempoEntreByte);
 694:../Main.c     **** //}
 695:../Main.c     **** //int psxLeByte()
 696:../Main.c     **** //{
 697:../Main.c     **** //	int aux = 0;
 698:../Main.c     **** //	int c;
 699:../Main.c     **** //
 700:../Main.c     **** //	for (c=0;c<=7;c++)
 701:../Main.c     **** //	{
 702:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 703:../Main.c     **** //		delay(tempoClk);
 704:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 705:../Main.c     **** //	  		  aux = aux | (1 << c);
 706:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 707:../Main.c     **** //	  	delay(tempoClk);
 708:../Main.c     **** //	}
 709:../Main.c     **** //	delay(tempoEntreByte);
 710:../Main.c     **** //	return (aux);
 711:../Main.c     **** //}
 712:../Main.c     **** 
 713:../Main.c     **** /***************************************************/
 714:../Main.c     **** /*****************FUNCOES GERAIS********************/
 715:../Main.c     **** /***************************************************/
 716:../Main.c     **** 
 717:../Main.c     **** void delay(long unsigned int i) {
 2521              		.loc 1 717 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 8
 2524              		@ frame_needed = 1, uses_anonymous_args = 0
 2525              		@ link register save eliminated.
 2526 0000 80B4     		push	{r7}
 2527              	.LCFI34:
 2528              		.cfi_def_cfa_offset 4
 2529              		.cfi_offset 7, -4
 2530 0002 83B0     		sub	sp, sp, #12
 2531              	.LCFI35:
 2532              		.cfi_def_cfa_offset 16
 2533 0004 00AF     		add	r7, sp, #0
 2534              	.LCFI36:
 2535              		.cfi_def_cfa_register 7
 2536 0006 7860     		str	r0, [r7, #4]
 718:../Main.c     **** 	while (i--) {
 2537              		.loc 1 718 0
 2538 0008 00E0     		b	.L88
 2539              	.L89:
 2540              	.LBB6:
 2541              	.LBB7:
 2542              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 2543              		.loc 2 327 0
 2544              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 2545 000a 00BF     		nop
 2546              	@ 0 "" 2
 2547              		.thumb
 2548              	.L88:
 2549              	.LBE7:
 2550              	.LBE6:
 2551              		.loc 1 718 0 discriminator 1
 2552 000c 7B68     		ldr	r3, [r7, #4]
 2553 000e 002B     		cmp	r3, #0
 2554 0010 0CBF     		ite	eq
 2555 0012 0023     		moveq	r3, #0
 2556 0014 0123     		movne	r3, #1
 2557 0016 DBB2     		uxtb	r3, r3
 2558 0018 7A68     		ldr	r2, [r7, #4]
 2559 001a 02F1FF32 		add	r2, r2, #-1
 2560 001e 7A60     		str	r2, [r7, #4]
 2561 0020 002B     		cmp	r3, #0
 2562 0022 F2D1     		bne	.L89
 719:../Main.c     **** 		__NOP();
 720:../Main.c     **** 	}
 721:../Main.c     **** }
 2563              		.loc 1 721 0
 2564 0024 07F10C07 		add	r7, r7, #12
 2565 0028 BD46     		mov	sp, r7
 2566 002a 80BC     		pop	{r7}
 2567 002c 7047     		bx	lr
 2568              		.cfi_endproc
 2569              	.LFE129:
 2571 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 2572              		.align	2
 2573              		.global	printByteToInt
 2574              		.thumb
 2575              		.thumb_func
 2577              	printByteToInt:
 2578              	.LFB130:
 722:../Main.c     **** void printByteToInt(char a) {
 2579              		.loc 1 722 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 16
 2582              		@ frame_needed = 1, uses_anonymous_args = 0
 2583              		@ link register save eliminated.
 2584 0000 80B4     		push	{r7}
 2585              	.LCFI37:
 2586              		.cfi_def_cfa_offset 4
 2587              		.cfi_offset 7, -4
 2588 0002 85B0     		sub	sp, sp, #20
 2589              	.LCFI38:
 2590              		.cfi_def_cfa_offset 24
 2591 0004 00AF     		add	r7, sp, #0
 2592              	.LCFI39:
 2593              		.cfi_def_cfa_register 7
 2594 0006 0346     		mov	r3, r0
 2595 0008 FB71     		strb	r3, [r7, #7]
 723:../Main.c     **** 	char c = a % 10 + '0';
 2596              		.loc 1 723 0
 2597 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2598 000c 4CF6CD43 		movw	r3, #52429
 2599 0010 CCF6CC43 		movt	r3, 52428
 2600 0014 A3FB0213 		umull	r1, r3, r3, r2
 2601 0018 4FEAD301 		lsr	r1, r3, #3
 2602 001c 0B46     		mov	r3, r1
 2603 001e 4FEA8303 		lsl	r3, r3, #2
 2604 0022 5B18     		adds	r3, r3, r1
 2605 0024 4FEA4303 		lsl	r3, r3, #1
 2606 0028 D31A     		subs	r3, r2, r3
 2607 002a DBB2     		uxtb	r3, r3
 2608 002c 03F13003 		add	r3, r3, #48
 2609 0030 FB73     		strb	r3, [r7, #15]
 724:../Main.c     **** 	a /= 10;
 2610              		.loc 1 724 0
 2611 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2612 0034 4CF6CD43 		movw	r3, #52429
 2613 0038 CCF6CC43 		movt	r3, 52428
 2614 003c A3FB0213 		umull	r1, r3, r3, r2
 2615 0040 4FEAD303 		lsr	r3, r3, #3
 2616 0044 FB71     		strb	r3, [r7, #7]
 725:../Main.c     **** 	char d = a % 10 + '0';
 2617              		.loc 1 725 0
 2618 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2619 0048 4CF6CD43 		movw	r3, #52429
 2620 004c CCF6CC43 		movt	r3, 52428
 2621 0050 A3FB0213 		umull	r1, r3, r3, r2
 2622 0054 4FEAD301 		lsr	r1, r3, #3
 2623 0058 0B46     		mov	r3, r1
 2624 005a 4FEA8303 		lsl	r3, r3, #2
 2625 005e 5B18     		adds	r3, r3, r1
 2626 0060 4FEA4303 		lsl	r3, r3, #1
 2627 0064 D31A     		subs	r3, r2, r3
 2628 0066 DBB2     		uxtb	r3, r3
 2629 0068 03F13003 		add	r3, r3, #48
 2630 006c BB73     		strb	r3, [r7, #14]
 726:../Main.c     **** 	a /= 10;
 2631              		.loc 1 726 0
 2632 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2633 0070 4CF6CD43 		movw	r3, #52429
 2634 0074 CCF6CC43 		movt	r3, 52428
 2635 0078 A3FB0213 		umull	r1, r3, r3, r2
 2636 007c 4FEAD303 		lsr	r3, r3, #3
 2637 0080 FB71     		strb	r3, [r7, #7]
 727:../Main.c     **** 	char e = a % 10 + '0';
 2638              		.loc 1 727 0
 2639 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2640 0084 4CF6CD43 		movw	r3, #52429
 2641 0088 CCF6CC43 		movt	r3, 52428
 2642 008c A3FB0213 		umull	r1, r3, r3, r2
 2643 0090 4FEAD301 		lsr	r1, r3, #3
 2644 0094 0B46     		mov	r3, r1
 2645 0096 4FEA8303 		lsl	r3, r3, #2
 2646 009a 5B18     		adds	r3, r3, r1
 2647 009c 4FEA4303 		lsl	r3, r3, #1
 2648 00a0 D31A     		subs	r3, r2, r3
 2649 00a2 DBB2     		uxtb	r3, r3
 2650 00a4 03F13003 		add	r3, r3, #48
 2651 00a8 7B73     		strb	r3, [r7, #13]
 728:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2652              		.loc 1 728 0
 2653 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2654 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2655 00b2 1B68     		ldr	r3, [r3, #0]
 2656 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2657 00b6 C3F88021 		str	r2, [r3, #384]
 729:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2658              		.loc 1 729 0
 2659 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2660 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2661 00c2 1B68     		ldr	r3, [r3, #0]
 2662 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2663 00c6 C3F88021 		str	r2, [r3, #384]
 730:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2664              		.loc 1 730 0
 2665 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2666 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2667 00d2 1B68     		ldr	r3, [r3, #0]
 2668 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2669 00d6 C3F88021 		str	r2, [r3, #384]
 731:../Main.c     **** 
 732:../Main.c     **** }
 2670              		.loc 1 732 0
 2671 00da 07F11407 		add	r7, r7, #20
 2672 00de BD46     		mov	sp, r7
 2673 00e0 80BC     		pop	{r7}
 2674 00e2 7047     		bx	lr
 2675              		.cfi_endproc
 2676              	.LFE130:
 2678              		.section	.text.VADC0_C0_2_IRQHandler,"ax",%progbits
 2679              		.align	2
 2680              		.global	VADC0_C0_2_IRQHandler
 2681              		.thumb
 2682              		.thumb_func
 2684              	VADC0_C0_2_IRQHandler:
 2685              	.LFB131:
 733:../Main.c     **** 
 734:../Main.c     **** void adc_event(void) {
 2686              		.loc 1 734 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 1, uses_anonymous_args = 0
 2690 0000 80B5     		push	{r7, lr}
 2691              	.LCFI40:
 2692              		.cfi_def_cfa_offset 8
 2693              		.cfi_offset 7, -8
 2694              		.cfi_offset 14, -4
 2695 0002 00AF     		add	r7, sp, #0
 2696              	.LCFI41:
 2697              		.cfi_def_cfa_register 7
 735:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 2698              		.loc 1 735 0
 2699 0004 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 2700 0008 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 2701 000c 40F20001 		movw	r1, #:lower16:result
 2702 0010 C0F20001 		movt	r1, #:upper16:result
 2703 0014 FFF7FEFF 		bl	ADC001_GetResult
 736:../Main.c     **** }
 2704              		.loc 1 736 0
 2705 0018 80BD     		pop	{r7, pc}
 2706              		.cfi_endproc
 2707              	.LFE131:
 2709 001a 00BF     		.section	.text.updateButtonStates,"ax",%progbits
 2710              		.align	2
 2711              		.global	updateButtonStates
 2712              		.thumb
 2713              		.thumb_func
 2715              	updateButtonStates:
 2716              	.LFB132:
 737:../Main.c     **** 
 738:../Main.c     **** /***************************************************/
 739:../Main.c     **** /*****************FUNCOES BOTOES********************/
 740:../Main.c     **** /***************************************************/
 741:../Main.c     **** 
 742:../Main.c     **** void updateButtonStates() {
 2717              		.loc 1 742 0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 1, uses_anonymous_args = 0
 2721              		@ link register save eliminated.
 2722 0000 80B4     		push	{r7}
 2723              	.LCFI42:
 2724              		.cfi_def_cfa_offset 4
 2725              		.cfi_offset 7, -4
 2726 0002 00AF     		add	r7, sp, #0
 2727              	.LCFI43:
 2728              		.cfi_def_cfa_register 7
 743:../Main.c     **** 	l_um_state_before = l_um_state;
 2729              		.loc 1 743 0
 2730 0004 40F20003 		movw	r3, #:lower16:l_um_state
 2731 0008 C0F20003 		movt	r3, #:upper16:l_um_state
 2732 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2733 000e 40F20003 		movw	r3, #:lower16:l_um_state_before
 2734 0012 C0F20003 		movt	r3, #:upper16:l_um_state_before
 2735 0016 1A70     		strb	r2, [r3, #0]
 744:../Main.c     **** 	l_dois_state_before = l_dois_state;
 2736              		.loc 1 744 0
 2737 0018 40F20003 		movw	r3, #:lower16:l_dois_state
 2738 001c C0F20003 		movt	r3, #:upper16:l_dois_state
 2739 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2740 0022 40F20003 		movw	r3, #:lower16:l_dois_state_before
 2741 0026 C0F20003 		movt	r3, #:upper16:l_dois_state_before
 2742 002a 1A70     		strb	r2, [r3, #0]
 745:../Main.c     **** 	l_tres_state_before = l_tres_state;
 2743              		.loc 1 745 0
 2744 002c 40F20003 		movw	r3, #:lower16:l_tres_state
 2745 0030 C0F20003 		movt	r3, #:upper16:l_tres_state
 2746 0034 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2747 0036 40F20003 		movw	r3, #:lower16:l_tres_state_before
 2748 003a C0F20003 		movt	r3, #:upper16:l_tres_state_before
 2749 003e 1A70     		strb	r2, [r3, #0]
 746:../Main.c     **** 	r_um_state_before = r_um_state;
 2750              		.loc 1 746 0
 2751 0040 40F20003 		movw	r3, #:lower16:r_um_state
 2752 0044 C0F20003 		movt	r3, #:upper16:r_um_state
 2753 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2754 004a 40F20003 		movw	r3, #:lower16:r_um_state_before
 2755 004e C0F20003 		movt	r3, #:upper16:r_um_state_before
 2756 0052 1A70     		strb	r2, [r3, #0]
 747:../Main.c     **** 	r_dois_state_before = r_dois_state;
 2757              		.loc 1 747 0
 2758 0054 40F20003 		movw	r3, #:lower16:r_dois_state
 2759 0058 C0F20003 		movt	r3, #:upper16:r_dois_state
 2760 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2761 005e 40F20003 		movw	r3, #:lower16:r_dois_state_before
 2762 0062 C0F20003 		movt	r3, #:upper16:r_dois_state_before
 2763 0066 1A70     		strb	r2, [r3, #0]
 748:../Main.c     **** 	r_tres_state_before = r_tres_state;
 2764              		.loc 1 748 0
 2765 0068 40F20003 		movw	r3, #:lower16:r_tres_state
 2766 006c C0F20003 		movt	r3, #:upper16:r_tres_state
 2767 0070 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2768 0072 40F20003 		movw	r3, #:lower16:r_tres_state_before
 2769 0076 C0F20003 		movt	r3, #:upper16:r_tres_state_before
 2770 007a 1A70     		strb	r2, [r3, #0]
 749:../Main.c     **** 	cross_state_before = cross_state;
 2771              		.loc 1 749 0
 2772 007c 40F20003 		movw	r3, #:lower16:cross_state
 2773 0080 C0F20003 		movt	r3, #:upper16:cross_state
 2774 0084 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2775 0086 40F20003 		movw	r3, #:lower16:cross_state_before
 2776 008a C0F20003 		movt	r3, #:upper16:cross_state_before
 2777 008e 1A70     		strb	r2, [r3, #0]
 750:../Main.c     **** 	sqr_state_before = sqr_state;
 2778              		.loc 1 750 0
 2779 0090 40F20003 		movw	r3, #:lower16:sqr_state
 2780 0094 C0F20003 		movt	r3, #:upper16:sqr_state
 2781 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2782 009a 40F20003 		movw	r3, #:lower16:sqr_state_before
 2783 009e C0F20003 		movt	r3, #:upper16:sqr_state_before
 2784 00a2 1A70     		strb	r2, [r3, #0]
 751:../Main.c     **** 	triangle_state_before = triangle_state;
 2785              		.loc 1 751 0
 2786 00a4 40F20003 		movw	r3, #:lower16:triangle_state
 2787 00a8 C0F20003 		movt	r3, #:upper16:triangle_state
 2788 00ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2789 00ae 40F20003 		movw	r3, #:lower16:triangle_state_before
 2790 00b2 C0F20003 		movt	r3, #:upper16:triangle_state_before
 2791 00b6 1A70     		strb	r2, [r3, #0]
 752:../Main.c     **** 	circle_state_before = circle_state;
 2792              		.loc 1 752 0
 2793 00b8 40F20003 		movw	r3, #:lower16:circle_state
 2794 00bc C0F20003 		movt	r3, #:upper16:circle_state
 2795 00c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2796 00c2 40F20003 		movw	r3, #:lower16:circle_state_before
 2797 00c6 C0F20003 		movt	r3, #:upper16:circle_state_before
 2798 00ca 1A70     		strb	r2, [r3, #0]
 753:../Main.c     **** 	left_state_before = left_state;
 2799              		.loc 1 753 0
 2800 00cc 40F20003 		movw	r3, #:lower16:left_state
 2801 00d0 C0F20003 		movt	r3, #:upper16:left_state
 2802 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2803 00d6 40F20003 		movw	r3, #:lower16:left_state_before
 2804 00da C0F20003 		movt	r3, #:upper16:left_state_before
 2805 00de 1A70     		strb	r2, [r3, #0]
 754:../Main.c     **** 	right_state_before = right_state;
 2806              		.loc 1 754 0
 2807 00e0 40F20003 		movw	r3, #:lower16:right_state
 2808 00e4 C0F20003 		movt	r3, #:upper16:right_state
 2809 00e8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2810 00ea 40F20003 		movw	r3, #:lower16:right_state_before
 2811 00ee C0F20003 		movt	r3, #:upper16:right_state_before
 2812 00f2 1A70     		strb	r2, [r3, #0]
 755:../Main.c     **** 	up_state_before = up_state;
 2813              		.loc 1 755 0
 2814 00f4 40F20003 		movw	r3, #:lower16:up_state
 2815 00f8 C0F20003 		movt	r3, #:upper16:up_state
 2816 00fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2817 00fe 40F20003 		movw	r3, #:lower16:up_state_before
 2818 0102 C0F20003 		movt	r3, #:upper16:up_state_before
 2819 0106 1A70     		strb	r2, [r3, #0]
 756:../Main.c     **** 	down_state_before = down_state;
 2820              		.loc 1 756 0
 2821 0108 40F20003 		movw	r3, #:lower16:down_state
 2822 010c C0F20003 		movt	r3, #:upper16:down_state
 2823 0110 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2824 0112 40F20003 		movw	r3, #:lower16:down_state_before
 2825 0116 C0F20003 		movt	r3, #:upper16:down_state_before
 2826 011a 1A70     		strb	r2, [r3, #0]
 757:../Main.c     **** 	start_state_before = start_state;
 2827              		.loc 1 757 0
 2828 011c 40F20003 		movw	r3, #:lower16:start_state
 2829 0120 C0F20003 		movt	r3, #:upper16:start_state
 2830 0124 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2831 0126 40F20003 		movw	r3, #:lower16:start_state_before
 2832 012a C0F20003 		movt	r3, #:upper16:start_state_before
 2833 012e 1A70     		strb	r2, [r3, #0]
 758:../Main.c     **** 	select_state_before = select_state;
 2834              		.loc 1 758 0
 2835 0130 40F20003 		movw	r3, #:lower16:select_state
 2836 0134 C0F20003 		movt	r3, #:upper16:select_state
 2837 0138 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2838 013a 40F20003 		movw	r3, #:lower16:select_state_before
 2839 013e C0F20003 		movt	r3, #:upper16:select_state_before
 2840 0142 1A70     		strb	r2, [r3, #0]
 759:../Main.c     **** 
 760:../Main.c     **** 	l_um_state = 0;
 2841              		.loc 1 760 0
 2842 0144 40F20003 		movw	r3, #:lower16:l_um_state
 2843 0148 C0F20003 		movt	r3, #:upper16:l_um_state
 2844 014c 4FF00002 		mov	r2, #0
 2845 0150 1A70     		strb	r2, [r3, #0]
 761:../Main.c     **** 	l_dois_state = 0;
 2846              		.loc 1 761 0
 2847 0152 40F20003 		movw	r3, #:lower16:l_dois_state
 2848 0156 C0F20003 		movt	r3, #:upper16:l_dois_state
 2849 015a 4FF00002 		mov	r2, #0
 2850 015e 1A70     		strb	r2, [r3, #0]
 762:../Main.c     **** 	l_tres_state = 0;
 2851              		.loc 1 762 0
 2852 0160 40F20003 		movw	r3, #:lower16:l_tres_state
 2853 0164 C0F20003 		movt	r3, #:upper16:l_tres_state
 2854 0168 4FF00002 		mov	r2, #0
 2855 016c 1A70     		strb	r2, [r3, #0]
 763:../Main.c     **** 	r_um_state = 0;
 2856              		.loc 1 763 0
 2857 016e 40F20003 		movw	r3, #:lower16:r_um_state
 2858 0172 C0F20003 		movt	r3, #:upper16:r_um_state
 2859 0176 4FF00002 		mov	r2, #0
 2860 017a 1A70     		strb	r2, [r3, #0]
 764:../Main.c     **** 	r_dois_state = 0;
 2861              		.loc 1 764 0
 2862 017c 40F20003 		movw	r3, #:lower16:r_dois_state
 2863 0180 C0F20003 		movt	r3, #:upper16:r_dois_state
 2864 0184 4FF00002 		mov	r2, #0
 2865 0188 1A70     		strb	r2, [r3, #0]
 765:../Main.c     **** 	r_tres_state = 0;
 2866              		.loc 1 765 0
 2867 018a 40F20003 		movw	r3, #:lower16:r_tres_state
 2868 018e C0F20003 		movt	r3, #:upper16:r_tres_state
 2869 0192 4FF00002 		mov	r2, #0
 2870 0196 1A70     		strb	r2, [r3, #0]
 766:../Main.c     **** 	cross_state = 0;
 2871              		.loc 1 766 0
 2872 0198 40F20003 		movw	r3, #:lower16:cross_state
 2873 019c C0F20003 		movt	r3, #:upper16:cross_state
 2874 01a0 4FF00002 		mov	r2, #0
 2875 01a4 1A70     		strb	r2, [r3, #0]
 767:../Main.c     **** 	sqr_state = 0;
 2876              		.loc 1 767 0
 2877 01a6 40F20003 		movw	r3, #:lower16:sqr_state
 2878 01aa C0F20003 		movt	r3, #:upper16:sqr_state
 2879 01ae 4FF00002 		mov	r2, #0
 2880 01b2 1A70     		strb	r2, [r3, #0]
 768:../Main.c     **** 	triangle_state = 0;
 2881              		.loc 1 768 0
 2882 01b4 40F20003 		movw	r3, #:lower16:triangle_state
 2883 01b8 C0F20003 		movt	r3, #:upper16:triangle_state
 2884 01bc 4FF00002 		mov	r2, #0
 2885 01c0 1A70     		strb	r2, [r3, #0]
 769:../Main.c     **** 	circle_state = 0;
 2886              		.loc 1 769 0
 2887 01c2 40F20003 		movw	r3, #:lower16:circle_state
 2888 01c6 C0F20003 		movt	r3, #:upper16:circle_state
 2889 01ca 4FF00002 		mov	r2, #0
 2890 01ce 1A70     		strb	r2, [r3, #0]
 770:../Main.c     **** 	left_state = 0;
 2891              		.loc 1 770 0
 2892 01d0 40F20003 		movw	r3, #:lower16:left_state
 2893 01d4 C0F20003 		movt	r3, #:upper16:left_state
 2894 01d8 4FF00002 		mov	r2, #0
 2895 01dc 1A70     		strb	r2, [r3, #0]
 771:../Main.c     **** 	right_state = 0;
 2896              		.loc 1 771 0
 2897 01de 40F20003 		movw	r3, #:lower16:right_state
 2898 01e2 C0F20003 		movt	r3, #:upper16:right_state
 2899 01e6 4FF00002 		mov	r2, #0
 2900 01ea 1A70     		strb	r2, [r3, #0]
 772:../Main.c     **** 	up_state = 0;
 2901              		.loc 1 772 0
 2902 01ec 40F20003 		movw	r3, #:lower16:up_state
 2903 01f0 C0F20003 		movt	r3, #:upper16:up_state
 2904 01f4 4FF00002 		mov	r2, #0
 2905 01f8 1A70     		strb	r2, [r3, #0]
 773:../Main.c     **** 	down_state = 0;
 2906              		.loc 1 773 0
 2907 01fa 40F20003 		movw	r3, #:lower16:down_state
 2908 01fe C0F20003 		movt	r3, #:upper16:down_state
 2909 0202 4FF00002 		mov	r2, #0
 2910 0206 1A70     		strb	r2, [r3, #0]
 774:../Main.c     **** 	start_state = 0;
 2911              		.loc 1 774 0
 2912 0208 40F20003 		movw	r3, #:lower16:start_state
 2913 020c C0F20003 		movt	r3, #:upper16:start_state
 2914 0210 4FF00002 		mov	r2, #0
 2915 0214 1A70     		strb	r2, [r3, #0]
 775:../Main.c     **** 	select_state = 0;
 2916              		.loc 1 775 0
 2917 0216 40F20003 		movw	r3, #:lower16:select_state
 2918 021a C0F20003 		movt	r3, #:upper16:select_state
 2919 021e 4FF00002 		mov	r2, #0
 2920 0222 1A70     		strb	r2, [r3, #0]
 776:../Main.c     **** }
 2921              		.loc 1 776 0
 2922 0224 BD46     		mov	sp, r7
 2923 0226 80BC     		pop	{r7}
 2924 0228 7047     		bx	lr
 2925              		.cfi_endproc
 2926              	.LFE132:
 2928 022a 00BF     		.section	.text.turbo,"ax",%progbits
 2929              		.align	2
 2930              		.global	turbo
 2931              		.thumb
 2932              		.thumb_func
 2934              	turbo:
 2935              	.LFB133:
 777:../Main.c     **** 
 778:../Main.c     **** void turbo(void) {
 2936              		.loc 1 778 0
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 0
 2939              		@ frame_needed = 1, uses_anonymous_args = 0
 2940              		@ link register save eliminated.
 2941 0000 80B4     		push	{r7}
 2942              	.LCFI44:
 2943              		.cfi_def_cfa_offset 4
 2944              		.cfi_offset 7, -4
 2945 0002 00AF     		add	r7, sp, #0
 2946              	.LCFI45:
 2947              		.cfi_def_cfa_register 7
 779:../Main.c     **** 	pwm_max = 100;
 2948              		.loc 1 779 0
 2949 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2950 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2951 000c 4FF06402 		mov	r2, #100
 2952 0010 1A70     		strb	r2, [r3, #0]
 780:../Main.c     **** }
 2953              		.loc 1 780 0
 2954 0012 BD46     		mov	sp, r7
 2955 0014 80BC     		pop	{r7}
 2956 0016 7047     		bx	lr
 2957              		.cfi_endproc
 2958              	.LFE133:
 2960              		.section	.text.shunt,"ax",%progbits
 2961              		.align	2
 2962              		.global	shunt
 2963              		.thumb
 2964              		.thumb_func
 2966              	shunt:
 2967              	.LFB134:
 781:../Main.c     **** 
 782:../Main.c     **** void shunt(void) {
 2968              		.loc 1 782 0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 0
 2971              		@ frame_needed = 1, uses_anonymous_args = 0
 2972              		@ link register save eliminated.
 2973 0000 80B4     		push	{r7}
 2974              	.LCFI46:
 2975              		.cfi_def_cfa_offset 4
 2976              		.cfi_offset 7, -4
 2977 0002 00AF     		add	r7, sp, #0
 2978              	.LCFI47:
 2979              		.cfi_def_cfa_register 7
 783:../Main.c     **** 	pwm_max = 40;
 2980              		.loc 1 783 0
 2981 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2982 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2983 000c 4FF02802 		mov	r2, #40
 2984 0010 1A70     		strb	r2, [r3, #0]
 784:../Main.c     **** }
 2985              		.loc 1 784 0
 2986 0012 BD46     		mov	sp, r7
 2987 0014 80BC     		pop	{r7}
 2988 0016 7047     		bx	lr
 2989              		.cfi_endproc
 2990              	.LFE134:
 2992              		.section	.text.flip,"ax",%progbits
 2993              		.align	2
 2994              		.global	flip
 2995              		.thumb
 2996              		.thumb_func
 2998              	flip:
 2999              	.LFB135:
 785:../Main.c     **** 
 786:../Main.c     **** void flip(void) {
 3000              		.loc 1 786 0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 0
 3003              		@ frame_needed = 1, uses_anonymous_args = 0
 3004              		@ link register save eliminated.
 3005 0000 80B4     		push	{r7}
 3006              	.LCFI48:
 3007              		.cfi_def_cfa_offset 4
 3008              		.cfi_offset 7, -4
 3009 0002 00AF     		add	r7, sp, #0
 3010              	.LCFI49:
 3011              		.cfi_def_cfa_register 7
 787:../Main.c     **** 	flipped = !flipped;
 3012              		.loc 1 787 0
 3013 0004 40F20003 		movw	r3, #:lower16:flipped
 3014 0008 C0F20003 		movt	r3, #:upper16:flipped
 3015 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3016 000e 002B     		cmp	r3, #0
 3017 0010 14BF     		ite	ne
 3018 0012 0023     		movne	r3, #0
 3019 0014 0123     		moveq	r3, #1
 3020 0016 DBB2     		uxtb	r3, r3
 3021 0018 1A46     		mov	r2, r3
 3022 001a 40F20003 		movw	r3, #:lower16:flipped
 3023 001e C0F20003 		movt	r3, #:upper16:flipped
 3024 0022 1A70     		strb	r2, [r3, #0]
 788:../Main.c     **** }
 3025              		.loc 1 788 0
 3026 0024 BD46     		mov	sp, r7
 3027 0026 80BC     		pop	{r7}
 3028 0028 7047     		bx	lr
 3029              		.cfi_endproc
 3030              	.LFE135:
 3032 002a 00BF     		.section	.text.changeMode,"ax",%progbits
 3033              		.align	2
 3034              		.global	changeMode
 3035              		.thumb
 3036              		.thumb_func
 3038              	changeMode:
 3039              	.LFB136:
 789:../Main.c     **** 
 790:../Main.c     **** void changeMode(char a_mode){
 3040              		.loc 1 790 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 8
 3043              		@ frame_needed = 1, uses_anonymous_args = 0
 3044              		@ link register save eliminated.
 3045 0000 80B4     		push	{r7}
 3046              	.LCFI50:
 3047              		.cfi_def_cfa_offset 4
 3048              		.cfi_offset 7, -4
 3049 0002 83B0     		sub	sp, sp, #12
 3050              	.LCFI51:
 3051              		.cfi_def_cfa_offset 16
 3052 0004 00AF     		add	r7, sp, #0
 3053              	.LCFI52:
 3054              		.cfi_def_cfa_register 7
 3055 0006 0346     		mov	r3, r0
 3056 0008 FB71     		strb	r3, [r7, #7]
 791:../Main.c     **** 
 792:../Main.c     **** 	mode = a_mode;
 3057              		.loc 1 792 0
 3058 000a 40F20003 		movw	r3, #:lower16:mode
 3059 000e C0F20003 		movt	r3, #:upper16:mode
 3060 0012 FA79     		ldrb	r2, [r7, #7]
 3061 0014 1A70     		strb	r2, [r3, #0]
 793:../Main.c     **** }
 3062              		.loc 1 793 0
 3063 0016 07F10C07 		add	r7, r7, #12
 3064 001a BD46     		mov	sp, r7
 3065 001c 80BC     		pop	{r7}
 3066 001e 7047     		bx	lr
 3067              		.cfi_endproc
 3068              	.LFE136:
 3070              		.text
 3071              	.Letext0:
 3072              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3073              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3074              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3075              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3076              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3077              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3078              		.file 9 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3079              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3080              		.file 11 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 3081              		.file 12 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 3082              		.file 13 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:24     .data:00000000 l_um
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:21     .data:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2934   .text.turbo:00000000 turbo
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:31     .bss:00000000 l_dois
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:28     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:37     .bss:00000004 l_tres
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:44     .data:00000004 r_um
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:51     .bss:00000008 r_dois
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:57     .bss:0000000c r_tres
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:64     .data:00000008 cross
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2998   .text.flip:00000000 flip
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:70     .data:0000000c sqr
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:3038   .text.changeMode:00000000 changeMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:76     .data:00000010 triangle
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:82     .data:00000014 circle
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:89     .bss:00000010 left
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:95     .bss:00000014 right
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:101    .bss:00000018 up
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:107    .bss:0000001c down
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:113    .bss:00000020 start
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:119    .bss:00000024 select
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:124    .bss:00000028 l_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:129    .bss:00000029 l_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:134    .bss:0000002a l_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:139    .bss:0000002b r_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:144    .bss:0000002c r_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:149    .bss:0000002d r_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:154    .bss:0000002e cross_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:159    .bss:0000002f sqr_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:164    .bss:00000030 triangle_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:169    .bss:00000031 circle_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:174    .bss:00000032 left_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:179    .bss:00000033 right_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:184    .bss:00000034 up_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:189    .bss:00000035 down_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:194    .bss:00000036 start_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:199    .bss:00000037 select_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:204    .bss:00000038 l_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:209    .bss:00000039 l_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:214    .bss:0000003a l_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:219    .bss:0000003b r_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:224    .bss:0000003c r_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:229    .bss:0000003d r_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:234    .bss:0000003e cross_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:239    .bss:0000003f sqr_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:244    .bss:00000040 triangle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:249    .bss:00000041 circle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:254    .bss:00000042 left_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:259    .bss:00000043 right_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:264    .bss:00000044 up_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:269    .bss:00000045 down_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:274    .bss:00000046 start_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:279    .bss:00000047 select_state_before
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:287    .data:00000018 data_R
                            *COM*:00000005 data_E
                            *COM*:00000001 psx_status
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:295    .bss:00000048 flipped
                            *COM*:00000004 result
                            *COM*:00000001 pwm_max
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:303    .data:00000019 mode
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:306    .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:311    .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1358   .text.configure_E:00000000 configure_E
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2268   .text.psxHandShake:00000000 psxHandShake
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1750   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2147   .text.psxLeControle:00000000 psxLeControle
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1562   .text.write_E:00000000 write_E
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2715   .text.updateButtonStates:00000000 updateButtonStates
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1200   .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1205   .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2519   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1307   .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1302   .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1353   .text.configure_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1557   .text.write_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1745   .text.psxConfiguraControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1781   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1887   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2017   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1776   .text.psxEnterConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2379   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:1882   .text.psxSetAnalogMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2012   .text.psxExitConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2142   .text.psxLeControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2263   .text.psxHandShake:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2374   .text.psxTrocaByte:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2514   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2572   .text.printByteToInt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2577   .text.printByteToInt:00000000 printByteToInt
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2679   .text.VADC0_C0_2_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2684   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2710   .text.updateButtonStates:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2929   .text.turbo:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2961   .text.shunt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2966   .text.shunt:00000000 shunt
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:2993   .text.flip:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc4fRddR.s:3033   .text.changeMode:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d

UNDEFINED SYMBOLS
DAVE_Init
ADC001_Handle0
ADC001_GenerateLoadEvent
ADC001_GetResult
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
