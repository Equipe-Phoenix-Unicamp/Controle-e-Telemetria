   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l1
  20              		.bss
  21              		.align	2
  24              	l1:
  25 0000 00000000 		.space	4
  26              		.global	l2
  27              		.align	2
  30              	l2:
  31 0004 00000000 		.space	4
  32              		.global	r1
  33              		.align	2
  36              	r1:
  37 0008 00000000 		.space	4
  38              		.global	r2
  39              		.align	2
  42              	r2:
  43 000c 00000000 		.space	4
  44              		.global	cross
  45              		.align	2
  48              	cross:
  49 0010 00000000 		.space	4
  50              		.global	sqr
  51              		.align	2
  54              	sqr:
  55 0014 00000000 		.space	4
  56              		.global	triangle
  57              		.align	2
  60              	triangle:
  61 0018 00000000 		.space	4
  62              		.global	circle
  63              		.align	2
  66              	circle:
  67 001c 00000000 		.space	4
  68              		.global	left
  69              		.align	2
  72              	left:
  73 0020 00000000 		.space	4
  74              		.global	right
  75              		.align	2
  78              	right:
  79 0024 00000000 		.space	4
  80              		.global	up
  81              		.align	2
  84              	up:
  85 0028 00000000 		.space	4
  86              		.global	down
  87              		.align	2
  90              	down:
  91 002c 00000000 		.space	4
  92              		.global	start
  93              		.align	2
  96              	start:
  97 0030 00000000 		.space	4
  98              		.global	select
  99              		.align	2
 102              	select:
 103 0034 00000000 		.space	4
 104              		.comm	psxDado,24,4
 105              		.comm	configuration,15,4
 106              		.global	data_R
 107              		.data
 110              	data_R:
 111 0000 30       		.byte	48
 112              		.comm	data_E,4,4
 113              		.comm	psx_status,1,1
 114              		.section	.text.main,"ax",%progbits
 115              		.align	2
 116              		.global	main
 117              		.thumb
 118              		.thumb_func
 120              	main:
 121              	.LFB112:
 122              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     **** BIT 0: BLAH2
  10:../Main.c     **** BIT 1: BUZINA
  11:../Main.c     **** BIT 2: ENABLE
  12:../Main.c     **** BIT 3: ALBH2
  13:../Main.c     **** BIT 4: BLAH1
  14:../Main.c     **** BIT 5: ALBH1
  15:../Main.c     **** */
  16:../Main.c     **** 
  17:../Main.c     **** /***************************************************
  18:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  19:../Main.c     ****  * ----Protocolo de comunicacao: todo
  20:../Main.c     ****  *
  21:../Main.c     ****  *
  22:../Main.c     ****  ***************************************************/
  23:../Main.c     **** 
  24:../Main.c     **** 
  25:../Main.c     **** /***************************************************/
  26:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  27:../Main.c     **** /***************************************************/
  28:../Main.c     **** 
  29:../Main.c     **** #define NULL 0
  30:../Main.c     **** //Defines referentes aos limites
  31:../Main.c     **** #define PWM_LIM 60
  32:../Main.c     **** 
  33:../Main.c     **** //Defines referentes ao protocolo
  34:../Main.c     **** #define BYTES_TO_SEND 4
  35:../Main.c     **** //Defines referentes ao byte DADO 3
  36:../Main.c     **** #define	BLAH2		0
  37:../Main.c     **** #define	BUZINA		1
  38:../Main.c     **** #define	ENABLE		2
  39:../Main.c     **** #define	ALBH2		3
  40:../Main.c     **** #define	BLAH1		4
  41:../Main.c     **** #define	ALBH1		5
  42:../Main.c     **** //Defines referentes ao transceptor
  43:../Main.c     **** #define CS	 	IO004_Handle1
  44:../Main.c     **** #define CLK1 	IO004_Handle2
  45:../Main.c     **** #define DATA 	IO004_Handle4
  46:../Main.c     **** #define DR1		IO004_Handle5
  47:../Main.c     **** #define CE 		IO004_Handle6
  48:../Main.c     **** //Defines referentes ao controle
  49:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  50:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  51:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  52:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  53:../Main.c     **** //Defines referentes aos delays do controle
  54:../Main.c     **** #define tempoInicio     300
  55:../Main.c     **** #define tempoClk        300
  56:../Main.c     **** #define tempoEntreByte  100
  57:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  58:../Main.c     **** #define LED1 IO004_Handle7
  59:../Main.c     **** #define LED2 IO004_Handle8
  60:../Main.c     **** 
  61:../Main.c     **** /***************************************************/
  62:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
  63:../Main.c     **** /***************************************************/
  64:../Main.c     **** 
  65:../Main.c     **** void psxLeControle();
  66:../Main.c     **** int psxTrocaByte(int byteDado);
  67:../Main.c     **** int psxLeByte();
  68:../Main.c     **** void delay(long unsigned int i);
  69:../Main.c     **** void pulse_R();
  70:../Main.c     **** void configure_R();
  71:../Main.c     **** void configure_E();
  72:../Main.c     **** void write_E();
  73:../Main.c     **** void read_R();
  74:../Main.c     **** void delay(long unsigned int i);
  75:../Main.c     **** void printByteToInt(char a);
  76:../Main.c     **** void psxConfiguraControle();
  77:../Main.c     **** void psxEnterConfigMode();
  78:../Main.c     **** void psxExitConfigMode();
  79:../Main.c     **** void psxSetAnalogMode();
  80:../Main.c     **** void psxHandShake();
  81:../Main.c     **** 
  82:../Main.c     **** /***************************************************/
  83:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
  84:../Main.c     **** /***************************************************/
  85:../Main.c     **** 
  86:../Main.c     **** void * l1 = NULL;
  87:../Main.c     **** void * l2 = NULL;
  88:../Main.c     **** void * r1 = NULL;
  89:../Main.c     **** void * r2 = NULL;
  90:../Main.c     **** void * cross = NULL;
  91:../Main.c     **** void * sqr = NULL;
  92:../Main.c     **** void * triangle = NULL;
  93:../Main.c     **** void * circle = NULL;
  94:../Main.c     **** void * left = NULL;
  95:../Main.c     **** void * right = NULL;
  96:../Main.c     **** void * up = NULL;
  97:../Main.c     **** void * down = NULL;
  98:../Main.c     **** void * start = NULL;
  99:../Main.c     **** void * select = NULL;
 100:../Main.c     **** 
 101:../Main.c     **** /***************************************************/
 102:../Main.c     **** /*********************INCLUDES**********************/
 103:../Main.c     **** /***************************************************/
 104:../Main.c     **** 
 105:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
 106:../Main.c     **** 
 107:../Main.c     **** /***************************************************/
 108:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 109:../Main.c     **** /***************************************************/
 110:../Main.c     **** 
 111:../Main.c     **** int psxDado[6];
 112:../Main.c     **** char configuration[15];
 113:../Main.c     **** char data_R = '0';
 114:../Main.c     **** char data_E[BYTES_TO_SEND];
 115:../Main.c     **** uint8_t psx_status;
 116:../Main.c     **** 
 117:../Main.c     **** /***************************************************/
 118:../Main.c     **** /***********************MAIN************************/
 119:../Main.c     **** /***************************************************/
 120:../Main.c     **** 
 121:../Main.c     **** int main(void)
 122:../Main.c     **** {
 123              		.loc 1 122 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 16
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              	.LCFI0:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 84B0     		sub	sp, sp, #16
 133              	.LCFI1:
 134              		.cfi_def_cfa_offset 24
 135 0004 00AF     		add	r7, sp, #0
 136              	.LCFI2:
 137              		.cfi_def_cfa_register 7
 123:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 124:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
 138              		.loc 1 124 0
 139 0006 FFF7FEFF 		bl	DAVE_Init
 125:../Main.c     **** 	/*Etapa de inicializacao*/
 126:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 140              		.loc 1 126 0
 141 000a FFF7FEFF 		bl	configure_E
 127:../Main.c     **** 	IO004_SetPin(LED1); //Leds para debug
 142              		.loc 1 127 0
 143 000e 40F20003 		movw	r3, #:lower16:IO004_Handle7
 144 0012 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 145 0016 5A68     		ldr	r2, [r3, #4]
 146 0018 40F20003 		movw	r3, #:lower16:IO004_Handle7
 147 001c C0F20003 		movt	r3, #:upper16:IO004_Handle7
 148 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 149 0022 4FF00101 		mov	r1, #1
 150 0026 01FA03F3 		lsl	r3, r1, r3
 151 002a 5360     		str	r3, [r2, #4]
 128:../Main.c     **** 	IO004_SetPin(LED2);
 152              		.loc 1 128 0
 153 002c 40F20003 		movw	r3, #:lower16:IO004_Handle8
 154 0030 C0F20003 		movt	r3, #:upper16:IO004_Handle8
 155 0034 5A68     		ldr	r2, [r3, #4]
 156 0036 40F20003 		movw	r3, #:lower16:IO004_Handle8
 157 003a C0F20003 		movt	r3, #:upper16:IO004_Handle8
 158 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 159 0040 4FF00101 		mov	r1, #1
 160 0044 01FA03F3 		lsl	r3, r1, r3
 161 0048 5360     		str	r3, [r2, #4]
 129:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 130:../Main.c     **** 	psxHandShake();
 162              		.loc 1 130 0
 163 004a FFF7FEFF 		bl	psxHandShake
 131:../Main.c     **** 	psxConfiguraControle();
 164              		.loc 1 131 0
 165 004e FFF7FEFF 		bl	psxConfiguraControle
 132:../Main.c     **** 	/*Booleanos de controle para estados do robo*/
 133:../Main.c     **** 	BOOLType flipped = 0;
 166              		.loc 1 133 0
 167 0052 4FF00003 		mov	r3, #0
 168 0056 FB73     		strb	r3, [r7, #15]
 134:../Main.c     **** 	BOOLType isPressed = 0;
 169              		.loc 1 134 0
 170 0058 4FF00003 		mov	r3, #0
 171 005c BB73     		strb	r3, [r7, #14]
 135:../Main.c     **** 	BOOLType lastIsPressed = 0;
 172              		.loc 1 135 0
 173 005e 4FF00003 		mov	r3, #0
 174 0062 7B73     		strb	r3, [r7, #13]
 175              	.L25:
 176              	.LBB4:
 136:../Main.c     **** 	/*Loop do controle*/
 137:../Main.c     **** 	while(1)
 138:../Main.c     **** 	{
 139:../Main.c     **** 		/*Inicializa o que sera mandado*/
 140:../Main.c     **** 		BOOLType blah2 = 1;
 177              		.loc 1 140 0
 178 0064 4FF00103 		mov	r3, #1
 179 0068 3B73     		strb	r3, [r7, #12]
 141:../Main.c     **** 		BOOLType buzina = 1;
 180              		.loc 1 141 0
 181 006a 4FF00103 		mov	r3, #1
 182 006e 3B72     		strb	r3, [r7, #8]
 142:../Main.c     **** 		BOOLType enable = 0;
 183              		.loc 1 142 0
 184 0070 4FF00003 		mov	r3, #0
 185 0074 FB71     		strb	r3, [r7, #7]
 143:../Main.c     **** 		BOOLType albh2 = 1;
 186              		.loc 1 143 0
 187 0076 4FF00103 		mov	r3, #1
 188 007a FB72     		strb	r3, [r7, #11]
 144:../Main.c     **** 		BOOLType blah1 = 1;
 189              		.loc 1 144 0
 190 007c 4FF00103 		mov	r3, #1
 191 0080 BB72     		strb	r3, [r7, #10]
 145:../Main.c     **** 		BOOLType albh1 = 1;
 192              		.loc 1 145 0
 193 0082 4FF00103 		mov	r3, #1
 194 0086 7B72     		strb	r3, [r7, #9]
 146:../Main.c     **** 		int16_t pow1, pow2;
 147:../Main.c     **** 		/*Le controle*/
 148:../Main.c     **** 		psxLeControle();
 195              		.loc 1 148 0
 196 0088 FFF7FEFF 		bl	psxLeControle
 149:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 150:../Main.c     **** 		if (psxDado[1]&1<<3) isPressed = 1;
 197              		.loc 1 150 0
 198 008c 40F20003 		movw	r3, #:lower16:psxDado
 199 0090 C0F20003 		movt	r3, #:upper16:psxDado
 200 0094 5B68     		ldr	r3, [r3, #4]
 201 0096 03F00803 		and	r3, r3, #8
 202 009a 002B     		cmp	r3, #0
 203 009c 03D0     		beq	.L2
 204              		.loc 1 150 0 is_stmt 0 discriminator 1
 205 009e 4FF00103 		mov	r3, #1
 206 00a2 BB73     		strb	r3, [r7, #14]
 207 00a4 02E0     		b	.L3
 208              	.L2:
 151:../Main.c     **** 		else isPressed = 0;
 209              		.loc 1 151 0 is_stmt 1
 210 00a6 4FF00003 		mov	r3, #0
 211 00aa BB73     		strb	r3, [r7, #14]
 212              	.L3:
 152:../Main.c     **** 		if (lastIsPressed == 0 && isPressed == 1) flipped = !flipped;
 213              		.loc 1 152 0
 214 00ac 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 215 00ae 002B     		cmp	r3, #0
 216 00b0 09D1     		bne	.L4
 217              		.loc 1 152 0 is_stmt 0 discriminator 1
 218 00b2 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 219 00b4 012B     		cmp	r3, #1
 220 00b6 06D1     		bne	.L4
 221 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 222 00ba 002B     		cmp	r3, #0
 223 00bc 14BF     		ite	ne
 224 00be 0023     		movne	r3, #0
 225 00c0 0123     		moveq	r3, #1
 226 00c2 DBB2     		uxtb	r3, r3
 227 00c4 FB73     		strb	r3, [r7, #15]
 228              	.L4:
 153:../Main.c     **** 		data_E[0] = 173;
 229              		.loc 1 153 0 is_stmt 1
 230 00c6 40F20003 		movw	r3, #:lower16:data_E
 231 00ca C0F20003 		movt	r3, #:upper16:data_E
 232 00ce 4FF0AD02 		mov	r2, #173
 233 00d2 1A70     		strb	r2, [r3, #0]
 154:../Main.c     **** 		if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar quand
 234              		.loc 1 154 0
 235 00d4 40F20003 		movw	r3, #:lower16:psxDado
 236 00d8 C0F20003 		movt	r3, #:upper16:psxDado
 237 00dc 5B69     		ldr	r3, [r3, #20]
 238 00de 002B     		cmp	r3, #0
 239 00e0 07D1     		bne	.L5
 240              		.loc 1 154 0 is_stmt 0 discriminator 1
 241 00e2 40F20003 		movw	r3, #:lower16:psxDado
 242 00e6 C0F20003 		movt	r3, #:upper16:psxDado
 243 00ea DB68     		ldr	r3, [r3, #12]
 244 00ec 002B     		cmp	r3, #0
 245 00ee 00F04981 		beq	.L27
 246              	.L5:
 155:../Main.c     **** 		pow1 = (psxDado[5]-127);//<<1; //Analog esq //Subtrai 127 para saber o sentido
 247              		.loc 1 155 0 is_stmt 1
 248 00f2 40F20003 		movw	r3, #:lower16:psxDado
 249 00f6 C0F20003 		movt	r3, #:upper16:psxDado
 250 00fa 5B69     		ldr	r3, [r3, #20]
 251 00fc 9BB2     		uxth	r3, r3
 252 00fe A3F17F03 		sub	r3, r3, #127
 253 0102 9BB2     		uxth	r3, r3
 254 0104 BB80     		strh	r3, [r7, #4]	@ movhi
 156:../Main.c     **** 		pow2 = (psxDado[3]-127);//<<1;
 255              		.loc 1 156 0
 256 0106 40F20003 		movw	r3, #:lower16:psxDado
 257 010a C0F20003 		movt	r3, #:upper16:psxDado
 258 010e DB68     		ldr	r3, [r3, #12]
 259 0110 9BB2     		uxth	r3, r3
 260 0112 A3F17F03 		sub	r3, r3, #127
 261 0116 9BB2     		uxth	r3, r3
 262 0118 7B80     		strh	r3, [r7, #2]	@ movhi
 157:../Main.c     **** 		data_E[3] = 0;
 263              		.loc 1 157 0
 264 011a 40F20003 		movw	r3, #:lower16:data_E
 265 011e C0F20003 		movt	r3, #:upper16:data_E
 266 0122 4FF00002 		mov	r2, #0
 267 0126 DA70     		strb	r2, [r3, #3]
 158:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 159:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 268              		.loc 1 159 0
 269 0128 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 270 012a 002B     		cmp	r3, #0
 271 012c 7CD1     		bne	.L7
 160:../Main.c     **** 		{
 161:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 272              		.loc 1 161 0
 273 012e B7F90430 		ldrsh	r3, [r7, #4]
 274 0132 13F11E0F 		cmn	r3, #30
 275 0136 03DA     		bge	.L8
 276              		.loc 1 161 0 is_stmt 0 discriminator 1
 277 0138 4FF00003 		mov	r3, #0
 278 013c FB72     		strb	r3, [r7, #11]
 279 013e 06E0     		b	.L9
 280              	.L8:
 162:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 281              		.loc 1 162 0 is_stmt 1
 282 0140 B7F90430 		ldrsh	r3, [r7, #4]
 283 0144 1E2B     		cmp	r3, #30
 284 0146 02DD     		ble	.L9
 285              		.loc 1 162 0 is_stmt 0 discriminator 1
 286 0148 4FF00003 		mov	r3, #0
 287 014c 3B73     		strb	r3, [r7, #12]
 288              	.L9:
 163:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 289              		.loc 1 163 0 is_stmt 1
 290 014e B7F90230 		ldrsh	r3, [r7, #2]
 291 0152 13F11E0F 		cmn	r3, #30
 292 0156 03DA     		bge	.L10
 293              		.loc 1 163 0 is_stmt 0 discriminator 1
 294 0158 4FF00003 		mov	r3, #0
 295 015c 7B72     		strb	r3, [r7, #9]
 296 015e 06E0     		b	.L11
 297              	.L10:
 164:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 298              		.loc 1 164 0 is_stmt 1
 299 0160 B7F90230 		ldrsh	r3, [r7, #2]
 300 0164 1E2B     		cmp	r3, #30
 301 0166 02DD     		ble	.L11
 302              		.loc 1 164 0 is_stmt 0 discriminator 1
 303 0168 4FF00003 		mov	r3, #0
 304 016c BB72     		strb	r3, [r7, #10]
 305              	.L11:
 165:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 306              		.loc 1 165 0 is_stmt 1
 307 016e B7F90430 		ldrsh	r3, [r7, #4]
 308 0172 002B     		cmp	r3, #0
 309 0174 05DD     		ble	.L12
 310              		.loc 1 165 0 is_stmt 0 discriminator 1
 311 0176 BB88     		ldrh	r3, [r7, #4]
 312 0178 4FEA4303 		lsl	r3, r3, #1
 313 017c 9BB2     		uxth	r3, r3
 314 017e 9BB2     		uxth	r3, r3
 315 0180 08E0     		b	.L13
 316              	.L12:
 317              		.loc 1 165 0 discriminator 2
 318 0182 BB88     		ldrh	r3, [r7, #4]
 319 0184 1A46     		mov	r2, r3	@ movhi
 320 0186 4FEAC232 		lsl	r2, r2, #15
 321 018a D31A     		subs	r3, r2, r3
 322 018c 4FEA4303 		lsl	r3, r3, #1
 323 0190 9BB2     		uxth	r3, r3
 324 0192 9BB2     		uxth	r3, r3
 325              	.L13:
 326              		.loc 1 165 0 discriminator 3
 327 0194 3B80     		strh	r3, [r7, #0]	@ movhi
 166:../Main.c     **** 			data_E[1] = temp*PWM_LIM/100;
 328              		.loc 1 166 0 is_stmt 1 discriminator 3
 329 0196 B7F90020 		ldrsh	r2, [r7, #0]
 330 019a 1346     		mov	r3, r2
 331 019c 4FEA0313 		lsl	r3, r3, #4
 332 01a0 9B1A     		subs	r3, r3, r2
 333 01a2 4FEA8303 		lsl	r3, r3, #2
 334 01a6 1A46     		mov	r2, r3
 335 01a8 48F21F53 		movw	r3, #34079
 336 01ac C5F2EB13 		movt	r3, 20971
 337 01b0 83FB0213 		smull	r1, r3, r3, r2
 338 01b4 4FEA6311 		asr	r1, r3, #5
 339 01b8 4FEAE273 		asr	r3, r2, #31
 340 01bc CB1A     		subs	r3, r1, r3
 341 01be DAB2     		uxtb	r2, r3
 342 01c0 40F20003 		movw	r3, #:lower16:data_E
 343 01c4 C0F20003 		movt	r3, #:upper16:data_E
 344 01c8 5A70     		strb	r2, [r3, #1]
 167:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 345              		.loc 1 167 0 discriminator 3
 346 01ca B7F90230 		ldrsh	r3, [r7, #2]
 347 01ce 002B     		cmp	r3, #0
 348 01d0 05DD     		ble	.L14
 349              		.loc 1 167 0 is_stmt 0 discriminator 1
 350 01d2 7B88     		ldrh	r3, [r7, #2]
 351 01d4 4FEA4303 		lsl	r3, r3, #1
 352 01d8 9BB2     		uxth	r3, r3
 353 01da 9BB2     		uxth	r3, r3
 354 01dc 08E0     		b	.L15
 355              	.L14:
 356              		.loc 1 167 0 discriminator 2
 357 01de 7B88     		ldrh	r3, [r7, #2]
 358 01e0 1A46     		mov	r2, r3	@ movhi
 359 01e2 4FEAC232 		lsl	r2, r2, #15
 360 01e6 D31A     		subs	r3, r2, r3
 361 01e8 4FEA4303 		lsl	r3, r3, #1
 362 01ec 9BB2     		uxth	r3, r3
 363 01ee 9BB2     		uxth	r3, r3
 364              	.L15:
 365              		.loc 1 167 0 discriminator 3
 366 01f0 3B80     		strh	r3, [r7, #0]	@ movhi
 168:../Main.c     **** 			data_E[2] = temp*PWM_LIM/100;
 367              		.loc 1 168 0 is_stmt 1 discriminator 3
 368 01f2 B7F90020 		ldrsh	r2, [r7, #0]
 369 01f6 1346     		mov	r3, r2
 370 01f8 4FEA0313 		lsl	r3, r3, #4
 371 01fc 9B1A     		subs	r3, r3, r2
 372 01fe 4FEA8303 		lsl	r3, r3, #2
 373 0202 1A46     		mov	r2, r3
 374 0204 48F21F53 		movw	r3, #34079
 375 0208 C5F2EB13 		movt	r3, 20971
 376 020c 83FB0213 		smull	r1, r3, r3, r2
 377 0210 4FEA6311 		asr	r1, r3, #5
 378 0214 4FEAE273 		asr	r3, r2, #31
 379 0218 CB1A     		subs	r3, r1, r3
 380 021a DAB2     		uxtb	r2, r3
 381 021c 40F20003 		movw	r3, #:lower16:data_E
 382 0220 C0F20003 		movt	r3, #:upper16:data_E
 383 0224 9A70     		strb	r2, [r3, #2]
 384 0226 7BE0     		b	.L16
 385              	.L7:
 169:../Main.c     **** 		}
 170:../Main.c     **** 		else
 171:../Main.c     **** 		{
 172:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 386              		.loc 1 172 0
 387 0228 B7F90230 		ldrsh	r3, [r7, #2]
 388 022c 1E2B     		cmp	r3, #30
 389 022e 03DD     		ble	.L17
 390              		.loc 1 172 0 is_stmt 0 discriminator 1
 391 0230 4FF00003 		mov	r3, #0
 392 0234 FB72     		strb	r3, [r7, #11]
 393 0236 07E0     		b	.L18
 394              	.L17:
 173:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 395              		.loc 1 173 0 is_stmt 1
 396 0238 B7F90230 		ldrsh	r3, [r7, #2]
 397 023c 13F11E0F 		cmn	r3, #30
 398 0240 02DA     		bge	.L18
 399              		.loc 1 173 0 is_stmt 0 discriminator 1
 400 0242 4FF00003 		mov	r3, #0
 401 0246 3B73     		strb	r3, [r7, #12]
 402              	.L18:
 174:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 403              		.loc 1 174 0 is_stmt 1
 404 0248 B7F90430 		ldrsh	r3, [r7, #4]
 405 024c 1E2B     		cmp	r3, #30
 406 024e 03DD     		ble	.L19
 407              		.loc 1 174 0 is_stmt 0 discriminator 1
 408 0250 4FF00003 		mov	r3, #0
 409 0254 7B72     		strb	r3, [r7, #9]
 410 0256 07E0     		b	.L20
 411              	.L19:
 175:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 412              		.loc 1 175 0 is_stmt 1
 413 0258 B7F90430 		ldrsh	r3, [r7, #4]
 414 025c 13F11E0F 		cmn	r3, #30
 415 0260 02DA     		bge	.L20
 416              		.loc 1 175 0 is_stmt 0 discriminator 1
 417 0262 4FF00003 		mov	r3, #0
 418 0266 BB72     		strb	r3, [r7, #10]
 419              	.L20:
 176:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 420              		.loc 1 176 0 is_stmt 1
 421 0268 B7F90430 		ldrsh	r3, [r7, #4]
 422 026c 002B     		cmp	r3, #0
 423 026e 05DD     		ble	.L21
 424              		.loc 1 176 0 is_stmt 0 discriminator 1
 425 0270 BB88     		ldrh	r3, [r7, #4]
 426 0272 4FEA4303 		lsl	r3, r3, #1
 427 0276 9BB2     		uxth	r3, r3
 428 0278 9BB2     		uxth	r3, r3
 429 027a 08E0     		b	.L22
 430              	.L21:
 431              		.loc 1 176 0 discriminator 2
 432 027c BB88     		ldrh	r3, [r7, #4]
 433 027e 1A46     		mov	r2, r3	@ movhi
 434 0280 4FEAC232 		lsl	r2, r2, #15
 435 0284 D31A     		subs	r3, r2, r3
 436 0286 4FEA4303 		lsl	r3, r3, #1
 437 028a 9BB2     		uxth	r3, r3
 438 028c 9BB2     		uxth	r3, r3
 439              	.L22:
 440              		.loc 1 176 0 discriminator 3
 441 028e 3B80     		strh	r3, [r7, #0]	@ movhi
 177:../Main.c     **** 			data_E[2] = temp*PWM_LIM/100;
 442              		.loc 1 177 0 is_stmt 1 discriminator 3
 443 0290 B7F90020 		ldrsh	r2, [r7, #0]
 444 0294 1346     		mov	r3, r2
 445 0296 4FEA0313 		lsl	r3, r3, #4
 446 029a 9B1A     		subs	r3, r3, r2
 447 029c 4FEA8303 		lsl	r3, r3, #2
 448 02a0 1A46     		mov	r2, r3
 449 02a2 48F21F53 		movw	r3, #34079
 450 02a6 C5F2EB13 		movt	r3, 20971
 451 02aa 83FB0213 		smull	r1, r3, r3, r2
 452 02ae 4FEA6311 		asr	r1, r3, #5
 453 02b2 4FEAE273 		asr	r3, r2, #31
 454 02b6 CB1A     		subs	r3, r1, r3
 455 02b8 DAB2     		uxtb	r2, r3
 456 02ba 40F20003 		movw	r3, #:lower16:data_E
 457 02be C0F20003 		movt	r3, #:upper16:data_E
 458 02c2 9A70     		strb	r2, [r3, #2]
 178:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 459              		.loc 1 178 0 discriminator 3
 460 02c4 B7F90230 		ldrsh	r3, [r7, #2]
 461 02c8 002B     		cmp	r3, #0
 462 02ca 05DD     		ble	.L23
 463              		.loc 1 178 0 is_stmt 0 discriminator 1
 464 02cc 7B88     		ldrh	r3, [r7, #2]
 465 02ce 4FEA4303 		lsl	r3, r3, #1
 466 02d2 9BB2     		uxth	r3, r3
 467 02d4 9BB2     		uxth	r3, r3
 468 02d6 08E0     		b	.L24
 469              	.L23:
 470              		.loc 1 178 0 discriminator 2
 471 02d8 7B88     		ldrh	r3, [r7, #2]
 472 02da 1A46     		mov	r2, r3	@ movhi
 473 02dc 4FEAC232 		lsl	r2, r2, #15
 474 02e0 D31A     		subs	r3, r2, r3
 475 02e2 4FEA4303 		lsl	r3, r3, #1
 476 02e6 9BB2     		uxth	r3, r3
 477 02e8 9BB2     		uxth	r3, r3
 478              	.L24:
 479              		.loc 1 178 0 discriminator 3
 480 02ea 3B80     		strh	r3, [r7, #0]	@ movhi
 179:../Main.c     **** 			data_E[1] = temp*PWM_LIM/100;
 481              		.loc 1 179 0 is_stmt 1 discriminator 3
 482 02ec B7F90020 		ldrsh	r2, [r7, #0]
 483 02f0 1346     		mov	r3, r2
 484 02f2 4FEA0313 		lsl	r3, r3, #4
 485 02f6 9B1A     		subs	r3, r3, r2
 486 02f8 4FEA8303 		lsl	r3, r3, #2
 487 02fc 1A46     		mov	r2, r3
 488 02fe 48F21F53 		movw	r3, #34079
 489 0302 C5F2EB13 		movt	r3, 20971
 490 0306 83FB0213 		smull	r1, r3, r3, r2
 491 030a 4FEA6311 		asr	r1, r3, #5
 492 030e 4FEAE273 		asr	r3, r2, #31
 493 0312 CB1A     		subs	r3, r1, r3
 494 0314 DAB2     		uxtb	r2, r3
 495 0316 40F20003 		movw	r3, #:lower16:data_E
 496 031a C0F20003 		movt	r3, #:upper16:data_E
 497 031e 5A70     		strb	r2, [r3, #1]
 498              	.L16:
 180:../Main.c     **** 		}
 181:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 182:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2) | (albh1 << ALBH1) | (albh2 << ALBH2)
 499              		.loc 1 182 0
 500 0320 40F20003 		movw	r3, #:lower16:data_E
 501 0324 C0F20003 		movt	r3, #:upper16:data_E
 502 0328 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 503 032a DAB2     		uxtb	r2, r3
 504 032c BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 505 032e 4FEA0313 		lsl	r3, r3, #4
 506 0332 DBB2     		uxtb	r3, r3
 507 0334 1343     		orrs	r3, r3, r2
 508 0336 DAB2     		uxtb	r2, r3
 509 0338 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 510 033a 1343     		orrs	r3, r3, r2
 511 033c DAB2     		uxtb	r2, r3
 512 033e 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 513 0340 4FEA4313 		lsl	r3, r3, #5
 514 0344 DBB2     		uxtb	r3, r3
 515 0346 1343     		orrs	r3, r3, r2
 516 0348 DAB2     		uxtb	r2, r3
 517 034a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 518 034c 4FEAC303 		lsl	r3, r3, #3
 519 0350 DBB2     		uxtb	r3, r3
 520 0352 1343     		orrs	r3, r3, r2
 521 0354 DAB2     		uxtb	r2, r3
 522 0356 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 523 0358 4FEA8303 		lsl	r3, r3, #2
 524 035c DBB2     		uxtb	r3, r3
 525 035e 1343     		orrs	r3, r3, r2
 526 0360 DAB2     		uxtb	r2, r3
 527 0362 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 528 0364 4FEA4303 		lsl	r3, r3, #1
 529 0368 DBB2     		uxtb	r3, r3
 530 036a 1343     		orrs	r3, r3, r2
 531 036c DBB2     		uxtb	r3, r3
 532 036e DAB2     		uxtb	r2, r3
 533 0370 40F20003 		movw	r3, #:lower16:data_E
 534 0374 C0F20003 		movt	r3, #:upper16:data_E
 535 0378 DA70     		strb	r2, [r3, #3]
 183:../Main.c     **** 		write_E();
 536              		.loc 1 183 0
 537 037a FFF7FEFF 		bl	write_E
 184:../Main.c     **** 		lastIsPressed = isPressed;
 538              		.loc 1 184 0
 539 037e BB7B     		ldrb	r3, [r7, #14]
 540 0380 7B73     		strb	r3, [r7, #13]
 541              	.LBE4:
 185:../Main.c     **** 	}
 542              		.loc 1 185 0
 543 0382 6FE6     		b	.L25
 544              	.L27:
 545              	.LBB5:
 154:../Main.c     **** 		if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar quand
 546              		.loc 1 154 0
 547 0384 00BF     		nop
 548              	.L26:
 549              	.LBE5:
 550              		.loc 1 185 0
 551 0386 6DE6     		b	.L25
 552              		.cfi_endproc
 553              	.LFE112:
 555              		.section	.text.read_R,"ax",%progbits
 556              		.align	2
 557              		.global	read_R
 558              		.thumb
 559              		.thumb_func
 561              	read_R:
 562              	.LFB113:
 186:../Main.c     **** 	return 0;
 187:../Main.c     **** }
 188:../Main.c     **** 
 189:../Main.c     **** /***************************************************/
 190:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 191:../Main.c     **** /***************************************************/
 192:../Main.c     **** 
 193:../Main.c     **** void read_R()
 194:../Main.c     **** {
 563              		.loc 1 194 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 8
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567 0000 80B5     		push	{r7, lr}
 568              	.LCFI3:
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 82B0     		sub	sp, sp, #8
 573              	.LCFI4:
 574              		.cfi_def_cfa_offset 16
 575 0004 00AF     		add	r7, sp, #0
 576              	.LCFI5:
 577              		.cfi_def_cfa_register 7
 195:../Main.c     **** 	int i;
 196:../Main.c     **** 	IO004_ResetPin(CE);
 578              		.loc 1 196 0
 579 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 580 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 581 000e 5A68     		ldr	r2, [r3, #4]
 582 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 583 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 584 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 585 001a 4FF48031 		mov	r1, #65536
 586 001e 01FA03F3 		lsl	r3, r1, r3
 587 0022 5360     		str	r3, [r2, #4]
 197:../Main.c     **** 	delay(50000);
 588              		.loc 1 197 0
 589 0024 4CF25030 		movw	r0, #50000
 590 0028 FFF7FEFF 		bl	delay
 198:../Main.c     **** 	uint8_t temp = 0;
 591              		.loc 1 198 0
 592 002c 4FF00003 		mov	r3, #0
 593 0030 FB70     		strb	r3, [r7, #3]
 199:../Main.c     **** 
 200:../Main.c     **** 	for (i = 7; i > -1; i --)
 594              		.loc 1 200 0
 595 0032 4FF00703 		mov	r3, #7
 596 0036 7B60     		str	r3, [r7, #4]
 597 0038 20E0     		b	.L29
 598              	.L31:
 201:../Main.c     **** 	{
 202:../Main.c     **** 		if (IO004_ReadPin(DATA)) temp |= (1<<i);
 599              		.loc 1 202 0
 600 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 601 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 602 0042 5B68     		ldr	r3, [r3, #4]
 603 0044 5A6A     		ldr	r2, [r3, #36]
 604 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 605 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 606 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 607 0050 22FA03F3 		lsr	r3, r2, r3
 608 0054 03F00103 		and	r3, r3, #1
 609 0058 002B     		cmp	r3, #0
 610 005a 09D0     		beq	.L30
 611              		.loc 1 202 0 is_stmt 0 discriminator 1
 612 005c 4FF00102 		mov	r2, #1
 613 0060 7B68     		ldr	r3, [r7, #4]
 614 0062 02FA03F3 		lsl	r3, r2, r3
 615 0066 DAB2     		uxtb	r2, r3
 616 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 617 006a 1343     		orrs	r3, r3, r2
 618 006c DBB2     		uxtb	r3, r3
 619 006e FB70     		strb	r3, [r7, #3]
 620              	.L30:
 203:../Main.c     **** 		pulse_R();
 621              		.loc 1 203 0 is_stmt 1
 622 0070 FFF7FEFF 		bl	pulse_R
 200:../Main.c     **** 	for (i = 7; i > -1; i --)
 623              		.loc 1 200 0
 624 0074 7B68     		ldr	r3, [r7, #4]
 625 0076 03F1FF33 		add	r3, r3, #-1
 626 007a 7B60     		str	r3, [r7, #4]
 627              	.L29:
 200:../Main.c     **** 	for (i = 7; i > -1; i --)
 628              		.loc 1 200 0 is_stmt 0 discriminator 1
 629 007c 7B68     		ldr	r3, [r7, #4]
 630 007e 002B     		cmp	r3, #0
 631 0080 DBDA     		bge	.L31
 204:../Main.c     **** 	}
 205:../Main.c     **** 	data_R = temp;
 632              		.loc 1 205 0 is_stmt 1
 633 0082 40F20003 		movw	r3, #:lower16:data_R
 634 0086 C0F20003 		movt	r3, #:upper16:data_R
 635 008a FA78     		ldrb	r2, [r7, #3]
 636 008c 1A70     		strb	r2, [r3, #0]
 206:../Main.c     **** 	IO004_SetPin(CE);
 637              		.loc 1 206 0
 638 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 639 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 640 0096 5A68     		ldr	r2, [r3, #4]
 641 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 642 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 643 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 644 00a2 4FF00101 		mov	r1, #1
 645 00a6 01FA03F3 		lsl	r3, r1, r3
 646 00aa 5360     		str	r3, [r2, #4]
 207:../Main.c     **** 	delay(50000);
 647              		.loc 1 207 0
 648 00ac 4CF25030 		movw	r0, #50000
 649 00b0 FFF7FEFF 		bl	delay
 208:../Main.c     **** }
 650              		.loc 1 208 0
 651 00b4 07F10807 		add	r7, r7, #8
 652 00b8 BD46     		mov	sp, r7
 653 00ba 80BD     		pop	{r7, pc}
 654              		.cfi_endproc
 655              	.LFE113:
 657              		.section	.text.pulse_R,"ax",%progbits
 658              		.align	2
 659              		.global	pulse_R
 660              		.thumb
 661              		.thumb_func
 663              	pulse_R:
 664              	.LFB114:
 209:../Main.c     **** 
 210:../Main.c     **** void pulse_R()
 211:../Main.c     **** {
 665              		.loc 1 211 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669 0000 80B5     		push	{r7, lr}
 670              	.LCFI6:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 00AF     		add	r7, sp, #0
 675              	.LCFI7:
 676              		.cfi_def_cfa_register 7
 212:../Main.c     **** 	delay(300);
 677              		.loc 1 212 0
 678 0004 4FF49670 		mov	r0, #300
 679 0008 FFF7FEFF 		bl	delay
 213:../Main.c     **** 	IO004_SetPin(CLK1);
 680              		.loc 1 213 0
 681 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 682 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 683 0014 5A68     		ldr	r2, [r3, #4]
 684 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 685 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 686 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 687 0020 4FF00101 		mov	r1, #1
 688 0024 01FA03F3 		lsl	r3, r1, r3
 689 0028 5360     		str	r3, [r2, #4]
 214:../Main.c     **** 	delay(300);
 690              		.loc 1 214 0
 691 002a 4FF49670 		mov	r0, #300
 692 002e FFF7FEFF 		bl	delay
 215:../Main.c     **** 	IO004_ResetPin(CLK1);
 693              		.loc 1 215 0
 694 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 695 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 696 003a 5A68     		ldr	r2, [r3, #4]
 697 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 698 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 699 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 700 0046 4FF48031 		mov	r1, #65536
 701 004a 01FA03F3 		lsl	r3, r1, r3
 702 004e 5360     		str	r3, [r2, #4]
 216:../Main.c     **** }
 703              		.loc 1 216 0
 704 0050 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE114:
 708 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 709              		.align	2
 710              		.global	configure_E
 711              		.thumb
 712              		.thumb_func
 714              	configure_E:
 715              	.LFB115:
 217:../Main.c     **** 
 218:../Main.c     **** void configure_E()
 219:../Main.c     **** {
 716              		.loc 1 219 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 8
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720 0000 80B5     		push	{r7, lr}
 721              	.LCFI8:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              	.LCFI9:
 727              		.cfi_def_cfa_offset 16
 728 0004 00AF     		add	r7, sp, #0
 729              	.LCFI10:
 730              		.cfi_def_cfa_register 7
 220:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 221:../Main.c     **** 	configuration[0] = 0xC4;//RF_CH# e OP_MODE 0b11011110
 731              		.loc 1 221 0
 732 0006 40F20003 		movw	r3, #:lower16:configuration
 733 000a C0F20003 		movt	r3, #:upper16:configuration
 734 000e 4FF0C402 		mov	r2, #196
 735 0012 1A70     		strb	r2, [r3, #0]
 222:../Main.c     **** 	configuration[1] = 0x4F;//RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 736              		.loc 1 222 0
 737 0014 40F20003 		movw	r3, #:lower16:configuration
 738 0018 C0F20003 		movt	r3, #:upper16:configuration
 739 001c 4FF04F02 		mov	r2, #79
 740 0020 5A70     		strb	r2, [r3, #1]
 223:../Main.c     **** 	configuration[2] = 0xA3;//addr_w
 741              		.loc 1 223 0
 742 0022 40F20003 		movw	r3, #:lower16:configuration
 743 0026 C0F20003 		movt	r3, #:upper16:configuration
 744 002a 4FF0A302 		mov	r2, #163
 745 002e 9A70     		strb	r2, [r3, #2]
 224:../Main.c     **** 	configuration[3] = 0xEE;//Comeco enderco CH1 00000001
 746              		.loc 1 224 0
 747 0030 40F20003 		movw	r3, #:lower16:configuration
 748 0034 C0F20003 		movt	r3, #:upper16:configuration
 749 0038 4FF0EE02 		mov	r2, #238
 750 003c DA70     		strb	r2, [r3, #3]
 225:../Main.c     **** 	configuration[4] = 0xDD;//0b00000000
 751              		.loc 1 225 0
 752 003e 40F20003 		movw	r3, #:lower16:configuration
 753 0042 C0F20003 		movt	r3, #:upper16:configuration
 754 0046 4FF0DD02 		mov	r2, #221
 755 004a 1A71     		strb	r2, [r3, #4]
 226:../Main.c     **** 	configuration[5] = 0xCC;//0b11010100
 756              		.loc 1 226 0
 757 004c 40F20003 		movw	r3, #:lower16:configuration
 758 0050 C0F20003 		movt	r3, #:upper16:configuration
 759 0054 4FF0CC02 		mov	r2, #204
 760 0058 5A71     		strb	r2, [r3, #5]
 227:../Main.c     **** 	configuration[6] = 0xBB;//0b11011111
 761              		.loc 1 227 0
 762 005a 40F20003 		movw	r3, #:lower16:configuration
 763 005e C0F20003 		movt	r3, #:upper16:configuration
 764 0062 4FF0BB02 		mov	r2, #187
 765 0066 9A71     		strb	r2, [r3, #6]
 228:../Main.c     **** 	configuration[7] = 0xAA;//Fim enderco CH1 0b11101010
 766              		.loc 1 228 0
 767 0068 40F20003 		movw	r3, #:lower16:configuration
 768 006c C0F20003 		movt	r3, #:upper16:configuration
 769 0070 4FF0AA02 		mov	r2, #170
 770 0074 DA71     		strb	r2, [r3, #7]
 229:../Main.c     **** 	configuration[8] = 0b00000000;//Comeco enderco CH2
 771              		.loc 1 229 0
 772 0076 40F20003 		movw	r3, #:lower16:configuration
 773 007a C0F20003 		movt	r3, #:upper16:configuration
 774 007e 4FF00002 		mov	r2, #0
 775 0082 1A72     		strb	r2, [r3, #8]
 230:../Main.c     **** 	configuration[9] = 0b00000000;
 776              		.loc 1 230 0
 777 0084 40F20003 		movw	r3, #:lower16:configuration
 778 0088 C0F20003 		movt	r3, #:upper16:configuration
 779 008c 4FF00002 		mov	r2, #0
 780 0090 5A72     		strb	r2, [r3, #9]
 231:../Main.c     **** 	configuration[10] = 0b00000000;
 781              		.loc 1 231 0
 782 0092 40F20003 		movw	r3, #:lower16:configuration
 783 0096 C0F20003 		movt	r3, #:upper16:configuration
 784 009a 4FF00002 		mov	r2, #0
 785 009e 9A72     		strb	r2, [r3, #10]
 232:../Main.c     **** 	configuration[11] = 0b00000000;
 786              		.loc 1 232 0
 787 00a0 40F20003 		movw	r3, #:lower16:configuration
 788 00a4 C0F20003 		movt	r3, #:upper16:configuration
 789 00a8 4FF00002 		mov	r2, #0
 790 00ac DA72     		strb	r2, [r3, #11]
 233:../Main.c     **** 	configuration[12] = 0b00000000;//Fim enderco CH2
 791              		.loc 1 233 0
 792 00ae 40F20003 		movw	r3, #:lower16:configuration
 793 00b2 C0F20003 		movt	r3, #:upper16:configuration
 794 00b6 4FF00002 		mov	r2, #0
 795 00ba 1A73     		strb	r2, [r3, #12]
 234:../Main.c     **** 	configuration[13] = 0x20;//num bits enviados (1 byte nesse ex)
 796              		.loc 1 234 0
 797 00bc 40F20003 		movw	r3, #:lower16:configuration
 798 00c0 C0F20003 		movt	r3, #:upper16:configuration
 799 00c4 4FF02002 		mov	r2, #32
 800 00c8 5A73     		strb	r2, [r3, #13]
 235:../Main.c     **** 	configuration[14] = 0b00000000;
 801              		.loc 1 235 0
 802 00ca 40F20003 		movw	r3, #:lower16:configuration
 803 00ce C0F20003 		movt	r3, #:upper16:configuration
 804 00d2 4FF00002 		mov	r2, #0
 805 00d6 9A73     		strb	r2, [r3, #14]
 236:../Main.c     **** 
 237:../Main.c     **** 	IO004_ResetPin(CE);
 806              		.loc 1 237 0
 807 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 808 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 809 00e0 5A68     		ldr	r2, [r3, #4]
 810 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 811 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 812 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 813 00ec 4FF48031 		mov	r1, #65536
 814 00f0 01FA03F3 		lsl	r3, r1, r3
 815 00f4 5360     		str	r3, [r2, #4]
 238:../Main.c     **** 	IO004_SetPin(CS);
 816              		.loc 1 238 0
 817 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 818 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 819 00fe 5A68     		ldr	r2, [r3, #4]
 820 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 821 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 822 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 823 010a 4FF00101 		mov	r1, #1
 824 010e 01FA03F3 		lsl	r3, r1, r3
 825 0112 5360     		str	r3, [r2, #4]
 239:../Main.c     **** 	int i, j;
 240:../Main.c     **** 	for (i = 14; i > -1; i--)
 826              		.loc 1 240 0
 827 0114 4FF00E03 		mov	r3, #14
 828 0118 7B60     		str	r3, [r7, #4]
 829 011a 3FE0     		b	.L34
 830              	.L39:
 241:../Main.c     **** 	{
 242:../Main.c     **** 		for (j = 7; j > -1; j--)
 831              		.loc 1 242 0
 832 011c 4FF00703 		mov	r3, #7
 833 0120 3B60     		str	r3, [r7, #0]
 834 0122 34E0     		b	.L35
 835              	.L38:
 243:../Main.c     **** 		{
 244:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 836              		.loc 1 244 0
 837 0124 40F20003 		movw	r3, #:lower16:configuration
 838 0128 C0F20003 		movt	r3, #:upper16:configuration
 839 012c 7A68     		ldr	r2, [r7, #4]
 840 012e 9B18     		adds	r3, r3, r2
 841 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 842 0132 1A46     		mov	r2, r3
 843 0134 4FF00101 		mov	r1, #1
 844 0138 3B68     		ldr	r3, [r7, #0]
 845 013a 01FA03F3 		lsl	r3, r1, r3
 846 013e 1340     		ands	r3, r3, r2
 847 0140 002B     		cmp	r3, #0
 848 0142 0FDD     		ble	.L36
 849              		.loc 1 244 0 is_stmt 0 discriminator 1
 850 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 851 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 852 014c 5A68     		ldr	r2, [r3, #4]
 853 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 854 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 855 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 856 0158 4FF00101 		mov	r1, #1
 857 015c 01FA03F3 		lsl	r3, r1, r3
 858 0160 5360     		str	r3, [r2, #4]
 859 0162 0EE0     		b	.L37
 860              	.L36:
 245:../Main.c     **** 			else IO004_ResetPin(DATA);;
 861              		.loc 1 245 0 is_stmt 1
 862 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 863 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 864 016c 5A68     		ldr	r2, [r3, #4]
 865 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 866 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 867 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 868 0178 4FF48031 		mov	r1, #65536
 869 017c 01FA03F3 		lsl	r3, r1, r3
 870 0180 5360     		str	r3, [r2, #4]
 871              	.L37:
 246:../Main.c     **** 			pulse_R();
 872              		.loc 1 246 0
 873 0182 FFF7FEFF 		bl	pulse_R
 242:../Main.c     **** 		for (j = 7; j > -1; j--)
 874              		.loc 1 242 0
 875 0186 3B68     		ldr	r3, [r7, #0]
 876 0188 03F1FF33 		add	r3, r3, #-1
 877 018c 3B60     		str	r3, [r7, #0]
 878              	.L35:
 242:../Main.c     **** 		for (j = 7; j > -1; j--)
 879              		.loc 1 242 0 is_stmt 0 discriminator 1
 880 018e 3B68     		ldr	r3, [r7, #0]
 881 0190 002B     		cmp	r3, #0
 882 0192 C7DA     		bge	.L38
 240:../Main.c     **** 	for (i = 14; i > -1; i--)
 883              		.loc 1 240 0 is_stmt 1
 884 0194 7B68     		ldr	r3, [r7, #4]
 885 0196 03F1FF33 		add	r3, r3, #-1
 886 019a 7B60     		str	r3, [r7, #4]
 887              	.L34:
 240:../Main.c     **** 	for (i = 14; i > -1; i--)
 888              		.loc 1 240 0 is_stmt 0 discriminator 1
 889 019c 7B68     		ldr	r3, [r7, #4]
 890 019e 002B     		cmp	r3, #0
 891 01a0 BCDA     		bge	.L39
 247:../Main.c     **** 		}
 248:../Main.c     **** 	}
 249:../Main.c     **** 	IO004_ResetPin(CS);
 892              		.loc 1 249 0 is_stmt 1
 893 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 894 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 895 01aa 5A68     		ldr	r2, [r3, #4]
 896 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 897 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 898 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 899 01b6 4FF48031 		mov	r1, #65536
 900 01ba 01FA03F3 		lsl	r3, r1, r3
 901 01be 5360     		str	r3, [r2, #4]
 250:../Main.c     **** 	delay(50000);
 902              		.loc 1 250 0
 903 01c0 4CF25030 		movw	r0, #50000
 904 01c4 FFF7FEFF 		bl	delay
 251:../Main.c     **** }
 905              		.loc 1 251 0
 906 01c8 07F10807 		add	r7, r7, #8
 907 01cc BD46     		mov	sp, r7
 908 01ce 80BD     		pop	{r7, pc}
 909              		.cfi_endproc
 910              	.LFE115:
 912              		.section	.text.write_E,"ax",%progbits
 913              		.align	2
 914              		.global	write_E
 915              		.thumb
 916              		.thumb_func
 918              	write_E:
 919              	.LFB116:
 252:../Main.c     **** void write_E()
 253:../Main.c     **** {
 920              		.loc 1 253 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 1, uses_anonymous_args = 0
 924 0000 80B5     		push	{r7, lr}
 925              	.LCFI11:
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 82B0     		sub	sp, sp, #8
 930              	.LCFI12:
 931              		.cfi_def_cfa_offset 16
 932 0004 00AF     		add	r7, sp, #0
 933              	.LCFI13:
 934              		.cfi_def_cfa_register 7
 254:../Main.c     **** 	int i, j;
 255:../Main.c     **** 	IO004_SetPin(CE);
 935              		.loc 1 255 0
 936 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 937 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 938 000e 5A68     		ldr	r2, [r3, #4]
 939 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 940 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 941 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 942 001a 4FF00101 		mov	r1, #1
 943 001e 01FA03F3 		lsl	r3, r1, r3
 944 0022 5360     		str	r3, [r2, #4]
 256:../Main.c     **** 	delay(1000);
 945              		.loc 1 256 0
 946 0024 4FF47A70 		mov	r0, #1000
 947 0028 FFF7FEFF 		bl	delay
 257:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 948              		.loc 1 257 0
 949 002c 4FF00703 		mov	r3, #7
 950 0030 7B60     		str	r3, [r7, #4]
 951 0032 3FE0     		b	.L41
 952              	.L46:
 258:../Main.c     **** 	{
 259:../Main.c     **** 		for (j = 7; j > -1; j --)
 953              		.loc 1 259 0
 954 0034 4FF00703 		mov	r3, #7
 955 0038 3B60     		str	r3, [r7, #0]
 956 003a 34E0     		b	.L42
 957              	.L45:
 260:../Main.c     **** 		{
 261:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 958              		.loc 1 261 0
 959 003c 40F20003 		movw	r3, #:lower16:configuration
 960 0040 C0F20003 		movt	r3, #:upper16:configuration
 961 0044 7A68     		ldr	r2, [r7, #4]
 962 0046 9B18     		adds	r3, r3, r2
 963 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 964 004a 1A46     		mov	r2, r3
 965 004c 4FF00101 		mov	r1, #1
 966 0050 3B68     		ldr	r3, [r7, #0]
 967 0052 01FA03F3 		lsl	r3, r1, r3
 968 0056 1340     		ands	r3, r3, r2
 969 0058 002B     		cmp	r3, #0
 970 005a 0FDD     		ble	.L43
 971              		.loc 1 261 0 is_stmt 0 discriminator 1
 972 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 973 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 974 0064 5A68     		ldr	r2, [r3, #4]
 975 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 976 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 977 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 978 0070 4FF00101 		mov	r1, #1
 979 0074 01FA03F3 		lsl	r3, r1, r3
 980 0078 5360     		str	r3, [r2, #4]
 981 007a 0EE0     		b	.L44
 982              	.L43:
 262:../Main.c     **** 			else IO004_ResetPin(DATA);
 983              		.loc 1 262 0 is_stmt 1
 984 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 985 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 986 0084 5A68     		ldr	r2, [r3, #4]
 987 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 988 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 989 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 990 0090 4FF48031 		mov	r1, #65536
 991 0094 01FA03F3 		lsl	r3, r1, r3
 992 0098 5360     		str	r3, [r2, #4]
 993              	.L44:
 263:../Main.c     **** 			pulse_R();
 994              		.loc 1 263 0
 995 009a FFF7FEFF 		bl	pulse_R
 259:../Main.c     **** 		for (j = 7; j > -1; j --)
 996              		.loc 1 259 0
 997 009e 3B68     		ldr	r3, [r7, #0]
 998 00a0 03F1FF33 		add	r3, r3, #-1
 999 00a4 3B60     		str	r3, [r7, #0]
 1000              	.L42:
 259:../Main.c     **** 		for (j = 7; j > -1; j --)
 1001              		.loc 1 259 0 is_stmt 0 discriminator 1
 1002 00a6 3B68     		ldr	r3, [r7, #0]
 1003 00a8 002B     		cmp	r3, #0
 1004 00aa C7DA     		bge	.L45
 257:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1005              		.loc 1 257 0 is_stmt 1
 1006 00ac 7B68     		ldr	r3, [r7, #4]
 1007 00ae 03F1FF33 		add	r3, r3, #-1
 1008 00b2 7B60     		str	r3, [r7, #4]
 1009              	.L41:
 257:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1010              		.loc 1 257 0 is_stmt 0 discriminator 1
 1011 00b4 7B68     		ldr	r3, [r7, #4]
 1012 00b6 022B     		cmp	r3, #2
 1013 00b8 BCDC     		bgt	.L46
 264:../Main.c     **** 		}
 265:../Main.c     **** 	}
 266:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1014              		.loc 1 266 0 is_stmt 1
 1015 00ba 4FF00003 		mov	r3, #0
 1016 00be 7B60     		str	r3, [r7, #4]
 1017 00c0 3FE0     		b	.L47
 1018              	.L52:
 267:../Main.c     **** 	{
 268:../Main.c     **** 		for (j = 7; j > -1; j --)
 1019              		.loc 1 268 0
 1020 00c2 4FF00703 		mov	r3, #7
 1021 00c6 3B60     		str	r3, [r7, #0]
 1022 00c8 34E0     		b	.L48
 1023              	.L51:
 269:../Main.c     **** 		{
 270:../Main.c     **** 			if ((data_E[i] & (1<<j))>0) IO004_SetPin(DATA);
 1024              		.loc 1 270 0
 1025 00ca 40F20003 		movw	r3, #:lower16:data_E
 1026 00ce C0F20003 		movt	r3, #:upper16:data_E
 1027 00d2 7A68     		ldr	r2, [r7, #4]
 1028 00d4 9B18     		adds	r3, r3, r2
 1029 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1030 00d8 1A46     		mov	r2, r3
 1031 00da 4FF00101 		mov	r1, #1
 1032 00de 3B68     		ldr	r3, [r7, #0]
 1033 00e0 01FA03F3 		lsl	r3, r1, r3
 1034 00e4 1340     		ands	r3, r3, r2
 1035 00e6 002B     		cmp	r3, #0
 1036 00e8 0FDD     		ble	.L49
 1037              		.loc 1 270 0 is_stmt 0 discriminator 1
 1038 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1039 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1040 00f2 5A68     		ldr	r2, [r3, #4]
 1041 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1042 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1043 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1044 00fe 4FF00101 		mov	r1, #1
 1045 0102 01FA03F3 		lsl	r3, r1, r3
 1046 0106 5360     		str	r3, [r2, #4]
 1047 0108 0EE0     		b	.L50
 1048              	.L49:
 271:../Main.c     **** 			else IO004_ResetPin(DATA);
 1049              		.loc 1 271 0 is_stmt 1
 1050 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1051 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1052 0112 5A68     		ldr	r2, [r3, #4]
 1053 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1054 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1055 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1056 011e 4FF48031 		mov	r1, #65536
 1057 0122 01FA03F3 		lsl	r3, r1, r3
 1058 0126 5360     		str	r3, [r2, #4]
 1059              	.L50:
 272:../Main.c     **** 			pulse_R();
 1060              		.loc 1 272 0
 1061 0128 FFF7FEFF 		bl	pulse_R
 268:../Main.c     **** 		for (j = 7; j > -1; j --)
 1062              		.loc 1 268 0
 1063 012c 3B68     		ldr	r3, [r7, #0]
 1064 012e 03F1FF33 		add	r3, r3, #-1
 1065 0132 3B60     		str	r3, [r7, #0]
 1066              	.L48:
 268:../Main.c     **** 		for (j = 7; j > -1; j --)
 1067              		.loc 1 268 0 is_stmt 0 discriminator 1
 1068 0134 3B68     		ldr	r3, [r7, #0]
 1069 0136 002B     		cmp	r3, #0
 1070 0138 C7DA     		bge	.L51
 266:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1071              		.loc 1 266 0 is_stmt 1
 1072 013a 7B68     		ldr	r3, [r7, #4]
 1073 013c 03F10103 		add	r3, r3, #1
 1074 0140 7B60     		str	r3, [r7, #4]
 1075              	.L47:
 266:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1076              		.loc 1 266 0 is_stmt 0 discriminator 1
 1077 0142 7B68     		ldr	r3, [r7, #4]
 1078 0144 032B     		cmp	r3, #3
 1079 0146 BCDD     		ble	.L52
 273:../Main.c     **** 		}
 274:../Main.c     **** 	}//termina de enviar dados
 275:../Main.c     **** 	IO004_ResetPin(CE);
 1080              		.loc 1 275 0 is_stmt 1
 1081 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1082 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1083 0150 5A68     		ldr	r2, [r3, #4]
 1084 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1085 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1086 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1087 015c 4FF48031 		mov	r1, #65536
 1088 0160 01FA03F3 		lsl	r3, r1, r3
 1089 0164 5360     		str	r3, [r2, #4]
 276:../Main.c     **** 	delay(5000);
 1090              		.loc 1 276 0
 1091 0166 41F28830 		movw	r0, #5000
 1092 016a FFF7FEFF 		bl	delay
 277:../Main.c     **** }
 1093              		.loc 1 277 0
 1094 016e 07F10807 		add	r7, r7, #8
 1095 0172 BD46     		mov	sp, r7
 1096 0174 80BD     		pop	{r7, pc}
 1097              		.cfi_endproc
 1098              	.LFE116:
 1100 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1101              		.align	2
 1102              		.global	psxConfiguraControle
 1103              		.thumb
 1104              		.thumb_func
 1106              	psxConfiguraControle:
 1107              	.LFB117:
 278:../Main.c     **** /***************************************************/
 279:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 280:../Main.c     **** /***************************************************/
 281:../Main.c     **** void psxConfiguraControle()
 282:../Main.c     **** {
 1108              		.loc 1 282 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112 0000 80B5     		push	{r7, lr}
 1113              	.LCFI14:
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 7, -8
 1116              		.cfi_offset 14, -4
 1117 0002 00AF     		add	r7, sp, #0
 1118              	.LCFI15:
 1119              		.cfi_def_cfa_register 7
 283:../Main.c     **** 	psxEnterConfigMode();
 1120              		.loc 1 283 0
 1121 0004 FFF7FEFF 		bl	psxEnterConfigMode
 284:../Main.c     **** 	psxSetAnalogMode();
 1122              		.loc 1 284 0
 1123 0008 FFF7FEFF 		bl	psxSetAnalogMode
 285:../Main.c     **** 	psxExitConfigMode();
 1124              		.loc 1 285 0
 1125 000c FFF7FEFF 		bl	psxExitConfigMode
 286:../Main.c     **** }
 1126              		.loc 1 286 0
 1127 0010 80BD     		pop	{r7, pc}
 1128              		.cfi_endproc
 1129              	.LFE117:
 1131 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1132              		.align	2
 1133              		.global	psxEnterConfigMode
 1134              		.thumb
 1135              		.thumb_func
 1137              	psxEnterConfigMode:
 1138              	.LFB118:
 287:../Main.c     **** 
 288:../Main.c     **** void psxEnterConfigMode()
 289:../Main.c     **** {
 1139              		.loc 1 289 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 8
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143 0000 80B5     		push	{r7, lr}
 1144              	.LCFI16:
 1145              		.cfi_def_cfa_offset 8
 1146              		.cfi_offset 7, -8
 1147              		.cfi_offset 14, -4
 1148 0002 82B0     		sub	sp, sp, #8
 1149              	.LCFI17:
 1150              		.cfi_def_cfa_offset 16
 1151 0004 00AF     		add	r7, sp, #0
 1152              	.LCFI18:
 1153              		.cfi_def_cfa_register 7
 290:../Main.c     **** 	int psxByte = 0;
 1154              		.loc 1 290 0
 1155 0006 4FF00003 		mov	r3, #0
 1156 000a 7B60     		str	r3, [r7, #4]
 291:../Main.c     **** 	IO004_SetPin(CMD);
 1157              		.loc 1 291 0
 1158 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1159 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1160 0014 5A68     		ldr	r2, [r3, #4]
 1161 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1162 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1163 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1164 0020 4FF00101 		mov	r1, #1
 1165 0024 01FA03F3 		lsl	r3, r1, r3
 1166 0028 5360     		str	r3, [r2, #4]
 292:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1167              		.loc 1 292 0
 1168 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1169 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1170 0032 5A68     		ldr	r2, [r3, #4]
 1171 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1172 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1173 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1174 003e 4FF00101 		mov	r1, #1
 1175 0042 01FA03F3 		lsl	r3, r1, r3
 1176 0046 5360     		str	r3, [r2, #4]
 293:../Main.c     **** 	IO004_ResetPin(ATT);
 1177              		.loc 1 293 0
 1178 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1179 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1180 0050 5A68     		ldr	r2, [r3, #4]
 1181 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1182 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1183 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1184 005c 4FF48031 		mov	r1, #65536
 1185 0060 01FA03F3 		lsl	r3, r1, r3
 1186 0064 5360     		str	r3, [r2, #4]
 294:../Main.c     **** 	delay(tempoInicio);
 1187              		.loc 1 294 0
 1188 0066 4FF49670 		mov	r0, #300
 1189 006a FFF7FEFF 		bl	delay
 295:../Main.c     **** 
 296:../Main.c     **** 	psxByte = 1;
 1190              		.loc 1 296 0
 1191 006e 4FF00103 		mov	r3, #1
 1192 0072 7B60     		str	r3, [r7, #4]
 297:../Main.c     **** 	psxTrocaByte(psxByte);
 1193              		.loc 1 297 0
 1194 0074 7868     		ldr	r0, [r7, #4]
 1195 0076 FFF7FEFF 		bl	psxTrocaByte
 298:../Main.c     **** 
 299:../Main.c     **** 	psxByte = 0x43;
 1196              		.loc 1 299 0
 1197 007a 4FF04303 		mov	r3, #67
 1198 007e 7B60     		str	r3, [r7, #4]
 300:../Main.c     **** 	psxTrocaByte(psxByte);
 1199              		.loc 1 300 0
 1200 0080 7868     		ldr	r0, [r7, #4]
 1201 0082 FFF7FEFF 		bl	psxTrocaByte
 301:../Main.c     **** 
 302:../Main.c     **** 	psxByte = 0;
 1202              		.loc 1 302 0
 1203 0086 4FF00003 		mov	r3, #0
 1204 008a 7B60     		str	r3, [r7, #4]
 303:../Main.c     **** 	psxTrocaByte(psxByte);
 1205              		.loc 1 303 0
 1206 008c 7868     		ldr	r0, [r7, #4]
 1207 008e FFF7FEFF 		bl	psxTrocaByte
 304:../Main.c     **** 
 305:../Main.c     **** 	psxByte = 0x1;
 1208              		.loc 1 305 0
 1209 0092 4FF00103 		mov	r3, #1
 1210 0096 7B60     		str	r3, [r7, #4]
 306:../Main.c     **** 	psxTrocaByte(psxByte);
 1211              		.loc 1 306 0
 1212 0098 7868     		ldr	r0, [r7, #4]
 1213 009a FFF7FEFF 		bl	psxTrocaByte
 307:../Main.c     **** 
 308:../Main.c     **** 	psxByte = 0;
 1214              		.loc 1 308 0
 1215 009e 4FF00003 		mov	r3, #0
 1216 00a2 7B60     		str	r3, [r7, #4]
 309:../Main.c     **** 	psxTrocaByte(psxByte);
 1217              		.loc 1 309 0
 1218 00a4 7868     		ldr	r0, [r7, #4]
 1219 00a6 FFF7FEFF 		bl	psxTrocaByte
 310:../Main.c     **** 
 311:../Main.c     **** 	IO004_SetPin(ATT);
 1220              		.loc 1 311 0
 1221 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1222 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1223 00b2 5A68     		ldr	r2, [r3, #4]
 1224 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1225 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1226 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1227 00be 4FF00101 		mov	r1, #1
 1228 00c2 01FA03F3 		lsl	r3, r1, r3
 1229 00c6 5360     		str	r3, [r2, #4]
 312:../Main.c     **** }
 1230              		.loc 1 312 0
 1231 00c8 07F10807 		add	r7, r7, #8
 1232 00cc BD46     		mov	sp, r7
 1233 00ce 80BD     		pop	{r7, pc}
 1234              		.cfi_endproc
 1235              	.LFE118:
 1237              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1238              		.align	2
 1239              		.global	psxSetAnalogMode
 1240              		.thumb
 1241              		.thumb_func
 1243              	psxSetAnalogMode:
 1244              	.LFB119:
 313:../Main.c     **** 
 314:../Main.c     **** void psxSetAnalogMode()
 315:../Main.c     **** {
 1245              		.loc 1 315 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 8
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249 0000 80B5     		push	{r7, lr}
 1250              	.LCFI19:
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 82B0     		sub	sp, sp, #8
 1255              	.LCFI20:
 1256              		.cfi_def_cfa_offset 16
 1257 0004 00AF     		add	r7, sp, #0
 1258              	.LCFI21:
 1259              		.cfi_def_cfa_register 7
 316:../Main.c     **** 	int psxByte = 0;
 1260              		.loc 1 316 0
 1261 0006 4FF00003 		mov	r3, #0
 1262 000a 7B60     		str	r3, [r7, #4]
 317:../Main.c     **** 	IO004_SetPin(CMD);
 1263              		.loc 1 317 0
 1264 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1265 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1266 0014 5A68     		ldr	r2, [r3, #4]
 1267 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1268 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1269 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1270 0020 4FF00101 		mov	r1, #1
 1271 0024 01FA03F3 		lsl	r3, r1, r3
 1272 0028 5360     		str	r3, [r2, #4]
 318:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1273              		.loc 1 318 0
 1274 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1275 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1276 0032 5A68     		ldr	r2, [r3, #4]
 1277 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1278 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1279 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1280 003e 4FF00101 		mov	r1, #1
 1281 0042 01FA03F3 		lsl	r3, r1, r3
 1282 0046 5360     		str	r3, [r2, #4]
 319:../Main.c     **** 	IO004_ResetPin(ATT);
 1283              		.loc 1 319 0
 1284 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1285 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1286 0050 5A68     		ldr	r2, [r3, #4]
 1287 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1288 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1289 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1290 005c 4FF48031 		mov	r1, #65536
 1291 0060 01FA03F3 		lsl	r3, r1, r3
 1292 0064 5360     		str	r3, [r2, #4]
 320:../Main.c     **** 	delay(tempoInicio);
 1293              		.loc 1 320 0
 1294 0066 4FF49670 		mov	r0, #300
 1295 006a FFF7FEFF 		bl	delay
 321:../Main.c     **** 
 322:../Main.c     **** 	psxByte = 1;
 1296              		.loc 1 322 0
 1297 006e 4FF00103 		mov	r3, #1
 1298 0072 7B60     		str	r3, [r7, #4]
 323:../Main.c     **** 	psxTrocaByte(psxByte);
 1299              		.loc 1 323 0
 1300 0074 7868     		ldr	r0, [r7, #4]
 1301 0076 FFF7FEFF 		bl	psxTrocaByte
 324:../Main.c     **** 
 325:../Main.c     **** 	psxByte = 0x44;
 1302              		.loc 1 325 0
 1303 007a 4FF04403 		mov	r3, #68
 1304 007e 7B60     		str	r3, [r7, #4]
 326:../Main.c     **** 	psxTrocaByte(psxByte);
 1305              		.loc 1 326 0
 1306 0080 7868     		ldr	r0, [r7, #4]
 1307 0082 FFF7FEFF 		bl	psxTrocaByte
 327:../Main.c     **** 
 328:../Main.c     **** 	psxByte = 0;
 1308              		.loc 1 328 0
 1309 0086 4FF00003 		mov	r3, #0
 1310 008a 7B60     		str	r3, [r7, #4]
 329:../Main.c     **** 	psxTrocaByte(psxByte);
 1311              		.loc 1 329 0
 1312 008c 7868     		ldr	r0, [r7, #4]
 1313 008e FFF7FEFF 		bl	psxTrocaByte
 330:../Main.c     **** 
 331:../Main.c     **** 	psxByte = 0x1;
 1314              		.loc 1 331 0
 1315 0092 4FF00103 		mov	r3, #1
 1316 0096 7B60     		str	r3, [r7, #4]
 332:../Main.c     **** 	psxTrocaByte(psxByte);
 1317              		.loc 1 332 0
 1318 0098 7868     		ldr	r0, [r7, #4]
 1319 009a FFF7FEFF 		bl	psxTrocaByte
 333:../Main.c     **** 
 334:../Main.c     **** 	psxByte = 0x3;
 1320              		.loc 1 334 0
 1321 009e 4FF00303 		mov	r3, #3
 1322 00a2 7B60     		str	r3, [r7, #4]
 335:../Main.c     **** 	psxTrocaByte(psxByte);
 1323              		.loc 1 335 0
 1324 00a4 7868     		ldr	r0, [r7, #4]
 1325 00a6 FFF7FEFF 		bl	psxTrocaByte
 336:../Main.c     **** 
 337:../Main.c     **** 	psxByte = 0;
 1326              		.loc 1 337 0
 1327 00aa 4FF00003 		mov	r3, #0
 1328 00ae 7B60     		str	r3, [r7, #4]
 338:../Main.c     **** 	psxTrocaByte(psxByte);
 1329              		.loc 1 338 0
 1330 00b0 7868     		ldr	r0, [r7, #4]
 1331 00b2 FFF7FEFF 		bl	psxTrocaByte
 339:../Main.c     **** 
 340:../Main.c     **** 	psxByte = 0;
 1332              		.loc 1 340 0
 1333 00b6 4FF00003 		mov	r3, #0
 1334 00ba 7B60     		str	r3, [r7, #4]
 341:../Main.c     **** 	psxTrocaByte(psxByte);
 1335              		.loc 1 341 0
 1336 00bc 7868     		ldr	r0, [r7, #4]
 1337 00be FFF7FEFF 		bl	psxTrocaByte
 342:../Main.c     **** 
 343:../Main.c     **** 	psxByte = 0;
 1338              		.loc 1 343 0
 1339 00c2 4FF00003 		mov	r3, #0
 1340 00c6 7B60     		str	r3, [r7, #4]
 344:../Main.c     **** 	psxTrocaByte(psxByte);
 1341              		.loc 1 344 0
 1342 00c8 7868     		ldr	r0, [r7, #4]
 1343 00ca FFF7FEFF 		bl	psxTrocaByte
 345:../Main.c     **** 
 346:../Main.c     **** 	psxByte = 0;
 1344              		.loc 1 346 0
 1345 00ce 4FF00003 		mov	r3, #0
 1346 00d2 7B60     		str	r3, [r7, #4]
 347:../Main.c     **** 	psxTrocaByte(psxByte);
 1347              		.loc 1 347 0
 1348 00d4 7868     		ldr	r0, [r7, #4]
 1349 00d6 FFF7FEFF 		bl	psxTrocaByte
 348:../Main.c     **** 
 349:../Main.c     **** 	IO004_SetPin(ATT);
 1350              		.loc 1 349 0
 1351 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1352 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1353 00e2 5A68     		ldr	r2, [r3, #4]
 1354 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1355 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1356 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1357 00ee 4FF00101 		mov	r1, #1
 1358 00f2 01FA03F3 		lsl	r3, r1, r3
 1359 00f6 5360     		str	r3, [r2, #4]
 350:../Main.c     **** }
 1360              		.loc 1 350 0
 1361 00f8 07F10807 		add	r7, r7, #8
 1362 00fc BD46     		mov	sp, r7
 1363 00fe 80BD     		pop	{r7, pc}
 1364              		.cfi_endproc
 1365              	.LFE119:
 1367              		.section	.text.psxExitConfigMode,"ax",%progbits
 1368              		.align	2
 1369              		.global	psxExitConfigMode
 1370              		.thumb
 1371              		.thumb_func
 1373              	psxExitConfigMode:
 1374              	.LFB120:
 351:../Main.c     **** 
 352:../Main.c     **** void psxExitConfigMode()
 353:../Main.c     **** {
 1375              		.loc 1 353 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 8
 1378              		@ frame_needed = 1, uses_anonymous_args = 0
 1379 0000 80B5     		push	{r7, lr}
 1380              	.LCFI22:
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 82B0     		sub	sp, sp, #8
 1385              	.LCFI23:
 1386              		.cfi_def_cfa_offset 16
 1387 0004 00AF     		add	r7, sp, #0
 1388              	.LCFI24:
 1389              		.cfi_def_cfa_register 7
 354:../Main.c     **** 	int psxByte = 0;
 1390              		.loc 1 354 0
 1391 0006 4FF00003 		mov	r3, #0
 1392 000a 7B60     		str	r3, [r7, #4]
 355:../Main.c     **** 	IO004_SetPin(CMD);
 1393              		.loc 1 355 0
 1394 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1395 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1396 0014 5A68     		ldr	r2, [r3, #4]
 1397 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1398 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1399 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1400 0020 4FF00101 		mov	r1, #1
 1401 0024 01FA03F3 		lsl	r3, r1, r3
 1402 0028 5360     		str	r3, [r2, #4]
 356:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1403              		.loc 1 356 0
 1404 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1405 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1406 0032 5A68     		ldr	r2, [r3, #4]
 1407 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1408 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1409 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1410 003e 4FF00101 		mov	r1, #1
 1411 0042 01FA03F3 		lsl	r3, r1, r3
 1412 0046 5360     		str	r3, [r2, #4]
 357:../Main.c     **** 	IO004_ResetPin(ATT);
 1413              		.loc 1 357 0
 1414 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1415 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1416 0050 5A68     		ldr	r2, [r3, #4]
 1417 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1418 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1419 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1420 005c 4FF48031 		mov	r1, #65536
 1421 0060 01FA03F3 		lsl	r3, r1, r3
 1422 0064 5360     		str	r3, [r2, #4]
 358:../Main.c     **** 	delay(tempoInicio);
 1423              		.loc 1 358 0
 1424 0066 4FF49670 		mov	r0, #300
 1425 006a FFF7FEFF 		bl	delay
 359:../Main.c     **** 
 360:../Main.c     **** 	psxByte = 1;
 1426              		.loc 1 360 0
 1427 006e 4FF00103 		mov	r3, #1
 1428 0072 7B60     		str	r3, [r7, #4]
 361:../Main.c     **** 	psxTrocaByte(psxByte);
 1429              		.loc 1 361 0
 1430 0074 7868     		ldr	r0, [r7, #4]
 1431 0076 FFF7FEFF 		bl	psxTrocaByte
 362:../Main.c     **** 
 363:../Main.c     **** 	psxByte = 0x43;
 1432              		.loc 1 363 0
 1433 007a 4FF04303 		mov	r3, #67
 1434 007e 7B60     		str	r3, [r7, #4]
 364:../Main.c     **** 	psxTrocaByte(psxByte);
 1435              		.loc 1 364 0
 1436 0080 7868     		ldr	r0, [r7, #4]
 1437 0082 FFF7FEFF 		bl	psxTrocaByte
 365:../Main.c     **** 
 366:../Main.c     **** 	psxByte = 0;
 1438              		.loc 1 366 0
 1439 0086 4FF00003 		mov	r3, #0
 1440 008a 7B60     		str	r3, [r7, #4]
 367:../Main.c     **** 	psxTrocaByte(psxByte);
 1441              		.loc 1 367 0
 1442 008c 7868     		ldr	r0, [r7, #4]
 1443 008e FFF7FEFF 		bl	psxTrocaByte
 368:../Main.c     **** 
 369:../Main.c     **** 	psxByte = 0;
 1444              		.loc 1 369 0
 1445 0092 4FF00003 		mov	r3, #0
 1446 0096 7B60     		str	r3, [r7, #4]
 370:../Main.c     **** 	psxTrocaByte(psxByte);
 1447              		.loc 1 370 0
 1448 0098 7868     		ldr	r0, [r7, #4]
 1449 009a FFF7FEFF 		bl	psxTrocaByte
 371:../Main.c     **** 
 372:../Main.c     **** 	psxByte = 0x5A;
 1450              		.loc 1 372 0
 1451 009e 4FF05A03 		mov	r3, #90
 1452 00a2 7B60     		str	r3, [r7, #4]
 373:../Main.c     **** 	psxTrocaByte(psxByte);
 1453              		.loc 1 373 0
 1454 00a4 7868     		ldr	r0, [r7, #4]
 1455 00a6 FFF7FEFF 		bl	psxTrocaByte
 374:../Main.c     **** 
 375:../Main.c     **** 	psxByte = 0x5A;
 1456              		.loc 1 375 0
 1457 00aa 4FF05A03 		mov	r3, #90
 1458 00ae 7B60     		str	r3, [r7, #4]
 376:../Main.c     **** 	psxTrocaByte(psxByte);
 1459              		.loc 1 376 0
 1460 00b0 7868     		ldr	r0, [r7, #4]
 1461 00b2 FFF7FEFF 		bl	psxTrocaByte
 377:../Main.c     **** 
 378:../Main.c     **** 	psxByte = 0x5A;
 1462              		.loc 1 378 0
 1463 00b6 4FF05A03 		mov	r3, #90
 1464 00ba 7B60     		str	r3, [r7, #4]
 379:../Main.c     **** 	psxTrocaByte(psxByte);
 1465              		.loc 1 379 0
 1466 00bc 7868     		ldr	r0, [r7, #4]
 1467 00be FFF7FEFF 		bl	psxTrocaByte
 380:../Main.c     **** 
 381:../Main.c     **** 	psxByte = 0x5A;
 1468              		.loc 1 381 0
 1469 00c2 4FF05A03 		mov	r3, #90
 1470 00c6 7B60     		str	r3, [r7, #4]
 382:../Main.c     **** 	psxTrocaByte(psxByte);
 1471              		.loc 1 382 0
 1472 00c8 7868     		ldr	r0, [r7, #4]
 1473 00ca FFF7FEFF 		bl	psxTrocaByte
 383:../Main.c     **** 
 384:../Main.c     **** 	psxByte = 0x5A;
 1474              		.loc 1 384 0
 1475 00ce 4FF05A03 		mov	r3, #90
 1476 00d2 7B60     		str	r3, [r7, #4]
 385:../Main.c     **** 	psxTrocaByte(psxByte);
 1477              		.loc 1 385 0
 1478 00d4 7868     		ldr	r0, [r7, #4]
 1479 00d6 FFF7FEFF 		bl	psxTrocaByte
 386:../Main.c     **** 
 387:../Main.c     **** 	IO004_SetPin(ATT);
 1480              		.loc 1 387 0
 1481 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1482 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1483 00e2 5A68     		ldr	r2, [r3, #4]
 1484 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1485 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1486 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1487 00ee 4FF00101 		mov	r1, #1
 1488 00f2 01FA03F3 		lsl	r3, r1, r3
 1489 00f6 5360     		str	r3, [r2, #4]
 388:../Main.c     **** }
 1490              		.loc 1 388 0
 1491 00f8 07F10807 		add	r7, r7, #8
 1492 00fc BD46     		mov	sp, r7
 1493 00fe 80BD     		pop	{r7, pc}
 1494              		.cfi_endproc
 1495              	.LFE120:
 1497              		.section	.text.psxLeControle,"ax",%progbits
 1498              		.align	2
 1499              		.global	psxLeControle
 1500              		.thumb
 1501              		.thumb_func
 1503              	psxLeControle:
 1504              	.LFB121:
 389:../Main.c     **** 
 390:../Main.c     **** void psxLeControle()
 391:../Main.c     **** {
 1505              		.loc 1 391 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 8
 1508              		@ frame_needed = 1, uses_anonymous_args = 0
 1509 0000 80B5     		push	{r7, lr}
 1510              	.LCFI25:
 1511              		.cfi_def_cfa_offset 8
 1512              		.cfi_offset 7, -8
 1513              		.cfi_offset 14, -4
 1514 0002 82B0     		sub	sp, sp, #8
 1515              	.LCFI26:
 1516              		.cfi_def_cfa_offset 16
 1517 0004 00AF     		add	r7, sp, #0
 1518              	.LCFI27:
 1519              		.cfi_def_cfa_register 7
 392:../Main.c     **** 	int psxByte = 0;
 1520              		.loc 1 392 0
 1521 0006 4FF00003 		mov	r3, #0
 1522 000a 3B60     		str	r3, [r7, #0]
 393:../Main.c     **** 	int psxCont;
 394:../Main.c     **** 
 395:../Main.c     **** 	IO004_SetPin(CMD);
 1523              		.loc 1 395 0
 1524 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1525 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1526 0014 5A68     		ldr	r2, [r3, #4]
 1527 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1528 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1529 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1530 0020 4FF00101 		mov	r1, #1
 1531 0024 01FA03F3 		lsl	r3, r1, r3
 1532 0028 5360     		str	r3, [r2, #4]
 396:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1533              		.loc 1 396 0
 1534 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1535 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1536 0032 5A68     		ldr	r2, [r3, #4]
 1537 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1538 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1539 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1540 003e 4FF00101 		mov	r1, #1
 1541 0042 01FA03F3 		lsl	r3, r1, r3
 1542 0046 5360     		str	r3, [r2, #4]
 397:../Main.c     **** 	IO004_ResetPin(ATT);
 1543              		.loc 1 397 0
 1544 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1545 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1546 0050 5A68     		ldr	r2, [r3, #4]
 1547 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1548 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1549 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1550 005c 4FF48031 		mov	r1, #65536
 1551 0060 01FA03F3 		lsl	r3, r1, r3
 1552 0064 5360     		str	r3, [r2, #4]
 398:../Main.c     **** 	delay(tempoInicio);
 1553              		.loc 1 398 0
 1554 0066 4FF49670 		mov	r0, #300
 1555 006a FFF7FEFF 		bl	delay
 399:../Main.c     **** 
 400:../Main.c     **** 	psxByte = 1;
 1556              		.loc 1 400 0
 1557 006e 4FF00103 		mov	r3, #1
 1558 0072 3B60     		str	r3, [r7, #0]
 401:../Main.c     **** 	psxTrocaByte(psxByte);
 1559              		.loc 1 401 0
 1560 0074 3868     		ldr	r0, [r7, #0]
 1561 0076 FFF7FEFF 		bl	psxTrocaByte
 402:../Main.c     **** 
 403:../Main.c     **** 	psxByte = 0x42;
 1562              		.loc 1 403 0
 1563 007a 4FF04203 		mov	r3, #66
 1564 007e 3B60     		str	r3, [r7, #0]
 404:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 1565              		.loc 1 404 0
 1566 0080 3868     		ldr	r0, [r7, #0]
 1567 0082 FFF7FEFF 		bl	psxTrocaByte
 1568 0086 0346     		mov	r3, r0
 1569 0088 DAB2     		uxtb	r2, r3
 1570 008a 40F20003 		movw	r3, #:lower16:psx_status
 1571 008e C0F20003 		movt	r3, #:upper16:psx_status
 1572 0092 1A70     		strb	r2, [r3, #0]
 405:../Main.c     **** 
 406:../Main.c     **** 	psxByte = 0;
 1573              		.loc 1 406 0
 1574 0094 4FF00003 		mov	r3, #0
 1575 0098 3B60     		str	r3, [r7, #0]
 407:../Main.c     **** 	psxTrocaByte(psxByte);
 1576              		.loc 1 407 0
 1577 009a 3868     		ldr	r0, [r7, #0]
 1578 009c FFF7FEFF 		bl	psxTrocaByte
 408:../Main.c     **** 
 409:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1579              		.loc 1 409 0
 1580 00a0 4FF00003 		mov	r3, #0
 1581 00a4 7B60     		str	r3, [r7, #4]
 1582 00a6 0FE0     		b	.L58
 1583              	.L59:
 410:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 1584              		.loc 1 410 0 discriminator 2
 1585 00a8 4FF00000 		mov	r0, #0
 1586 00ac FFF7FEFF 		bl	psxTrocaByte
 1587 00b0 0146     		mov	r1, r0
 1588 00b2 40F20003 		movw	r3, #:lower16:psxDado
 1589 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 1590 00ba 7A68     		ldr	r2, [r7, #4]
 1591 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 409:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1592              		.loc 1 409 0 discriminator 2
 1593 00c0 7B68     		ldr	r3, [r7, #4]
 1594 00c2 03F10103 		add	r3, r3, #1
 1595 00c6 7B60     		str	r3, [r7, #4]
 1596              	.L58:
 409:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1597              		.loc 1 409 0 is_stmt 0 discriminator 1
 1598 00c8 7B68     		ldr	r3, [r7, #4]
 1599 00ca 052B     		cmp	r3, #5
 1600 00cc ECDD     		ble	.L59
 411:../Main.c     **** 
 412:../Main.c     **** 	IO004_SetPin(ATT);
 1601              		.loc 1 412 0 is_stmt 1
 1602 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1603 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1604 00d6 5A68     		ldr	r2, [r3, #4]
 1605 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1606 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1607 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1608 00e2 4FF00101 		mov	r1, #1
 1609 00e6 01FA03F3 		lsl	r3, r1, r3
 1610 00ea 5360     		str	r3, [r2, #4]
 413:../Main.c     **** }
 1611              		.loc 1 413 0
 1612 00ec 07F10807 		add	r7, r7, #8
 1613 00f0 BD46     		mov	sp, r7
 1614 00f2 80BD     		pop	{r7, pc}
 1615              		.cfi_endproc
 1616              	.LFE121:
 1618              		.section	.text.psxHandShake,"ax",%progbits
 1619              		.align	2
 1620              		.global	psxHandShake
 1621              		.thumb
 1622              		.thumb_func
 1624              	psxHandShake:
 1625              	.LFB122:
 414:../Main.c     **** 
 415:../Main.c     **** void psxHandShake()
 416:../Main.c     **** {
 1626              		.loc 1 416 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 8
 1629              		@ frame_needed = 1, uses_anonymous_args = 0
 1630 0000 80B5     		push	{r7, lr}
 1631              	.LCFI28:
 1632              		.cfi_def_cfa_offset 8
 1633              		.cfi_offset 7, -8
 1634              		.cfi_offset 14, -4
 1635 0002 82B0     		sub	sp, sp, #8
 1636              	.LCFI29:
 1637              		.cfi_def_cfa_offset 16
 1638 0004 00AF     		add	r7, sp, #0
 1639              	.LCFI30:
 1640              		.cfi_def_cfa_register 7
 417:../Main.c     **** 	int psxByte = 0;
 1641              		.loc 1 417 0
 1642 0006 4FF00003 		mov	r3, #0
 1643 000a 7B60     		str	r3, [r7, #4]
 418:../Main.c     **** 	int psxCont;
 419:../Main.c     **** 
 420:../Main.c     **** 	IO004_SetPin(CMD);
 1644              		.loc 1 420 0
 1645 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1646 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1647 0014 5A68     		ldr	r2, [r3, #4]
 1648 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1649 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1650 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1651 0020 4FF00101 		mov	r1, #1
 1652 0024 01FA03F3 		lsl	r3, r1, r3
 1653 0028 5360     		str	r3, [r2, #4]
 421:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1654              		.loc 1 421 0
 1655 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1656 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1657 0032 5A68     		ldr	r2, [r3, #4]
 1658 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1659 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1660 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1661 003e 4FF00101 		mov	r1, #1
 1662 0042 01FA03F3 		lsl	r3, r1, r3
 1663 0046 5360     		str	r3, [r2, #4]
 422:../Main.c     **** 	IO004_ResetPin(ATT);
 1664              		.loc 1 422 0
 1665 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1666 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1667 0050 5A68     		ldr	r2, [r3, #4]
 1668 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1669 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1670 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1671 005c 4FF48031 		mov	r1, #65536
 1672 0060 01FA03F3 		lsl	r3, r1, r3
 1673 0064 5360     		str	r3, [r2, #4]
 423:../Main.c     **** 	delay(tempoInicio);
 1674              		.loc 1 423 0
 1675 0066 4FF49670 		mov	r0, #300
 1676 006a FFF7FEFF 		bl	delay
 424:../Main.c     **** 
 425:../Main.c     **** 	psxByte = 1;
 1677              		.loc 1 425 0
 1678 006e 4FF00103 		mov	r3, #1
 1679 0072 7B60     		str	r3, [r7, #4]
 426:../Main.c     **** 	psxTrocaByte(psxByte);
 1680              		.loc 1 426 0
 1681 0074 7868     		ldr	r0, [r7, #4]
 1682 0076 FFF7FEFF 		bl	psxTrocaByte
 427:../Main.c     **** 
 428:../Main.c     **** 	psxByte = 0x42;
 1683              		.loc 1 428 0
 1684 007a 4FF04203 		mov	r3, #66
 1685 007e 7B60     		str	r3, [r7, #4]
 429:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 1686              		.loc 1 429 0
 1687 0080 7868     		ldr	r0, [r7, #4]
 1688 0082 FFF7FEFF 		bl	psxTrocaByte
 1689 0086 0346     		mov	r3, r0
 1690 0088 DAB2     		uxtb	r2, r3
 1691 008a 40F20003 		movw	r3, #:lower16:psx_status
 1692 008e C0F20003 		movt	r3, #:upper16:psx_status
 1693 0092 1A70     		strb	r2, [r3, #0]
 430:../Main.c     **** 
 431:../Main.c     **** 	psxByte = 0;
 1694              		.loc 1 431 0
 1695 0094 4FF00003 		mov	r3, #0
 1696 0098 7B60     		str	r3, [r7, #4]
 432:../Main.c     **** 	psxTrocaByte(psxByte);
 1697              		.loc 1 432 0
 1698 009a 7868     		ldr	r0, [r7, #4]
 1699 009c FFF7FEFF 		bl	psxTrocaByte
 433:../Main.c     **** 
 434:../Main.c     **** 	psxByte = 0;
 1700              		.loc 1 434 0
 1701 00a0 4FF00003 		mov	r3, #0
 1702 00a4 7B60     		str	r3, [r7, #4]
 435:../Main.c     **** 	psxTrocaByte(psxByte);
 1703              		.loc 1 435 0
 1704 00a6 7868     		ldr	r0, [r7, #4]
 1705 00a8 FFF7FEFF 		bl	psxTrocaByte
 436:../Main.c     **** 
 437:../Main.c     **** 	psxByte = 0;
 1706              		.loc 1 437 0
 1707 00ac 4FF00003 		mov	r3, #0
 1708 00b0 7B60     		str	r3, [r7, #4]
 438:../Main.c     **** 	psxTrocaByte(psxByte);
 1709              		.loc 1 438 0
 1710 00b2 7868     		ldr	r0, [r7, #4]
 1711 00b4 FFF7FEFF 		bl	psxTrocaByte
 439:../Main.c     **** 
 440:../Main.c     **** 	IO004_SetPin(ATT);
 1712              		.loc 1 440 0
 1713 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1714 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1715 00c0 5A68     		ldr	r2, [r3, #4]
 1716 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1717 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1718 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1719 00cc 4FF00101 		mov	r1, #1
 1720 00d0 01FA03F3 		lsl	r3, r1, r3
 1721 00d4 5360     		str	r3, [r2, #4]
 441:../Main.c     **** }
 1722              		.loc 1 441 0
 1723 00d6 07F10807 		add	r7, r7, #8
 1724 00da BD46     		mov	sp, r7
 1725 00dc 80BD     		pop	{r7, pc}
 1726              		.cfi_endproc
 1727              	.LFE122:
 1729 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 1730              		.align	2
 1731              		.global	psxTrocaByte
 1732              		.thumb
 1733              		.thumb_func
 1735              	psxTrocaByte:
 1736              	.LFB123:
 442:../Main.c     **** 
 443:../Main.c     **** int psxTrocaByte(int byteDado)
 444:../Main.c     **** {
 1737              		.loc 1 444 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 16
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741 0000 80B5     		push	{r7, lr}
 1742              	.LCFI31:
 1743              		.cfi_def_cfa_offset 8
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 84B0     		sub	sp, sp, #16
 1747              	.LCFI32:
 1748              		.cfi_def_cfa_offset 24
 1749 0004 00AF     		add	r7, sp, #0
 1750              	.LCFI33:
 1751              		.cfi_def_cfa_register 7
 1752 0006 7860     		str	r0, [r7, #4]
 445:../Main.c     **** 	int c;
 446:../Main.c     **** 	int aux = 0;
 1753              		.loc 1 446 0
 1754 0008 4FF00003 		mov	r3, #0
 1755 000c BB60     		str	r3, [r7, #8]
 447:../Main.c     **** 	for (c=0;c<=7;c++)
 1756              		.loc 1 447 0
 1757 000e 4FF00003 		mov	r3, #0
 1758 0012 FB60     		str	r3, [r7, #12]
 1759 0014 69E0     		b	.L62
 1760              	.L66:
 448:../Main.c     **** 	{
 449:../Main.c     **** 		if(byteDado & (0x01<<c))
 1761              		.loc 1 449 0
 1762 0016 7A68     		ldr	r2, [r7, #4]
 1763 0018 FB68     		ldr	r3, [r7, #12]
 1764 001a 42FA03F3 		asr	r3, r2, r3
 1765 001e 03F00103 		and	r3, r3, #1
 1766 0022 002B     		cmp	r3, #0
 1767 0024 0FD0     		beq	.L63
 450:../Main.c     **** 			IO004_SetPin(CMD);
 1768              		.loc 1 450 0
 1769 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1770 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1771 002e 5A68     		ldr	r2, [r3, #4]
 1772 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1773 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1774 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1775 003a 4FF00101 		mov	r1, #1
 1776 003e 01FA03F3 		lsl	r3, r1, r3
 1777 0042 5360     		str	r3, [r2, #4]
 1778 0044 0EE0     		b	.L64
 1779              	.L63:
 451:../Main.c     **** 		else
 452:../Main.c     **** 			IO004_ResetPin(CMD);
 1780              		.loc 1 452 0
 1781 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1782 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1783 004e 5A68     		ldr	r2, [r3, #4]
 1784 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1785 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1786 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1787 005a 4FF48031 		mov	r1, #65536
 1788 005e 01FA03F3 		lsl	r3, r1, r3
 1789 0062 5360     		str	r3, [r2, #4]
 1790              	.L64:
 453:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 1791              		.loc 1 453 0
 1792 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1793 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1794 006c 5A68     		ldr	r2, [r3, #4]
 1795 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1796 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1797 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1798 0078 4FF48031 		mov	r1, #65536
 1799 007c 01FA03F3 		lsl	r3, r1, r3
 1800 0080 5360     		str	r3, [r2, #4]
 454:../Main.c     **** 		delay(tempoClk);
 1801              		.loc 1 454 0
 1802 0082 4FF49670 		mov	r0, #300
 1803 0086 FFF7FEFF 		bl	delay
 455:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 1804              		.loc 1 455 0
 1805 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 1806 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 1807 0092 5B68     		ldr	r3, [r3, #4]
 1808 0094 5A6A     		ldr	r2, [r3, #36]
 1809 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 1810 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 1811 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1812 00a0 22FA03F3 		lsr	r3, r2, r3
 1813 00a4 03F00103 		and	r3, r3, #1
 1814 00a8 002B     		cmp	r3, #0
 1815 00aa 07D1     		bne	.L65
 456:../Main.c     **** 			aux = aux | (1 << c);
 1816              		.loc 1 456 0
 1817 00ac 4FF00102 		mov	r2, #1
 1818 00b0 FB68     		ldr	r3, [r7, #12]
 1819 00b2 02FA03F3 		lsl	r3, r2, r3
 1820 00b6 BA68     		ldr	r2, [r7, #8]
 1821 00b8 1343     		orrs	r3, r3, r2
 1822 00ba BB60     		str	r3, [r7, #8]
 1823              	.L65:
 457:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 1824              		.loc 1 457 0
 1825 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1826 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1827 00c4 5A68     		ldr	r2, [r3, #4]
 1828 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1829 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1830 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1831 00d0 4FF00101 		mov	r1, #1
 1832 00d4 01FA03F3 		lsl	r3, r1, r3
 1833 00d8 5360     		str	r3, [r2, #4]
 458:../Main.c     **** 		delay(tempoClk);
 1834              		.loc 1 458 0
 1835 00da 4FF49670 		mov	r0, #300
 1836 00de FFF7FEFF 		bl	delay
 447:../Main.c     **** 	for (c=0;c<=7;c++)
 1837              		.loc 1 447 0
 1838 00e2 FB68     		ldr	r3, [r7, #12]
 1839 00e4 03F10103 		add	r3, r3, #1
 1840 00e8 FB60     		str	r3, [r7, #12]
 1841              	.L62:
 447:../Main.c     **** 	for (c=0;c<=7;c++)
 1842              		.loc 1 447 0 is_stmt 0 discriminator 1
 1843 00ea FB68     		ldr	r3, [r7, #12]
 1844 00ec 072B     		cmp	r3, #7
 1845 00ee 92DD     		ble	.L66
 459:../Main.c     **** 	}
 460:../Main.c     **** 	IO004_SetPin(CMD);
 1846              		.loc 1 460 0 is_stmt 1
 1847 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1848 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1849 00f8 5A68     		ldr	r2, [r3, #4]
 1850 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1851 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1852 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1853 0104 4FF00101 		mov	r1, #1
 1854 0108 01FA03F3 		lsl	r3, r1, r3
 1855 010c 5360     		str	r3, [r2, #4]
 461:../Main.c     **** 	delay(tempoEntreByte);
 1856              		.loc 1 461 0
 1857 010e 4FF06400 		mov	r0, #100
 1858 0112 FFF7FEFF 		bl	delay
 462:../Main.c     **** 	return aux;
 1859              		.loc 1 462 0
 1860 0116 BB68     		ldr	r3, [r7, #8]
 463:../Main.c     **** }
 1861              		.loc 1 463 0
 1862 0118 1846     		mov	r0, r3
 1863 011a 07F11007 		add	r7, r7, #16
 1864 011e BD46     		mov	sp, r7
 1865 0120 80BD     		pop	{r7, pc}
 1866              		.cfi_endproc
 1867              	.LFE123:
 1869 0122 00BF     		.section	.text.delay,"ax",%progbits
 1870              		.align	2
 1871              		.global	delay
 1872              		.thumb
 1873              		.thumb_func
 1875              	delay:
 1876              	.LFB124:
 464:../Main.c     **** //void psxLeControle()
 465:../Main.c     **** //{
 466:../Main.c     **** //	int psxByte = 0;
 467:../Main.c     **** //	int psxCont;
 468:../Main.c     **** //
 469:../Main.c     **** //	IO004_SetPin(CMD);
 470:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 471:../Main.c     **** //	IO004_ResetPin(ATT);
 472:../Main.c     **** //	delay(tempoInicio);
 473:../Main.c     **** //
 474:../Main.c     **** //	psxByte = 1;
 475:../Main.c     **** //	psxGravaByte(psxByte);
 476:../Main.c     **** //
 477:../Main.c     **** //	psxByte = 66;
 478:../Main.c     **** //	psxGravaByte(psxByte);
 479:../Main.c     **** //
 480:../Main.c     **** //	psxByte = 0;
 481:../Main.c     **** //	psxGravaByte(psxByte);
 482:../Main.c     **** //
 483:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 484:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 485:../Main.c     **** //
 486:../Main.c     **** //	IO004_SetPin(ATT);
 487:../Main.c     **** //}
 488:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 489:../Main.c     **** //{
 490:../Main.c     **** //	int c;
 491:../Main.c     **** //	for (c=0;c<=7;c++)
 492:../Main.c     **** //	{
 493:../Main.c     **** //		if(byteDado & (0x01<<c))
 494:../Main.c     **** //			IO004_SetPin(CMD);
 495:../Main.c     **** //		else
 496:../Main.c     **** //			IO004_ResetPin(CMD);
 497:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 498:../Main.c     **** //		delay(tempoClk);
 499:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 500:../Main.c     **** //		delay(tempoClk);
 501:../Main.c     **** //	}
 502:../Main.c     **** //	IO004_SetPin(CMD);
 503:../Main.c     **** //	delay(tempoEntreByte);
 504:../Main.c     **** //}
 505:../Main.c     **** //int psxLeByte()
 506:../Main.c     **** //{
 507:../Main.c     **** //	int aux = 0;
 508:../Main.c     **** //	int c;
 509:../Main.c     **** //
 510:../Main.c     **** //	for (c=0;c<=7;c++)
 511:../Main.c     **** //	{
 512:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 513:../Main.c     **** //		delay(tempoClk);
 514:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 515:../Main.c     **** //	  		  aux = aux | (1 << c);
 516:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 517:../Main.c     **** //	  	delay(tempoClk);
 518:../Main.c     **** //	}
 519:../Main.c     **** //	delay(tempoEntreByte);
 520:../Main.c     **** //	return (aux);
 521:../Main.c     **** //}
 522:../Main.c     **** 
 523:../Main.c     **** /***************************************************/
 524:../Main.c     **** /*****************FUNCOES GERAIS********************/
 525:../Main.c     **** /***************************************************/
 526:../Main.c     **** 
 527:../Main.c     **** void delay(long unsigned int i)
 528:../Main.c     **** {
 1877              		.loc 1 528 0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 8
 1880              		@ frame_needed = 1, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882 0000 80B4     		push	{r7}
 1883              	.LCFI34:
 1884              		.cfi_def_cfa_offset 4
 1885              		.cfi_offset 7, -4
 1886 0002 83B0     		sub	sp, sp, #12
 1887              	.LCFI35:
 1888              		.cfi_def_cfa_offset 16
 1889 0004 00AF     		add	r7, sp, #0
 1890              	.LCFI36:
 1891              		.cfi_def_cfa_register 7
 1892 0006 7860     		str	r0, [r7, #4]
 529:../Main.c     **** 	while(i--)
 1893              		.loc 1 529 0
 1894 0008 00E0     		b	.L69
 1895              	.L70:
 1896              	.LBB6:
 1897              	.LBB7:
 1898              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1899              		.loc 2 327 0
 1900              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1901 000a 00BF     		nop
 1902              	@ 0 "" 2
 1903              		.thumb
 1904              	.L69:
 1905              	.LBE7:
 1906              	.LBE6:
 1907              		.loc 1 529 0 discriminator 1
 1908 000c 7B68     		ldr	r3, [r7, #4]
 1909 000e 002B     		cmp	r3, #0
 1910 0010 0CBF     		ite	eq
 1911 0012 0023     		moveq	r3, #0
 1912 0014 0123     		movne	r3, #1
 1913 0016 DBB2     		uxtb	r3, r3
 1914 0018 7A68     		ldr	r2, [r7, #4]
 1915 001a 02F1FF32 		add	r2, r2, #-1
 1916 001e 7A60     		str	r2, [r7, #4]
 1917 0020 002B     		cmp	r3, #0
 1918 0022 F2D1     		bne	.L70
 530:../Main.c     **** 	{
 531:../Main.c     **** 		__NOP();
 532:../Main.c     **** 	}
 533:../Main.c     **** }
 1919              		.loc 1 533 0
 1920 0024 07F10C07 		add	r7, r7, #12
 1921 0028 BD46     		mov	sp, r7
 1922 002a 80BC     		pop	{r7}
 1923 002c 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE124:
 1927 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 1928              		.align	2
 1929              		.global	printByteToInt
 1930              		.thumb
 1931              		.thumb_func
 1933              	printByteToInt:
 1934              	.LFB125:
 534:../Main.c     **** void printByteToInt(char a)
 535:../Main.c     **** {
 1935              		.loc 1 535 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 16
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 1940 0000 80B4     		push	{r7}
 1941              	.LCFI37:
 1942              		.cfi_def_cfa_offset 4
 1943              		.cfi_offset 7, -4
 1944 0002 85B0     		sub	sp, sp, #20
 1945              	.LCFI38:
 1946              		.cfi_def_cfa_offset 24
 1947 0004 00AF     		add	r7, sp, #0
 1948              	.LCFI39:
 1949              		.cfi_def_cfa_register 7
 1950 0006 0346     		mov	r3, r0
 1951 0008 FB71     		strb	r3, [r7, #7]
 536:../Main.c     **** 	char c = a%10 + '0';
 1952              		.loc 1 536 0
 1953 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1954 000c 4CF6CD43 		movw	r3, #52429
 1955 0010 CCF6CC43 		movt	r3, 52428
 1956 0014 A3FB0213 		umull	r1, r3, r3, r2
 1957 0018 4FEAD301 		lsr	r1, r3, #3
 1958 001c 0B46     		mov	r3, r1
 1959 001e 4FEA8303 		lsl	r3, r3, #2
 1960 0022 5B18     		adds	r3, r3, r1
 1961 0024 4FEA4303 		lsl	r3, r3, #1
 1962 0028 D31A     		subs	r3, r2, r3
 1963 002a DBB2     		uxtb	r3, r3
 1964 002c 03F13003 		add	r3, r3, #48
 1965 0030 FB73     		strb	r3, [r7, #15]
 537:../Main.c     **** 	a /=10;
 1966              		.loc 1 537 0
 1967 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1968 0034 4CF6CD43 		movw	r3, #52429
 1969 0038 CCF6CC43 		movt	r3, 52428
 1970 003c A3FB0213 		umull	r1, r3, r3, r2
 1971 0040 4FEAD303 		lsr	r3, r3, #3
 1972 0044 FB71     		strb	r3, [r7, #7]
 538:../Main.c     **** 	char d = a%10 + '0';
 1973              		.loc 1 538 0
 1974 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1975 0048 4CF6CD43 		movw	r3, #52429
 1976 004c CCF6CC43 		movt	r3, 52428
 1977 0050 A3FB0213 		umull	r1, r3, r3, r2
 1978 0054 4FEAD301 		lsr	r1, r3, #3
 1979 0058 0B46     		mov	r3, r1
 1980 005a 4FEA8303 		lsl	r3, r3, #2
 1981 005e 5B18     		adds	r3, r3, r1
 1982 0060 4FEA4303 		lsl	r3, r3, #1
 1983 0064 D31A     		subs	r3, r2, r3
 1984 0066 DBB2     		uxtb	r3, r3
 1985 0068 03F13003 		add	r3, r3, #48
 1986 006c BB73     		strb	r3, [r7, #14]
 539:../Main.c     **** 	a /=10;
 1987              		.loc 1 539 0
 1988 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1989 0070 4CF6CD43 		movw	r3, #52429
 1990 0074 CCF6CC43 		movt	r3, 52428
 1991 0078 A3FB0213 		umull	r1, r3, r3, r2
 1992 007c 4FEAD303 		lsr	r3, r3, #3
 1993 0080 FB71     		strb	r3, [r7, #7]
 540:../Main.c     **** 	char e = a%10 + '0';
 1994              		.loc 1 540 0
 1995 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1996 0084 4CF6CD43 		movw	r3, #52429
 1997 0088 CCF6CC43 		movt	r3, 52428
 1998 008c A3FB0213 		umull	r1, r3, r3, r2
 1999 0090 4FEAD301 		lsr	r1, r3, #3
 2000 0094 0B46     		mov	r3, r1
 2001 0096 4FEA8303 		lsl	r3, r3, #2
 2002 009a 5B18     		adds	r3, r3, r1
 2003 009c 4FEA4303 		lsl	r3, r3, #1
 2004 00a0 D31A     		subs	r3, r2, r3
 2005 00a2 DBB2     		uxtb	r3, r3
 2006 00a4 03F13003 		add	r3, r3, #48
 2007 00a8 7B73     		strb	r3, [r7, #13]
 541:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2008              		.loc 1 541 0
 2009 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2010 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2011 00b2 1B68     		ldr	r3, [r3, #0]
 2012 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2013 00b6 C3F88021 		str	r2, [r3, #384]
 542:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2014              		.loc 1 542 0
 2015 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2016 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2017 00c2 1B68     		ldr	r3, [r3, #0]
 2018 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2019 00c6 C3F88021 		str	r2, [r3, #384]
 543:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2020              		.loc 1 543 0
 2021 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2022 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2023 00d2 1B68     		ldr	r3, [r3, #0]
 2024 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2025 00d6 C3F88021 		str	r2, [r3, #384]
 544:../Main.c     **** 
 545:../Main.c     **** }
 2026              		.loc 1 545 0
 2027 00da 07F11407 		add	r7, r7, #20
 2028 00de BD46     		mov	sp, r7
 2029 00e0 80BC     		pop	{r7}
 2030 00e2 7047     		bx	lr
 2031              		.cfi_endproc
 2032              	.LFE125:
 2034              		.text
 2035              	.Letext0:
 2036              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2037              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2038              		.file 5 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2039              		.file 6 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2040              		.file 7 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2041              		.file 8 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2042              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2043              		.file 10 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
 2044              		.file 11 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:24     .bss:00000000 l1
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:21     .bss:00000000 $d
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:30     .bss:00000004 l2
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:36     .bss:00000008 r1
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:42     .bss:0000000c r2
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:48     .bss:00000010 cross
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:54     .bss:00000014 sqr
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:60     .bss:00000018 triangle
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:66     .bss:0000001c circle
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:72     .bss:00000020 left
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:78     .bss:00000024 right
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:84     .bss:00000028 up
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:90     .bss:0000002c down
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:96     .bss:00000030 start
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:102    .bss:00000034 select
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:110    .data:00000000 data_R
                            *COM*:00000004 data_E
                            *COM*:00000001 psx_status
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:115    .text.main:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:120    .text.main:00000000 main
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:714    .text.configure_E:00000000 configure_E
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1624   .text.psxHandShake:00000000 psxHandShake
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1106   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1503   .text.psxLeControle:00000000 psxLeControle
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:918    .text.write_E:00000000 write_E
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:556    .text.read_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:561    .text.read_R:00000000 read_R
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1875   .text.delay:00000000 delay
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:663    .text.pulse_R:00000000 pulse_R
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:658    .text.pulse_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:709    .text.configure_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:913    .text.write_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1101   .text.psxConfiguraControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1137   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1243   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1373   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1132   .text.psxEnterConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1735   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1238   .text.psxSetAnalogMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1368   .text.psxExitConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1498   .text.psxLeControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1619   .text.psxHandShake:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1730   .text.psxTrocaByte:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1870   .text.delay:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1928   .text.printByteToInt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccRVWtPB.s:1933   .text.printByteToInt:00000000 printByteToInt
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.6730aed6a8e49268c462cbcb73e91a8e
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.91819d6149ee56f9404d69053d48d018
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle7
IO004_Handle8
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
