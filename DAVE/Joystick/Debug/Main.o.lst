   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.bss
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.space	4
  26              		.global	l_dois
  27              		.align	2
  30              	l_dois:
  31 0004 00000000 		.space	4
  32              		.global	l_tres
  33              		.align	2
  36              	l_tres:
  37 0008 00000000 		.space	4
  38              		.global	r_um
  39              		.align	2
  42              	r_um:
  43 000c 00000000 		.space	4
  44              		.global	r_dois
  45              		.align	2
  48              	r_dois:
  49 0010 00000000 		.space	4
  50              		.global	r_tres
  51              		.align	2
  54              	r_tres:
  55 0014 00000000 		.space	4
  56              		.global	cross
  57              		.align	2
  60              	cross:
  61 0018 00000000 		.space	4
  62              		.global	sqr
  63              		.align	2
  66              	sqr:
  67 001c 00000000 		.space	4
  68              		.global	triangle
  69              		.align	2
  72              	triangle:
  73 0020 00000000 		.space	4
  74              		.global	circle
  75              		.align	2
  78              	circle:
  79 0024 00000000 		.space	4
  80              		.global	left
  81              		.align	2
  84              	left:
  85 0028 00000000 		.space	4
  86              		.global	right
  87              		.align	2
  90              	right:
  91 002c 00000000 		.space	4
  92              		.global	up
  93              		.align	2
  96              	up:
  97 0030 00000000 		.space	4
  98              		.global	down
  99              		.align	2
 102              	down:
 103 0034 00000000 		.space	4
 104              		.global	start
 105              		.align	2
 108              	start:
 109 0038 00000000 		.space	4
 110              		.global	select
 111              		.align	2
 114              	select:
 115 003c 00000000 		.space	4
 116              		.global	l_um_state
 119              	l_um_state:
 120 0040 00       		.space	1
 121              		.global	l_dois_state
 124              	l_dois_state:
 125 0041 00       		.space	1
 126              		.global	l_tres_state
 129              	l_tres_state:
 130 0042 00       		.space	1
 131              		.global	r_um_state
 134              	r_um_state:
 135 0043 00       		.space	1
 136              		.global	r_dois_state
 139              	r_dois_state:
 140 0044 00       		.space	1
 141              		.global	r_tres_state
 144              	r_tres_state:
 145 0045 00       		.space	1
 146              		.global	cross_state
 149              	cross_state:
 150 0046 00       		.space	1
 151              		.global	sqr_state
 154              	sqr_state:
 155 0047 00       		.space	1
 156              		.global	triangle_state
 159              	triangle_state:
 160 0048 00       		.space	1
 161              		.global	circle_state
 164              	circle_state:
 165 0049 00       		.space	1
 166              		.global	left_state
 169              	left_state:
 170 004a 00       		.space	1
 171              		.global	right_state
 174              	right_state:
 175 004b 00       		.space	1
 176              		.global	up_state
 179              	up_state:
 180 004c 00       		.space	1
 181              		.global	down_state
 184              	down_state:
 185 004d 00       		.space	1
 186              		.global	start_state
 189              	start_state:
 190 004e 00       		.space	1
 191              		.global	select_state
 194              	select_state:
 195 004f 00       		.space	1
 196              		.global	l_um_state_before
 199              	l_um_state_before:
 200 0050 00       		.space	1
 201              		.global	l_dois_state_before
 204              	l_dois_state_before:
 205 0051 00       		.space	1
 206              		.global	l_tres_state_before
 209              	l_tres_state_before:
 210 0052 00       		.space	1
 211              		.global	r_um_state_before
 214              	r_um_state_before:
 215 0053 00       		.space	1
 216              		.global	r_dois_state_before
 219              	r_dois_state_before:
 220 0054 00       		.space	1
 221              		.global	r_tres_state_before
 224              	r_tres_state_before:
 225 0055 00       		.space	1
 226              		.global	cross_state_before
 229              	cross_state_before:
 230 0056 00       		.space	1
 231              		.global	sqr_state_before
 234              	sqr_state_before:
 235 0057 00       		.space	1
 236              		.global	triangle_state_before
 239              	triangle_state_before:
 240 0058 00       		.space	1
 241              		.global	circle_state_before
 244              	circle_state_before:
 245 0059 00       		.space	1
 246              		.global	left_state_before
 249              	left_state_before:
 250 005a 00       		.space	1
 251              		.global	right_state_before
 254              	right_state_before:
 255 005b 00       		.space	1
 256              		.global	up_state_before
 259              	up_state_before:
 260 005c 00       		.space	1
 261              		.global	down_state_before
 264              	down_state_before:
 265 005d 00       		.space	1
 266              		.global	start_state_before
 269              	start_state_before:
 270 005e 00       		.space	1
 271              		.global	select_state_before
 274              	select_state_before:
 275 005f 00       		.space	1
 276              		.comm	psxDado,24,4
 277              		.comm	configuration,15,4
 278              		.global	data_R
 279              		.data
 282              	data_R:
 283 0000 30       		.byte	48
 284              		.comm	data_E,1,4
 285              		.comm	psx_status,1,1
 286              		.global	flipped
 287              		.bss
 290              	flipped:
 291 0060 00       		.space	1
 292              		.comm	result,4,4
 293              		.comm	pwm_max,1,1
 294 0061 000000   		.section	.text.main,"ax",%progbits
 295              		.align	2
 296              		.global	main
 297              		.thumb
 298              		.thumb_func
 300              	main:
 301              	.LFB117:
 302              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     **** BIT 0: BLAH2
  10:../Main.c     **** BIT 1: BUZINA
  11:../Main.c     **** BIT 2: ENABLE
  12:../Main.c     **** BIT 3: ALBH2
  13:../Main.c     **** BIT 4: BLAH1
  14:../Main.c     **** BIT 5: ALBH1
  15:../Main.c     **** */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 3 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 60
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_SEND 1
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0
  52:../Main.c     **** #define	BUZINA		1
  53:../Main.c     **** #define	ENABLE		2
  54:../Main.c     **** #define	ALBH2		3
  55:../Main.c     **** #define	BLAH1		4
  56:../Main.c     **** #define	ALBH1		5
  57:../Main.c     **** //Defines referentes ao transceptor
  58:../Main.c     **** #define CS	 	IO004_Handle1
  59:../Main.c     **** #define CLK1 	IO004_Handle2
  60:../Main.c     **** #define DATA 	IO004_Handle4
  61:../Main.c     **** #define DR1		IO004_Handle5
  62:../Main.c     **** #define CE 		IO004_Handle6
  63:../Main.c     **** //Defines referentes ao controle
  64:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  65:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  66:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  67:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  68:../Main.c     **** //Defines referentes aos delays do controle
  69:../Main.c     **** #define tempoInicio     300
  70:../Main.c     **** #define tempoClk        300
  71:../Main.c     **** #define tempoEntreByte  100
  72:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  73:../Main.c     **** #define LED1 IO004_Handle7
  74:../Main.c     **** #define LED2 IO004_Handle8
  75:../Main.c     **** //Defines dos botoes para realizar as callbacks
  76:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  77:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  78:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  79:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  80:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  81:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  82:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  83:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  84:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  85:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  86:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  87:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  88:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  89:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  90:../Main.c     **** #define START (psxDado[0] & (1<<3))
  91:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  92:../Main.c     **** 
  93:../Main.c     **** /***************************************************/
  94:../Main.c     **** /*********************INCLUDES**********************/
  95:../Main.c     **** /***************************************************/
  96:../Main.c     **** 
  97:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
  98:../Main.c     **** 
  99:../Main.c     **** 
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 102:../Main.c     **** /***************************************************/
 103:../Main.c     **** 
 104:../Main.c     **** void psxLeControle();
 105:../Main.c     **** int psxTrocaByte(int byteDado);
 106:../Main.c     **** int psxLeByte();
 107:../Main.c     **** void delay(long unsigned int i);
 108:../Main.c     **** void pulse_R();
 109:../Main.c     **** void configure_R();
 110:../Main.c     **** void configure_E();
 111:../Main.c     **** void write_E();
 112:../Main.c     **** void read_R();
 113:../Main.c     **** void delay(long unsigned int i);
 114:../Main.c     **** void printByteToInt(char a);
 115:../Main.c     **** void psxConfiguraControle();
 116:../Main.c     **** void psxEnterConfigMode();
 117:../Main.c     **** void psxExitConfigMode();
 118:../Main.c     **** void psxSetAnalogMode();
 119:../Main.c     **** void psxHandShake();
 120:../Main.c     **** void updateButtonStates();
 121:../Main.c     **** 
 122:../Main.c     **** /***************************************************/
 123:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 124:../Main.c     **** /***************************************************/
 125:../Main.c     **** 
 126:../Main.c     **** void (*l_um)(void) = NULL;
 127:../Main.c     **** void (*l_dois)(void) = NULL;
 128:../Main.c     **** void (*l_tres)(void) = NULL;
 129:../Main.c     **** void (*r_um)(void) = NULL;
 130:../Main.c     **** void (*r_dois)(void) = NULL;
 131:../Main.c     **** void (*r_tres)(void) = NULL;
 132:../Main.c     **** void (*cross)(void) = NULL;
 133:../Main.c     **** void (*sqr)(void) = NULL;
 134:../Main.c     **** void (*triangle)(void) = NULL;
 135:../Main.c     **** void (*circle)(void) = NULL;
 136:../Main.c     **** void (*left)(void) = NULL;
 137:../Main.c     **** void (*right)(void) = NULL;
 138:../Main.c     **** void (*up)(void) = NULL;
 139:../Main.c     **** void (*down)(void) = NULL;
 140:../Main.c     **** void (*start)(void) = NULL;
 141:../Main.c     **** void (*select)(void) = NULL;
 142:../Main.c     **** 
 143:../Main.c     **** //Variaveis de controle do joystick
 144:../Main.c     **** BOOLType l_um_state = 0;
 145:../Main.c     **** BOOLType l_dois_state = 0;
 146:../Main.c     **** BOOLType l_tres_state = 0;
 147:../Main.c     **** BOOLType r_um_state = 0;
 148:../Main.c     **** BOOLType r_dois_state = 0;
 149:../Main.c     **** BOOLType r_tres_state = 0;
 150:../Main.c     **** BOOLType cross_state = 0;
 151:../Main.c     **** BOOLType sqr_state = 0;
 152:../Main.c     **** BOOLType triangle_state = 0;
 153:../Main.c     **** BOOLType circle_state = 0;
 154:../Main.c     **** BOOLType left_state = 0;
 155:../Main.c     **** BOOLType right_state = 0;
 156:../Main.c     **** BOOLType up_state = 0;
 157:../Main.c     **** BOOLType down_state = 0;
 158:../Main.c     **** BOOLType start_state = 0;
 159:../Main.c     **** BOOLType select_state = 0;
 160:../Main.c     **** 
 161:../Main.c     **** BOOLType l_um_state_before = 0;
 162:../Main.c     **** BOOLType l_dois_state_before = 0;
 163:../Main.c     **** BOOLType l_tres_state_before = 0;
 164:../Main.c     **** BOOLType r_um_state_before = 0;
 165:../Main.c     **** BOOLType r_dois_state_before = 0;
 166:../Main.c     **** BOOLType r_tres_state_before = 0;
 167:../Main.c     **** BOOLType cross_state_before = 0;
 168:../Main.c     **** BOOLType sqr_state_before = 0;
 169:../Main.c     **** BOOLType triangle_state_before = 0;
 170:../Main.c     **** BOOLType circle_state_before = 0;
 171:../Main.c     **** BOOLType left_state_before = 0;
 172:../Main.c     **** BOOLType right_state_before = 0;
 173:../Main.c     **** BOOLType up_state_before = 0;
 174:../Main.c     **** BOOLType down_state_before = 0;
 175:../Main.c     **** BOOLType start_state_before = 0;
 176:../Main.c     **** BOOLType select_state_before = 0;
 177:../Main.c     **** 
 178:../Main.c     **** /***************************************************/
 179:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 180:../Main.c     **** /***************************************************/
 181:../Main.c     **** 
 182:../Main.c     **** int psxDado[6];
 183:../Main.c     **** char configuration[15];
 184:../Main.c     **** char data_R = '0';
 185:../Main.c     **** char data_E[BYTES_TO_SEND];
 186:../Main.c     **** uint8_t psx_status;
 187:../Main.c     **** /*Booleanos de controle para estados do robo*/
 188:../Main.c     **** BOOLType flipped = 0;
 189:../Main.c     **** ADC001_ResultHandleType result;
 190:../Main.c     **** uint8_t pwm_max;
 191:../Main.c     **** 
 192:../Main.c     **** /***************************************************/
 193:../Main.c     **** /***********************MAIN************************/
 194:../Main.c     **** /***************************************************/
 195:../Main.c     **** 
 196:../Main.c     **** int main(void)
 197:../Main.c     **** {
 303              		.loc 1 197 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 0000 80B5     		push	{r7, lr}
 308              	.LCFI0:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 7, -8
 311              		.cfi_offset 14, -4
 312 0002 00AF     		add	r7, sp, #0
 313              	.LCFI1:
 314              		.cfi_def_cfa_register 7
 198:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 199:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
 315              		.loc 1 199 0
 316 0004 FFF7FEFF 		bl	DAVE_Init
 200:../Main.c     **** 	/*Etapa de inicializacao*/
 201:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 317              		.loc 1 201 0
 318 0008 FFF7FEFF 		bl	configure_E
 319              	.L2:
 202:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 203:../Main.c     **** 	//IO004_SetPin(LED2);
 204:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 205:../Main.c     **** 
 206:../Main.c     **** 	while (1)
 207:../Main.c     **** 	{
 208:../Main.c     **** 		write_E();
 320              		.loc 1 208 0 discriminator 1
 321 000c FFF7FEFF 		bl	write_E
 209:../Main.c     **** 	}
 322              		.loc 1 209 0 discriminator 1
 323 0010 FCE7     		b	.L2
 324              		.cfi_endproc
 325              	.LFE117:
 327 0012 00BF     		.section	.text.read_R,"ax",%progbits
 328              		.align	2
 329              		.global	read_R
 330              		.thumb
 331              		.thumb_func
 333              	read_R:
 334              	.LFB118:
 210:../Main.c     **** 	psxHandShake();
 211:../Main.c     **** 	psxConfiguraControle();
 212:../Main.c     **** 	/*Loop do controle*/
 213:../Main.c     **** 	while(1)
 214:../Main.c     **** 	{
 215:../Main.c     **** 		pwm_max = PWM_LIM;
 216:../Main.c     **** 		/*Inicializa o que sera mandado*/
 217:../Main.c     **** 		BOOLType blah2 = 1;
 218:../Main.c     **** 		BOOLType buzina = 1;
 219:../Main.c     **** 		BOOLType enable = 0;
 220:../Main.c     **** 		BOOLType albh2 = 1;
 221:../Main.c     **** 		BOOLType blah1 = 1;
 222:../Main.c     **** 		BOOLType albh1 = 1;
 223:../Main.c     **** 		int16_t pow1, pow2;
 224:../Main.c     **** 		/*Le controle*/
 225:../Main.c     **** 		//psxLeControle();
 226:../Main.c     **** 		if (psx_status != 140)//Nao ta analogico
 227:../Main.c     **** 		{
 228:../Main.c     **** 			psxHandShake();
 229:../Main.c     **** 			psxConfiguraControle();
 230:../Main.c     **** 			continue;
 231:../Main.c     **** 		}
 232:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 233:../Main.c     **** 		if (START && start)
 234:../Main.c     **** 		{
 235:../Main.c     **** 			start_state = 1;
 236:../Main.c     **** 			start();
 237:../Main.c     **** 		}
 238:../Main.c     **** 		if (SELECT && select)
 239:../Main.c     **** 		{
 240:../Main.c     **** 			select_state = 1;
 241:../Main.c     **** 			select();
 242:../Main.c     **** 		}
 243:../Main.c     **** 		if (L_DOIS && l_dois)
 244:../Main.c     **** 		{
 245:../Main.c     **** 			l_dois_state = 1;
 246:../Main.c     **** 			l_dois();
 247:../Main.c     **** 		}
 248:../Main.c     **** 		if (L_UM && l_um)
 249:../Main.c     **** 		{
 250:../Main.c     **** 			l_um_state = 1;
 251:../Main.c     **** 			l_um();
 252:../Main.c     **** 		}
 253:../Main.c     **** 		if (L_TRES && l_tres)
 254:../Main.c     **** 		{
 255:../Main.c     **** 			l_tres_state = 1;
 256:../Main.c     **** 			l_tres();
 257:../Main.c     **** 		}
 258:../Main.c     **** 		if (R_UM && r_um)
 259:../Main.c     **** 		{
 260:../Main.c     **** 			r_um_state = 1;
 261:../Main.c     **** 			r_um();
 262:../Main.c     **** 		}
 263:../Main.c     **** 		if (R_DOIS && r_dois)
 264:../Main.c     **** 		{
 265:../Main.c     **** 			r_dois_state = 1;
 266:../Main.c     **** 			r_dois();
 267:../Main.c     **** 		}
 268:../Main.c     **** 		if (R_TRES && r_tres)
 269:../Main.c     **** 		{
 270:../Main.c     **** 			r_tres_state = 1;
 271:../Main.c     **** 			r_tres();
 272:../Main.c     **** 		}
 273:../Main.c     **** 		if (SQR && sqr)
 274:../Main.c     **** 		{
 275:../Main.c     **** 			sqr_state = 1;
 276:../Main.c     **** 			sqr();
 277:../Main.c     **** 		}
 278:../Main.c     **** 		if (TRIANGLE && triangle)
 279:../Main.c     **** 		{
 280:../Main.c     **** 			triangle_state = 1;
 281:../Main.c     **** 			triangle();
 282:../Main.c     **** 		}
 283:../Main.c     **** 		if (CIRCLE && circle)
 284:../Main.c     **** 		{
 285:../Main.c     **** 			circle_state = 1;
 286:../Main.c     **** 			circle();
 287:../Main.c     **** 		}
 288:../Main.c     **** 		if (CROSS && cross)
 289:../Main.c     **** 		{
 290:../Main.c     **** 			cross_state = 1;
 291:../Main.c     **** 			cross();
 292:../Main.c     **** 		}
 293:../Main.c     **** 		if (LEFT && left)
 294:../Main.c     **** 		{
 295:../Main.c     **** 			left_state = 1;
 296:../Main.c     **** 			left();
 297:../Main.c     **** 		}
 298:../Main.c     **** 		if (RIGHT && right)
 299:../Main.c     **** 		{
 300:../Main.c     **** 			right_state = 1;
 301:../Main.c     **** 			right();
 302:../Main.c     **** 		}
 303:../Main.c     **** 		if (UP && up)
 304:../Main.c     **** 		{
 305:../Main.c     **** 			up_state = 1;
 306:../Main.c     **** 			up();
 307:../Main.c     **** 		}
 308:../Main.c     **** 		if (DOWN && down)
 309:../Main.c     **** 		{
 310:../Main.c     **** 			down_state = 1;
 311:../Main.c     **** 			down();
 312:../Main.c     **** 		}
 313:../Main.c     **** 
 314:../Main.c     **** 		ADC001_GenerateLoadEvent(&ADC001_Handle0);
 315:../Main.c     **** 
 316:../Main.c     **** 		data_E[0] = 173;
 317:../Main.c     **** 		//if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar qua
 318:../Main.c     **** 		pow1 = (psxDado[5]-127);//<<1; //Analog esq //Subtrai 127 para saber o sentido
 319:../Main.c     **** 		pow2 = (psxDado[3]-127);//<<1;
 320:../Main.c     **** 		data_E[3] = 0;
 321:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 322:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 323:../Main.c     **** 		{
 324:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 325:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 326:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 327:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 329:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 331:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 332:../Main.c     **** 		}
 333:../Main.c     **** 		else
 334:../Main.c     **** 		{
 335:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 336:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 337:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 338:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 340:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 342:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 343:../Main.c     **** 		}
 344:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 345:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2) | (albh1 << ALBH1) | (albh2 << ALBH2)
 346:../Main.c     **** 		data_E[4] = result.Result>>4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bits
 347:../Main.c     **** 
 348:../Main.c     **** 		write_E();
 349:../Main.c     **** 		updateButtonStates();
 350:../Main.c     **** 	}
 351:../Main.c     **** 	return 0;
 352:../Main.c     **** }
 353:../Main.c     **** 
 354:../Main.c     **** /***************************************************/
 355:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 356:../Main.c     **** /***************************************************/
 357:../Main.c     **** 
 358:../Main.c     **** void read_R()
 359:../Main.c     **** {
 335              		.loc 1 359 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339 0000 80B5     		push	{r7, lr}
 340              	.LCFI2:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 7, -8
 343              		.cfi_offset 14, -4
 344 0002 82B0     		sub	sp, sp, #8
 345              	.LCFI3:
 346              		.cfi_def_cfa_offset 16
 347 0004 00AF     		add	r7, sp, #0
 348              	.LCFI4:
 349              		.cfi_def_cfa_register 7
 360:../Main.c     **** 	int i;
 361:../Main.c     **** 	IO004_ResetPin(CE);
 350              		.loc 1 361 0
 351 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 352 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 353 000e 5A68     		ldr	r2, [r3, #4]
 354 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 355 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 356 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 357 001a 4FF48031 		mov	r1, #65536
 358 001e 01FA03F3 		lsl	r3, r1, r3
 359 0022 5360     		str	r3, [r2, #4]
 362:../Main.c     **** 	delay(50000);
 360              		.loc 1 362 0
 361 0024 4CF25030 		movw	r0, #50000
 362 0028 FFF7FEFF 		bl	delay
 363:../Main.c     **** 	uint8_t temp = 0;
 363              		.loc 1 363 0
 364 002c 4FF00003 		mov	r3, #0
 365 0030 FB70     		strb	r3, [r7, #3]
 364:../Main.c     **** 
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 366              		.loc 1 365 0
 367 0032 4FF00703 		mov	r3, #7
 368 0036 7B60     		str	r3, [r7, #4]
 369 0038 20E0     		b	.L4
 370              	.L6:
 366:../Main.c     **** 	{
 367:../Main.c     **** 		if (IO004_ReadPin(DATA)) temp |= (1<<i);
 371              		.loc 1 367 0
 372 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 373 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 374 0042 5B68     		ldr	r3, [r3, #4]
 375 0044 5A6A     		ldr	r2, [r3, #36]
 376 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 377 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 378 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 379 0050 22FA03F3 		lsr	r3, r2, r3
 380 0054 03F00103 		and	r3, r3, #1
 381 0058 002B     		cmp	r3, #0
 382 005a 09D0     		beq	.L5
 383              		.loc 1 367 0 is_stmt 0 discriminator 1
 384 005c 4FF00102 		mov	r2, #1
 385 0060 7B68     		ldr	r3, [r7, #4]
 386 0062 02FA03F3 		lsl	r3, r2, r3
 387 0066 DAB2     		uxtb	r2, r3
 388 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 389 006a 1343     		orrs	r3, r3, r2
 390 006c DBB2     		uxtb	r3, r3
 391 006e FB70     		strb	r3, [r7, #3]
 392              	.L5:
 368:../Main.c     **** 		pulse_R();
 393              		.loc 1 368 0 is_stmt 1
 394 0070 FFF7FEFF 		bl	pulse_R
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 395              		.loc 1 365 0
 396 0074 7B68     		ldr	r3, [r7, #4]
 397 0076 03F1FF33 		add	r3, r3, #-1
 398 007a 7B60     		str	r3, [r7, #4]
 399              	.L4:
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 400              		.loc 1 365 0 is_stmt 0 discriminator 1
 401 007c 7B68     		ldr	r3, [r7, #4]
 402 007e 002B     		cmp	r3, #0
 403 0080 DBDA     		bge	.L6
 369:../Main.c     **** 	}
 370:../Main.c     **** 	data_R = temp;
 404              		.loc 1 370 0 is_stmt 1
 405 0082 40F20003 		movw	r3, #:lower16:data_R
 406 0086 C0F20003 		movt	r3, #:upper16:data_R
 407 008a FA78     		ldrb	r2, [r7, #3]
 408 008c 1A70     		strb	r2, [r3, #0]
 371:../Main.c     **** 	IO004_SetPin(CE);
 409              		.loc 1 371 0
 410 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 411 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 412 0096 5A68     		ldr	r2, [r3, #4]
 413 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 414 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 415 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 416 00a2 4FF00101 		mov	r1, #1
 417 00a6 01FA03F3 		lsl	r3, r1, r3
 418 00aa 5360     		str	r3, [r2, #4]
 372:../Main.c     **** 	delay(50000);
 419              		.loc 1 372 0
 420 00ac 4CF25030 		movw	r0, #50000
 421 00b0 FFF7FEFF 		bl	delay
 373:../Main.c     **** }
 422              		.loc 1 373 0
 423 00b4 07F10807 		add	r7, r7, #8
 424 00b8 BD46     		mov	sp, r7
 425 00ba 80BD     		pop	{r7, pc}
 426              		.cfi_endproc
 427              	.LFE118:
 429              		.section	.text.pulse_R,"ax",%progbits
 430              		.align	2
 431              		.global	pulse_R
 432              		.thumb
 433              		.thumb_func
 435              	pulse_R:
 436              	.LFB119:
 374:../Main.c     **** 
 375:../Main.c     **** void pulse_R()
 376:../Main.c     **** {
 437              		.loc 1 376 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441 0000 80B5     		push	{r7, lr}
 442              	.LCFI5:
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 7, -8
 445              		.cfi_offset 14, -4
 446 0002 00AF     		add	r7, sp, #0
 447              	.LCFI6:
 448              		.cfi_def_cfa_register 7
 377:../Main.c     **** 	delay(300);
 449              		.loc 1 377 0
 450 0004 4FF49670 		mov	r0, #300
 451 0008 FFF7FEFF 		bl	delay
 378:../Main.c     **** 	IO004_SetPin(CLK1);
 452              		.loc 1 378 0
 453 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 454 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 455 0014 5A68     		ldr	r2, [r3, #4]
 456 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 457 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 458 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 459 0020 4FF00101 		mov	r1, #1
 460 0024 01FA03F3 		lsl	r3, r1, r3
 461 0028 5360     		str	r3, [r2, #4]
 379:../Main.c     **** 	delay(300);
 462              		.loc 1 379 0
 463 002a 4FF49670 		mov	r0, #300
 464 002e FFF7FEFF 		bl	delay
 380:../Main.c     **** 	IO004_ResetPin(CLK1);
 465              		.loc 1 380 0
 466 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 467 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 468 003a 5A68     		ldr	r2, [r3, #4]
 469 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 470 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 471 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 472 0046 4FF48031 		mov	r1, #65536
 473 004a 01FA03F3 		lsl	r3, r1, r3
 474 004e 5360     		str	r3, [r2, #4]
 381:../Main.c     **** }
 475              		.loc 1 381 0
 476 0050 80BD     		pop	{r7, pc}
 477              		.cfi_endproc
 478              	.LFE119:
 480 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 481              		.align	2
 482              		.global	configure_E
 483              		.thumb
 484              		.thumb_func
 486              	configure_E:
 487              	.LFB120:
 382:../Main.c     **** 
 383:../Main.c     **** void configure_E()
 384:../Main.c     **** {
 488              		.loc 1 384 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 8
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492 0000 80B5     		push	{r7, lr}
 493              	.LCFI7:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 82B0     		sub	sp, sp, #8
 498              	.LCFI8:
 499              		.cfi_def_cfa_offset 16
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI9:
 502              		.cfi_def_cfa_register 7
 385:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 386:../Main.c     **** 	configuration[0] = 0xC4;//RF_CH# e OP_MODE 0b11011110
 503              		.loc 1 386 0
 504 0006 40F20003 		movw	r3, #:lower16:configuration
 505 000a C0F20003 		movt	r3, #:upper16:configuration
 506 000e 4FF0C402 		mov	r2, #196
 507 0012 1A70     		strb	r2, [r3, #0]
 387:../Main.c     **** 	configuration[1] = 0x4F;//RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 508              		.loc 1 387 0
 509 0014 40F20003 		movw	r3, #:lower16:configuration
 510 0018 C0F20003 		movt	r3, #:upper16:configuration
 511 001c 4FF04F02 		mov	r2, #79
 512 0020 5A70     		strb	r2, [r3, #1]
 388:../Main.c     **** 	configuration[2] = 0xA3;//addr_w
 513              		.loc 1 388 0
 514 0022 40F20003 		movw	r3, #:lower16:configuration
 515 0026 C0F20003 		movt	r3, #:upper16:configuration
 516 002a 4FF0A302 		mov	r2, #163
 517 002e 9A70     		strb	r2, [r3, #2]
 389:../Main.c     **** 	configuration[3] = 0xEE;//Comeco enderco CH1 00000001
 518              		.loc 1 389 0
 519 0030 40F20003 		movw	r3, #:lower16:configuration
 520 0034 C0F20003 		movt	r3, #:upper16:configuration
 521 0038 4FF0EE02 		mov	r2, #238
 522 003c DA70     		strb	r2, [r3, #3]
 390:../Main.c     **** 	configuration[4] = 0xDD;//0b00000000
 523              		.loc 1 390 0
 524 003e 40F20003 		movw	r3, #:lower16:configuration
 525 0042 C0F20003 		movt	r3, #:upper16:configuration
 526 0046 4FF0DD02 		mov	r2, #221
 527 004a 1A71     		strb	r2, [r3, #4]
 391:../Main.c     **** 	configuration[5] = 0xCC;//0b11010100
 528              		.loc 1 391 0
 529 004c 40F20003 		movw	r3, #:lower16:configuration
 530 0050 C0F20003 		movt	r3, #:upper16:configuration
 531 0054 4FF0CC02 		mov	r2, #204
 532 0058 5A71     		strb	r2, [r3, #5]
 392:../Main.c     **** 	configuration[6] = 0xBB;//0b11011111
 533              		.loc 1 392 0
 534 005a 40F20003 		movw	r3, #:lower16:configuration
 535 005e C0F20003 		movt	r3, #:upper16:configuration
 536 0062 4FF0BB02 		mov	r2, #187
 537 0066 9A71     		strb	r2, [r3, #6]
 393:../Main.c     **** 	configuration[7] = 0xAA;//Fim enderco CH1 0b11101010
 538              		.loc 1 393 0
 539 0068 40F20003 		movw	r3, #:lower16:configuration
 540 006c C0F20003 		movt	r3, #:upper16:configuration
 541 0070 4FF0AA02 		mov	r2, #170
 542 0074 DA71     		strb	r2, [r3, #7]
 394:../Main.c     **** 	configuration[8] = 0b00000000;//Comeco enderco CH2
 543              		.loc 1 394 0
 544 0076 40F20003 		movw	r3, #:lower16:configuration
 545 007a C0F20003 		movt	r3, #:upper16:configuration
 546 007e 4FF00002 		mov	r2, #0
 547 0082 1A72     		strb	r2, [r3, #8]
 395:../Main.c     **** 	configuration[9] = 0b00000000;
 548              		.loc 1 395 0
 549 0084 40F20003 		movw	r3, #:lower16:configuration
 550 0088 C0F20003 		movt	r3, #:upper16:configuration
 551 008c 4FF00002 		mov	r2, #0
 552 0090 5A72     		strb	r2, [r3, #9]
 396:../Main.c     **** 	configuration[10] = 0b00000000;
 553              		.loc 1 396 0
 554 0092 40F20003 		movw	r3, #:lower16:configuration
 555 0096 C0F20003 		movt	r3, #:upper16:configuration
 556 009a 4FF00002 		mov	r2, #0
 557 009e 9A72     		strb	r2, [r3, #10]
 397:../Main.c     **** 	configuration[11] = 0b00000000;
 558              		.loc 1 397 0
 559 00a0 40F20003 		movw	r3, #:lower16:configuration
 560 00a4 C0F20003 		movt	r3, #:upper16:configuration
 561 00a8 4FF00002 		mov	r2, #0
 562 00ac DA72     		strb	r2, [r3, #11]
 398:../Main.c     **** 	configuration[12] = 0b00000000;//Fim enderco CH2
 563              		.loc 1 398 0
 564 00ae 40F20003 		movw	r3, #:lower16:configuration
 565 00b2 C0F20003 		movt	r3, #:upper16:configuration
 566 00b6 4FF00002 		mov	r2, #0
 567 00ba 1A73     		strb	r2, [r3, #12]
 399:../Main.c     **** 	configuration[13] = 0x8;//num bits enviados (1 byte nesse ex) TODO arrumar
 568              		.loc 1 399 0
 569 00bc 40F20003 		movw	r3, #:lower16:configuration
 570 00c0 C0F20003 		movt	r3, #:upper16:configuration
 571 00c4 4FF00802 		mov	r2, #8
 572 00c8 5A73     		strb	r2, [r3, #13]
 400:../Main.c     **** 	configuration[14] = 0b00000000;
 573              		.loc 1 400 0
 574 00ca 40F20003 		movw	r3, #:lower16:configuration
 575 00ce C0F20003 		movt	r3, #:upper16:configuration
 576 00d2 4FF00002 		mov	r2, #0
 577 00d6 9A73     		strb	r2, [r3, #14]
 401:../Main.c     **** 
 402:../Main.c     **** 	IO004_ResetPin(CE);
 578              		.loc 1 402 0
 579 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 580 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 581 00e0 5A68     		ldr	r2, [r3, #4]
 582 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 583 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 584 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 585 00ec 4FF48031 		mov	r1, #65536
 586 00f0 01FA03F3 		lsl	r3, r1, r3
 587 00f4 5360     		str	r3, [r2, #4]
 403:../Main.c     **** 	IO004_SetPin(CS);
 588              		.loc 1 403 0
 589 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 590 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 591 00fe 5A68     		ldr	r2, [r3, #4]
 592 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 593 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 594 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 595 010a 4FF00101 		mov	r1, #1
 596 010e 01FA03F3 		lsl	r3, r1, r3
 597 0112 5360     		str	r3, [r2, #4]
 404:../Main.c     **** 	int i, j;
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 598              		.loc 1 405 0
 599 0114 4FF00E03 		mov	r3, #14
 600 0118 7B60     		str	r3, [r7, #4]
 601 011a 3FE0     		b	.L9
 602              	.L14:
 406:../Main.c     **** 	{
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 603              		.loc 1 407 0
 604 011c 4FF00703 		mov	r3, #7
 605 0120 3B60     		str	r3, [r7, #0]
 606 0122 34E0     		b	.L10
 607              	.L13:
 408:../Main.c     **** 		{
 409:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 608              		.loc 1 409 0
 609 0124 40F20003 		movw	r3, #:lower16:configuration
 610 0128 C0F20003 		movt	r3, #:upper16:configuration
 611 012c 7A68     		ldr	r2, [r7, #4]
 612 012e 9B18     		adds	r3, r3, r2
 613 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 614 0132 1A46     		mov	r2, r3
 615 0134 4FF00101 		mov	r1, #1
 616 0138 3B68     		ldr	r3, [r7, #0]
 617 013a 01FA03F3 		lsl	r3, r1, r3
 618 013e 1340     		ands	r3, r3, r2
 619 0140 002B     		cmp	r3, #0
 620 0142 0FDD     		ble	.L11
 621              		.loc 1 409 0 is_stmt 0 discriminator 1
 622 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 623 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 624 014c 5A68     		ldr	r2, [r3, #4]
 625 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 626 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 627 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 628 0158 4FF00101 		mov	r1, #1
 629 015c 01FA03F3 		lsl	r3, r1, r3
 630 0160 5360     		str	r3, [r2, #4]
 631 0162 0EE0     		b	.L12
 632              	.L11:
 410:../Main.c     **** 			else IO004_ResetPin(DATA);;
 633              		.loc 1 410 0 is_stmt 1
 634 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 635 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 636 016c 5A68     		ldr	r2, [r3, #4]
 637 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 638 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 639 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 640 0178 4FF48031 		mov	r1, #65536
 641 017c 01FA03F3 		lsl	r3, r1, r3
 642 0180 5360     		str	r3, [r2, #4]
 643              	.L12:
 411:../Main.c     **** 			pulse_R();
 644              		.loc 1 411 0
 645 0182 FFF7FEFF 		bl	pulse_R
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 646              		.loc 1 407 0
 647 0186 3B68     		ldr	r3, [r7, #0]
 648 0188 03F1FF33 		add	r3, r3, #-1
 649 018c 3B60     		str	r3, [r7, #0]
 650              	.L10:
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 651              		.loc 1 407 0 is_stmt 0 discriminator 1
 652 018e 3B68     		ldr	r3, [r7, #0]
 653 0190 002B     		cmp	r3, #0
 654 0192 C7DA     		bge	.L13
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 655              		.loc 1 405 0 is_stmt 1
 656 0194 7B68     		ldr	r3, [r7, #4]
 657 0196 03F1FF33 		add	r3, r3, #-1
 658 019a 7B60     		str	r3, [r7, #4]
 659              	.L9:
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 660              		.loc 1 405 0 is_stmt 0 discriminator 1
 661 019c 7B68     		ldr	r3, [r7, #4]
 662 019e 002B     		cmp	r3, #0
 663 01a0 BCDA     		bge	.L14
 412:../Main.c     **** 		}
 413:../Main.c     **** 	}
 414:../Main.c     **** 	IO004_ResetPin(CS);
 664              		.loc 1 414 0 is_stmt 1
 665 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 666 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 667 01aa 5A68     		ldr	r2, [r3, #4]
 668 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 669 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 670 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 671 01b6 4FF48031 		mov	r1, #65536
 672 01ba 01FA03F3 		lsl	r3, r1, r3
 673 01be 5360     		str	r3, [r2, #4]
 415:../Main.c     **** 	delay(50000);
 674              		.loc 1 415 0
 675 01c0 4CF25030 		movw	r0, #50000
 676 01c4 FFF7FEFF 		bl	delay
 416:../Main.c     **** }
 677              		.loc 1 416 0
 678 01c8 07F10807 		add	r7, r7, #8
 679 01cc BD46     		mov	sp, r7
 680 01ce 80BD     		pop	{r7, pc}
 681              		.cfi_endproc
 682              	.LFE120:
 684              		.section	.text.write_E,"ax",%progbits
 685              		.align	2
 686              		.global	write_E
 687              		.thumb
 688              		.thumb_func
 690              	write_E:
 691              	.LFB121:
 417:../Main.c     **** void write_E()
 418:../Main.c     **** {
 692              		.loc 1 418 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 8
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 0000 80B5     		push	{r7, lr}
 697              	.LCFI10:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 82B0     		sub	sp, sp, #8
 702              	.LCFI11:
 703              		.cfi_def_cfa_offset 16
 704 0004 00AF     		add	r7, sp, #0
 705              	.LCFI12:
 706              		.cfi_def_cfa_register 7
 419:../Main.c     **** 	int i, j;
 420:../Main.c     **** 	IO004_SetPin(CE);
 707              		.loc 1 420 0
 708 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 709 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 710 000e 5A68     		ldr	r2, [r3, #4]
 711 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 712 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 713 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 714 001a 4FF00101 		mov	r1, #1
 715 001e 01FA03F3 		lsl	r3, r1, r3
 716 0022 5360     		str	r3, [r2, #4]
 421:../Main.c     **** 	delay(1000);
 717              		.loc 1 421 0
 718 0024 4FF47A70 		mov	r0, #1000
 719 0028 FFF7FEFF 		bl	delay
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 720              		.loc 1 422 0
 721 002c 4FF00703 		mov	r3, #7
 722 0030 7B60     		str	r3, [r7, #4]
 723 0032 3FE0     		b	.L16
 724              	.L21:
 423:../Main.c     **** 	{
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 725              		.loc 1 424 0
 726 0034 4FF00703 		mov	r3, #7
 727 0038 3B60     		str	r3, [r7, #0]
 728 003a 34E0     		b	.L17
 729              	.L20:
 425:../Main.c     **** 		{
 426:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 730              		.loc 1 426 0
 731 003c 40F20003 		movw	r3, #:lower16:configuration
 732 0040 C0F20003 		movt	r3, #:upper16:configuration
 733 0044 7A68     		ldr	r2, [r7, #4]
 734 0046 9B18     		adds	r3, r3, r2
 735 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 736 004a 1A46     		mov	r2, r3
 737 004c 4FF00101 		mov	r1, #1
 738 0050 3B68     		ldr	r3, [r7, #0]
 739 0052 01FA03F3 		lsl	r3, r1, r3
 740 0056 1340     		ands	r3, r3, r2
 741 0058 002B     		cmp	r3, #0
 742 005a 0FDD     		ble	.L18
 743              		.loc 1 426 0 is_stmt 0 discriminator 1
 744 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 745 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 746 0064 5A68     		ldr	r2, [r3, #4]
 747 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 748 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 749 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 750 0070 4FF00101 		mov	r1, #1
 751 0074 01FA03F3 		lsl	r3, r1, r3
 752 0078 5360     		str	r3, [r2, #4]
 753 007a 0EE0     		b	.L19
 754              	.L18:
 427:../Main.c     **** 			else IO004_ResetPin(DATA);
 755              		.loc 1 427 0 is_stmt 1
 756 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 757 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 758 0084 5A68     		ldr	r2, [r3, #4]
 759 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 760 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 761 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 762 0090 4FF48031 		mov	r1, #65536
 763 0094 01FA03F3 		lsl	r3, r1, r3
 764 0098 5360     		str	r3, [r2, #4]
 765              	.L19:
 428:../Main.c     **** 			pulse_R();
 766              		.loc 1 428 0
 767 009a FFF7FEFF 		bl	pulse_R
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 768              		.loc 1 424 0
 769 009e 3B68     		ldr	r3, [r7, #0]
 770 00a0 03F1FF33 		add	r3, r3, #-1
 771 00a4 3B60     		str	r3, [r7, #0]
 772              	.L17:
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 773              		.loc 1 424 0 is_stmt 0 discriminator 1
 774 00a6 3B68     		ldr	r3, [r7, #0]
 775 00a8 002B     		cmp	r3, #0
 776 00aa C7DA     		bge	.L20
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 777              		.loc 1 422 0 is_stmt 1
 778 00ac 7B68     		ldr	r3, [r7, #4]
 779 00ae 03F1FF33 		add	r3, r3, #-1
 780 00b2 7B60     		str	r3, [r7, #4]
 781              	.L16:
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 782              		.loc 1 422 0 is_stmt 0 discriminator 1
 783 00b4 7B68     		ldr	r3, [r7, #4]
 784 00b6 022B     		cmp	r3, #2
 785 00b8 BCDC     		bgt	.L21
 429:../Main.c     **** 		}
 430:../Main.c     **** 	}
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 786              		.loc 1 431 0 is_stmt 1
 787 00ba 4FF00003 		mov	r3, #0
 788 00be 7B60     		str	r3, [r7, #4]
 789 00c0 3FE0     		b	.L22
 790              	.L27:
 432:../Main.c     **** 	{
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 791              		.loc 1 433 0
 792 00c2 4FF00703 		mov	r3, #7
 793 00c6 3B60     		str	r3, [r7, #0]
 794 00c8 34E0     		b	.L23
 795              	.L26:
 434:../Main.c     **** 		{
 435:../Main.c     **** 			if ((data_E[i] & (1<<j))>0) IO004_SetPin(DATA);
 796              		.loc 1 435 0
 797 00ca 40F20003 		movw	r3, #:lower16:data_E
 798 00ce C0F20003 		movt	r3, #:upper16:data_E
 799 00d2 7A68     		ldr	r2, [r7, #4]
 800 00d4 9B18     		adds	r3, r3, r2
 801 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 802 00d8 1A46     		mov	r2, r3
 803 00da 4FF00101 		mov	r1, #1
 804 00de 3B68     		ldr	r3, [r7, #0]
 805 00e0 01FA03F3 		lsl	r3, r1, r3
 806 00e4 1340     		ands	r3, r3, r2
 807 00e6 002B     		cmp	r3, #0
 808 00e8 0FDD     		ble	.L24
 809              		.loc 1 435 0 is_stmt 0 discriminator 1
 810 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 811 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 812 00f2 5A68     		ldr	r2, [r3, #4]
 813 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 814 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 815 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 816 00fe 4FF00101 		mov	r1, #1
 817 0102 01FA03F3 		lsl	r3, r1, r3
 818 0106 5360     		str	r3, [r2, #4]
 819 0108 0EE0     		b	.L25
 820              	.L24:
 436:../Main.c     **** 			else IO004_ResetPin(DATA);
 821              		.loc 1 436 0 is_stmt 1
 822 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 823 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 824 0112 5A68     		ldr	r2, [r3, #4]
 825 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 826 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 827 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 828 011e 4FF48031 		mov	r1, #65536
 829 0122 01FA03F3 		lsl	r3, r1, r3
 830 0126 5360     		str	r3, [r2, #4]
 831              	.L25:
 437:../Main.c     **** 			pulse_R();
 832              		.loc 1 437 0
 833 0128 FFF7FEFF 		bl	pulse_R
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 834              		.loc 1 433 0
 835 012c 3B68     		ldr	r3, [r7, #0]
 836 012e 03F1FF33 		add	r3, r3, #-1
 837 0132 3B60     		str	r3, [r7, #0]
 838              	.L23:
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 839              		.loc 1 433 0 is_stmt 0 discriminator 1
 840 0134 3B68     		ldr	r3, [r7, #0]
 841 0136 002B     		cmp	r3, #0
 842 0138 C7DA     		bge	.L26
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 843              		.loc 1 431 0 is_stmt 1
 844 013a 7B68     		ldr	r3, [r7, #4]
 845 013c 03F10103 		add	r3, r3, #1
 846 0140 7B60     		str	r3, [r7, #4]
 847              	.L22:
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 848              		.loc 1 431 0 is_stmt 0 discriminator 1
 849 0142 7B68     		ldr	r3, [r7, #4]
 850 0144 002B     		cmp	r3, #0
 851 0146 BCDD     		ble	.L27
 438:../Main.c     **** 		}
 439:../Main.c     **** 	}//termina de enviar dados
 440:../Main.c     **** 	IO004_ResetPin(CE);
 852              		.loc 1 440 0 is_stmt 1
 853 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 854 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 855 0150 5A68     		ldr	r2, [r3, #4]
 856 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 857 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 858 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 859 015c 4FF48031 		mov	r1, #65536
 860 0160 01FA03F3 		lsl	r3, r1, r3
 861 0164 5360     		str	r3, [r2, #4]
 441:../Main.c     **** 	delay(5000);
 862              		.loc 1 441 0
 863 0166 41F28830 		movw	r0, #5000
 864 016a FFF7FEFF 		bl	delay
 442:../Main.c     **** }
 865              		.loc 1 442 0
 866 016e 07F10807 		add	r7, r7, #8
 867 0172 BD46     		mov	sp, r7
 868 0174 80BD     		pop	{r7, pc}
 869              		.cfi_endproc
 870              	.LFE121:
 872 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 873              		.align	2
 874              		.global	psxConfiguraControle
 875              		.thumb
 876              		.thumb_func
 878              	psxConfiguraControle:
 879              	.LFB122:
 443:../Main.c     **** /***************************************************/
 444:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 445:../Main.c     **** /***************************************************/
 446:../Main.c     **** void psxConfiguraControle()
 447:../Main.c     **** {
 880              		.loc 1 447 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 80B5     		push	{r7, lr}
 885              	.LCFI13:
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 889 0002 00AF     		add	r7, sp, #0
 890              	.LCFI14:
 891              		.cfi_def_cfa_register 7
 448:../Main.c     **** 	psxEnterConfigMode();
 892              		.loc 1 448 0
 893 0004 FFF7FEFF 		bl	psxEnterConfigMode
 449:../Main.c     **** 	psxSetAnalogMode();
 894              		.loc 1 449 0
 895 0008 FFF7FEFF 		bl	psxSetAnalogMode
 450:../Main.c     **** 	psxExitConfigMode();
 896              		.loc 1 450 0
 897 000c FFF7FEFF 		bl	psxExitConfigMode
 451:../Main.c     **** }
 898              		.loc 1 451 0
 899 0010 80BD     		pop	{r7, pc}
 900              		.cfi_endproc
 901              	.LFE122:
 903 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 904              		.align	2
 905              		.global	psxEnterConfigMode
 906              		.thumb
 907              		.thumb_func
 909              	psxEnterConfigMode:
 910              	.LFB123:
 452:../Main.c     **** 
 453:../Main.c     **** void psxEnterConfigMode()
 454:../Main.c     **** {
 911              		.loc 1 454 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 8
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 80B5     		push	{r7, lr}
 916              	.LCFI15:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 82B0     		sub	sp, sp, #8
 921              	.LCFI16:
 922              		.cfi_def_cfa_offset 16
 923 0004 00AF     		add	r7, sp, #0
 924              	.LCFI17:
 925              		.cfi_def_cfa_register 7
 455:../Main.c     **** 	int psxByte = 0;
 926              		.loc 1 455 0
 927 0006 4FF00003 		mov	r3, #0
 928 000a 7B60     		str	r3, [r7, #4]
 456:../Main.c     **** 	IO004_SetPin(CMD);
 929              		.loc 1 456 0
 930 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 931 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 932 0014 5A68     		ldr	r2, [r3, #4]
 933 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 934 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 935 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 936 0020 4FF00101 		mov	r1, #1
 937 0024 01FA03F3 		lsl	r3, r1, r3
 938 0028 5360     		str	r3, [r2, #4]
 457:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 939              		.loc 1 457 0
 940 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 941 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 942 0032 5A68     		ldr	r2, [r3, #4]
 943 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 944 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 945 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 946 003e 4FF00101 		mov	r1, #1
 947 0042 01FA03F3 		lsl	r3, r1, r3
 948 0046 5360     		str	r3, [r2, #4]
 458:../Main.c     **** 	IO004_ResetPin(ATT);
 949              		.loc 1 458 0
 950 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 951 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 952 0050 5A68     		ldr	r2, [r3, #4]
 953 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 954 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 955 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 956 005c 4FF48031 		mov	r1, #65536
 957 0060 01FA03F3 		lsl	r3, r1, r3
 958 0064 5360     		str	r3, [r2, #4]
 459:../Main.c     **** 	delay(tempoInicio);
 959              		.loc 1 459 0
 960 0066 4FF49670 		mov	r0, #300
 961 006a FFF7FEFF 		bl	delay
 460:../Main.c     **** 
 461:../Main.c     **** 	psxByte = 1;
 962              		.loc 1 461 0
 963 006e 4FF00103 		mov	r3, #1
 964 0072 7B60     		str	r3, [r7, #4]
 462:../Main.c     **** 	psxTrocaByte(psxByte);
 965              		.loc 1 462 0
 966 0074 7868     		ldr	r0, [r7, #4]
 967 0076 FFF7FEFF 		bl	psxTrocaByte
 463:../Main.c     **** 
 464:../Main.c     **** 	psxByte = 0x43;
 968              		.loc 1 464 0
 969 007a 4FF04303 		mov	r3, #67
 970 007e 7B60     		str	r3, [r7, #4]
 465:../Main.c     **** 	psxTrocaByte(psxByte);
 971              		.loc 1 465 0
 972 0080 7868     		ldr	r0, [r7, #4]
 973 0082 FFF7FEFF 		bl	psxTrocaByte
 466:../Main.c     **** 
 467:../Main.c     **** 	psxByte = 0;
 974              		.loc 1 467 0
 975 0086 4FF00003 		mov	r3, #0
 976 008a 7B60     		str	r3, [r7, #4]
 468:../Main.c     **** 	psxTrocaByte(psxByte);
 977              		.loc 1 468 0
 978 008c 7868     		ldr	r0, [r7, #4]
 979 008e FFF7FEFF 		bl	psxTrocaByte
 469:../Main.c     **** 
 470:../Main.c     **** 	psxByte = 0x1;
 980              		.loc 1 470 0
 981 0092 4FF00103 		mov	r3, #1
 982 0096 7B60     		str	r3, [r7, #4]
 471:../Main.c     **** 	psxTrocaByte(psxByte);
 983              		.loc 1 471 0
 984 0098 7868     		ldr	r0, [r7, #4]
 985 009a FFF7FEFF 		bl	psxTrocaByte
 472:../Main.c     **** 
 473:../Main.c     **** 	psxByte = 0;
 986              		.loc 1 473 0
 987 009e 4FF00003 		mov	r3, #0
 988 00a2 7B60     		str	r3, [r7, #4]
 474:../Main.c     **** 	psxTrocaByte(psxByte);
 989              		.loc 1 474 0
 990 00a4 7868     		ldr	r0, [r7, #4]
 991 00a6 FFF7FEFF 		bl	psxTrocaByte
 475:../Main.c     **** 
 476:../Main.c     **** 	IO004_SetPin(ATT);
 992              		.loc 1 476 0
 993 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 994 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 995 00b2 5A68     		ldr	r2, [r3, #4]
 996 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 997 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 998 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 999 00be 4FF00101 		mov	r1, #1
 1000 00c2 01FA03F3 		lsl	r3, r1, r3
 1001 00c6 5360     		str	r3, [r2, #4]
 477:../Main.c     **** }
 1002              		.loc 1 477 0
 1003 00c8 07F10807 		add	r7, r7, #8
 1004 00cc BD46     		mov	sp, r7
 1005 00ce 80BD     		pop	{r7, pc}
 1006              		.cfi_endproc
 1007              	.LFE123:
 1009              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1010              		.align	2
 1011              		.global	psxSetAnalogMode
 1012              		.thumb
 1013              		.thumb_func
 1015              	psxSetAnalogMode:
 1016              	.LFB124:
 478:../Main.c     **** 
 479:../Main.c     **** void psxSetAnalogMode()
 480:../Main.c     **** {
 1017              		.loc 1 480 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021 0000 80B5     		push	{r7, lr}
 1022              	.LCFI18:
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 82B0     		sub	sp, sp, #8
 1027              	.LCFI19:
 1028              		.cfi_def_cfa_offset 16
 1029 0004 00AF     		add	r7, sp, #0
 1030              	.LCFI20:
 1031              		.cfi_def_cfa_register 7
 481:../Main.c     **** 	int psxByte = 0;
 1032              		.loc 1 481 0
 1033 0006 4FF00003 		mov	r3, #0
 1034 000a 7B60     		str	r3, [r7, #4]
 482:../Main.c     **** 	IO004_SetPin(CMD);
 1035              		.loc 1 482 0
 1036 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1037 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1038 0014 5A68     		ldr	r2, [r3, #4]
 1039 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1040 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1041 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1042 0020 4FF00101 		mov	r1, #1
 1043 0024 01FA03F3 		lsl	r3, r1, r3
 1044 0028 5360     		str	r3, [r2, #4]
 483:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1045              		.loc 1 483 0
 1046 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1047 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1048 0032 5A68     		ldr	r2, [r3, #4]
 1049 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1050 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1051 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1052 003e 4FF00101 		mov	r1, #1
 1053 0042 01FA03F3 		lsl	r3, r1, r3
 1054 0046 5360     		str	r3, [r2, #4]
 484:../Main.c     **** 	IO004_ResetPin(ATT);
 1055              		.loc 1 484 0
 1056 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1057 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1058 0050 5A68     		ldr	r2, [r3, #4]
 1059 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1060 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1061 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1062 005c 4FF48031 		mov	r1, #65536
 1063 0060 01FA03F3 		lsl	r3, r1, r3
 1064 0064 5360     		str	r3, [r2, #4]
 485:../Main.c     **** 	delay(tempoInicio);
 1065              		.loc 1 485 0
 1066 0066 4FF49670 		mov	r0, #300
 1067 006a FFF7FEFF 		bl	delay
 486:../Main.c     **** 
 487:../Main.c     **** 	psxByte = 1;
 1068              		.loc 1 487 0
 1069 006e 4FF00103 		mov	r3, #1
 1070 0072 7B60     		str	r3, [r7, #4]
 488:../Main.c     **** 	psxTrocaByte(psxByte);
 1071              		.loc 1 488 0
 1072 0074 7868     		ldr	r0, [r7, #4]
 1073 0076 FFF7FEFF 		bl	psxTrocaByte
 489:../Main.c     **** 
 490:../Main.c     **** 	psxByte = 0x44;
 1074              		.loc 1 490 0
 1075 007a 4FF04403 		mov	r3, #68
 1076 007e 7B60     		str	r3, [r7, #4]
 491:../Main.c     **** 	psxTrocaByte(psxByte);
 1077              		.loc 1 491 0
 1078 0080 7868     		ldr	r0, [r7, #4]
 1079 0082 FFF7FEFF 		bl	psxTrocaByte
 492:../Main.c     **** 
 493:../Main.c     **** 	psxByte = 0;
 1080              		.loc 1 493 0
 1081 0086 4FF00003 		mov	r3, #0
 1082 008a 7B60     		str	r3, [r7, #4]
 494:../Main.c     **** 	psxTrocaByte(psxByte);
 1083              		.loc 1 494 0
 1084 008c 7868     		ldr	r0, [r7, #4]
 1085 008e FFF7FEFF 		bl	psxTrocaByte
 495:../Main.c     **** 
 496:../Main.c     **** 	psxByte = 0x1;
 1086              		.loc 1 496 0
 1087 0092 4FF00103 		mov	r3, #1
 1088 0096 7B60     		str	r3, [r7, #4]
 497:../Main.c     **** 	psxTrocaByte(psxByte);
 1089              		.loc 1 497 0
 1090 0098 7868     		ldr	r0, [r7, #4]
 1091 009a FFF7FEFF 		bl	psxTrocaByte
 498:../Main.c     **** 
 499:../Main.c     **** 	psxByte = 0x3;
 1092              		.loc 1 499 0
 1093 009e 4FF00303 		mov	r3, #3
 1094 00a2 7B60     		str	r3, [r7, #4]
 500:../Main.c     **** 	psxTrocaByte(psxByte);
 1095              		.loc 1 500 0
 1096 00a4 7868     		ldr	r0, [r7, #4]
 1097 00a6 FFF7FEFF 		bl	psxTrocaByte
 501:../Main.c     **** 
 502:../Main.c     **** 	psxByte = 0;
 1098              		.loc 1 502 0
 1099 00aa 4FF00003 		mov	r3, #0
 1100 00ae 7B60     		str	r3, [r7, #4]
 503:../Main.c     **** 	psxTrocaByte(psxByte);
 1101              		.loc 1 503 0
 1102 00b0 7868     		ldr	r0, [r7, #4]
 1103 00b2 FFF7FEFF 		bl	psxTrocaByte
 504:../Main.c     **** 
 505:../Main.c     **** 	psxByte = 0;
 1104              		.loc 1 505 0
 1105 00b6 4FF00003 		mov	r3, #0
 1106 00ba 7B60     		str	r3, [r7, #4]
 506:../Main.c     **** 	psxTrocaByte(psxByte);
 1107              		.loc 1 506 0
 1108 00bc 7868     		ldr	r0, [r7, #4]
 1109 00be FFF7FEFF 		bl	psxTrocaByte
 507:../Main.c     **** 
 508:../Main.c     **** 	psxByte = 0;
 1110              		.loc 1 508 0
 1111 00c2 4FF00003 		mov	r3, #0
 1112 00c6 7B60     		str	r3, [r7, #4]
 509:../Main.c     **** 	psxTrocaByte(psxByte);
 1113              		.loc 1 509 0
 1114 00c8 7868     		ldr	r0, [r7, #4]
 1115 00ca FFF7FEFF 		bl	psxTrocaByte
 510:../Main.c     **** 
 511:../Main.c     **** 	psxByte = 0;
 1116              		.loc 1 511 0
 1117 00ce 4FF00003 		mov	r3, #0
 1118 00d2 7B60     		str	r3, [r7, #4]
 512:../Main.c     **** 	psxTrocaByte(psxByte);
 1119              		.loc 1 512 0
 1120 00d4 7868     		ldr	r0, [r7, #4]
 1121 00d6 FFF7FEFF 		bl	psxTrocaByte
 513:../Main.c     **** 
 514:../Main.c     **** 	IO004_SetPin(ATT);
 1122              		.loc 1 514 0
 1123 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1124 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1125 00e2 5A68     		ldr	r2, [r3, #4]
 1126 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1127 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1128 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1129 00ee 4FF00101 		mov	r1, #1
 1130 00f2 01FA03F3 		lsl	r3, r1, r3
 1131 00f6 5360     		str	r3, [r2, #4]
 515:../Main.c     **** }
 1132              		.loc 1 515 0
 1133 00f8 07F10807 		add	r7, r7, #8
 1134 00fc BD46     		mov	sp, r7
 1135 00fe 80BD     		pop	{r7, pc}
 1136              		.cfi_endproc
 1137              	.LFE124:
 1139              		.section	.text.psxExitConfigMode,"ax",%progbits
 1140              		.align	2
 1141              		.global	psxExitConfigMode
 1142              		.thumb
 1143              		.thumb_func
 1145              	psxExitConfigMode:
 1146              	.LFB125:
 516:../Main.c     **** 
 517:../Main.c     **** void psxExitConfigMode()
 518:../Main.c     **** {
 1147              		.loc 1 518 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 8
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
 1151 0000 80B5     		push	{r7, lr}
 1152              	.LCFI21:
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 82B0     		sub	sp, sp, #8
 1157              	.LCFI22:
 1158              		.cfi_def_cfa_offset 16
 1159 0004 00AF     		add	r7, sp, #0
 1160              	.LCFI23:
 1161              		.cfi_def_cfa_register 7
 519:../Main.c     **** 	int psxByte = 0;
 1162              		.loc 1 519 0
 1163 0006 4FF00003 		mov	r3, #0
 1164 000a 7B60     		str	r3, [r7, #4]
 520:../Main.c     **** 	IO004_SetPin(CMD);
 1165              		.loc 1 520 0
 1166 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1167 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1168 0014 5A68     		ldr	r2, [r3, #4]
 1169 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1170 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1171 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1172 0020 4FF00101 		mov	r1, #1
 1173 0024 01FA03F3 		lsl	r3, r1, r3
 1174 0028 5360     		str	r3, [r2, #4]
 521:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1175              		.loc 1 521 0
 1176 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1177 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1178 0032 5A68     		ldr	r2, [r3, #4]
 1179 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1180 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1181 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1182 003e 4FF00101 		mov	r1, #1
 1183 0042 01FA03F3 		lsl	r3, r1, r3
 1184 0046 5360     		str	r3, [r2, #4]
 522:../Main.c     **** 	IO004_ResetPin(ATT);
 1185              		.loc 1 522 0
 1186 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1187 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1188 0050 5A68     		ldr	r2, [r3, #4]
 1189 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1190 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1191 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1192 005c 4FF48031 		mov	r1, #65536
 1193 0060 01FA03F3 		lsl	r3, r1, r3
 1194 0064 5360     		str	r3, [r2, #4]
 523:../Main.c     **** 	delay(tempoInicio);
 1195              		.loc 1 523 0
 1196 0066 4FF49670 		mov	r0, #300
 1197 006a FFF7FEFF 		bl	delay
 524:../Main.c     **** 
 525:../Main.c     **** 	psxByte = 1;
 1198              		.loc 1 525 0
 1199 006e 4FF00103 		mov	r3, #1
 1200 0072 7B60     		str	r3, [r7, #4]
 526:../Main.c     **** 	psxTrocaByte(psxByte);
 1201              		.loc 1 526 0
 1202 0074 7868     		ldr	r0, [r7, #4]
 1203 0076 FFF7FEFF 		bl	psxTrocaByte
 527:../Main.c     **** 
 528:../Main.c     **** 	psxByte = 0x43;
 1204              		.loc 1 528 0
 1205 007a 4FF04303 		mov	r3, #67
 1206 007e 7B60     		str	r3, [r7, #4]
 529:../Main.c     **** 	psxTrocaByte(psxByte);
 1207              		.loc 1 529 0
 1208 0080 7868     		ldr	r0, [r7, #4]
 1209 0082 FFF7FEFF 		bl	psxTrocaByte
 530:../Main.c     **** 
 531:../Main.c     **** 	psxByte = 0;
 1210              		.loc 1 531 0
 1211 0086 4FF00003 		mov	r3, #0
 1212 008a 7B60     		str	r3, [r7, #4]
 532:../Main.c     **** 	psxTrocaByte(psxByte);
 1213              		.loc 1 532 0
 1214 008c 7868     		ldr	r0, [r7, #4]
 1215 008e FFF7FEFF 		bl	psxTrocaByte
 533:../Main.c     **** 
 534:../Main.c     **** 	psxByte = 0;
 1216              		.loc 1 534 0
 1217 0092 4FF00003 		mov	r3, #0
 1218 0096 7B60     		str	r3, [r7, #4]
 535:../Main.c     **** 	psxTrocaByte(psxByte);
 1219              		.loc 1 535 0
 1220 0098 7868     		ldr	r0, [r7, #4]
 1221 009a FFF7FEFF 		bl	psxTrocaByte
 536:../Main.c     **** 
 537:../Main.c     **** 	psxByte = 0x5A;
 1222              		.loc 1 537 0
 1223 009e 4FF05A03 		mov	r3, #90
 1224 00a2 7B60     		str	r3, [r7, #4]
 538:../Main.c     **** 	psxTrocaByte(psxByte);
 1225              		.loc 1 538 0
 1226 00a4 7868     		ldr	r0, [r7, #4]
 1227 00a6 FFF7FEFF 		bl	psxTrocaByte
 539:../Main.c     **** 
 540:../Main.c     **** 	psxByte = 0x5A;
 1228              		.loc 1 540 0
 1229 00aa 4FF05A03 		mov	r3, #90
 1230 00ae 7B60     		str	r3, [r7, #4]
 541:../Main.c     **** 	psxTrocaByte(psxByte);
 1231              		.loc 1 541 0
 1232 00b0 7868     		ldr	r0, [r7, #4]
 1233 00b2 FFF7FEFF 		bl	psxTrocaByte
 542:../Main.c     **** 
 543:../Main.c     **** 	psxByte = 0x5A;
 1234              		.loc 1 543 0
 1235 00b6 4FF05A03 		mov	r3, #90
 1236 00ba 7B60     		str	r3, [r7, #4]
 544:../Main.c     **** 	psxTrocaByte(psxByte);
 1237              		.loc 1 544 0
 1238 00bc 7868     		ldr	r0, [r7, #4]
 1239 00be FFF7FEFF 		bl	psxTrocaByte
 545:../Main.c     **** 
 546:../Main.c     **** 	psxByte = 0x5A;
 1240              		.loc 1 546 0
 1241 00c2 4FF05A03 		mov	r3, #90
 1242 00c6 7B60     		str	r3, [r7, #4]
 547:../Main.c     **** 	psxTrocaByte(psxByte);
 1243              		.loc 1 547 0
 1244 00c8 7868     		ldr	r0, [r7, #4]
 1245 00ca FFF7FEFF 		bl	psxTrocaByte
 548:../Main.c     **** 
 549:../Main.c     **** 	psxByte = 0x5A;
 1246              		.loc 1 549 0
 1247 00ce 4FF05A03 		mov	r3, #90
 1248 00d2 7B60     		str	r3, [r7, #4]
 550:../Main.c     **** 	psxTrocaByte(psxByte);
 1249              		.loc 1 550 0
 1250 00d4 7868     		ldr	r0, [r7, #4]
 1251 00d6 FFF7FEFF 		bl	psxTrocaByte
 551:../Main.c     **** 
 552:../Main.c     **** 	IO004_SetPin(ATT);
 1252              		.loc 1 552 0
 1253 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1254 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1255 00e2 5A68     		ldr	r2, [r3, #4]
 1256 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1257 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1258 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1259 00ee 4FF00101 		mov	r1, #1
 1260 00f2 01FA03F3 		lsl	r3, r1, r3
 1261 00f6 5360     		str	r3, [r2, #4]
 553:../Main.c     **** }
 1262              		.loc 1 553 0
 1263 00f8 07F10807 		add	r7, r7, #8
 1264 00fc BD46     		mov	sp, r7
 1265 00fe 80BD     		pop	{r7, pc}
 1266              		.cfi_endproc
 1267              	.LFE125:
 1269              		.section	.text.psxLeControle,"ax",%progbits
 1270              		.align	2
 1271              		.global	psxLeControle
 1272              		.thumb
 1273              		.thumb_func
 1275              	psxLeControle:
 1276              	.LFB126:
 554:../Main.c     **** 
 555:../Main.c     **** void psxLeControle()
 556:../Main.c     **** {
 1277              		.loc 1 556 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 8
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281 0000 80B5     		push	{r7, lr}
 1282              	.LCFI24:
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 7, -8
 1285              		.cfi_offset 14, -4
 1286 0002 82B0     		sub	sp, sp, #8
 1287              	.LCFI25:
 1288              		.cfi_def_cfa_offset 16
 1289 0004 00AF     		add	r7, sp, #0
 1290              	.LCFI26:
 1291              		.cfi_def_cfa_register 7
 557:../Main.c     **** 	int psxByte = 0;
 1292              		.loc 1 557 0
 1293 0006 4FF00003 		mov	r3, #0
 1294 000a 3B60     		str	r3, [r7, #0]
 558:../Main.c     **** 	int psxCont;
 559:../Main.c     **** 
 560:../Main.c     **** 	IO004_SetPin(CMD);
 1295              		.loc 1 560 0
 1296 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1297 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1298 0014 5A68     		ldr	r2, [r3, #4]
 1299 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1300 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1301 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1302 0020 4FF00101 		mov	r1, #1
 1303 0024 01FA03F3 		lsl	r3, r1, r3
 1304 0028 5360     		str	r3, [r2, #4]
 561:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1305              		.loc 1 561 0
 1306 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1307 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1308 0032 5A68     		ldr	r2, [r3, #4]
 1309 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1310 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1311 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1312 003e 4FF00101 		mov	r1, #1
 1313 0042 01FA03F3 		lsl	r3, r1, r3
 1314 0046 5360     		str	r3, [r2, #4]
 562:../Main.c     **** 	IO004_ResetPin(ATT);
 1315              		.loc 1 562 0
 1316 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1317 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1318 0050 5A68     		ldr	r2, [r3, #4]
 1319 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1320 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1321 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1322 005c 4FF48031 		mov	r1, #65536
 1323 0060 01FA03F3 		lsl	r3, r1, r3
 1324 0064 5360     		str	r3, [r2, #4]
 563:../Main.c     **** 	delay(tempoInicio);
 1325              		.loc 1 563 0
 1326 0066 4FF49670 		mov	r0, #300
 1327 006a FFF7FEFF 		bl	delay
 564:../Main.c     **** 
 565:../Main.c     **** 	psxByte = 1;
 1328              		.loc 1 565 0
 1329 006e 4FF00103 		mov	r3, #1
 1330 0072 3B60     		str	r3, [r7, #0]
 566:../Main.c     **** 	psxTrocaByte(psxByte);
 1331              		.loc 1 566 0
 1332 0074 3868     		ldr	r0, [r7, #0]
 1333 0076 FFF7FEFF 		bl	psxTrocaByte
 567:../Main.c     **** 
 568:../Main.c     **** 	psxByte = 0x42;
 1334              		.loc 1 568 0
 1335 007a 4FF04203 		mov	r3, #66
 1336 007e 3B60     		str	r3, [r7, #0]
 569:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 1337              		.loc 1 569 0
 1338 0080 3868     		ldr	r0, [r7, #0]
 1339 0082 FFF7FEFF 		bl	psxTrocaByte
 1340 0086 0346     		mov	r3, r0
 1341 0088 DAB2     		uxtb	r2, r3
 1342 008a 40F20003 		movw	r3, #:lower16:psx_status
 1343 008e C0F20003 		movt	r3, #:upper16:psx_status
 1344 0092 1A70     		strb	r2, [r3, #0]
 570:../Main.c     **** 
 571:../Main.c     **** 	psxByte = 0;
 1345              		.loc 1 571 0
 1346 0094 4FF00003 		mov	r3, #0
 1347 0098 3B60     		str	r3, [r7, #0]
 572:../Main.c     **** 	psxTrocaByte(psxByte);
 1348              		.loc 1 572 0
 1349 009a 3868     		ldr	r0, [r7, #0]
 1350 009c FFF7FEFF 		bl	psxTrocaByte
 573:../Main.c     **** 
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1351              		.loc 1 574 0
 1352 00a0 4FF00003 		mov	r3, #0
 1353 00a4 7B60     		str	r3, [r7, #4]
 1354 00a6 0FE0     		b	.L33
 1355              	.L34:
 575:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 1356              		.loc 1 575 0 discriminator 2
 1357 00a8 4FF00000 		mov	r0, #0
 1358 00ac FFF7FEFF 		bl	psxTrocaByte
 1359 00b0 0146     		mov	r1, r0
 1360 00b2 40F20003 		movw	r3, #:lower16:psxDado
 1361 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 1362 00ba 7A68     		ldr	r2, [r7, #4]
 1363 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1364              		.loc 1 574 0 discriminator 2
 1365 00c0 7B68     		ldr	r3, [r7, #4]
 1366 00c2 03F10103 		add	r3, r3, #1
 1367 00c6 7B60     		str	r3, [r7, #4]
 1368              	.L33:
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1369              		.loc 1 574 0 is_stmt 0 discriminator 1
 1370 00c8 7B68     		ldr	r3, [r7, #4]
 1371 00ca 052B     		cmp	r3, #5
 1372 00cc ECDD     		ble	.L34
 576:../Main.c     **** 
 577:../Main.c     **** 	IO004_SetPin(ATT);
 1373              		.loc 1 577 0 is_stmt 1
 1374 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1375 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1376 00d6 5A68     		ldr	r2, [r3, #4]
 1377 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1378 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1379 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1380 00e2 4FF00101 		mov	r1, #1
 1381 00e6 01FA03F3 		lsl	r3, r1, r3
 1382 00ea 5360     		str	r3, [r2, #4]
 578:../Main.c     **** }
 1383              		.loc 1 578 0
 1384 00ec 07F10807 		add	r7, r7, #8
 1385 00f0 BD46     		mov	sp, r7
 1386 00f2 80BD     		pop	{r7, pc}
 1387              		.cfi_endproc
 1388              	.LFE126:
 1390              		.section	.text.psxHandShake,"ax",%progbits
 1391              		.align	2
 1392              		.global	psxHandShake
 1393              		.thumb
 1394              		.thumb_func
 1396              	psxHandShake:
 1397              	.LFB127:
 579:../Main.c     **** 
 580:../Main.c     **** void psxHandShake()
 581:../Main.c     **** {
 1398              		.loc 1 581 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402 0000 80B5     		push	{r7, lr}
 1403              	.LCFI27:
 1404              		.cfi_def_cfa_offset 8
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 14, -4
 1407 0002 82B0     		sub	sp, sp, #8
 1408              	.LCFI28:
 1409              		.cfi_def_cfa_offset 16
 1410 0004 00AF     		add	r7, sp, #0
 1411              	.LCFI29:
 1412              		.cfi_def_cfa_register 7
 582:../Main.c     **** 	int psxByte = 0;
 1413              		.loc 1 582 0
 1414 0006 4FF00003 		mov	r3, #0
 1415 000a 7B60     		str	r3, [r7, #4]
 583:../Main.c     **** 
 584:../Main.c     **** 	IO004_SetPin(CMD);
 1416              		.loc 1 584 0
 1417 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1418 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1419 0014 5A68     		ldr	r2, [r3, #4]
 1420 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1421 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1422 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1423 0020 4FF00101 		mov	r1, #1
 1424 0024 01FA03F3 		lsl	r3, r1, r3
 1425 0028 5360     		str	r3, [r2, #4]
 585:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1426              		.loc 1 585 0
 1427 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1428 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1429 0032 5A68     		ldr	r2, [r3, #4]
 1430 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1431 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1432 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1433 003e 4FF00101 		mov	r1, #1
 1434 0042 01FA03F3 		lsl	r3, r1, r3
 1435 0046 5360     		str	r3, [r2, #4]
 586:../Main.c     **** 	IO004_ResetPin(ATT);
 1436              		.loc 1 586 0
 1437 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1438 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1439 0050 5A68     		ldr	r2, [r3, #4]
 1440 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1441 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1442 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1443 005c 4FF48031 		mov	r1, #65536
 1444 0060 01FA03F3 		lsl	r3, r1, r3
 1445 0064 5360     		str	r3, [r2, #4]
 587:../Main.c     **** 	delay(tempoInicio);
 1446              		.loc 1 587 0
 1447 0066 4FF49670 		mov	r0, #300
 1448 006a FFF7FEFF 		bl	delay
 588:../Main.c     **** 
 589:../Main.c     **** 	psxByte = 1;
 1449              		.loc 1 589 0
 1450 006e 4FF00103 		mov	r3, #1
 1451 0072 7B60     		str	r3, [r7, #4]
 590:../Main.c     **** 	psxTrocaByte(psxByte);
 1452              		.loc 1 590 0
 1453 0074 7868     		ldr	r0, [r7, #4]
 1454 0076 FFF7FEFF 		bl	psxTrocaByte
 591:../Main.c     **** 
 592:../Main.c     **** 	psxByte = 0x42;
 1455              		.loc 1 592 0
 1456 007a 4FF04203 		mov	r3, #66
 1457 007e 7B60     		str	r3, [r7, #4]
 593:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 1458              		.loc 1 593 0
 1459 0080 7868     		ldr	r0, [r7, #4]
 1460 0082 FFF7FEFF 		bl	psxTrocaByte
 1461 0086 0346     		mov	r3, r0
 1462 0088 DAB2     		uxtb	r2, r3
 1463 008a 40F20003 		movw	r3, #:lower16:psx_status
 1464 008e C0F20003 		movt	r3, #:upper16:psx_status
 1465 0092 1A70     		strb	r2, [r3, #0]
 594:../Main.c     **** 
 595:../Main.c     **** 	psxByte = 0;
 1466              		.loc 1 595 0
 1467 0094 4FF00003 		mov	r3, #0
 1468 0098 7B60     		str	r3, [r7, #4]
 596:../Main.c     **** 	psxTrocaByte(psxByte);
 1469              		.loc 1 596 0
 1470 009a 7868     		ldr	r0, [r7, #4]
 1471 009c FFF7FEFF 		bl	psxTrocaByte
 597:../Main.c     **** 
 598:../Main.c     **** 	psxByte = 0;
 1472              		.loc 1 598 0
 1473 00a0 4FF00003 		mov	r3, #0
 1474 00a4 7B60     		str	r3, [r7, #4]
 599:../Main.c     **** 	psxTrocaByte(psxByte);
 1475              		.loc 1 599 0
 1476 00a6 7868     		ldr	r0, [r7, #4]
 1477 00a8 FFF7FEFF 		bl	psxTrocaByte
 600:../Main.c     **** 
 601:../Main.c     **** 	psxByte = 0;
 1478              		.loc 1 601 0
 1479 00ac 4FF00003 		mov	r3, #0
 1480 00b0 7B60     		str	r3, [r7, #4]
 602:../Main.c     **** 	psxTrocaByte(psxByte);
 1481              		.loc 1 602 0
 1482 00b2 7868     		ldr	r0, [r7, #4]
 1483 00b4 FFF7FEFF 		bl	psxTrocaByte
 603:../Main.c     **** 
 604:../Main.c     **** 	IO004_SetPin(ATT);
 1484              		.loc 1 604 0
 1485 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1486 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1487 00c0 5A68     		ldr	r2, [r3, #4]
 1488 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1489 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1490 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1491 00cc 4FF00101 		mov	r1, #1
 1492 00d0 01FA03F3 		lsl	r3, r1, r3
 1493 00d4 5360     		str	r3, [r2, #4]
 605:../Main.c     **** }
 1494              		.loc 1 605 0
 1495 00d6 07F10807 		add	r7, r7, #8
 1496 00da BD46     		mov	sp, r7
 1497 00dc 80BD     		pop	{r7, pc}
 1498              		.cfi_endproc
 1499              	.LFE127:
 1501 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 1502              		.align	2
 1503              		.global	psxTrocaByte
 1504              		.thumb
 1505              		.thumb_func
 1507              	psxTrocaByte:
 1508              	.LFB128:
 606:../Main.c     **** 
 607:../Main.c     **** int psxTrocaByte(int byteDado)
 608:../Main.c     **** {
 1509              		.loc 1 608 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 16
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              	.LCFI30:
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 84B0     		sub	sp, sp, #16
 1519              	.LCFI31:
 1520              		.cfi_def_cfa_offset 24
 1521 0004 00AF     		add	r7, sp, #0
 1522              	.LCFI32:
 1523              		.cfi_def_cfa_register 7
 1524 0006 7860     		str	r0, [r7, #4]
 609:../Main.c     **** 	int c;
 610:../Main.c     **** 	int aux = 0;
 1525              		.loc 1 610 0
 1526 0008 4FF00003 		mov	r3, #0
 1527 000c BB60     		str	r3, [r7, #8]
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 1528              		.loc 1 611 0
 1529 000e 4FF00003 		mov	r3, #0
 1530 0012 FB60     		str	r3, [r7, #12]
 1531 0014 69E0     		b	.L37
 1532              	.L41:
 612:../Main.c     **** 	{
 613:../Main.c     **** 
 614:../Main.c     **** 		if(byteDado & (0x01<<c))
 1533              		.loc 1 614 0
 1534 0016 7A68     		ldr	r2, [r7, #4]
 1535 0018 FB68     		ldr	r3, [r7, #12]
 1536 001a 42FA03F3 		asr	r3, r2, r3
 1537 001e 03F00103 		and	r3, r3, #1
 1538 0022 002B     		cmp	r3, #0
 1539 0024 0FD0     		beq	.L38
 615:../Main.c     **** 			IO004_SetPin(CMD);
 1540              		.loc 1 615 0
 1541 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1542 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1543 002e 5A68     		ldr	r2, [r3, #4]
 1544 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1545 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1546 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1547 003a 4FF00101 		mov	r1, #1
 1548 003e 01FA03F3 		lsl	r3, r1, r3
 1549 0042 5360     		str	r3, [r2, #4]
 1550 0044 0EE0     		b	.L39
 1551              	.L38:
 616:../Main.c     **** 		else
 617:../Main.c     **** 			IO004_ResetPin(CMD);
 1552              		.loc 1 617 0
 1553 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1554 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1555 004e 5A68     		ldr	r2, [r3, #4]
 1556 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1557 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1558 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1559 005a 4FF48031 		mov	r1, #65536
 1560 005e 01FA03F3 		lsl	r3, r1, r3
 1561 0062 5360     		str	r3, [r2, #4]
 1562              	.L39:
 618:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 1563              		.loc 1 618 0
 1564 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1565 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1566 006c 5A68     		ldr	r2, [r3, #4]
 1567 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1568 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1569 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1570 0078 4FF48031 		mov	r1, #65536
 1571 007c 01FA03F3 		lsl	r3, r1, r3
 1572 0080 5360     		str	r3, [r2, #4]
 619:../Main.c     **** 		delay(tempoClk);
 1573              		.loc 1 619 0
 1574 0082 4FF49670 		mov	r0, #300
 1575 0086 FFF7FEFF 		bl	delay
 620:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 1576              		.loc 1 620 0
 1577 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 1578 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 1579 0092 5B68     		ldr	r3, [r3, #4]
 1580 0094 5A6A     		ldr	r2, [r3, #36]
 1581 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 1582 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 1583 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1584 00a0 22FA03F3 		lsr	r3, r2, r3
 1585 00a4 03F00103 		and	r3, r3, #1
 1586 00a8 002B     		cmp	r3, #0
 1587 00aa 07D1     		bne	.L40
 621:../Main.c     **** 			aux = aux | (1 << c);
 1588              		.loc 1 621 0
 1589 00ac 4FF00102 		mov	r2, #1
 1590 00b0 FB68     		ldr	r3, [r7, #12]
 1591 00b2 02FA03F3 		lsl	r3, r2, r3
 1592 00b6 BA68     		ldr	r2, [r7, #8]
 1593 00b8 1343     		orrs	r3, r3, r2
 1594 00ba BB60     		str	r3, [r7, #8]
 1595              	.L40:
 622:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 1596              		.loc 1 622 0
 1597 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1598 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1599 00c4 5A68     		ldr	r2, [r3, #4]
 1600 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1601 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1602 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1603 00d0 4FF00101 		mov	r1, #1
 1604 00d4 01FA03F3 		lsl	r3, r1, r3
 1605 00d8 5360     		str	r3, [r2, #4]
 623:../Main.c     **** 		delay(tempoClk);
 1606              		.loc 1 623 0
 1607 00da 4FF49670 		mov	r0, #300
 1608 00de FFF7FEFF 		bl	delay
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 1609              		.loc 1 611 0
 1610 00e2 FB68     		ldr	r3, [r7, #12]
 1611 00e4 03F10103 		add	r3, r3, #1
 1612 00e8 FB60     		str	r3, [r7, #12]
 1613              	.L37:
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 1614              		.loc 1 611 0 is_stmt 0 discriminator 1
 1615 00ea FB68     		ldr	r3, [r7, #12]
 1616 00ec 072B     		cmp	r3, #7
 1617 00ee 92DD     		ble	.L41
 624:../Main.c     **** 	}
 625:../Main.c     **** 	IO004_SetPin(CMD);
 1618              		.loc 1 625 0 is_stmt 1
 1619 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1620 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1621 00f8 5A68     		ldr	r2, [r3, #4]
 1622 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1623 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1624 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1625 0104 4FF00101 		mov	r1, #1
 1626 0108 01FA03F3 		lsl	r3, r1, r3
 1627 010c 5360     		str	r3, [r2, #4]
 626:../Main.c     **** 	delay(tempoEntreByte);
 1628              		.loc 1 626 0
 1629 010e 4FF06400 		mov	r0, #100
 1630 0112 FFF7FEFF 		bl	delay
 627:../Main.c     **** 	return aux;
 1631              		.loc 1 627 0
 1632 0116 BB68     		ldr	r3, [r7, #8]
 628:../Main.c     **** }
 1633              		.loc 1 628 0
 1634 0118 1846     		mov	r0, r3
 1635 011a 07F11007 		add	r7, r7, #16
 1636 011e BD46     		mov	sp, r7
 1637 0120 80BD     		pop	{r7, pc}
 1638              		.cfi_endproc
 1639              	.LFE128:
 1641 0122 00BF     		.section	.text.delay,"ax",%progbits
 1642              		.align	2
 1643              		.global	delay
 1644              		.thumb
 1645              		.thumb_func
 1647              	delay:
 1648              	.LFB129:
 629:../Main.c     **** //void psxLeControle()
 630:../Main.c     **** //{
 631:../Main.c     **** //	int psxByte = 0;
 632:../Main.c     **** //	int psxCont;
 633:../Main.c     **** //
 634:../Main.c     **** //	IO004_SetPin(CMD);
 635:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 636:../Main.c     **** //	IO004_ResetPin(ATT);
 637:../Main.c     **** //	delay(tempoInicio);
 638:../Main.c     **** //
 639:../Main.c     **** //	psxByte = 1;
 640:../Main.c     **** //	psxGravaByte(psxByte);
 641:../Main.c     **** //
 642:../Main.c     **** //	psxByte = 66;
 643:../Main.c     **** //	psxGravaByte(psxByte);
 644:../Main.c     **** //
 645:../Main.c     **** //	psxByte = 0;
 646:../Main.c     **** //	psxGravaByte(psxByte);
 647:../Main.c     **** //
 648:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 649:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 650:../Main.c     **** //
 651:../Main.c     **** //	IO004_SetPin(ATT);
 652:../Main.c     **** //}
 653:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 654:../Main.c     **** //{
 655:../Main.c     **** //	int c;
 656:../Main.c     **** //	for (c=0;c<=7;c++)
 657:../Main.c     **** //	{
 658:../Main.c     **** //		if(byteDado & (0x01<<c))
 659:../Main.c     **** //			IO004_SetPin(CMD);
 660:../Main.c     **** //		else
 661:../Main.c     **** //			IO004_ResetPin(CMD);
 662:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 663:../Main.c     **** //		delay(tempoClk);
 664:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 665:../Main.c     **** //		delay(tempoClk);
 666:../Main.c     **** //	}
 667:../Main.c     **** //	IO004_SetPin(CMD);
 668:../Main.c     **** //	delay(tempoEntreByte);
 669:../Main.c     **** //}
 670:../Main.c     **** //int psxLeByte()
 671:../Main.c     **** //{
 672:../Main.c     **** //	int aux = 0;
 673:../Main.c     **** //	int c;
 674:../Main.c     **** //
 675:../Main.c     **** //	for (c=0;c<=7;c++)
 676:../Main.c     **** //	{
 677:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 678:../Main.c     **** //		delay(tempoClk);
 679:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 680:../Main.c     **** //	  		  aux = aux | (1 << c);
 681:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 682:../Main.c     **** //	  	delay(tempoClk);
 683:../Main.c     **** //	}
 684:../Main.c     **** //	delay(tempoEntreByte);
 685:../Main.c     **** //	return (aux);
 686:../Main.c     **** //}
 687:../Main.c     **** 
 688:../Main.c     **** /***************************************************/
 689:../Main.c     **** /*****************FUNCOES GERAIS********************/
 690:../Main.c     **** /***************************************************/
 691:../Main.c     **** 
 692:../Main.c     **** void delay(long unsigned int i)
 693:../Main.c     **** {
 1649              		.loc 1 693 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 8
 1652              		@ frame_needed = 1, uses_anonymous_args = 0
 1653              		@ link register save eliminated.
 1654 0000 80B4     		push	{r7}
 1655              	.LCFI33:
 1656              		.cfi_def_cfa_offset 4
 1657              		.cfi_offset 7, -4
 1658 0002 83B0     		sub	sp, sp, #12
 1659              	.LCFI34:
 1660              		.cfi_def_cfa_offset 16
 1661 0004 00AF     		add	r7, sp, #0
 1662              	.LCFI35:
 1663              		.cfi_def_cfa_register 7
 1664 0006 7860     		str	r0, [r7, #4]
 694:../Main.c     **** 	while(i--)
 1665              		.loc 1 694 0
 1666 0008 00E0     		b	.L44
 1667              	.L45:
 1668              	.LBB4:
 1669              	.LBB5:
 1670              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 1671              		.loc 2 327 0
 1672              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 1673 000a 00BF     		nop
 1674              	@ 0 "" 2
 1675              		.thumb
 1676              	.L44:
 1677              	.LBE5:
 1678              	.LBE4:
 1679              		.loc 1 694 0 discriminator 1
 1680 000c 7B68     		ldr	r3, [r7, #4]
 1681 000e 002B     		cmp	r3, #0
 1682 0010 0CBF     		ite	eq
 1683 0012 0023     		moveq	r3, #0
 1684 0014 0123     		movne	r3, #1
 1685 0016 DBB2     		uxtb	r3, r3
 1686 0018 7A68     		ldr	r2, [r7, #4]
 1687 001a 02F1FF32 		add	r2, r2, #-1
 1688 001e 7A60     		str	r2, [r7, #4]
 1689 0020 002B     		cmp	r3, #0
 1690 0022 F2D1     		bne	.L45
 695:../Main.c     **** 	{
 696:../Main.c     **** 		__NOP();
 697:../Main.c     **** 	}
 698:../Main.c     **** }
 1691              		.loc 1 698 0
 1692 0024 07F10C07 		add	r7, r7, #12
 1693 0028 BD46     		mov	sp, r7
 1694 002a 80BC     		pop	{r7}
 1695 002c 7047     		bx	lr
 1696              		.cfi_endproc
 1697              	.LFE129:
 1699 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 1700              		.align	2
 1701              		.global	printByteToInt
 1702              		.thumb
 1703              		.thumb_func
 1705              	printByteToInt:
 1706              	.LFB130:
 699:../Main.c     **** void printByteToInt(char a)
 700:../Main.c     **** {
 1707              		.loc 1 700 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 16
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 1712 0000 80B4     		push	{r7}
 1713              	.LCFI36:
 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 85B0     		sub	sp, sp, #20
 1717              	.LCFI37:
 1718              		.cfi_def_cfa_offset 24
 1719 0004 00AF     		add	r7, sp, #0
 1720              	.LCFI38:
 1721              		.cfi_def_cfa_register 7
 1722 0006 0346     		mov	r3, r0
 1723 0008 FB71     		strb	r3, [r7, #7]
 701:../Main.c     **** 	char c = a%10 + '0';
 1724              		.loc 1 701 0
 1725 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1726 000c 4CF6CD43 		movw	r3, #52429
 1727 0010 CCF6CC43 		movt	r3, 52428
 1728 0014 A3FB0213 		umull	r1, r3, r3, r2
 1729 0018 4FEAD301 		lsr	r1, r3, #3
 1730 001c 0B46     		mov	r3, r1
 1731 001e 4FEA8303 		lsl	r3, r3, #2
 1732 0022 5B18     		adds	r3, r3, r1
 1733 0024 4FEA4303 		lsl	r3, r3, #1
 1734 0028 D31A     		subs	r3, r2, r3
 1735 002a DBB2     		uxtb	r3, r3
 1736 002c 03F13003 		add	r3, r3, #48
 1737 0030 FB73     		strb	r3, [r7, #15]
 702:../Main.c     **** 	a /=10;
 1738              		.loc 1 702 0
 1739 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1740 0034 4CF6CD43 		movw	r3, #52429
 1741 0038 CCF6CC43 		movt	r3, 52428
 1742 003c A3FB0213 		umull	r1, r3, r3, r2
 1743 0040 4FEAD303 		lsr	r3, r3, #3
 1744 0044 FB71     		strb	r3, [r7, #7]
 703:../Main.c     **** 	char d = a%10 + '0';
 1745              		.loc 1 703 0
 1746 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1747 0048 4CF6CD43 		movw	r3, #52429
 1748 004c CCF6CC43 		movt	r3, 52428
 1749 0050 A3FB0213 		umull	r1, r3, r3, r2
 1750 0054 4FEAD301 		lsr	r1, r3, #3
 1751 0058 0B46     		mov	r3, r1
 1752 005a 4FEA8303 		lsl	r3, r3, #2
 1753 005e 5B18     		adds	r3, r3, r1
 1754 0060 4FEA4303 		lsl	r3, r3, #1
 1755 0064 D31A     		subs	r3, r2, r3
 1756 0066 DBB2     		uxtb	r3, r3
 1757 0068 03F13003 		add	r3, r3, #48
 1758 006c BB73     		strb	r3, [r7, #14]
 704:../Main.c     **** 	a /=10;
 1759              		.loc 1 704 0
 1760 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1761 0070 4CF6CD43 		movw	r3, #52429
 1762 0074 CCF6CC43 		movt	r3, 52428
 1763 0078 A3FB0213 		umull	r1, r3, r3, r2
 1764 007c 4FEAD303 		lsr	r3, r3, #3
 1765 0080 FB71     		strb	r3, [r7, #7]
 705:../Main.c     **** 	char e = a%10 + '0';
 1766              		.loc 1 705 0
 1767 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1768 0084 4CF6CD43 		movw	r3, #52429
 1769 0088 CCF6CC43 		movt	r3, 52428
 1770 008c A3FB0213 		umull	r1, r3, r3, r2
 1771 0090 4FEAD301 		lsr	r1, r3, #3
 1772 0094 0B46     		mov	r3, r1
 1773 0096 4FEA8303 		lsl	r3, r3, #2
 1774 009a 5B18     		adds	r3, r3, r1
 1775 009c 4FEA4303 		lsl	r3, r3, #1
 1776 00a0 D31A     		subs	r3, r2, r3
 1777 00a2 DBB2     		uxtb	r3, r3
 1778 00a4 03F13003 		add	r3, r3, #48
 1779 00a8 7B73     		strb	r3, [r7, #13]
 706:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 1780              		.loc 1 706 0
 1781 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 1782 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 1783 00b2 1B68     		ldr	r3, [r3, #0]
 1784 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1785 00b6 C3F88021 		str	r2, [r3, #384]
 707:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 1786              		.loc 1 707 0
 1787 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 1788 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 1789 00c2 1B68     		ldr	r3, [r3, #0]
 1790 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 1791 00c6 C3F88021 		str	r2, [r3, #384]
 708:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 1792              		.loc 1 708 0
 1793 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 1794 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 1795 00d2 1B68     		ldr	r3, [r3, #0]
 1796 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1797 00d6 C3F88021 		str	r2, [r3, #384]
 709:../Main.c     **** 
 710:../Main.c     **** }
 1798              		.loc 1 710 0
 1799 00da 07F11407 		add	r7, r7, #20
 1800 00de BD46     		mov	sp, r7
 1801 00e0 80BC     		pop	{r7}
 1802 00e2 7047     		bx	lr
 1803              		.cfi_endproc
 1804              	.LFE130:
 1806              		.section	.text.VADC0_C0_2_IRQHandler,"ax",%progbits
 1807              		.align	2
 1808              		.global	VADC0_C0_2_IRQHandler
 1809              		.thumb
 1810              		.thumb_func
 1812              	VADC0_C0_2_IRQHandler:
 1813              	.LFB131:
 711:../Main.c     **** 
 712:../Main.c     **** void adc_event(void)
 713:../Main.c     **** {
 1814              		.loc 1 713 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 1, uses_anonymous_args = 0
 1818 0000 80B5     		push	{r7, lr}
 1819              	.LCFI39:
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 7, -8
 1822              		.cfi_offset 14, -4
 1823 0002 00AF     		add	r7, sp, #0
 1824              	.LCFI40:
 1825              		.cfi_def_cfa_register 7
 714:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 1826              		.loc 1 714 0
 1827 0004 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 1828 0008 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 1829 000c 40F20001 		movw	r1, #:lower16:result
 1830 0010 C0F20001 		movt	r1, #:upper16:result
 1831 0014 FFF7FEFF 		bl	ADC001_GetResult
 715:../Main.c     **** }
 1832              		.loc 1 715 0
 1833 0018 80BD     		pop	{r7, pc}
 1834              		.cfi_endproc
 1835              	.LFE131:
 1837 001a 00BF     		.section	.text.updateButtonStates,"ax",%progbits
 1838              		.align	2
 1839              		.global	updateButtonStates
 1840              		.thumb
 1841              		.thumb_func
 1843              	updateButtonStates:
 1844              	.LFB132:
 716:../Main.c     **** 
 717:../Main.c     **** /***************************************************/
 718:../Main.c     **** /*****************FUNCOES BOTOES********************/
 719:../Main.c     **** /***************************************************/
 720:../Main.c     **** 
 721:../Main.c     **** void updateButtonStates()
 722:../Main.c     **** {
 1845              		.loc 1 722 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 1, uses_anonymous_args = 0
 1849              		@ link register save eliminated.
 1850 0000 80B4     		push	{r7}
 1851              	.LCFI41:
 1852              		.cfi_def_cfa_offset 4
 1853              		.cfi_offset 7, -4
 1854 0002 00AF     		add	r7, sp, #0
 1855              	.LCFI42:
 1856              		.cfi_def_cfa_register 7
 723:../Main.c     **** 	l_um_state_before = l_um_state;
 1857              		.loc 1 723 0
 1858 0004 40F20003 		movw	r3, #:lower16:l_um_state
 1859 0008 C0F20003 		movt	r3, #:upper16:l_um_state
 1860 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1861 000e 40F20003 		movw	r3, #:lower16:l_um_state_before
 1862 0012 C0F20003 		movt	r3, #:upper16:l_um_state_before
 1863 0016 1A70     		strb	r2, [r3, #0]
 724:../Main.c     **** 	l_dois_state_before = l_dois_state;
 1864              		.loc 1 724 0
 1865 0018 40F20003 		movw	r3, #:lower16:l_dois_state
 1866 001c C0F20003 		movt	r3, #:upper16:l_dois_state
 1867 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1868 0022 40F20003 		movw	r3, #:lower16:l_dois_state_before
 1869 0026 C0F20003 		movt	r3, #:upper16:l_dois_state_before
 1870 002a 1A70     		strb	r2, [r3, #0]
 725:../Main.c     **** 	l_tres_state_before = l_tres_state;
 1871              		.loc 1 725 0
 1872 002c 40F20003 		movw	r3, #:lower16:l_tres_state
 1873 0030 C0F20003 		movt	r3, #:upper16:l_tres_state
 1874 0034 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1875 0036 40F20003 		movw	r3, #:lower16:l_tres_state_before
 1876 003a C0F20003 		movt	r3, #:upper16:l_tres_state_before
 1877 003e 1A70     		strb	r2, [r3, #0]
 726:../Main.c     **** 	r_um_state_before = r_um_state;
 1878              		.loc 1 726 0
 1879 0040 40F20003 		movw	r3, #:lower16:r_um_state
 1880 0044 C0F20003 		movt	r3, #:upper16:r_um_state
 1881 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1882 004a 40F20003 		movw	r3, #:lower16:r_um_state_before
 1883 004e C0F20003 		movt	r3, #:upper16:r_um_state_before
 1884 0052 1A70     		strb	r2, [r3, #0]
 727:../Main.c     **** 	r_dois_state_before = r_dois_state;
 1885              		.loc 1 727 0
 1886 0054 40F20003 		movw	r3, #:lower16:r_dois_state
 1887 0058 C0F20003 		movt	r3, #:upper16:r_dois_state
 1888 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1889 005e 40F20003 		movw	r3, #:lower16:r_dois_state_before
 1890 0062 C0F20003 		movt	r3, #:upper16:r_dois_state_before
 1891 0066 1A70     		strb	r2, [r3, #0]
 728:../Main.c     **** 	r_tres_state_before = r_tres_state;
 1892              		.loc 1 728 0
 1893 0068 40F20003 		movw	r3, #:lower16:r_tres_state
 1894 006c C0F20003 		movt	r3, #:upper16:r_tres_state
 1895 0070 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1896 0072 40F20003 		movw	r3, #:lower16:r_tres_state_before
 1897 0076 C0F20003 		movt	r3, #:upper16:r_tres_state_before
 1898 007a 1A70     		strb	r2, [r3, #0]
 729:../Main.c     **** 	cross_state_before = cross_state;
 1899              		.loc 1 729 0
 1900 007c 40F20003 		movw	r3, #:lower16:cross_state
 1901 0080 C0F20003 		movt	r3, #:upper16:cross_state
 1902 0084 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1903 0086 40F20003 		movw	r3, #:lower16:cross_state_before
 1904 008a C0F20003 		movt	r3, #:upper16:cross_state_before
 1905 008e 1A70     		strb	r2, [r3, #0]
 730:../Main.c     **** 	sqr_state_before = sqr_state;
 1906              		.loc 1 730 0
 1907 0090 40F20003 		movw	r3, #:lower16:sqr_state
 1908 0094 C0F20003 		movt	r3, #:upper16:sqr_state
 1909 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1910 009a 40F20003 		movw	r3, #:lower16:sqr_state_before
 1911 009e C0F20003 		movt	r3, #:upper16:sqr_state_before
 1912 00a2 1A70     		strb	r2, [r3, #0]
 731:../Main.c     **** 	triangle_state_before = triangle_state;
 1913              		.loc 1 731 0
 1914 00a4 40F20003 		movw	r3, #:lower16:triangle_state
 1915 00a8 C0F20003 		movt	r3, #:upper16:triangle_state
 1916 00ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1917 00ae 40F20003 		movw	r3, #:lower16:triangle_state_before
 1918 00b2 C0F20003 		movt	r3, #:upper16:triangle_state_before
 1919 00b6 1A70     		strb	r2, [r3, #0]
 732:../Main.c     **** 	circle_state_before = circle_state;
 1920              		.loc 1 732 0
 1921 00b8 40F20003 		movw	r3, #:lower16:circle_state
 1922 00bc C0F20003 		movt	r3, #:upper16:circle_state
 1923 00c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1924 00c2 40F20003 		movw	r3, #:lower16:circle_state_before
 1925 00c6 C0F20003 		movt	r3, #:upper16:circle_state_before
 1926 00ca 1A70     		strb	r2, [r3, #0]
 733:../Main.c     **** 	left_state_before = left_state;
 1927              		.loc 1 733 0
 1928 00cc 40F20003 		movw	r3, #:lower16:left_state
 1929 00d0 C0F20003 		movt	r3, #:upper16:left_state
 1930 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1931 00d6 40F20003 		movw	r3, #:lower16:left_state_before
 1932 00da C0F20003 		movt	r3, #:upper16:left_state_before
 1933 00de 1A70     		strb	r2, [r3, #0]
 734:../Main.c     **** 	right_state_before = right_state;
 1934              		.loc 1 734 0
 1935 00e0 40F20003 		movw	r3, #:lower16:right_state
 1936 00e4 C0F20003 		movt	r3, #:upper16:right_state
 1937 00e8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1938 00ea 40F20003 		movw	r3, #:lower16:right_state_before
 1939 00ee C0F20003 		movt	r3, #:upper16:right_state_before
 1940 00f2 1A70     		strb	r2, [r3, #0]
 735:../Main.c     **** 	up_state_before = up_state;
 1941              		.loc 1 735 0
 1942 00f4 40F20003 		movw	r3, #:lower16:up_state
 1943 00f8 C0F20003 		movt	r3, #:upper16:up_state
 1944 00fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1945 00fe 40F20003 		movw	r3, #:lower16:up_state_before
 1946 0102 C0F20003 		movt	r3, #:upper16:up_state_before
 1947 0106 1A70     		strb	r2, [r3, #0]
 736:../Main.c     **** 	down_state_before = down_state;
 1948              		.loc 1 736 0
 1949 0108 40F20003 		movw	r3, #:lower16:down_state
 1950 010c C0F20003 		movt	r3, #:upper16:down_state
 1951 0110 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1952 0112 40F20003 		movw	r3, #:lower16:down_state_before
 1953 0116 C0F20003 		movt	r3, #:upper16:down_state_before
 1954 011a 1A70     		strb	r2, [r3, #0]
 737:../Main.c     **** 	start_state_before = start_state;
 1955              		.loc 1 737 0
 1956 011c 40F20003 		movw	r3, #:lower16:start_state
 1957 0120 C0F20003 		movt	r3, #:upper16:start_state
 1958 0124 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1959 0126 40F20003 		movw	r3, #:lower16:start_state_before
 1960 012a C0F20003 		movt	r3, #:upper16:start_state_before
 1961 012e 1A70     		strb	r2, [r3, #0]
 738:../Main.c     **** 	select_state_before = select_state;
 1962              		.loc 1 738 0
 1963 0130 40F20003 		movw	r3, #:lower16:select_state
 1964 0134 C0F20003 		movt	r3, #:upper16:select_state
 1965 0138 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1966 013a 40F20003 		movw	r3, #:lower16:select_state_before
 1967 013e C0F20003 		movt	r3, #:upper16:select_state_before
 1968 0142 1A70     		strb	r2, [r3, #0]
 739:../Main.c     **** 
 740:../Main.c     **** 	l_um_state = 0;
 1969              		.loc 1 740 0
 1970 0144 40F20003 		movw	r3, #:lower16:l_um_state
 1971 0148 C0F20003 		movt	r3, #:upper16:l_um_state
 1972 014c 4FF00002 		mov	r2, #0
 1973 0150 1A70     		strb	r2, [r3, #0]
 741:../Main.c     **** 	l_dois_state = 0;
 1974              		.loc 1 741 0
 1975 0152 40F20003 		movw	r3, #:lower16:l_dois_state
 1976 0156 C0F20003 		movt	r3, #:upper16:l_dois_state
 1977 015a 4FF00002 		mov	r2, #0
 1978 015e 1A70     		strb	r2, [r3, #0]
 742:../Main.c     **** 	l_tres_state = 0;
 1979              		.loc 1 742 0
 1980 0160 40F20003 		movw	r3, #:lower16:l_tres_state
 1981 0164 C0F20003 		movt	r3, #:upper16:l_tres_state
 1982 0168 4FF00002 		mov	r2, #0
 1983 016c 1A70     		strb	r2, [r3, #0]
 743:../Main.c     **** 	r_um_state = 0;
 1984              		.loc 1 743 0
 1985 016e 40F20003 		movw	r3, #:lower16:r_um_state
 1986 0172 C0F20003 		movt	r3, #:upper16:r_um_state
 1987 0176 4FF00002 		mov	r2, #0
 1988 017a 1A70     		strb	r2, [r3, #0]
 744:../Main.c     **** 	r_dois_state = 0;
 1989              		.loc 1 744 0
 1990 017c 40F20003 		movw	r3, #:lower16:r_dois_state
 1991 0180 C0F20003 		movt	r3, #:upper16:r_dois_state
 1992 0184 4FF00002 		mov	r2, #0
 1993 0188 1A70     		strb	r2, [r3, #0]
 745:../Main.c     **** 	r_tres_state = 0;
 1994              		.loc 1 745 0
 1995 018a 40F20003 		movw	r3, #:lower16:r_tres_state
 1996 018e C0F20003 		movt	r3, #:upper16:r_tres_state
 1997 0192 4FF00002 		mov	r2, #0
 1998 0196 1A70     		strb	r2, [r3, #0]
 746:../Main.c     **** 	cross_state = 0;
 1999              		.loc 1 746 0
 2000 0198 40F20003 		movw	r3, #:lower16:cross_state
 2001 019c C0F20003 		movt	r3, #:upper16:cross_state
 2002 01a0 4FF00002 		mov	r2, #0
 2003 01a4 1A70     		strb	r2, [r3, #0]
 747:../Main.c     **** 	sqr_state = 0;
 2004              		.loc 1 747 0
 2005 01a6 40F20003 		movw	r3, #:lower16:sqr_state
 2006 01aa C0F20003 		movt	r3, #:upper16:sqr_state
 2007 01ae 4FF00002 		mov	r2, #0
 2008 01b2 1A70     		strb	r2, [r3, #0]
 748:../Main.c     **** 	triangle_state = 0;
 2009              		.loc 1 748 0
 2010 01b4 40F20003 		movw	r3, #:lower16:triangle_state
 2011 01b8 C0F20003 		movt	r3, #:upper16:triangle_state
 2012 01bc 4FF00002 		mov	r2, #0
 2013 01c0 1A70     		strb	r2, [r3, #0]
 749:../Main.c     **** 	circle_state = 0;
 2014              		.loc 1 749 0
 2015 01c2 40F20003 		movw	r3, #:lower16:circle_state
 2016 01c6 C0F20003 		movt	r3, #:upper16:circle_state
 2017 01ca 4FF00002 		mov	r2, #0
 2018 01ce 1A70     		strb	r2, [r3, #0]
 750:../Main.c     **** 	left_state = 0;
 2019              		.loc 1 750 0
 2020 01d0 40F20003 		movw	r3, #:lower16:left_state
 2021 01d4 C0F20003 		movt	r3, #:upper16:left_state
 2022 01d8 4FF00002 		mov	r2, #0
 2023 01dc 1A70     		strb	r2, [r3, #0]
 751:../Main.c     **** 	right_state = 0;
 2024              		.loc 1 751 0
 2025 01de 40F20003 		movw	r3, #:lower16:right_state
 2026 01e2 C0F20003 		movt	r3, #:upper16:right_state
 2027 01e6 4FF00002 		mov	r2, #0
 2028 01ea 1A70     		strb	r2, [r3, #0]
 752:../Main.c     **** 	up_state = 0;
 2029              		.loc 1 752 0
 2030 01ec 40F20003 		movw	r3, #:lower16:up_state
 2031 01f0 C0F20003 		movt	r3, #:upper16:up_state
 2032 01f4 4FF00002 		mov	r2, #0
 2033 01f8 1A70     		strb	r2, [r3, #0]
 753:../Main.c     **** 	down_state = 0;
 2034              		.loc 1 753 0
 2035 01fa 40F20003 		movw	r3, #:lower16:down_state
 2036 01fe C0F20003 		movt	r3, #:upper16:down_state
 2037 0202 4FF00002 		mov	r2, #0
 2038 0206 1A70     		strb	r2, [r3, #0]
 754:../Main.c     **** 	start_state = 0;
 2039              		.loc 1 754 0
 2040 0208 40F20003 		movw	r3, #:lower16:start_state
 2041 020c C0F20003 		movt	r3, #:upper16:start_state
 2042 0210 4FF00002 		mov	r2, #0
 2043 0214 1A70     		strb	r2, [r3, #0]
 755:../Main.c     **** 	select_state = 0;
 2044              		.loc 1 755 0
 2045 0216 40F20003 		movw	r3, #:lower16:select_state
 2046 021a C0F20003 		movt	r3, #:upper16:select_state
 2047 021e 4FF00002 		mov	r2, #0
 2048 0222 1A70     		strb	r2, [r3, #0]
 756:../Main.c     **** }
 2049              		.loc 1 756 0
 2050 0224 BD46     		mov	sp, r7
 2051 0226 80BC     		pop	{r7}
 2052 0228 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE132:
 2056 022a 00BF     		.section	.text.turbo,"ax",%progbits
 2057              		.align	2
 2058              		.global	turbo
 2059              		.thumb
 2060              		.thumb_func
 2062              	turbo:
 2063              	.LFB133:
 757:../Main.c     **** 
 758:../Main.c     **** void turbo(void)
 759:../Main.c     **** {
 2064              		.loc 1 759 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0000 80B4     		push	{r7}
 2070              	.LCFI43:
 2071              		.cfi_def_cfa_offset 4
 2072              		.cfi_offset 7, -4
 2073 0002 00AF     		add	r7, sp, #0
 2074              	.LCFI44:
 2075              		.cfi_def_cfa_register 7
 760:../Main.c     **** 	pwm_max = 95;
 2076              		.loc 1 760 0
 2077 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2078 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2079 000c 4FF05F02 		mov	r2, #95
 2080 0010 1A70     		strb	r2, [r3, #0]
 761:../Main.c     **** }
 2081              		.loc 1 761 0
 2082 0012 BD46     		mov	sp, r7
 2083 0014 80BC     		pop	{r7}
 2084 0016 7047     		bx	lr
 2085              		.cfi_endproc
 2086              	.LFE133:
 2088              		.section	.text.shunt,"ax",%progbits
 2089              		.align	2
 2090              		.global	shunt
 2091              		.thumb
 2092              		.thumb_func
 2094              	shunt:
 2095              	.LFB134:
 762:../Main.c     **** 
 763:../Main.c     **** void shunt(void)
 764:../Main.c     **** {
 2096              		.loc 1 764 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 0
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101 0000 80B4     		push	{r7}
 2102              	.LCFI45:
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0002 00AF     		add	r7, sp, #0
 2106              	.LCFI46:
 2107              		.cfi_def_cfa_register 7
 765:../Main.c     **** 	pwm_max = 40;
 2108              		.loc 1 765 0
 2109 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2110 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2111 000c 4FF02802 		mov	r2, #40
 2112 0010 1A70     		strb	r2, [r3, #0]
 766:../Main.c     **** }
 2113              		.loc 1 766 0
 2114 0012 BD46     		mov	sp, r7
 2115 0014 80BC     		pop	{r7}
 2116 0016 7047     		bx	lr
 2117              		.cfi_endproc
 2118              	.LFE134:
 2120              		.section	.text.flip,"ax",%progbits
 2121              		.align	2
 2122              		.global	flip
 2123              		.thumb
 2124              		.thumb_func
 2126              	flip:
 2127              	.LFB135:
 767:../Main.c     **** 
 768:../Main.c     **** void flip(void)
 769:../Main.c     **** {
 2128              		.loc 1 769 0
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 1, uses_anonymous_args = 0
 2132              		@ link register save eliminated.
 2133 0000 80B4     		push	{r7}
 2134              	.LCFI47:
 2135              		.cfi_def_cfa_offset 4
 2136              		.cfi_offset 7, -4
 2137 0002 00AF     		add	r7, sp, #0
 2138              	.LCFI48:
 2139              		.cfi_def_cfa_register 7
 770:../Main.c     **** 	flipped = !flipped;
 2140              		.loc 1 770 0
 2141 0004 40F20003 		movw	r3, #:lower16:flipped
 2142 0008 C0F20003 		movt	r3, #:upper16:flipped
 2143 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2144 000e 002B     		cmp	r3, #0
 2145 0010 14BF     		ite	ne
 2146 0012 0023     		movne	r3, #0
 2147 0014 0123     		moveq	r3, #1
 2148 0016 DBB2     		uxtb	r3, r3
 2149 0018 1A46     		mov	r2, r3
 2150 001a 40F20003 		movw	r3, #:lower16:flipped
 2151 001e C0F20003 		movt	r3, #:upper16:flipped
 2152 0022 1A70     		strb	r2, [r3, #0]
 771:../Main.c     **** }
 2153              		.loc 1 771 0
 2154 0024 BD46     		mov	sp, r7
 2155 0026 80BC     		pop	{r7}
 2156 0028 7047     		bx	lr
 2157              		.cfi_endproc
 2158              	.LFE135:
 2160 002a 00BF     		.text
 2161              	.Letext0:
 2162              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2163              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2164              		.file 5 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2165              		.file 6 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2166              		.file 7 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2167              		.file 8 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2168              		.file 9 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2169              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2170              		.file 11 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
 2171              		.file 12 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
 2172              		.file 13 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:24     .bss:00000000 l_um
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:21     .bss:00000000 $d
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:30     .bss:00000004 l_dois
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:36     .bss:00000008 l_tres
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:42     .bss:0000000c r_um
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:48     .bss:00000010 r_dois
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:54     .bss:00000014 r_tres
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:60     .bss:00000018 cross
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:66     .bss:0000001c sqr
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:72     .bss:00000020 triangle
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:78     .bss:00000024 circle
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:84     .bss:00000028 left
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:90     .bss:0000002c right
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:96     .bss:00000030 up
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:102    .bss:00000034 down
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:108    .bss:00000038 start
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:114    .bss:0000003c select
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:119    .bss:00000040 l_um_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:124    .bss:00000041 l_dois_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:129    .bss:00000042 l_tres_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:134    .bss:00000043 r_um_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:139    .bss:00000044 r_dois_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:144    .bss:00000045 r_tres_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:149    .bss:00000046 cross_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:154    .bss:00000047 sqr_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:159    .bss:00000048 triangle_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:164    .bss:00000049 circle_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:169    .bss:0000004a left_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:174    .bss:0000004b right_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:179    .bss:0000004c up_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:184    .bss:0000004d down_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:189    .bss:0000004e start_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:194    .bss:0000004f select_state
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:199    .bss:00000050 l_um_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:204    .bss:00000051 l_dois_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:209    .bss:00000052 l_tres_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:214    .bss:00000053 r_um_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:219    .bss:00000054 r_dois_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:224    .bss:00000055 r_tres_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:229    .bss:00000056 cross_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:234    .bss:00000057 sqr_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:239    .bss:00000058 triangle_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:244    .bss:00000059 circle_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:249    .bss:0000005a left_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:254    .bss:0000005b right_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:259    .bss:0000005c up_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:264    .bss:0000005d down_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:269    .bss:0000005e start_state_before
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:274    .bss:0000005f select_state_before
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:282    .data:00000000 data_R
                            *COM*:00000001 data_E
                            *COM*:00000001 psx_status
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:290    .bss:00000060 flipped
                            *COM*:00000004 result
                            *COM*:00000001 pwm_max
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:295    .text.main:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:300    .text.main:00000000 main
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:486    .text.configure_E:00000000 configure_E
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:690    .text.write_E:00000000 write_E
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:328    .text.read_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:333    .text.read_R:00000000 read_R
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1647   .text.delay:00000000 delay
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:435    .text.pulse_R:00000000 pulse_R
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:430    .text.pulse_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:481    .text.configure_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:685    .text.write_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:873    .text.psxConfiguraControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:878    .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:909    .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1015   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1145   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:904    .text.psxEnterConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1507   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1010   .text.psxSetAnalogMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1140   .text.psxExitConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1270   .text.psxLeControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1275   .text.psxLeControle:00000000 psxLeControle
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1391   .text.psxHandShake:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1396   .text.psxHandShake:00000000 psxHandShake
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1502   .text.psxTrocaByte:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1642   .text.delay:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1700   .text.printByteToInt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1705   .text.printByteToInt:00000000 printByteToInt
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1807   .text.VADC0_C0_2_IRQHandler:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1812   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1838   .text.updateButtonStates:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:1843   .text.updateButtonStates:00000000 updateButtonStates
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2057   .text.turbo:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2062   .text.turbo:00000000 turbo
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2089   .text.shunt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2094   .text.shunt:00000000 shunt
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2121   .text.flip:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccYZEeUh.s:2126   .text.flip:00000000 flip
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
ADC001_Handle0
ADC001_GetResult
