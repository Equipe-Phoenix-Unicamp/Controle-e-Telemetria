   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.bss
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.space	4
  26              		.global	l_dois
  27              		.align	2
  30              	l_dois:
  31 0004 00000000 		.space	4
  32              		.global	l_tres
  33              		.align	2
  36              	l_tres:
  37 0008 00000000 		.space	4
  38              		.global	r_um
  39              		.align	2
  42              	r_um:
  43 000c 00000000 		.space	4
  44              		.global	r_dois
  45              		.align	2
  48              	r_dois:
  49 0010 00000000 		.space	4
  50              		.global	r_tres
  51              		.align	2
  54              	r_tres:
  55 0014 00000000 		.space	4
  56              		.global	cross
  57              		.align	2
  60              	cross:
  61 0018 00000000 		.space	4
  62              		.global	sqr
  63              		.align	2
  66              	sqr:
  67 001c 00000000 		.space	4
  68              		.global	triangle
  69              		.align	2
  72              	triangle:
  73 0020 00000000 		.space	4
  74              		.global	circle
  75              		.align	2
  78              	circle:
  79 0024 00000000 		.space	4
  80              		.global	left
  81              		.align	2
  84              	left:
  85 0028 00000000 		.space	4
  86              		.global	right
  87              		.align	2
  90              	right:
  91 002c 00000000 		.space	4
  92              		.global	up
  93              		.align	2
  96              	up:
  97 0030 00000000 		.space	4
  98              		.global	down
  99              		.align	2
 102              	down:
 103 0034 00000000 		.space	4
 104              		.global	start
 105              		.align	2
 108              	start:
 109 0038 00000000 		.space	4
 110              		.global	select
 111              		.align	2
 114              	select:
 115 003c 00000000 		.space	4
 116              		.global	l_um_state
 119              	l_um_state:
 120 0040 00       		.space	1
 121              		.global	l_dois_state
 124              	l_dois_state:
 125 0041 00       		.space	1
 126              		.global	l_tres_state
 129              	l_tres_state:
 130 0042 00       		.space	1
 131              		.global	r_um_state
 134              	r_um_state:
 135 0043 00       		.space	1
 136              		.global	r_dois_state
 139              	r_dois_state:
 140 0044 00       		.space	1
 141              		.global	r_tres_state
 144              	r_tres_state:
 145 0045 00       		.space	1
 146              		.global	cross_state
 149              	cross_state:
 150 0046 00       		.space	1
 151              		.global	sqr_state
 154              	sqr_state:
 155 0047 00       		.space	1
 156              		.global	triangle_state
 159              	triangle_state:
 160 0048 00       		.space	1
 161              		.global	circle_state
 164              	circle_state:
 165 0049 00       		.space	1
 166              		.global	left_state
 169              	left_state:
 170 004a 00       		.space	1
 171              		.global	right_state
 174              	right_state:
 175 004b 00       		.space	1
 176              		.global	up_state
 179              	up_state:
 180 004c 00       		.space	1
 181              		.global	down_state
 184              	down_state:
 185 004d 00       		.space	1
 186              		.global	start_state
 189              	start_state:
 190 004e 00       		.space	1
 191              		.global	select_state
 194              	select_state:
 195 004f 00       		.space	1
 196              		.global	l_um_state_before
 199              	l_um_state_before:
 200 0050 00       		.space	1
 201              		.global	l_dois_state_before
 204              	l_dois_state_before:
 205 0051 00       		.space	1
 206              		.global	l_tres_state_before
 209              	l_tres_state_before:
 210 0052 00       		.space	1
 211              		.global	r_um_state_before
 214              	r_um_state_before:
 215 0053 00       		.space	1
 216              		.global	r_dois_state_before
 219              	r_dois_state_before:
 220 0054 00       		.space	1
 221              		.global	r_tres_state_before
 224              	r_tres_state_before:
 225 0055 00       		.space	1
 226              		.global	cross_state_before
 229              	cross_state_before:
 230 0056 00       		.space	1
 231              		.global	sqr_state_before
 234              	sqr_state_before:
 235 0057 00       		.space	1
 236              		.global	triangle_state_before
 239              	triangle_state_before:
 240 0058 00       		.space	1
 241              		.global	circle_state_before
 244              	circle_state_before:
 245 0059 00       		.space	1
 246              		.global	left_state_before
 249              	left_state_before:
 250 005a 00       		.space	1
 251              		.global	right_state_before
 254              	right_state_before:
 255 005b 00       		.space	1
 256              		.global	up_state_before
 259              	up_state_before:
 260 005c 00       		.space	1
 261              		.global	down_state_before
 264              	down_state_before:
 265 005d 00       		.space	1
 266              		.global	start_state_before
 269              	start_state_before:
 270 005e 00       		.space	1
 271              		.global	select_state_before
 274              	select_state_before:
 275 005f 00       		.space	1
 276              		.comm	psxDado,24,4
 277              		.comm	configuration,15,4
 278              		.global	data_R
 279              		.data
 282              	data_R:
 283 0000 30       		.byte	48
 284              		.comm	data_E,5,4
 285              		.comm	psx_status,1,1
 286              		.global	flipped
 287              		.bss
 290              	flipped:
 291 0060 00       		.space	1
 292              		.comm	result,4,4
 293              		.comm	pwm_max,1,1
 294 0061 000000   		.section	.text.main,"ax",%progbits
 295              		.align	2
 296              		.global	main
 297              		.thumb
 298              		.thumb_func
 300              	main:
 301              	.LFB117:
 302              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     **** BIT 0: BLAH2
  10:../Main.c     **** BIT 1: BUZINA
  11:../Main.c     **** BIT 2: ENABLE
  12:../Main.c     **** BIT 3: ALBH2
  13:../Main.c     **** BIT 4: BLAH1
  14:../Main.c     **** BIT 5: ALBH1
  15:../Main.c     **** */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 3 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 60
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_SEND 5
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0
  52:../Main.c     **** #define	BUZINA		1
  53:../Main.c     **** #define	ENABLE		2
  54:../Main.c     **** #define	ALBH2		3
  55:../Main.c     **** #define	BLAH1		4
  56:../Main.c     **** #define	ALBH1		5
  57:../Main.c     **** //Defines referentes ao transceptor
  58:../Main.c     **** #define CS	 	IO004_Handle1
  59:../Main.c     **** #define CLK1 	IO004_Handle2
  60:../Main.c     **** #define DATA 	IO004_Handle4
  61:../Main.c     **** #define DR1		IO004_Handle5
  62:../Main.c     **** #define CE 		IO004_Handle6
  63:../Main.c     **** //Defines referentes ao controle
  64:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  65:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  66:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  67:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  68:../Main.c     **** //Defines referentes aos delays do controle
  69:../Main.c     **** #define tempoInicio     300
  70:../Main.c     **** #define tempoClk        300
  71:../Main.c     **** #define tempoEntreByte  100
  72:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  73:../Main.c     **** #define LED1 IO004_Handle7
  74:../Main.c     **** #define LED2 IO004_Handle8
  75:../Main.c     **** //Defines dos botoes para realizar as callbacks
  76:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  77:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  78:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  79:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  80:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  81:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  82:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  83:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  84:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  85:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  86:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  87:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  88:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  89:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  90:../Main.c     **** #define START (psxDado[0] & (1<<3))
  91:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  92:../Main.c     **** 
  93:../Main.c     **** /***************************************************/
  94:../Main.c     **** /*********************INCLUDES**********************/
  95:../Main.c     **** /***************************************************/
  96:../Main.c     **** 
  97:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
  98:../Main.c     **** 
  99:../Main.c     **** 
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 102:../Main.c     **** /***************************************************/
 103:../Main.c     **** 
 104:../Main.c     **** void psxLeControle();
 105:../Main.c     **** int psxTrocaByte(int byteDado);
 106:../Main.c     **** int psxLeByte();
 107:../Main.c     **** void delay(long unsigned int i);
 108:../Main.c     **** void pulse_R();
 109:../Main.c     **** void configure_R();
 110:../Main.c     **** void configure_E();
 111:../Main.c     **** void write_E();
 112:../Main.c     **** void read_R();
 113:../Main.c     **** void delay(long unsigned int i);
 114:../Main.c     **** void printByteToInt(char a);
 115:../Main.c     **** void psxConfiguraControle();
 116:../Main.c     **** void psxEnterConfigMode();
 117:../Main.c     **** void psxExitConfigMode();
 118:../Main.c     **** void psxSetAnalogMode();
 119:../Main.c     **** void psxHandShake();
 120:../Main.c     **** void updateButtonStates();
 121:../Main.c     **** 
 122:../Main.c     **** /***************************************************/
 123:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 124:../Main.c     **** /***************************************************/
 125:../Main.c     **** 
 126:../Main.c     **** void (*l_um)(void) = NULL;
 127:../Main.c     **** void (*l_dois)(void) = NULL;
 128:../Main.c     **** void (*l_tres)(void) = NULL;
 129:../Main.c     **** void (*r_um)(void) = NULL;
 130:../Main.c     **** void (*r_dois)(void) = NULL;
 131:../Main.c     **** void (*r_tres)(void) = NULL;
 132:../Main.c     **** void (*cross)(void) = NULL;
 133:../Main.c     **** void (*sqr)(void) = NULL;
 134:../Main.c     **** void (*triangle)(void) = NULL;
 135:../Main.c     **** void (*circle)(void) = NULL;
 136:../Main.c     **** void (*left)(void) = NULL;
 137:../Main.c     **** void (*right)(void) = NULL;
 138:../Main.c     **** void (*up)(void) = NULL;
 139:../Main.c     **** void (*down)(void) = NULL;
 140:../Main.c     **** void (*start)(void) = NULL;
 141:../Main.c     **** void (*select)(void) = NULL;
 142:../Main.c     **** 
 143:../Main.c     **** //Variaveis de controle do joystick
 144:../Main.c     **** BOOLType l_um_state = 0;
 145:../Main.c     **** BOOLType l_dois_state = 0;
 146:../Main.c     **** BOOLType l_tres_state = 0;
 147:../Main.c     **** BOOLType r_um_state = 0;
 148:../Main.c     **** BOOLType r_dois_state = 0;
 149:../Main.c     **** BOOLType r_tres_state = 0;
 150:../Main.c     **** BOOLType cross_state = 0;
 151:../Main.c     **** BOOLType sqr_state = 0;
 152:../Main.c     **** BOOLType triangle_state = 0;
 153:../Main.c     **** BOOLType circle_state = 0;
 154:../Main.c     **** BOOLType left_state = 0;
 155:../Main.c     **** BOOLType right_state = 0;
 156:../Main.c     **** BOOLType up_state = 0;
 157:../Main.c     **** BOOLType down_state = 0;
 158:../Main.c     **** BOOLType start_state = 0;
 159:../Main.c     **** BOOLType select_state = 0;
 160:../Main.c     **** 
 161:../Main.c     **** BOOLType l_um_state_before = 0;
 162:../Main.c     **** BOOLType l_dois_state_before = 0;
 163:../Main.c     **** BOOLType l_tres_state_before = 0;
 164:../Main.c     **** BOOLType r_um_state_before = 0;
 165:../Main.c     **** BOOLType r_dois_state_before = 0;
 166:../Main.c     **** BOOLType r_tres_state_before = 0;
 167:../Main.c     **** BOOLType cross_state_before = 0;
 168:../Main.c     **** BOOLType sqr_state_before = 0;
 169:../Main.c     **** BOOLType triangle_state_before = 0;
 170:../Main.c     **** BOOLType circle_state_before = 0;
 171:../Main.c     **** BOOLType left_state_before = 0;
 172:../Main.c     **** BOOLType right_state_before = 0;
 173:../Main.c     **** BOOLType up_state_before = 0;
 174:../Main.c     **** BOOLType down_state_before = 0;
 175:../Main.c     **** BOOLType start_state_before = 0;
 176:../Main.c     **** BOOLType select_state_before = 0;
 177:../Main.c     **** 
 178:../Main.c     **** /***************************************************/
 179:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 180:../Main.c     **** /***************************************************/
 181:../Main.c     **** 
 182:../Main.c     **** int psxDado[6];
 183:../Main.c     **** char configuration[15];
 184:../Main.c     **** char data_R = '0';
 185:../Main.c     **** char data_E[BYTES_TO_SEND];
 186:../Main.c     **** uint8_t psx_status;
 187:../Main.c     **** /*Booleanos de controle para estados do robo*/
 188:../Main.c     **** BOOLType flipped = 0;
 189:../Main.c     **** ADC001_ResultHandleType result;
 190:../Main.c     **** uint8_t pwm_max;
 191:../Main.c     **** 
 192:../Main.c     **** /***************************************************/
 193:../Main.c     **** /***********************MAIN************************/
 194:../Main.c     **** /***************************************************/
 195:../Main.c     **** 
 196:../Main.c     **** int main(void)
 197:../Main.c     **** {
 303              		.loc 1 197 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 16
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 0000 80B5     		push	{r7, lr}
 308              	.LCFI0:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 7, -8
 311              		.cfi_offset 14, -4
 312 0002 84B0     		sub	sp, sp, #16
 313              	.LCFI1:
 314              		.cfi_def_cfa_offset 24
 315 0004 00AF     		add	r7, sp, #0
 316              	.LCFI2:
 317              		.cfi_def_cfa_register 7
 198:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 199:../Main.c     **** 	PORT0->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 318              		.loc 1 199 0
 319 0006 4FF40043 		mov	r3, #32768
 320 000a C4F60203 		movt	r3, 18434
 321 000e 4FF40042 		mov	r2, #32768
 322 0012 C4F60202 		movt	r2, 18434
 323 0016 526F     		ldr	r2, [r2, #116]
 324 0018 22F44042 		bic	r2, r2, #49152
 325 001c 5A67     		str	r2, [r3, #116]
 200:../Main.c     **** 	PORT0->HWSEL |= 0 << 14;
 326              		.loc 1 200 0
 327 001e 4FF40043 		mov	r3, #32768
 328 0022 C4F60203 		movt	r3, 18434
 329 0026 4FF40042 		mov	r2, #32768
 330 002a C4F60202 		movt	r2, 18434
 331 002e 526F     		ldr	r2, [r2, #116]
 332 0030 5A67     		str	r2, [r3, #116]
 201:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
 333              		.loc 1 201 0
 334 0032 FFF7FEFF 		bl	DAVE_Init
 202:../Main.c     **** 	//PORT0->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 203:../Main.c     **** 	//PORT0->HWSEL |= 0 << 14;
 204:../Main.c     **** 	/*Etapa de inicializacao*/
 205:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 335              		.loc 1 205 0
 336 0036 FFF7FEFF 		bl	configure_E
 206:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 207:../Main.c     **** 	//IO004_SetPin(LED2);
 208:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 209:../Main.c     **** 
 210:../Main.c     **** 	psxHandShake();
 337              		.loc 1 210 0
 338 003a FFF7FEFF 		bl	psxHandShake
 211:../Main.c     **** 	psxConfiguraControle();
 339              		.loc 1 211 0
 340 003e FFF7FEFF 		bl	psxConfiguraControle
 341              	.L38:
 342              	.LBB4:
 212:../Main.c     **** 	/*Loop do controle*/
 213:../Main.c     **** 	while(1)
 214:../Main.c     **** 	{
 215:../Main.c     **** 		pwm_max = PWM_LIM;
 343              		.loc 1 215 0
 344 0042 40F20003 		movw	r3, #:lower16:pwm_max
 345 0046 C0F20003 		movt	r3, #:upper16:pwm_max
 346 004a 4FF03C02 		mov	r2, #60
 347 004e 1A70     		strb	r2, [r3, #0]
 216:../Main.c     **** 		/*Inicializa o que sera mandado*/
 217:../Main.c     **** 		BOOLType blah2 = 1;
 348              		.loc 1 217 0
 349 0050 4FF00103 		mov	r3, #1
 350 0054 FB73     		strb	r3, [r7, #15]
 218:../Main.c     **** 		BOOLType buzina = 1;
 351              		.loc 1 218 0
 352 0056 4FF00103 		mov	r3, #1
 353 005a FB72     		strb	r3, [r7, #11]
 219:../Main.c     **** 		BOOLType enable = 0;
 354              		.loc 1 219 0
 355 005c 4FF00003 		mov	r3, #0
 356 0060 BB72     		strb	r3, [r7, #10]
 220:../Main.c     **** 		BOOLType albh2 = 1;
 357              		.loc 1 220 0
 358 0062 4FF00103 		mov	r3, #1
 359 0066 BB73     		strb	r3, [r7, #14]
 221:../Main.c     **** 		BOOLType blah1 = 1;
 360              		.loc 1 221 0
 361 0068 4FF00103 		mov	r3, #1
 362 006c 7B73     		strb	r3, [r7, #13]
 222:../Main.c     **** 		BOOLType albh1 = 1;
 363              		.loc 1 222 0
 364 006e 4FF00103 		mov	r3, #1
 365 0072 3B73     		strb	r3, [r7, #12]
 223:../Main.c     **** 		int16_t pow1, pow2;
 224:../Main.c     **** 		/*Le controle*/
 225:../Main.c     **** 		psxLeControle();
 366              		.loc 1 225 0
 367 0074 FFF7FEFF 		bl	psxLeControle
 226:../Main.c     **** 		if (psx_status != 140)//Nao ta analogico
 368              		.loc 1 226 0
 369 0078 40F20003 		movw	r3, #:lower16:psx_status
 370 007c C0F20003 		movt	r3, #:upper16:psx_status
 371 0080 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 372 0082 8C2B     		cmp	r3, #140
 373 0084 05D0     		beq	.L2
 227:../Main.c     **** 		{
 228:../Main.c     **** 			psxHandShake();
 374              		.loc 1 228 0
 375 0086 FFF7FEFF 		bl	psxHandShake
 229:../Main.c     **** 			psxConfiguraControle();
 376              		.loc 1 229 0
 377 008a FFF7FEFF 		bl	psxConfiguraControle
 230:../Main.c     **** 			continue;
 378              		.loc 1 230 0
 379 008e 00BF     		nop
 380              	.LBE4:
 231:../Main.c     **** 		}
 232:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 233:../Main.c     **** 		if (START && start)
 234:../Main.c     **** 		{
 235:../Main.c     **** 			start_state = 1;
 236:../Main.c     **** 			start();
 237:../Main.c     **** 		}
 238:../Main.c     **** 		if (SELECT && select)
 239:../Main.c     **** 		{
 240:../Main.c     **** 			select_state = 1;
 241:../Main.c     **** 			select();
 242:../Main.c     **** 		}
 243:../Main.c     **** 		if (L_DOIS && l_dois)
 244:../Main.c     **** 		{
 245:../Main.c     **** 			l_dois_state = 1;
 246:../Main.c     **** 			l_dois();
 247:../Main.c     **** 		}
 248:../Main.c     **** 		if (L_UM && l_um)
 249:../Main.c     **** 		{
 250:../Main.c     **** 			l_um_state = 1;
 251:../Main.c     **** 			l_um();
 252:../Main.c     **** 		}
 253:../Main.c     **** 		if (L_TRES && l_tres)
 254:../Main.c     **** 		{
 255:../Main.c     **** 			l_tres_state = 1;
 256:../Main.c     **** 			l_tres();
 257:../Main.c     **** 		}
 258:../Main.c     **** 		if (R_UM && r_um)
 259:../Main.c     **** 		{
 260:../Main.c     **** 			r_um_state = 1;
 261:../Main.c     **** 			r_um();
 262:../Main.c     **** 		}
 263:../Main.c     **** 		if (R_DOIS && r_dois)
 264:../Main.c     **** 		{
 265:../Main.c     **** 			r_dois_state = 1;
 266:../Main.c     **** 			r_dois();
 267:../Main.c     **** 		}
 268:../Main.c     **** 		if (R_TRES && r_tres)
 269:../Main.c     **** 		{
 270:../Main.c     **** 			r_tres_state = 1;
 271:../Main.c     **** 			r_tres();
 272:../Main.c     **** 		}
 273:../Main.c     **** 		if (SQR && sqr)
 274:../Main.c     **** 		{
 275:../Main.c     **** 			sqr_state = 1;
 276:../Main.c     **** 			sqr();
 277:../Main.c     **** 		}
 278:../Main.c     **** 		if (TRIANGLE && triangle)
 279:../Main.c     **** 		{
 280:../Main.c     **** 			triangle_state = 1;
 281:../Main.c     **** 			triangle();
 282:../Main.c     **** 		}
 283:../Main.c     **** 		if (CIRCLE && circle)
 284:../Main.c     **** 		{
 285:../Main.c     **** 			circle_state = 1;
 286:../Main.c     **** 			circle();
 287:../Main.c     **** 		}
 288:../Main.c     **** 		if (CROSS && cross)
 289:../Main.c     **** 		{
 290:../Main.c     **** 			cross_state = 1;
 291:../Main.c     **** 			cross();
 292:../Main.c     **** 		}
 293:../Main.c     **** 		if (LEFT && left)
 294:../Main.c     **** 		{
 295:../Main.c     **** 			left_state = 1;
 296:../Main.c     **** 			left();
 297:../Main.c     **** 		}
 298:../Main.c     **** 		if (RIGHT && right)
 299:../Main.c     **** 		{
 300:../Main.c     **** 			right_state = 1;
 301:../Main.c     **** 			right();
 302:../Main.c     **** 		}
 303:../Main.c     **** 		if (UP && up)
 304:../Main.c     **** 		{
 305:../Main.c     **** 			up_state = 1;
 306:../Main.c     **** 			up();
 307:../Main.c     **** 		}
 308:../Main.c     **** 		if (DOWN && down)
 309:../Main.c     **** 		{
 310:../Main.c     **** 			down_state = 1;
 311:../Main.c     **** 			down();
 312:../Main.c     **** 		}
 313:../Main.c     **** 
 314:../Main.c     **** 		//ADC001_GenerateLoadEvent(&ADC001_Handle0);
 315:../Main.c     **** 
 316:../Main.c     **** 		data_E[0] = 0;
 317:../Main.c     **** 		//if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar qua
 318:../Main.c     **** 		pow1 = (psxDado[5]-127);//<<1; //Analog esq //Subtrai 127 para saber o sentido
 319:../Main.c     **** 		pow2 = (psxDado[3]-127);//<<1;
 320:../Main.c     **** 		data_E[3] = 0;
 321:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 322:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 323:../Main.c     **** 		{
 324:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 325:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 326:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 327:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 329:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 331:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 332:../Main.c     **** 		}
 333:../Main.c     **** 		else
 334:../Main.c     **** 		{
 335:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 336:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 337:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 338:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 340:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 342:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 343:../Main.c     **** 		}
 344:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 345:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2) | (albh1 << ALBH1) | (albh2 << ALBH2)
 346:../Main.c     **** 		data_E[4] = result.Result>>4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bits
 347:../Main.c     **** 
 348:../Main.c     **** 		write_E();
 349:../Main.c     **** 		updateButtonStates();
 350:../Main.c     **** 	}
 381              		.loc 1 350 0
 382 0090 D7E7     		b	.L38
 383              	.L2:
 384              	.LBB5:
 233:../Main.c     **** 		if (START && start)
 385              		.loc 1 233 0
 386 0092 40F20003 		movw	r3, #:lower16:psxDado
 387 0096 C0F20003 		movt	r3, #:upper16:psxDado
 388 009a 1B68     		ldr	r3, [r3, #0]
 389 009c 03F00803 		and	r3, r3, #8
 390 00a0 002B     		cmp	r3, #0
 391 00a2 13D0     		beq	.L4
 233:../Main.c     **** 		if (START && start)
 392              		.loc 1 233 0 is_stmt 0 discriminator 1
 393 00a4 40F20003 		movw	r3, #:lower16:start
 394 00a8 C0F20003 		movt	r3, #:upper16:start
 395 00ac 1B68     		ldr	r3, [r3, #0]
 396 00ae 002B     		cmp	r3, #0
 397 00b0 0CD0     		beq	.L4
 235:../Main.c     **** 			start_state = 1;
 398              		.loc 1 235 0 is_stmt 1
 399 00b2 40F20003 		movw	r3, #:lower16:start_state
 400 00b6 C0F20003 		movt	r3, #:upper16:start_state
 401 00ba 4FF00102 		mov	r2, #1
 402 00be 1A70     		strb	r2, [r3, #0]
 236:../Main.c     **** 			start();
 403              		.loc 1 236 0
 404 00c0 40F20003 		movw	r3, #:lower16:start
 405 00c4 C0F20003 		movt	r3, #:upper16:start
 406 00c8 1B68     		ldr	r3, [r3, #0]
 407 00ca 9847     		blx	r3
 408              	.L4:
 238:../Main.c     **** 		if (SELECT && select)
 409              		.loc 1 238 0
 410 00cc 40F20003 		movw	r3, #:lower16:psxDado
 411 00d0 C0F20003 		movt	r3, #:upper16:psxDado
 412 00d4 1B68     		ldr	r3, [r3, #0]
 413 00d6 03F00103 		and	r3, r3, #1
 414 00da 002B     		cmp	r3, #0
 415 00dc 13D0     		beq	.L5
 238:../Main.c     **** 		if (SELECT && select)
 416              		.loc 1 238 0 is_stmt 0 discriminator 1
 417 00de 40F20003 		movw	r3, #:lower16:select
 418 00e2 C0F20003 		movt	r3, #:upper16:select
 419 00e6 1B68     		ldr	r3, [r3, #0]
 420 00e8 002B     		cmp	r3, #0
 421 00ea 0CD0     		beq	.L5
 240:../Main.c     **** 			select_state = 1;
 422              		.loc 1 240 0 is_stmt 1
 423 00ec 40F20003 		movw	r3, #:lower16:select_state
 424 00f0 C0F20003 		movt	r3, #:upper16:select_state
 425 00f4 4FF00102 		mov	r2, #1
 426 00f8 1A70     		strb	r2, [r3, #0]
 241:../Main.c     **** 			select();
 427              		.loc 1 241 0
 428 00fa 40F20003 		movw	r3, #:lower16:select
 429 00fe C0F20003 		movt	r3, #:upper16:select
 430 0102 1B68     		ldr	r3, [r3, #0]
 431 0104 9847     		blx	r3
 432              	.L5:
 243:../Main.c     **** 		if (L_DOIS && l_dois)
 433              		.loc 1 243 0
 434 0106 40F20003 		movw	r3, #:lower16:psxDado
 435 010a C0F20003 		movt	r3, #:upper16:psxDado
 436 010e 5B68     		ldr	r3, [r3, #4]
 437 0110 03F00103 		and	r3, r3, #1
 438 0114 002B     		cmp	r3, #0
 439 0116 13D0     		beq	.L6
 243:../Main.c     **** 		if (L_DOIS && l_dois)
 440              		.loc 1 243 0 is_stmt 0 discriminator 1
 441 0118 40F20003 		movw	r3, #:lower16:l_dois
 442 011c C0F20003 		movt	r3, #:upper16:l_dois
 443 0120 1B68     		ldr	r3, [r3, #0]
 444 0122 002B     		cmp	r3, #0
 445 0124 0CD0     		beq	.L6
 245:../Main.c     **** 			l_dois_state = 1;
 446              		.loc 1 245 0 is_stmt 1
 447 0126 40F20003 		movw	r3, #:lower16:l_dois_state
 448 012a C0F20003 		movt	r3, #:upper16:l_dois_state
 449 012e 4FF00102 		mov	r2, #1
 450 0132 1A70     		strb	r2, [r3, #0]
 246:../Main.c     **** 			l_dois();
 451              		.loc 1 246 0
 452 0134 40F20003 		movw	r3, #:lower16:l_dois
 453 0138 C0F20003 		movt	r3, #:upper16:l_dois
 454 013c 1B68     		ldr	r3, [r3, #0]
 455 013e 9847     		blx	r3
 456              	.L6:
 248:../Main.c     **** 		if (L_UM && l_um)
 457              		.loc 1 248 0
 458 0140 40F20003 		movw	r3, #:lower16:psxDado
 459 0144 C0F20003 		movt	r3, #:upper16:psxDado
 460 0148 5B68     		ldr	r3, [r3, #4]
 461 014a 03F00403 		and	r3, r3, #4
 462 014e 002B     		cmp	r3, #0
 463 0150 13D0     		beq	.L7
 248:../Main.c     **** 		if (L_UM && l_um)
 464              		.loc 1 248 0 is_stmt 0 discriminator 1
 465 0152 40F20003 		movw	r3, #:lower16:l_um
 466 0156 C0F20003 		movt	r3, #:upper16:l_um
 467 015a 1B68     		ldr	r3, [r3, #0]
 468 015c 002B     		cmp	r3, #0
 469 015e 0CD0     		beq	.L7
 250:../Main.c     **** 			l_um_state = 1;
 470              		.loc 1 250 0 is_stmt 1
 471 0160 40F20003 		movw	r3, #:lower16:l_um_state
 472 0164 C0F20003 		movt	r3, #:upper16:l_um_state
 473 0168 4FF00102 		mov	r2, #1
 474 016c 1A70     		strb	r2, [r3, #0]
 251:../Main.c     **** 			l_um();
 475              		.loc 1 251 0
 476 016e 40F20003 		movw	r3, #:lower16:l_um
 477 0172 C0F20003 		movt	r3, #:upper16:l_um
 478 0176 1B68     		ldr	r3, [r3, #0]
 479 0178 9847     		blx	r3
 480              	.L7:
 253:../Main.c     **** 		if (L_TRES && l_tres)
 481              		.loc 1 253 0
 482 017a 40F20003 		movw	r3, #:lower16:psxDado
 483 017e C0F20003 		movt	r3, #:upper16:psxDado
 484 0182 1B68     		ldr	r3, [r3, #0]
 485 0184 03F00403 		and	r3, r3, #4
 486 0188 002B     		cmp	r3, #0
 487 018a 13D0     		beq	.L8
 253:../Main.c     **** 		if (L_TRES && l_tres)
 488              		.loc 1 253 0 is_stmt 0 discriminator 1
 489 018c 40F20003 		movw	r3, #:lower16:l_tres
 490 0190 C0F20003 		movt	r3, #:upper16:l_tres
 491 0194 1B68     		ldr	r3, [r3, #0]
 492 0196 002B     		cmp	r3, #0
 493 0198 0CD0     		beq	.L8
 255:../Main.c     **** 			l_tres_state = 1;
 494              		.loc 1 255 0 is_stmt 1
 495 019a 40F20003 		movw	r3, #:lower16:l_tres_state
 496 019e C0F20003 		movt	r3, #:upper16:l_tres_state
 497 01a2 4FF00102 		mov	r2, #1
 498 01a6 1A70     		strb	r2, [r3, #0]
 256:../Main.c     **** 			l_tres();
 499              		.loc 1 256 0
 500 01a8 40F20003 		movw	r3, #:lower16:l_tres
 501 01ac C0F20003 		movt	r3, #:upper16:l_tres
 502 01b0 1B68     		ldr	r3, [r3, #0]
 503 01b2 9847     		blx	r3
 504              	.L8:
 258:../Main.c     **** 		if (R_UM && r_um)
 505              		.loc 1 258 0
 506 01b4 40F20003 		movw	r3, #:lower16:psxDado
 507 01b8 C0F20003 		movt	r3, #:upper16:psxDado
 508 01bc 5B68     		ldr	r3, [r3, #4]
 509 01be 03F00803 		and	r3, r3, #8
 510 01c2 002B     		cmp	r3, #0
 511 01c4 13D0     		beq	.L9
 258:../Main.c     **** 		if (R_UM && r_um)
 512              		.loc 1 258 0 is_stmt 0 discriminator 1
 513 01c6 40F20003 		movw	r3, #:lower16:r_um
 514 01ca C0F20003 		movt	r3, #:upper16:r_um
 515 01ce 1B68     		ldr	r3, [r3, #0]
 516 01d0 002B     		cmp	r3, #0
 517 01d2 0CD0     		beq	.L9
 260:../Main.c     **** 			r_um_state = 1;
 518              		.loc 1 260 0 is_stmt 1
 519 01d4 40F20003 		movw	r3, #:lower16:r_um_state
 520 01d8 C0F20003 		movt	r3, #:upper16:r_um_state
 521 01dc 4FF00102 		mov	r2, #1
 522 01e0 1A70     		strb	r2, [r3, #0]
 261:../Main.c     **** 			r_um();
 523              		.loc 1 261 0
 524 01e2 40F20003 		movw	r3, #:lower16:r_um
 525 01e6 C0F20003 		movt	r3, #:upper16:r_um
 526 01ea 1B68     		ldr	r3, [r3, #0]
 527 01ec 9847     		blx	r3
 528              	.L9:
 263:../Main.c     **** 		if (R_DOIS && r_dois)
 529              		.loc 1 263 0
 530 01ee 40F20003 		movw	r3, #:lower16:psxDado
 531 01f2 C0F20003 		movt	r3, #:upper16:psxDado
 532 01f6 5B68     		ldr	r3, [r3, #4]
 533 01f8 03F00203 		and	r3, r3, #2
 534 01fc 002B     		cmp	r3, #0
 535 01fe 13D0     		beq	.L10
 263:../Main.c     **** 		if (R_DOIS && r_dois)
 536              		.loc 1 263 0 is_stmt 0 discriminator 1
 537 0200 40F20003 		movw	r3, #:lower16:r_dois
 538 0204 C0F20003 		movt	r3, #:upper16:r_dois
 539 0208 1B68     		ldr	r3, [r3, #0]
 540 020a 002B     		cmp	r3, #0
 541 020c 0CD0     		beq	.L10
 265:../Main.c     **** 			r_dois_state = 1;
 542              		.loc 1 265 0 is_stmt 1
 543 020e 40F20003 		movw	r3, #:lower16:r_dois_state
 544 0212 C0F20003 		movt	r3, #:upper16:r_dois_state
 545 0216 4FF00102 		mov	r2, #1
 546 021a 1A70     		strb	r2, [r3, #0]
 266:../Main.c     **** 			r_dois();
 547              		.loc 1 266 0
 548 021c 40F20003 		movw	r3, #:lower16:r_dois
 549 0220 C0F20003 		movt	r3, #:upper16:r_dois
 550 0224 1B68     		ldr	r3, [r3, #0]
 551 0226 9847     		blx	r3
 552              	.L10:
 268:../Main.c     **** 		if (R_TRES && r_tres)
 553              		.loc 1 268 0
 554 0228 40F20003 		movw	r3, #:lower16:psxDado
 555 022c C0F20003 		movt	r3, #:upper16:psxDado
 556 0230 1B68     		ldr	r3, [r3, #0]
 557 0232 03F00203 		and	r3, r3, #2
 558 0236 002B     		cmp	r3, #0
 559 0238 13D0     		beq	.L11
 268:../Main.c     **** 		if (R_TRES && r_tres)
 560              		.loc 1 268 0 is_stmt 0 discriminator 1
 561 023a 40F20003 		movw	r3, #:lower16:r_tres
 562 023e C0F20003 		movt	r3, #:upper16:r_tres
 563 0242 1B68     		ldr	r3, [r3, #0]
 564 0244 002B     		cmp	r3, #0
 565 0246 0CD0     		beq	.L11
 270:../Main.c     **** 			r_tres_state = 1;
 566              		.loc 1 270 0 is_stmt 1
 567 0248 40F20003 		movw	r3, #:lower16:r_tres_state
 568 024c C0F20003 		movt	r3, #:upper16:r_tres_state
 569 0250 4FF00102 		mov	r2, #1
 570 0254 1A70     		strb	r2, [r3, #0]
 271:../Main.c     **** 			r_tres();
 571              		.loc 1 271 0
 572 0256 40F20003 		movw	r3, #:lower16:r_tres
 573 025a C0F20003 		movt	r3, #:upper16:r_tres
 574 025e 1B68     		ldr	r3, [r3, #0]
 575 0260 9847     		blx	r3
 576              	.L11:
 273:../Main.c     **** 		if (SQR && sqr)
 577              		.loc 1 273 0
 578 0262 40F20003 		movw	r3, #:lower16:psxDado
 579 0266 C0F20003 		movt	r3, #:upper16:psxDado
 580 026a 5B68     		ldr	r3, [r3, #4]
 581 026c 03F08003 		and	r3, r3, #128
 582 0270 002B     		cmp	r3, #0
 583 0272 13D0     		beq	.L12
 273:../Main.c     **** 		if (SQR && sqr)
 584              		.loc 1 273 0 is_stmt 0 discriminator 1
 585 0274 40F20003 		movw	r3, #:lower16:sqr
 586 0278 C0F20003 		movt	r3, #:upper16:sqr
 587 027c 1B68     		ldr	r3, [r3, #0]
 588 027e 002B     		cmp	r3, #0
 589 0280 0CD0     		beq	.L12
 275:../Main.c     **** 			sqr_state = 1;
 590              		.loc 1 275 0 is_stmt 1
 591 0282 40F20003 		movw	r3, #:lower16:sqr_state
 592 0286 C0F20003 		movt	r3, #:upper16:sqr_state
 593 028a 4FF00102 		mov	r2, #1
 594 028e 1A70     		strb	r2, [r3, #0]
 276:../Main.c     **** 			sqr();
 595              		.loc 1 276 0
 596 0290 40F20003 		movw	r3, #:lower16:sqr
 597 0294 C0F20003 		movt	r3, #:upper16:sqr
 598 0298 1B68     		ldr	r3, [r3, #0]
 599 029a 9847     		blx	r3
 600              	.L12:
 278:../Main.c     **** 		if (TRIANGLE && triangle)
 601              		.loc 1 278 0
 602 029c 40F20003 		movw	r3, #:lower16:psxDado
 603 02a0 C0F20003 		movt	r3, #:upper16:psxDado
 604 02a4 5B68     		ldr	r3, [r3, #4]
 605 02a6 03F01003 		and	r3, r3, #16
 606 02aa 002B     		cmp	r3, #0
 607 02ac 13D0     		beq	.L13
 278:../Main.c     **** 		if (TRIANGLE && triangle)
 608              		.loc 1 278 0 is_stmt 0 discriminator 1
 609 02ae 40F20003 		movw	r3, #:lower16:triangle
 610 02b2 C0F20003 		movt	r3, #:upper16:triangle
 611 02b6 1B68     		ldr	r3, [r3, #0]
 612 02b8 002B     		cmp	r3, #0
 613 02ba 0CD0     		beq	.L13
 280:../Main.c     **** 			triangle_state = 1;
 614              		.loc 1 280 0 is_stmt 1
 615 02bc 40F20003 		movw	r3, #:lower16:triangle_state
 616 02c0 C0F20003 		movt	r3, #:upper16:triangle_state
 617 02c4 4FF00102 		mov	r2, #1
 618 02c8 1A70     		strb	r2, [r3, #0]
 281:../Main.c     **** 			triangle();
 619              		.loc 1 281 0
 620 02ca 40F20003 		movw	r3, #:lower16:triangle
 621 02ce C0F20003 		movt	r3, #:upper16:triangle
 622 02d2 1B68     		ldr	r3, [r3, #0]
 623 02d4 9847     		blx	r3
 624              	.L13:
 283:../Main.c     **** 		if (CIRCLE && circle)
 625              		.loc 1 283 0
 626 02d6 40F20003 		movw	r3, #:lower16:psxDado
 627 02da C0F20003 		movt	r3, #:upper16:psxDado
 628 02de 5B68     		ldr	r3, [r3, #4]
 629 02e0 03F02003 		and	r3, r3, #32
 630 02e4 002B     		cmp	r3, #0
 631 02e6 13D0     		beq	.L14
 283:../Main.c     **** 		if (CIRCLE && circle)
 632              		.loc 1 283 0 is_stmt 0 discriminator 1
 633 02e8 40F20003 		movw	r3, #:lower16:circle
 634 02ec C0F20003 		movt	r3, #:upper16:circle
 635 02f0 1B68     		ldr	r3, [r3, #0]
 636 02f2 002B     		cmp	r3, #0
 637 02f4 0CD0     		beq	.L14
 285:../Main.c     **** 			circle_state = 1;
 638              		.loc 1 285 0 is_stmt 1
 639 02f6 40F20003 		movw	r3, #:lower16:circle_state
 640 02fa C0F20003 		movt	r3, #:upper16:circle_state
 641 02fe 4FF00102 		mov	r2, #1
 642 0302 1A70     		strb	r2, [r3, #0]
 286:../Main.c     **** 			circle();
 643              		.loc 1 286 0
 644 0304 40F20003 		movw	r3, #:lower16:circle
 645 0308 C0F20003 		movt	r3, #:upper16:circle
 646 030c 1B68     		ldr	r3, [r3, #0]
 647 030e 9847     		blx	r3
 648              	.L14:
 288:../Main.c     **** 		if (CROSS && cross)
 649              		.loc 1 288 0
 650 0310 40F20003 		movw	r3, #:lower16:psxDado
 651 0314 C0F20003 		movt	r3, #:upper16:psxDado
 652 0318 5B68     		ldr	r3, [r3, #4]
 653 031a 03F04003 		and	r3, r3, #64
 654 031e 002B     		cmp	r3, #0
 655 0320 13D0     		beq	.L15
 288:../Main.c     **** 		if (CROSS && cross)
 656              		.loc 1 288 0 is_stmt 0 discriminator 1
 657 0322 40F20003 		movw	r3, #:lower16:cross
 658 0326 C0F20003 		movt	r3, #:upper16:cross
 659 032a 1B68     		ldr	r3, [r3, #0]
 660 032c 002B     		cmp	r3, #0
 661 032e 0CD0     		beq	.L15
 290:../Main.c     **** 			cross_state = 1;
 662              		.loc 1 290 0 is_stmt 1
 663 0330 40F20003 		movw	r3, #:lower16:cross_state
 664 0334 C0F20003 		movt	r3, #:upper16:cross_state
 665 0338 4FF00102 		mov	r2, #1
 666 033c 1A70     		strb	r2, [r3, #0]
 291:../Main.c     **** 			cross();
 667              		.loc 1 291 0
 668 033e 40F20003 		movw	r3, #:lower16:cross
 669 0342 C0F20003 		movt	r3, #:upper16:cross
 670 0346 1B68     		ldr	r3, [r3, #0]
 671 0348 9847     		blx	r3
 672              	.L15:
 293:../Main.c     **** 		if (LEFT && left)
 673              		.loc 1 293 0
 674 034a 40F20003 		movw	r3, #:lower16:psxDado
 675 034e C0F20003 		movt	r3, #:upper16:psxDado
 676 0352 1B68     		ldr	r3, [r3, #0]
 677 0354 03F08003 		and	r3, r3, #128
 678 0358 002B     		cmp	r3, #0
 679 035a 13D0     		beq	.L16
 293:../Main.c     **** 		if (LEFT && left)
 680              		.loc 1 293 0 is_stmt 0 discriminator 1
 681 035c 40F20003 		movw	r3, #:lower16:left
 682 0360 C0F20003 		movt	r3, #:upper16:left
 683 0364 1B68     		ldr	r3, [r3, #0]
 684 0366 002B     		cmp	r3, #0
 685 0368 0CD0     		beq	.L16
 295:../Main.c     **** 			left_state = 1;
 686              		.loc 1 295 0 is_stmt 1
 687 036a 40F20003 		movw	r3, #:lower16:left_state
 688 036e C0F20003 		movt	r3, #:upper16:left_state
 689 0372 4FF00102 		mov	r2, #1
 690 0376 1A70     		strb	r2, [r3, #0]
 296:../Main.c     **** 			left();
 691              		.loc 1 296 0
 692 0378 40F20003 		movw	r3, #:lower16:left
 693 037c C0F20003 		movt	r3, #:upper16:left
 694 0380 1B68     		ldr	r3, [r3, #0]
 695 0382 9847     		blx	r3
 696              	.L16:
 298:../Main.c     **** 		if (RIGHT && right)
 697              		.loc 1 298 0
 698 0384 40F20003 		movw	r3, #:lower16:psxDado
 699 0388 C0F20003 		movt	r3, #:upper16:psxDado
 700 038c 1B68     		ldr	r3, [r3, #0]
 701 038e 03F02003 		and	r3, r3, #32
 702 0392 002B     		cmp	r3, #0
 703 0394 13D0     		beq	.L17
 298:../Main.c     **** 		if (RIGHT && right)
 704              		.loc 1 298 0 is_stmt 0 discriminator 1
 705 0396 40F20003 		movw	r3, #:lower16:right
 706 039a C0F20003 		movt	r3, #:upper16:right
 707 039e 1B68     		ldr	r3, [r3, #0]
 708 03a0 002B     		cmp	r3, #0
 709 03a2 0CD0     		beq	.L17
 300:../Main.c     **** 			right_state = 1;
 710              		.loc 1 300 0 is_stmt 1
 711 03a4 40F20003 		movw	r3, #:lower16:right_state
 712 03a8 C0F20003 		movt	r3, #:upper16:right_state
 713 03ac 4FF00102 		mov	r2, #1
 714 03b0 1A70     		strb	r2, [r3, #0]
 301:../Main.c     **** 			right();
 715              		.loc 1 301 0
 716 03b2 40F20003 		movw	r3, #:lower16:right
 717 03b6 C0F20003 		movt	r3, #:upper16:right
 718 03ba 1B68     		ldr	r3, [r3, #0]
 719 03bc 9847     		blx	r3
 720              	.L17:
 303:../Main.c     **** 		if (UP && up)
 721              		.loc 1 303 0
 722 03be 40F20003 		movw	r3, #:lower16:psxDado
 723 03c2 C0F20003 		movt	r3, #:upper16:psxDado
 724 03c6 1B68     		ldr	r3, [r3, #0]
 725 03c8 03F01003 		and	r3, r3, #16
 726 03cc 002B     		cmp	r3, #0
 727 03ce 13D0     		beq	.L18
 303:../Main.c     **** 		if (UP && up)
 728              		.loc 1 303 0 is_stmt 0 discriminator 1
 729 03d0 40F20003 		movw	r3, #:lower16:up
 730 03d4 C0F20003 		movt	r3, #:upper16:up
 731 03d8 1B68     		ldr	r3, [r3, #0]
 732 03da 002B     		cmp	r3, #0
 733 03dc 0CD0     		beq	.L18
 305:../Main.c     **** 			up_state = 1;
 734              		.loc 1 305 0 is_stmt 1
 735 03de 40F20003 		movw	r3, #:lower16:up_state
 736 03e2 C0F20003 		movt	r3, #:upper16:up_state
 737 03e6 4FF00102 		mov	r2, #1
 738 03ea 1A70     		strb	r2, [r3, #0]
 306:../Main.c     **** 			up();
 739              		.loc 1 306 0
 740 03ec 40F20003 		movw	r3, #:lower16:up
 741 03f0 C0F20003 		movt	r3, #:upper16:up
 742 03f4 1B68     		ldr	r3, [r3, #0]
 743 03f6 9847     		blx	r3
 744              	.L18:
 308:../Main.c     **** 		if (DOWN && down)
 745              		.loc 1 308 0
 746 03f8 40F20003 		movw	r3, #:lower16:psxDado
 747 03fc C0F20003 		movt	r3, #:upper16:psxDado
 748 0400 1B68     		ldr	r3, [r3, #0]
 749 0402 03F04003 		and	r3, r3, #64
 750 0406 002B     		cmp	r3, #0
 751 0408 13D0     		beq	.L19
 308:../Main.c     **** 		if (DOWN && down)
 752              		.loc 1 308 0 is_stmt 0 discriminator 1
 753 040a 40F20003 		movw	r3, #:lower16:down
 754 040e C0F20003 		movt	r3, #:upper16:down
 755 0412 1B68     		ldr	r3, [r3, #0]
 756 0414 002B     		cmp	r3, #0
 757 0416 0CD0     		beq	.L19
 310:../Main.c     **** 			down_state = 1;
 758              		.loc 1 310 0 is_stmt 1
 759 0418 40F20003 		movw	r3, #:lower16:down_state
 760 041c C0F20003 		movt	r3, #:upper16:down_state
 761 0420 4FF00102 		mov	r2, #1
 762 0424 1A70     		strb	r2, [r3, #0]
 311:../Main.c     **** 			down();
 763              		.loc 1 311 0
 764 0426 40F20003 		movw	r3, #:lower16:down
 765 042a C0F20003 		movt	r3, #:upper16:down
 766 042e 1B68     		ldr	r3, [r3, #0]
 767 0430 9847     		blx	r3
 768              	.L19:
 316:../Main.c     **** 		data_E[0] = 0;
 769              		.loc 1 316 0
 770 0432 40F20003 		movw	r3, #:lower16:data_E
 771 0436 C0F20003 		movt	r3, #:upper16:data_E
 772 043a 4FF00002 		mov	r2, #0
 773 043e 1A70     		strb	r2, [r3, #0]
 318:../Main.c     **** 		pow1 = (psxDado[5]-127);//<<1; //Analog esq //Subtrai 127 para saber o sentido
 774              		.loc 1 318 0
 775 0440 40F20003 		movw	r3, #:lower16:psxDado
 776 0444 C0F20003 		movt	r3, #:upper16:psxDado
 777 0448 5B69     		ldr	r3, [r3, #20]
 778 044a 9BB2     		uxth	r3, r3
 779 044c A3F17F03 		sub	r3, r3, #127
 780 0450 9BB2     		uxth	r3, r3
 781 0452 3B81     		strh	r3, [r7, #8]	@ movhi
 319:../Main.c     **** 		pow2 = (psxDado[3]-127);//<<1;
 782              		.loc 1 319 0
 783 0454 40F20003 		movw	r3, #:lower16:psxDado
 784 0458 C0F20003 		movt	r3, #:upper16:psxDado
 785 045c DB68     		ldr	r3, [r3, #12]
 786 045e 9BB2     		uxth	r3, r3
 787 0460 A3F17F03 		sub	r3, r3, #127
 788 0464 9BB2     		uxth	r3, r3
 789 0466 FB80     		strh	r3, [r7, #6]	@ movhi
 320:../Main.c     **** 		data_E[3] = 0;
 790              		.loc 1 320 0
 791 0468 40F20003 		movw	r3, #:lower16:data_E
 792 046c C0F20003 		movt	r3, #:upper16:data_E
 793 0470 4FF00002 		mov	r2, #0
 794 0474 DA70     		strb	r2, [r3, #3]
 322:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 795              		.loc 1 322 0
 796 0476 40F20003 		movw	r3, #:lower16:flipped
 797 047a C0F20003 		movt	r3, #:upper16:flipped
 798 047e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 799 0480 002B     		cmp	r3, #0
 800 0482 7CD1     		bne	.L20
 324:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 801              		.loc 1 324 0
 802 0484 B7F90830 		ldrsh	r3, [r7, #8]
 803 0488 13F11E0F 		cmn	r3, #30
 804 048c 03DA     		bge	.L21
 324:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 805              		.loc 1 324 0 is_stmt 0 discriminator 1
 806 048e 4FF00003 		mov	r3, #0
 807 0492 BB73     		strb	r3, [r7, #14]
 808 0494 06E0     		b	.L22
 809              	.L21:
 325:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 810              		.loc 1 325 0 is_stmt 1
 811 0496 B7F90830 		ldrsh	r3, [r7, #8]
 812 049a 1E2B     		cmp	r3, #30
 813 049c 02DD     		ble	.L22
 325:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 814              		.loc 1 325 0 is_stmt 0 discriminator 1
 815 049e 4FF00003 		mov	r3, #0
 816 04a2 FB73     		strb	r3, [r7, #15]
 817              	.L22:
 326:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 818              		.loc 1 326 0 is_stmt 1
 819 04a4 B7F90630 		ldrsh	r3, [r7, #6]
 820 04a8 13F11E0F 		cmn	r3, #30
 821 04ac 03DA     		bge	.L23
 326:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 822              		.loc 1 326 0 is_stmt 0 discriminator 1
 823 04ae 4FF00003 		mov	r3, #0
 824 04b2 3B73     		strb	r3, [r7, #12]
 825 04b4 06E0     		b	.L24
 826              	.L23:
 327:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 827              		.loc 1 327 0 is_stmt 1
 828 04b6 B7F90630 		ldrsh	r3, [r7, #6]
 829 04ba 1E2B     		cmp	r3, #30
 830 04bc 02DD     		ble	.L24
 327:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 831              		.loc 1 327 0 is_stmt 0 discriminator 1
 832 04be 4FF00003 		mov	r3, #0
 833 04c2 7B73     		strb	r3, [r7, #13]
 834              	.L24:
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 835              		.loc 1 328 0 is_stmt 1
 836 04c4 B7F90830 		ldrsh	r3, [r7, #8]
 837 04c8 002B     		cmp	r3, #0
 838 04ca 05DD     		ble	.L25
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 839              		.loc 1 328 0 is_stmt 0 discriminator 1
 840 04cc 3B89     		ldrh	r3, [r7, #8]
 841 04ce 4FEA4303 		lsl	r3, r3, #1
 842 04d2 9BB2     		uxth	r3, r3
 843 04d4 9BB2     		uxth	r3, r3
 844 04d6 08E0     		b	.L26
 845              	.L25:
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 846              		.loc 1 328 0 discriminator 2
 847 04d8 3B89     		ldrh	r3, [r7, #8]
 848 04da 1A46     		mov	r2, r3	@ movhi
 849 04dc 4FEAC232 		lsl	r2, r2, #15
 850 04e0 D31A     		subs	r3, r2, r3
 851 04e2 4FEA4303 		lsl	r3, r3, #1
 852 04e6 9BB2     		uxth	r3, r3
 853 04e8 9BB2     		uxth	r3, r3
 854              	.L26:
 328:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 855              		.loc 1 328 0 discriminator 3
 856 04ea BB80     		strh	r3, [r7, #4]	@ movhi
 329:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 857              		.loc 1 329 0 is_stmt 1 discriminator 3
 858 04ec B7F90420 		ldrsh	r2, [r7, #4]
 859 04f0 40F20003 		movw	r3, #:lower16:pwm_max
 860 04f4 C0F20003 		movt	r3, #:upper16:pwm_max
 861 04f8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 862 04fa 03FB02F2 		mul	r2, r3, r2
 863 04fe 48F21F53 		movw	r3, #34079
 864 0502 C5F2EB13 		movt	r3, 20971
 865 0506 83FB0213 		smull	r1, r3, r3, r2
 866 050a 4FEA6311 		asr	r1, r3, #5
 867 050e 4FEAE273 		asr	r3, r2, #31
 868 0512 CB1A     		subs	r3, r1, r3
 869 0514 DAB2     		uxtb	r2, r3
 870 0516 40F20003 		movw	r3, #:lower16:data_E
 871 051a C0F20003 		movt	r3, #:upper16:data_E
 872 051e 5A70     		strb	r2, [r3, #1]
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 873              		.loc 1 330 0 discriminator 3
 874 0520 B7F90630 		ldrsh	r3, [r7, #6]
 875 0524 002B     		cmp	r3, #0
 876 0526 05DD     		ble	.L27
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 877              		.loc 1 330 0 is_stmt 0 discriminator 1
 878 0528 FB88     		ldrh	r3, [r7, #6]
 879 052a 4FEA4303 		lsl	r3, r3, #1
 880 052e 9BB2     		uxth	r3, r3
 881 0530 9BB2     		uxth	r3, r3
 882 0532 08E0     		b	.L28
 883              	.L27:
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 884              		.loc 1 330 0 discriminator 2
 885 0534 FB88     		ldrh	r3, [r7, #6]
 886 0536 1A46     		mov	r2, r3	@ movhi
 887 0538 4FEAC232 		lsl	r2, r2, #15
 888 053c D31A     		subs	r3, r2, r3
 889 053e 4FEA4303 		lsl	r3, r3, #1
 890 0542 9BB2     		uxth	r3, r3
 891 0544 9BB2     		uxth	r3, r3
 892              	.L28:
 330:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 893              		.loc 1 330 0 discriminator 3
 894 0546 BB80     		strh	r3, [r7, #4]	@ movhi
 331:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 895              		.loc 1 331 0 is_stmt 1 discriminator 3
 896 0548 B7F90420 		ldrsh	r2, [r7, #4]
 897 054c 40F20003 		movw	r3, #:lower16:pwm_max
 898 0550 C0F20003 		movt	r3, #:upper16:pwm_max
 899 0554 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 900 0556 03FB02F2 		mul	r2, r3, r2
 901 055a 48F21F53 		movw	r3, #34079
 902 055e C5F2EB13 		movt	r3, 20971
 903 0562 83FB0213 		smull	r1, r3, r3, r2
 904 0566 4FEA6311 		asr	r1, r3, #5
 905 056a 4FEAE273 		asr	r3, r2, #31
 906 056e CB1A     		subs	r3, r1, r3
 907 0570 DAB2     		uxtb	r2, r3
 908 0572 40F20003 		movw	r3, #:lower16:data_E
 909 0576 C0F20003 		movt	r3, #:upper16:data_E
 910 057a 9A70     		strb	r2, [r3, #2]
 911 057c 7BE0     		b	.L29
 912              	.L20:
 335:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 913              		.loc 1 335 0
 914 057e B7F90630 		ldrsh	r3, [r7, #6]
 915 0582 1E2B     		cmp	r3, #30
 916 0584 03DD     		ble	.L30
 335:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 917              		.loc 1 335 0 is_stmt 0 discriminator 1
 918 0586 4FF00003 		mov	r3, #0
 919 058a BB73     		strb	r3, [r7, #14]
 920 058c 07E0     		b	.L31
 921              	.L30:
 336:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 922              		.loc 1 336 0 is_stmt 1
 923 058e B7F90630 		ldrsh	r3, [r7, #6]
 924 0592 13F11E0F 		cmn	r3, #30
 925 0596 02DA     		bge	.L31
 336:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 926              		.loc 1 336 0 is_stmt 0 discriminator 1
 927 0598 4FF00003 		mov	r3, #0
 928 059c FB73     		strb	r3, [r7, #15]
 929              	.L31:
 337:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 930              		.loc 1 337 0 is_stmt 1
 931 059e B7F90830 		ldrsh	r3, [r7, #8]
 932 05a2 1E2B     		cmp	r3, #30
 933 05a4 03DD     		ble	.L32
 337:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 934              		.loc 1 337 0 is_stmt 0 discriminator 1
 935 05a6 4FF00003 		mov	r3, #0
 936 05aa 3B73     		strb	r3, [r7, #12]
 937 05ac 07E0     		b	.L33
 938              	.L32:
 338:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 939              		.loc 1 338 0 is_stmt 1
 940 05ae B7F90830 		ldrsh	r3, [r7, #8]
 941 05b2 13F11E0F 		cmn	r3, #30
 942 05b6 02DA     		bge	.L33
 338:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 943              		.loc 1 338 0 is_stmt 0 discriminator 1
 944 05b8 4FF00003 		mov	r3, #0
 945 05bc 7B73     		strb	r3, [r7, #13]
 946              	.L33:
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 947              		.loc 1 339 0 is_stmt 1
 948 05be B7F90830 		ldrsh	r3, [r7, #8]
 949 05c2 002B     		cmp	r3, #0
 950 05c4 05DD     		ble	.L34
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 951              		.loc 1 339 0 is_stmt 0 discriminator 1
 952 05c6 3B89     		ldrh	r3, [r7, #8]
 953 05c8 4FEA4303 		lsl	r3, r3, #1
 954 05cc 9BB2     		uxth	r3, r3
 955 05ce 9BB2     		uxth	r3, r3
 956 05d0 08E0     		b	.L35
 957              	.L34:
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 958              		.loc 1 339 0 discriminator 2
 959 05d2 3B89     		ldrh	r3, [r7, #8]
 960 05d4 1A46     		mov	r2, r3	@ movhi
 961 05d6 4FEAC232 		lsl	r2, r2, #15
 962 05da D31A     		subs	r3, r2, r3
 963 05dc 4FEA4303 		lsl	r3, r3, #1
 964 05e0 9BB2     		uxth	r3, r3
 965 05e2 9BB2     		uxth	r3, r3
 966              	.L35:
 339:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 967              		.loc 1 339 0 discriminator 3
 968 05e4 BB80     		strh	r3, [r7, #4]	@ movhi
 340:../Main.c     **** 			data_E[2] = temp*pwm_max/100;
 969              		.loc 1 340 0 is_stmt 1 discriminator 3
 970 05e6 B7F90420 		ldrsh	r2, [r7, #4]
 971 05ea 40F20003 		movw	r3, #:lower16:pwm_max
 972 05ee C0F20003 		movt	r3, #:upper16:pwm_max
 973 05f2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 974 05f4 03FB02F2 		mul	r2, r3, r2
 975 05f8 48F21F53 		movw	r3, #34079
 976 05fc C5F2EB13 		movt	r3, 20971
 977 0600 83FB0213 		smull	r1, r3, r3, r2
 978 0604 4FEA6311 		asr	r1, r3, #5
 979 0608 4FEAE273 		asr	r3, r2, #31
 980 060c CB1A     		subs	r3, r1, r3
 981 060e DAB2     		uxtb	r2, r3
 982 0610 40F20003 		movw	r3, #:lower16:data_E
 983 0614 C0F20003 		movt	r3, #:upper16:data_E
 984 0618 9A70     		strb	r2, [r3, #2]
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 985              		.loc 1 341 0 discriminator 3
 986 061a B7F90630 		ldrsh	r3, [r7, #6]
 987 061e 002B     		cmp	r3, #0
 988 0620 05DD     		ble	.L36
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 989              		.loc 1 341 0 is_stmt 0 discriminator 1
 990 0622 FB88     		ldrh	r3, [r7, #6]
 991 0624 4FEA4303 		lsl	r3, r3, #1
 992 0628 9BB2     		uxth	r3, r3
 993 062a 9BB2     		uxth	r3, r3
 994 062c 08E0     		b	.L37
 995              	.L36:
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 996              		.loc 1 341 0 discriminator 2
 997 062e FB88     		ldrh	r3, [r7, #6]
 998 0630 1A46     		mov	r2, r3	@ movhi
 999 0632 4FEAC232 		lsl	r2, r2, #15
 1000 0636 D31A     		subs	r3, r2, r3
 1001 0638 4FEA4303 		lsl	r3, r3, #1
 1002 063c 9BB2     		uxth	r3, r3
 1003 063e 9BB2     		uxth	r3, r3
 1004              	.L37:
 341:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 1005              		.loc 1 341 0 discriminator 3
 1006 0640 BB80     		strh	r3, [r7, #4]	@ movhi
 342:../Main.c     **** 			data_E[1] = temp*pwm_max/100;
 1007              		.loc 1 342 0 is_stmt 1 discriminator 3
 1008 0642 B7F90420 		ldrsh	r2, [r7, #4]
 1009 0646 40F20003 		movw	r3, #:lower16:pwm_max
 1010 064a C0F20003 		movt	r3, #:upper16:pwm_max
 1011 064e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1012 0650 03FB02F2 		mul	r2, r3, r2
 1013 0654 48F21F53 		movw	r3, #34079
 1014 0658 C5F2EB13 		movt	r3, 20971
 1015 065c 83FB0213 		smull	r1, r3, r3, r2
 1016 0660 4FEA6311 		asr	r1, r3, #5
 1017 0664 4FEAE273 		asr	r3, r2, #31
 1018 0668 CB1A     		subs	r3, r1, r3
 1019 066a DAB2     		uxtb	r2, r3
 1020 066c 40F20003 		movw	r3, #:lower16:data_E
 1021 0670 C0F20003 		movt	r3, #:upper16:data_E
 1022 0674 5A70     		strb	r2, [r3, #1]
 1023              	.L29:
 345:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2) | (albh1 << ALBH1) | (albh2 << ALBH2)
 1024              		.loc 1 345 0
 1025 0676 40F20003 		movw	r3, #:lower16:data_E
 1026 067a C0F20003 		movt	r3, #:upper16:data_E
 1027 067e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1028 0680 DAB2     		uxtb	r2, r3
 1029 0682 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1030 0684 4FEA0313 		lsl	r3, r3, #4
 1031 0688 DBB2     		uxtb	r3, r3
 1032 068a 1343     		orrs	r3, r3, r2
 1033 068c DAB2     		uxtb	r2, r3
 1034 068e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1035 0690 1343     		orrs	r3, r3, r2
 1036 0692 DAB2     		uxtb	r2, r3
 1037 0694 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 1038 0696 4FEA4313 		lsl	r3, r3, #5
 1039 069a DBB2     		uxtb	r3, r3
 1040 069c 1343     		orrs	r3, r3, r2
 1041 069e DAB2     		uxtb	r2, r3
 1042 06a0 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1043 06a2 4FEAC303 		lsl	r3, r3, #3
 1044 06a6 DBB2     		uxtb	r3, r3
 1045 06a8 1343     		orrs	r3, r3, r2
 1046 06aa DAB2     		uxtb	r2, r3
 1047 06ac BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1048 06ae 4FEA8303 		lsl	r3, r3, #2
 1049 06b2 DBB2     		uxtb	r3, r3
 1050 06b4 1343     		orrs	r3, r3, r2
 1051 06b6 DAB2     		uxtb	r2, r3
 1052 06b8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1053 06ba 4FEA4303 		lsl	r3, r3, #1
 1054 06be DBB2     		uxtb	r3, r3
 1055 06c0 1343     		orrs	r3, r3, r2
 1056 06c2 DBB2     		uxtb	r3, r3
 1057 06c4 DAB2     		uxtb	r2, r3
 1058 06c6 40F20003 		movw	r3, #:lower16:data_E
 1059 06ca C0F20003 		movt	r3, #:upper16:data_E
 1060 06ce DA70     		strb	r2, [r3, #3]
 346:../Main.c     **** 		data_E[4] = result.Result>>4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bits
 1061              		.loc 1 346 0
 1062 06d0 40F20003 		movw	r3, #:lower16:result
 1063 06d4 C0F20003 		movt	r3, #:upper16:result
 1064 06d8 5B88     		ldrh	r3, [r3, #2]
 1065 06da 4FEA1313 		lsr	r3, r3, #4
 1066 06de 9BB2     		uxth	r3, r3
 1067 06e0 DAB2     		uxtb	r2, r3
 1068 06e2 40F20003 		movw	r3, #:lower16:data_E
 1069 06e6 C0F20003 		movt	r3, #:upper16:data_E
 1070 06ea 1A71     		strb	r2, [r3, #4]
 348:../Main.c     **** 		write_E();
 1071              		.loc 1 348 0
 1072 06ec FFF7FEFF 		bl	write_E
 349:../Main.c     **** 		updateButtonStates();
 1073              		.loc 1 349 0
 1074 06f0 FFF7FEFF 		bl	updateButtonStates
 1075              	.LBE5:
 1076              		.loc 1 350 0
 1077 06f4 A5E4     		b	.L38
 1078              		.cfi_endproc
 1079              	.LFE117:
 1081 06f6 00BF     		.section	.text.read_R,"ax",%progbits
 1082              		.align	2
 1083              		.global	read_R
 1084              		.thumb
 1085              		.thumb_func
 1087              	read_R:
 1088              	.LFB118:
 351:../Main.c     **** 	return 0;
 352:../Main.c     **** }
 353:../Main.c     **** 
 354:../Main.c     **** /***************************************************/
 355:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 356:../Main.c     **** /***************************************************/
 357:../Main.c     **** 
 358:../Main.c     **** void read_R()
 359:../Main.c     **** {
 1089              		.loc 1 359 0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 8
 1092              		@ frame_needed = 1, uses_anonymous_args = 0
 1093 0000 80B5     		push	{r7, lr}
 1094              	.LCFI3:
 1095              		.cfi_def_cfa_offset 8
 1096              		.cfi_offset 7, -8
 1097              		.cfi_offset 14, -4
 1098 0002 82B0     		sub	sp, sp, #8
 1099              	.LCFI4:
 1100              		.cfi_def_cfa_offset 16
 1101 0004 00AF     		add	r7, sp, #0
 1102              	.LCFI5:
 1103              		.cfi_def_cfa_register 7
 360:../Main.c     **** 	int i;
 361:../Main.c     **** 	IO004_ResetPin(CE);
 1104              		.loc 1 361 0
 1105 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1106 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1107 000e 5A68     		ldr	r2, [r3, #4]
 1108 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1109 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1110 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1111 001a 4FF48031 		mov	r1, #65536
 1112 001e 01FA03F3 		lsl	r3, r1, r3
 1113 0022 5360     		str	r3, [r2, #4]
 362:../Main.c     **** 	delay(50000);
 1114              		.loc 1 362 0
 1115 0024 4CF25030 		movw	r0, #50000
 1116 0028 FFF7FEFF 		bl	delay
 363:../Main.c     **** 	uint8_t temp = 0;
 1117              		.loc 1 363 0
 1118 002c 4FF00003 		mov	r3, #0
 1119 0030 FB70     		strb	r3, [r7, #3]
 364:../Main.c     **** 
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 1120              		.loc 1 365 0
 1121 0032 4FF00703 		mov	r3, #7
 1122 0036 7B60     		str	r3, [r7, #4]
 1123 0038 20E0     		b	.L40
 1124              	.L42:
 366:../Main.c     **** 	{
 367:../Main.c     **** 		if (IO004_ReadPin(DATA)) temp |= (1<<i);
 1125              		.loc 1 367 0
 1126 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1127 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1128 0042 5B68     		ldr	r3, [r3, #4]
 1129 0044 5A6A     		ldr	r2, [r3, #36]
 1130 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1131 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1132 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1133 0050 22FA03F3 		lsr	r3, r2, r3
 1134 0054 03F00103 		and	r3, r3, #1
 1135 0058 002B     		cmp	r3, #0
 1136 005a 09D0     		beq	.L41
 1137              		.loc 1 367 0 is_stmt 0 discriminator 1
 1138 005c 4FF00102 		mov	r2, #1
 1139 0060 7B68     		ldr	r3, [r7, #4]
 1140 0062 02FA03F3 		lsl	r3, r2, r3
 1141 0066 DAB2     		uxtb	r2, r3
 1142 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1143 006a 1343     		orrs	r3, r3, r2
 1144 006c DBB2     		uxtb	r3, r3
 1145 006e FB70     		strb	r3, [r7, #3]
 1146              	.L41:
 368:../Main.c     **** 		pulse_R();
 1147              		.loc 1 368 0 is_stmt 1
 1148 0070 FFF7FEFF 		bl	pulse_R
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 1149              		.loc 1 365 0
 1150 0074 7B68     		ldr	r3, [r7, #4]
 1151 0076 03F1FF33 		add	r3, r3, #-1
 1152 007a 7B60     		str	r3, [r7, #4]
 1153              	.L40:
 365:../Main.c     **** 	for (i = 7; i > -1; i --)
 1154              		.loc 1 365 0 is_stmt 0 discriminator 1
 1155 007c 7B68     		ldr	r3, [r7, #4]
 1156 007e 002B     		cmp	r3, #0
 1157 0080 DBDA     		bge	.L42
 369:../Main.c     **** 	}
 370:../Main.c     **** 	data_R = temp;
 1158              		.loc 1 370 0 is_stmt 1
 1159 0082 40F20003 		movw	r3, #:lower16:data_R
 1160 0086 C0F20003 		movt	r3, #:upper16:data_R
 1161 008a FA78     		ldrb	r2, [r7, #3]
 1162 008c 1A70     		strb	r2, [r3, #0]
 371:../Main.c     **** 	IO004_SetPin(CE);
 1163              		.loc 1 371 0
 1164 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1165 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1166 0096 5A68     		ldr	r2, [r3, #4]
 1167 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1168 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1169 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1170 00a2 4FF00101 		mov	r1, #1
 1171 00a6 01FA03F3 		lsl	r3, r1, r3
 1172 00aa 5360     		str	r3, [r2, #4]
 372:../Main.c     **** 	delay(50000);
 1173              		.loc 1 372 0
 1174 00ac 4CF25030 		movw	r0, #50000
 1175 00b0 FFF7FEFF 		bl	delay
 373:../Main.c     **** }
 1176              		.loc 1 373 0
 1177 00b4 07F10807 		add	r7, r7, #8
 1178 00b8 BD46     		mov	sp, r7
 1179 00ba 80BD     		pop	{r7, pc}
 1180              		.cfi_endproc
 1181              	.LFE118:
 1183              		.section	.text.pulse_R,"ax",%progbits
 1184              		.align	2
 1185              		.global	pulse_R
 1186              		.thumb
 1187              		.thumb_func
 1189              	pulse_R:
 1190              	.LFB119:
 374:../Main.c     **** 
 375:../Main.c     **** void pulse_R()
 376:../Main.c     **** {
 1191              		.loc 1 376 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              	.LCFI6:
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 00AF     		add	r7, sp, #0
 1201              	.LCFI7:
 1202              		.cfi_def_cfa_register 7
 377:../Main.c     **** 	delay(300);
 1203              		.loc 1 377 0
 1204 0004 4FF49670 		mov	r0, #300
 1205 0008 FFF7FEFF 		bl	delay
 378:../Main.c     **** 	IO004_SetPin(CLK1);
 1206              		.loc 1 378 0
 1207 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1208 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1209 0014 5A68     		ldr	r2, [r3, #4]
 1210 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1211 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1212 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1213 0020 4FF00101 		mov	r1, #1
 1214 0024 01FA03F3 		lsl	r3, r1, r3
 1215 0028 5360     		str	r3, [r2, #4]
 379:../Main.c     **** 	delay(300);
 1216              		.loc 1 379 0
 1217 002a 4FF49670 		mov	r0, #300
 1218 002e FFF7FEFF 		bl	delay
 380:../Main.c     **** 	IO004_ResetPin(CLK1);
 1219              		.loc 1 380 0
 1220 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1221 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1222 003a 5A68     		ldr	r2, [r3, #4]
 1223 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1224 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1225 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1226 0046 4FF48031 		mov	r1, #65536
 1227 004a 01FA03F3 		lsl	r3, r1, r3
 1228 004e 5360     		str	r3, [r2, #4]
 381:../Main.c     **** }
 1229              		.loc 1 381 0
 1230 0050 80BD     		pop	{r7, pc}
 1231              		.cfi_endproc
 1232              	.LFE119:
 1234 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 1235              		.align	2
 1236              		.global	configure_E
 1237              		.thumb
 1238              		.thumb_func
 1240              	configure_E:
 1241              	.LFB120:
 382:../Main.c     **** 
 383:../Main.c     **** void configure_E()
 384:../Main.c     **** {
 1242              		.loc 1 384 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 8
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246 0000 80B5     		push	{r7, lr}
 1247              	.LCFI8:
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 7, -8
 1250              		.cfi_offset 14, -4
 1251 0002 82B0     		sub	sp, sp, #8
 1252              	.LCFI9:
 1253              		.cfi_def_cfa_offset 16
 1254 0004 00AF     		add	r7, sp, #0
 1255              	.LCFI10:
 1256              		.cfi_def_cfa_register 7
 385:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 386:../Main.c     **** 	configuration[0] = 0xC4;//RF_CH# e OP_MODE 0b11011110
 1257              		.loc 1 386 0
 1258 0006 40F20003 		movw	r3, #:lower16:configuration
 1259 000a C0F20003 		movt	r3, #:upper16:configuration
 1260 000e 4FF0C402 		mov	r2, #196
 1261 0012 1A70     		strb	r2, [r3, #0]
 387:../Main.c     **** 	configuration[1] = 0x4F;//RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1262              		.loc 1 387 0
 1263 0014 40F20003 		movw	r3, #:lower16:configuration
 1264 0018 C0F20003 		movt	r3, #:upper16:configuration
 1265 001c 4FF04F02 		mov	r2, #79
 1266 0020 5A70     		strb	r2, [r3, #1]
 388:../Main.c     **** 	configuration[2] = 0xA3;//addr_w
 1267              		.loc 1 388 0
 1268 0022 40F20003 		movw	r3, #:lower16:configuration
 1269 0026 C0F20003 		movt	r3, #:upper16:configuration
 1270 002a 4FF0A302 		mov	r2, #163
 1271 002e 9A70     		strb	r2, [r3, #2]
 389:../Main.c     **** 	configuration[3] = 0xEE;//Comeco enderco CH1 00000001
 1272              		.loc 1 389 0
 1273 0030 40F20003 		movw	r3, #:lower16:configuration
 1274 0034 C0F20003 		movt	r3, #:upper16:configuration
 1275 0038 4FF0EE02 		mov	r2, #238
 1276 003c DA70     		strb	r2, [r3, #3]
 390:../Main.c     **** 	configuration[4] = 0xDD;//0b00000000
 1277              		.loc 1 390 0
 1278 003e 40F20003 		movw	r3, #:lower16:configuration
 1279 0042 C0F20003 		movt	r3, #:upper16:configuration
 1280 0046 4FF0DD02 		mov	r2, #221
 1281 004a 1A71     		strb	r2, [r3, #4]
 391:../Main.c     **** 	configuration[5] = 0xCC;//0b11010100
 1282              		.loc 1 391 0
 1283 004c 40F20003 		movw	r3, #:lower16:configuration
 1284 0050 C0F20003 		movt	r3, #:upper16:configuration
 1285 0054 4FF0CC02 		mov	r2, #204
 1286 0058 5A71     		strb	r2, [r3, #5]
 392:../Main.c     **** 	configuration[6] = 0xBB;//0b11011111
 1287              		.loc 1 392 0
 1288 005a 40F20003 		movw	r3, #:lower16:configuration
 1289 005e C0F20003 		movt	r3, #:upper16:configuration
 1290 0062 4FF0BB02 		mov	r2, #187
 1291 0066 9A71     		strb	r2, [r3, #6]
 393:../Main.c     **** 	configuration[7] = 0xAA;//Fim enderco CH1 0b11101010
 1292              		.loc 1 393 0
 1293 0068 40F20003 		movw	r3, #:lower16:configuration
 1294 006c C0F20003 		movt	r3, #:upper16:configuration
 1295 0070 4FF0AA02 		mov	r2, #170
 1296 0074 DA71     		strb	r2, [r3, #7]
 394:../Main.c     **** 	configuration[8] = 0b00000000;//Comeco enderco CH2
 1297              		.loc 1 394 0
 1298 0076 40F20003 		movw	r3, #:lower16:configuration
 1299 007a C0F20003 		movt	r3, #:upper16:configuration
 1300 007e 4FF00002 		mov	r2, #0
 1301 0082 1A72     		strb	r2, [r3, #8]
 395:../Main.c     **** 	configuration[9] = 0b00000000;
 1302              		.loc 1 395 0
 1303 0084 40F20003 		movw	r3, #:lower16:configuration
 1304 0088 C0F20003 		movt	r3, #:upper16:configuration
 1305 008c 4FF00002 		mov	r2, #0
 1306 0090 5A72     		strb	r2, [r3, #9]
 396:../Main.c     **** 	configuration[10] = 0b00000000;
 1307              		.loc 1 396 0
 1308 0092 40F20003 		movw	r3, #:lower16:configuration
 1309 0096 C0F20003 		movt	r3, #:upper16:configuration
 1310 009a 4FF00002 		mov	r2, #0
 1311 009e 9A72     		strb	r2, [r3, #10]
 397:../Main.c     **** 	configuration[11] = 0b00000000;
 1312              		.loc 1 397 0
 1313 00a0 40F20003 		movw	r3, #:lower16:configuration
 1314 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1315 00a8 4FF00002 		mov	r2, #0
 1316 00ac DA72     		strb	r2, [r3, #11]
 398:../Main.c     **** 	configuration[12] = 0b00000000;//Fim enderco CH2
 1317              		.loc 1 398 0
 1318 00ae 40F20003 		movw	r3, #:lower16:configuration
 1319 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1320 00b6 4FF00002 		mov	r2, #0
 1321 00ba 1A73     		strb	r2, [r3, #12]
 399:../Main.c     **** 	configuration[13] = 0x28;//num bits enviados (1 byte nesse ex) TODO arrumar
 1322              		.loc 1 399 0
 1323 00bc 40F20003 		movw	r3, #:lower16:configuration
 1324 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1325 00c4 4FF02802 		mov	r2, #40
 1326 00c8 5A73     		strb	r2, [r3, #13]
 400:../Main.c     **** 	configuration[14] = 0b00000000;
 1327              		.loc 1 400 0
 1328 00ca 40F20003 		movw	r3, #:lower16:configuration
 1329 00ce C0F20003 		movt	r3, #:upper16:configuration
 1330 00d2 4FF00002 		mov	r2, #0
 1331 00d6 9A73     		strb	r2, [r3, #14]
 401:../Main.c     **** 
 402:../Main.c     **** 	IO004_ResetPin(CE);
 1332              		.loc 1 402 0
 1333 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1334 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1335 00e0 5A68     		ldr	r2, [r3, #4]
 1336 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1337 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1338 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1339 00ec 4FF48031 		mov	r1, #65536
 1340 00f0 01FA03F3 		lsl	r3, r1, r3
 1341 00f4 5360     		str	r3, [r2, #4]
 403:../Main.c     **** 	IO004_SetPin(CS);
 1342              		.loc 1 403 0
 1343 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1344 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1345 00fe 5A68     		ldr	r2, [r3, #4]
 1346 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1347 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1348 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1349 010a 4FF00101 		mov	r1, #1
 1350 010e 01FA03F3 		lsl	r3, r1, r3
 1351 0112 5360     		str	r3, [r2, #4]
 404:../Main.c     **** 	int i, j;
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 1352              		.loc 1 405 0
 1353 0114 4FF00E03 		mov	r3, #14
 1354 0118 7B60     		str	r3, [r7, #4]
 1355 011a 3FE0     		b	.L45
 1356              	.L50:
 406:../Main.c     **** 	{
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 1357              		.loc 1 407 0
 1358 011c 4FF00703 		mov	r3, #7
 1359 0120 3B60     		str	r3, [r7, #0]
 1360 0122 34E0     		b	.L46
 1361              	.L49:
 408:../Main.c     **** 		{
 409:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 1362              		.loc 1 409 0
 1363 0124 40F20003 		movw	r3, #:lower16:configuration
 1364 0128 C0F20003 		movt	r3, #:upper16:configuration
 1365 012c 7A68     		ldr	r2, [r7, #4]
 1366 012e 9B18     		adds	r3, r3, r2
 1367 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1368 0132 1A46     		mov	r2, r3
 1369 0134 4FF00101 		mov	r1, #1
 1370 0138 3B68     		ldr	r3, [r7, #0]
 1371 013a 01FA03F3 		lsl	r3, r1, r3
 1372 013e 1340     		ands	r3, r3, r2
 1373 0140 002B     		cmp	r3, #0
 1374 0142 0FDD     		ble	.L47
 1375              		.loc 1 409 0 is_stmt 0 discriminator 1
 1376 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1377 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1378 014c 5A68     		ldr	r2, [r3, #4]
 1379 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1380 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1381 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1382 0158 4FF00101 		mov	r1, #1
 1383 015c 01FA03F3 		lsl	r3, r1, r3
 1384 0160 5360     		str	r3, [r2, #4]
 1385 0162 0EE0     		b	.L48
 1386              	.L47:
 410:../Main.c     **** 			else IO004_ResetPin(DATA);;
 1387              		.loc 1 410 0 is_stmt 1
 1388 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1389 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1390 016c 5A68     		ldr	r2, [r3, #4]
 1391 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1392 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1393 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1394 0178 4FF48031 		mov	r1, #65536
 1395 017c 01FA03F3 		lsl	r3, r1, r3
 1396 0180 5360     		str	r3, [r2, #4]
 1397              	.L48:
 411:../Main.c     **** 			pulse_R();
 1398              		.loc 1 411 0
 1399 0182 FFF7FEFF 		bl	pulse_R
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 1400              		.loc 1 407 0
 1401 0186 3B68     		ldr	r3, [r7, #0]
 1402 0188 03F1FF33 		add	r3, r3, #-1
 1403 018c 3B60     		str	r3, [r7, #0]
 1404              	.L46:
 407:../Main.c     **** 		for (j = 7; j > -1; j--)
 1405              		.loc 1 407 0 is_stmt 0 discriminator 1
 1406 018e 3B68     		ldr	r3, [r7, #0]
 1407 0190 002B     		cmp	r3, #0
 1408 0192 C7DA     		bge	.L49
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 1409              		.loc 1 405 0 is_stmt 1
 1410 0194 7B68     		ldr	r3, [r7, #4]
 1411 0196 03F1FF33 		add	r3, r3, #-1
 1412 019a 7B60     		str	r3, [r7, #4]
 1413              	.L45:
 405:../Main.c     **** 	for (i = 14; i > -1; i--)
 1414              		.loc 1 405 0 is_stmt 0 discriminator 1
 1415 019c 7B68     		ldr	r3, [r7, #4]
 1416 019e 002B     		cmp	r3, #0
 1417 01a0 BCDA     		bge	.L50
 412:../Main.c     **** 		}
 413:../Main.c     **** 	}
 414:../Main.c     **** 	IO004_ResetPin(CS);
 1418              		.loc 1 414 0 is_stmt 1
 1419 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1420 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1421 01aa 5A68     		ldr	r2, [r3, #4]
 1422 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1423 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1424 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1425 01b6 4FF48031 		mov	r1, #65536
 1426 01ba 01FA03F3 		lsl	r3, r1, r3
 1427 01be 5360     		str	r3, [r2, #4]
 415:../Main.c     **** 	delay(50000);
 1428              		.loc 1 415 0
 1429 01c0 4CF25030 		movw	r0, #50000
 1430 01c4 FFF7FEFF 		bl	delay
 416:../Main.c     **** }
 1431              		.loc 1 416 0
 1432 01c8 07F10807 		add	r7, r7, #8
 1433 01cc BD46     		mov	sp, r7
 1434 01ce 80BD     		pop	{r7, pc}
 1435              		.cfi_endproc
 1436              	.LFE120:
 1438              		.section	.text.write_E,"ax",%progbits
 1439              		.align	2
 1440              		.global	write_E
 1441              		.thumb
 1442              		.thumb_func
 1444              	write_E:
 1445              	.LFB121:
 417:../Main.c     **** void write_E()
 418:../Main.c     **** {
 1446              		.loc 1 418 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450 0000 80B5     		push	{r7, lr}
 1451              	.LCFI11:
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 7, -8
 1454              		.cfi_offset 14, -4
 1455 0002 82B0     		sub	sp, sp, #8
 1456              	.LCFI12:
 1457              		.cfi_def_cfa_offset 16
 1458 0004 00AF     		add	r7, sp, #0
 1459              	.LCFI13:
 1460              		.cfi_def_cfa_register 7
 419:../Main.c     **** 	int i, j;
 420:../Main.c     **** 	IO004_SetPin(CE);
 1461              		.loc 1 420 0
 1462 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1463 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1464 000e 5A68     		ldr	r2, [r3, #4]
 1465 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1466 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1467 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1468 001a 4FF00101 		mov	r1, #1
 1469 001e 01FA03F3 		lsl	r3, r1, r3
 1470 0022 5360     		str	r3, [r2, #4]
 421:../Main.c     **** 	delay(1000);
 1471              		.loc 1 421 0
 1472 0024 4FF47A70 		mov	r0, #1000
 1473 0028 FFF7FEFF 		bl	delay
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1474              		.loc 1 422 0
 1475 002c 4FF00703 		mov	r3, #7
 1476 0030 7B60     		str	r3, [r7, #4]
 1477 0032 3FE0     		b	.L52
 1478              	.L57:
 423:../Main.c     **** 	{
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 1479              		.loc 1 424 0
 1480 0034 4FF00703 		mov	r3, #7
 1481 0038 3B60     		str	r3, [r7, #0]
 1482 003a 34E0     		b	.L53
 1483              	.L56:
 425:../Main.c     **** 		{
 426:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 1484              		.loc 1 426 0
 1485 003c 40F20003 		movw	r3, #:lower16:configuration
 1486 0040 C0F20003 		movt	r3, #:upper16:configuration
 1487 0044 7A68     		ldr	r2, [r7, #4]
 1488 0046 9B18     		adds	r3, r3, r2
 1489 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1490 004a 1A46     		mov	r2, r3
 1491 004c 4FF00101 		mov	r1, #1
 1492 0050 3B68     		ldr	r3, [r7, #0]
 1493 0052 01FA03F3 		lsl	r3, r1, r3
 1494 0056 1340     		ands	r3, r3, r2
 1495 0058 002B     		cmp	r3, #0
 1496 005a 0FDD     		ble	.L54
 1497              		.loc 1 426 0 is_stmt 0 discriminator 1
 1498 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1499 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1500 0064 5A68     		ldr	r2, [r3, #4]
 1501 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1502 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1503 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1504 0070 4FF00101 		mov	r1, #1
 1505 0074 01FA03F3 		lsl	r3, r1, r3
 1506 0078 5360     		str	r3, [r2, #4]
 1507 007a 0EE0     		b	.L55
 1508              	.L54:
 427:../Main.c     **** 			else IO004_ResetPin(DATA);
 1509              		.loc 1 427 0 is_stmt 1
 1510 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1511 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1512 0084 5A68     		ldr	r2, [r3, #4]
 1513 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1514 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1515 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1516 0090 4FF48031 		mov	r1, #65536
 1517 0094 01FA03F3 		lsl	r3, r1, r3
 1518 0098 5360     		str	r3, [r2, #4]
 1519              	.L55:
 428:../Main.c     **** 			pulse_R();
 1520              		.loc 1 428 0
 1521 009a FFF7FEFF 		bl	pulse_R
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 1522              		.loc 1 424 0
 1523 009e 3B68     		ldr	r3, [r7, #0]
 1524 00a0 03F1FF33 		add	r3, r3, #-1
 1525 00a4 3B60     		str	r3, [r7, #0]
 1526              	.L53:
 424:../Main.c     **** 		for (j = 7; j > -1; j --)
 1527              		.loc 1 424 0 is_stmt 0 discriminator 1
 1528 00a6 3B68     		ldr	r3, [r7, #0]
 1529 00a8 002B     		cmp	r3, #0
 1530 00aa C7DA     		bge	.L56
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1531              		.loc 1 422 0 is_stmt 1
 1532 00ac 7B68     		ldr	r3, [r7, #4]
 1533 00ae 03F1FF33 		add	r3, r3, #-1
 1534 00b2 7B60     		str	r3, [r7, #4]
 1535              	.L52:
 422:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1536              		.loc 1 422 0 is_stmt 0 discriminator 1
 1537 00b4 7B68     		ldr	r3, [r7, #4]
 1538 00b6 022B     		cmp	r3, #2
 1539 00b8 BCDC     		bgt	.L57
 429:../Main.c     **** 		}
 430:../Main.c     **** 	}
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1540              		.loc 1 431 0 is_stmt 1
 1541 00ba 4FF00003 		mov	r3, #0
 1542 00be 7B60     		str	r3, [r7, #4]
 1543 00c0 3FE0     		b	.L58
 1544              	.L63:
 432:../Main.c     **** 	{
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 1545              		.loc 1 433 0
 1546 00c2 4FF00703 		mov	r3, #7
 1547 00c6 3B60     		str	r3, [r7, #0]
 1548 00c8 34E0     		b	.L59
 1549              	.L62:
 434:../Main.c     **** 		{
 435:../Main.c     **** 			if ((data_E[i] & (1<<j))>0) IO004_SetPin(DATA);
 1550              		.loc 1 435 0
 1551 00ca 40F20003 		movw	r3, #:lower16:data_E
 1552 00ce C0F20003 		movt	r3, #:upper16:data_E
 1553 00d2 7A68     		ldr	r2, [r7, #4]
 1554 00d4 9B18     		adds	r3, r3, r2
 1555 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1556 00d8 1A46     		mov	r2, r3
 1557 00da 4FF00101 		mov	r1, #1
 1558 00de 3B68     		ldr	r3, [r7, #0]
 1559 00e0 01FA03F3 		lsl	r3, r1, r3
 1560 00e4 1340     		ands	r3, r3, r2
 1561 00e6 002B     		cmp	r3, #0
 1562 00e8 0FDD     		ble	.L60
 1563              		.loc 1 435 0 is_stmt 0 discriminator 1
 1564 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1565 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1566 00f2 5A68     		ldr	r2, [r3, #4]
 1567 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1568 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1569 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1570 00fe 4FF00101 		mov	r1, #1
 1571 0102 01FA03F3 		lsl	r3, r1, r3
 1572 0106 5360     		str	r3, [r2, #4]
 1573 0108 0EE0     		b	.L61
 1574              	.L60:
 436:../Main.c     **** 			else IO004_ResetPin(DATA);
 1575              		.loc 1 436 0 is_stmt 1
 1576 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1577 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1578 0112 5A68     		ldr	r2, [r3, #4]
 1579 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1580 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1581 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1582 011e 4FF48031 		mov	r1, #65536
 1583 0122 01FA03F3 		lsl	r3, r1, r3
 1584 0126 5360     		str	r3, [r2, #4]
 1585              	.L61:
 437:../Main.c     **** 			pulse_R();
 1586              		.loc 1 437 0
 1587 0128 FFF7FEFF 		bl	pulse_R
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 1588              		.loc 1 433 0
 1589 012c 3B68     		ldr	r3, [r7, #0]
 1590 012e 03F1FF33 		add	r3, r3, #-1
 1591 0132 3B60     		str	r3, [r7, #0]
 1592              	.L59:
 433:../Main.c     **** 		for (j = 7; j > -1; j --)
 1593              		.loc 1 433 0 is_stmt 0 discriminator 1
 1594 0134 3B68     		ldr	r3, [r7, #0]
 1595 0136 002B     		cmp	r3, #0
 1596 0138 C7DA     		bge	.L62
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1597              		.loc 1 431 0 is_stmt 1
 1598 013a 7B68     		ldr	r3, [r7, #4]
 1599 013c 03F10103 		add	r3, r3, #1
 1600 0140 7B60     		str	r3, [r7, #4]
 1601              	.L58:
 431:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1602              		.loc 1 431 0 is_stmt 0 discriminator 1
 1603 0142 7B68     		ldr	r3, [r7, #4]
 1604 0144 042B     		cmp	r3, #4
 1605 0146 BCDD     		ble	.L63
 438:../Main.c     **** 		}
 439:../Main.c     **** 	}//termina de enviar dados
 440:../Main.c     **** 	IO004_ResetPin(CE);
 1606              		.loc 1 440 0 is_stmt 1
 1607 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1608 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1609 0150 5A68     		ldr	r2, [r3, #4]
 1610 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1611 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1612 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1613 015c 4FF48031 		mov	r1, #65536
 1614 0160 01FA03F3 		lsl	r3, r1, r3
 1615 0164 5360     		str	r3, [r2, #4]
 441:../Main.c     **** 	delay(5000);
 1616              		.loc 1 441 0
 1617 0166 41F28830 		movw	r0, #5000
 1618 016a FFF7FEFF 		bl	delay
 442:../Main.c     **** }
 1619              		.loc 1 442 0
 1620 016e 07F10807 		add	r7, r7, #8
 1621 0172 BD46     		mov	sp, r7
 1622 0174 80BD     		pop	{r7, pc}
 1623              		.cfi_endproc
 1624              	.LFE121:
 1626 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1627              		.align	2
 1628              		.global	psxConfiguraControle
 1629              		.thumb
 1630              		.thumb_func
 1632              	psxConfiguraControle:
 1633              	.LFB122:
 443:../Main.c     **** /***************************************************/
 444:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 445:../Main.c     **** /***************************************************/
 446:../Main.c     **** void psxConfiguraControle()
 447:../Main.c     **** {
 1634              		.loc 1 447 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638 0000 80B5     		push	{r7, lr}
 1639              	.LCFI14:
 1640              		.cfi_def_cfa_offset 8
 1641              		.cfi_offset 7, -8
 1642              		.cfi_offset 14, -4
 1643 0002 00AF     		add	r7, sp, #0
 1644              	.LCFI15:
 1645              		.cfi_def_cfa_register 7
 448:../Main.c     **** 	psxEnterConfigMode();
 1646              		.loc 1 448 0
 1647 0004 FFF7FEFF 		bl	psxEnterConfigMode
 449:../Main.c     **** 	psxSetAnalogMode();
 1648              		.loc 1 449 0
 1649 0008 FFF7FEFF 		bl	psxSetAnalogMode
 450:../Main.c     **** 	psxExitConfigMode();
 1650              		.loc 1 450 0
 1651 000c FFF7FEFF 		bl	psxExitConfigMode
 451:../Main.c     **** }
 1652              		.loc 1 451 0
 1653 0010 80BD     		pop	{r7, pc}
 1654              		.cfi_endproc
 1655              	.LFE122:
 1657 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1658              		.align	2
 1659              		.global	psxEnterConfigMode
 1660              		.thumb
 1661              		.thumb_func
 1663              	psxEnterConfigMode:
 1664              	.LFB123:
 452:../Main.c     **** 
 453:../Main.c     **** void psxEnterConfigMode()
 454:../Main.c     **** {
 1665              		.loc 1 454 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 8
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669 0000 80B5     		push	{r7, lr}
 1670              	.LCFI16:
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 7, -8
 1673              		.cfi_offset 14, -4
 1674 0002 82B0     		sub	sp, sp, #8
 1675              	.LCFI17:
 1676              		.cfi_def_cfa_offset 16
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI18:
 1679              		.cfi_def_cfa_register 7
 455:../Main.c     **** 	int psxByte = 0;
 1680              		.loc 1 455 0
 1681 0006 4FF00003 		mov	r3, #0
 1682 000a 7B60     		str	r3, [r7, #4]
 456:../Main.c     **** 	IO004_SetPin(CMD);
 1683              		.loc 1 456 0
 1684 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1685 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1686 0014 5A68     		ldr	r2, [r3, #4]
 1687 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1688 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1689 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1690 0020 4FF00101 		mov	r1, #1
 1691 0024 01FA03F3 		lsl	r3, r1, r3
 1692 0028 5360     		str	r3, [r2, #4]
 457:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1693              		.loc 1 457 0
 1694 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1695 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1696 0032 5A68     		ldr	r2, [r3, #4]
 1697 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1698 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1699 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1700 003e 4FF00101 		mov	r1, #1
 1701 0042 01FA03F3 		lsl	r3, r1, r3
 1702 0046 5360     		str	r3, [r2, #4]
 458:../Main.c     **** 	IO004_ResetPin(ATT);
 1703              		.loc 1 458 0
 1704 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1705 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1706 0050 5A68     		ldr	r2, [r3, #4]
 1707 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1708 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1709 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1710 005c 4FF48031 		mov	r1, #65536
 1711 0060 01FA03F3 		lsl	r3, r1, r3
 1712 0064 5360     		str	r3, [r2, #4]
 459:../Main.c     **** 	delay(tempoInicio);
 1713              		.loc 1 459 0
 1714 0066 4FF49670 		mov	r0, #300
 1715 006a FFF7FEFF 		bl	delay
 460:../Main.c     **** 
 461:../Main.c     **** 	psxByte = 1;
 1716              		.loc 1 461 0
 1717 006e 4FF00103 		mov	r3, #1
 1718 0072 7B60     		str	r3, [r7, #4]
 462:../Main.c     **** 	psxTrocaByte(psxByte);
 1719              		.loc 1 462 0
 1720 0074 7868     		ldr	r0, [r7, #4]
 1721 0076 FFF7FEFF 		bl	psxTrocaByte
 463:../Main.c     **** 
 464:../Main.c     **** 	psxByte = 0x43;
 1722              		.loc 1 464 0
 1723 007a 4FF04303 		mov	r3, #67
 1724 007e 7B60     		str	r3, [r7, #4]
 465:../Main.c     **** 	psxTrocaByte(psxByte);
 1725              		.loc 1 465 0
 1726 0080 7868     		ldr	r0, [r7, #4]
 1727 0082 FFF7FEFF 		bl	psxTrocaByte
 466:../Main.c     **** 
 467:../Main.c     **** 	psxByte = 0;
 1728              		.loc 1 467 0
 1729 0086 4FF00003 		mov	r3, #0
 1730 008a 7B60     		str	r3, [r7, #4]
 468:../Main.c     **** 	psxTrocaByte(psxByte);
 1731              		.loc 1 468 0
 1732 008c 7868     		ldr	r0, [r7, #4]
 1733 008e FFF7FEFF 		bl	psxTrocaByte
 469:../Main.c     **** 
 470:../Main.c     **** 	psxByte = 0x1;
 1734              		.loc 1 470 0
 1735 0092 4FF00103 		mov	r3, #1
 1736 0096 7B60     		str	r3, [r7, #4]
 471:../Main.c     **** 	psxTrocaByte(psxByte);
 1737              		.loc 1 471 0
 1738 0098 7868     		ldr	r0, [r7, #4]
 1739 009a FFF7FEFF 		bl	psxTrocaByte
 472:../Main.c     **** 
 473:../Main.c     **** 	psxByte = 0;
 1740              		.loc 1 473 0
 1741 009e 4FF00003 		mov	r3, #0
 1742 00a2 7B60     		str	r3, [r7, #4]
 474:../Main.c     **** 	psxTrocaByte(psxByte);
 1743              		.loc 1 474 0
 1744 00a4 7868     		ldr	r0, [r7, #4]
 1745 00a6 FFF7FEFF 		bl	psxTrocaByte
 475:../Main.c     **** 
 476:../Main.c     **** 	IO004_SetPin(ATT);
 1746              		.loc 1 476 0
 1747 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1748 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1749 00b2 5A68     		ldr	r2, [r3, #4]
 1750 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1751 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1752 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1753 00be 4FF00101 		mov	r1, #1
 1754 00c2 01FA03F3 		lsl	r3, r1, r3
 1755 00c6 5360     		str	r3, [r2, #4]
 477:../Main.c     **** }
 1756              		.loc 1 477 0
 1757 00c8 07F10807 		add	r7, r7, #8
 1758 00cc BD46     		mov	sp, r7
 1759 00ce 80BD     		pop	{r7, pc}
 1760              		.cfi_endproc
 1761              	.LFE123:
 1763              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1764              		.align	2
 1765              		.global	psxSetAnalogMode
 1766              		.thumb
 1767              		.thumb_func
 1769              	psxSetAnalogMode:
 1770              	.LFB124:
 478:../Main.c     **** 
 479:../Main.c     **** void psxSetAnalogMode()
 480:../Main.c     **** {
 1771              		.loc 1 480 0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 8
 1774              		@ frame_needed = 1, uses_anonymous_args = 0
 1775 0000 80B5     		push	{r7, lr}
 1776              	.LCFI19:
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 7, -8
 1779              		.cfi_offset 14, -4
 1780 0002 82B0     		sub	sp, sp, #8
 1781              	.LCFI20:
 1782              		.cfi_def_cfa_offset 16
 1783 0004 00AF     		add	r7, sp, #0
 1784              	.LCFI21:
 1785              		.cfi_def_cfa_register 7
 481:../Main.c     **** 	int psxByte = 0;
 1786              		.loc 1 481 0
 1787 0006 4FF00003 		mov	r3, #0
 1788 000a 7B60     		str	r3, [r7, #4]
 482:../Main.c     **** 	IO004_SetPin(CMD);
 1789              		.loc 1 482 0
 1790 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1791 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1792 0014 5A68     		ldr	r2, [r3, #4]
 1793 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1794 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1795 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1796 0020 4FF00101 		mov	r1, #1
 1797 0024 01FA03F3 		lsl	r3, r1, r3
 1798 0028 5360     		str	r3, [r2, #4]
 483:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1799              		.loc 1 483 0
 1800 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1801 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1802 0032 5A68     		ldr	r2, [r3, #4]
 1803 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1804 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1805 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1806 003e 4FF00101 		mov	r1, #1
 1807 0042 01FA03F3 		lsl	r3, r1, r3
 1808 0046 5360     		str	r3, [r2, #4]
 484:../Main.c     **** 	IO004_ResetPin(ATT);
 1809              		.loc 1 484 0
 1810 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1811 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1812 0050 5A68     		ldr	r2, [r3, #4]
 1813 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1814 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1815 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1816 005c 4FF48031 		mov	r1, #65536
 1817 0060 01FA03F3 		lsl	r3, r1, r3
 1818 0064 5360     		str	r3, [r2, #4]
 485:../Main.c     **** 	delay(tempoInicio);
 1819              		.loc 1 485 0
 1820 0066 4FF49670 		mov	r0, #300
 1821 006a FFF7FEFF 		bl	delay
 486:../Main.c     **** 
 487:../Main.c     **** 	psxByte = 1;
 1822              		.loc 1 487 0
 1823 006e 4FF00103 		mov	r3, #1
 1824 0072 7B60     		str	r3, [r7, #4]
 488:../Main.c     **** 	psxTrocaByte(psxByte);
 1825              		.loc 1 488 0
 1826 0074 7868     		ldr	r0, [r7, #4]
 1827 0076 FFF7FEFF 		bl	psxTrocaByte
 489:../Main.c     **** 
 490:../Main.c     **** 	psxByte = 0x44;
 1828              		.loc 1 490 0
 1829 007a 4FF04403 		mov	r3, #68
 1830 007e 7B60     		str	r3, [r7, #4]
 491:../Main.c     **** 	psxTrocaByte(psxByte);
 1831              		.loc 1 491 0
 1832 0080 7868     		ldr	r0, [r7, #4]
 1833 0082 FFF7FEFF 		bl	psxTrocaByte
 492:../Main.c     **** 
 493:../Main.c     **** 	psxByte = 0;
 1834              		.loc 1 493 0
 1835 0086 4FF00003 		mov	r3, #0
 1836 008a 7B60     		str	r3, [r7, #4]
 494:../Main.c     **** 	psxTrocaByte(psxByte);
 1837              		.loc 1 494 0
 1838 008c 7868     		ldr	r0, [r7, #4]
 1839 008e FFF7FEFF 		bl	psxTrocaByte
 495:../Main.c     **** 
 496:../Main.c     **** 	psxByte = 0x1;
 1840              		.loc 1 496 0
 1841 0092 4FF00103 		mov	r3, #1
 1842 0096 7B60     		str	r3, [r7, #4]
 497:../Main.c     **** 	psxTrocaByte(psxByte);
 1843              		.loc 1 497 0
 1844 0098 7868     		ldr	r0, [r7, #4]
 1845 009a FFF7FEFF 		bl	psxTrocaByte
 498:../Main.c     **** 
 499:../Main.c     **** 	psxByte = 0x3;
 1846              		.loc 1 499 0
 1847 009e 4FF00303 		mov	r3, #3
 1848 00a2 7B60     		str	r3, [r7, #4]
 500:../Main.c     **** 	psxTrocaByte(psxByte);
 1849              		.loc 1 500 0
 1850 00a4 7868     		ldr	r0, [r7, #4]
 1851 00a6 FFF7FEFF 		bl	psxTrocaByte
 501:../Main.c     **** 
 502:../Main.c     **** 	psxByte = 0;
 1852              		.loc 1 502 0
 1853 00aa 4FF00003 		mov	r3, #0
 1854 00ae 7B60     		str	r3, [r7, #4]
 503:../Main.c     **** 	psxTrocaByte(psxByte);
 1855              		.loc 1 503 0
 1856 00b0 7868     		ldr	r0, [r7, #4]
 1857 00b2 FFF7FEFF 		bl	psxTrocaByte
 504:../Main.c     **** 
 505:../Main.c     **** 	psxByte = 0;
 1858              		.loc 1 505 0
 1859 00b6 4FF00003 		mov	r3, #0
 1860 00ba 7B60     		str	r3, [r7, #4]
 506:../Main.c     **** 	psxTrocaByte(psxByte);
 1861              		.loc 1 506 0
 1862 00bc 7868     		ldr	r0, [r7, #4]
 1863 00be FFF7FEFF 		bl	psxTrocaByte
 507:../Main.c     **** 
 508:../Main.c     **** 	psxByte = 0;
 1864              		.loc 1 508 0
 1865 00c2 4FF00003 		mov	r3, #0
 1866 00c6 7B60     		str	r3, [r7, #4]
 509:../Main.c     **** 	psxTrocaByte(psxByte);
 1867              		.loc 1 509 0
 1868 00c8 7868     		ldr	r0, [r7, #4]
 1869 00ca FFF7FEFF 		bl	psxTrocaByte
 510:../Main.c     **** 
 511:../Main.c     **** 	psxByte = 0;
 1870              		.loc 1 511 0
 1871 00ce 4FF00003 		mov	r3, #0
 1872 00d2 7B60     		str	r3, [r7, #4]
 512:../Main.c     **** 	psxTrocaByte(psxByte);
 1873              		.loc 1 512 0
 1874 00d4 7868     		ldr	r0, [r7, #4]
 1875 00d6 FFF7FEFF 		bl	psxTrocaByte
 513:../Main.c     **** 
 514:../Main.c     **** 	IO004_SetPin(ATT);
 1876              		.loc 1 514 0
 1877 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1878 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1879 00e2 5A68     		ldr	r2, [r3, #4]
 1880 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1881 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1882 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1883 00ee 4FF00101 		mov	r1, #1
 1884 00f2 01FA03F3 		lsl	r3, r1, r3
 1885 00f6 5360     		str	r3, [r2, #4]
 515:../Main.c     **** }
 1886              		.loc 1 515 0
 1887 00f8 07F10807 		add	r7, r7, #8
 1888 00fc BD46     		mov	sp, r7
 1889 00fe 80BD     		pop	{r7, pc}
 1890              		.cfi_endproc
 1891              	.LFE124:
 1893              		.section	.text.psxExitConfigMode,"ax",%progbits
 1894              		.align	2
 1895              		.global	psxExitConfigMode
 1896              		.thumb
 1897              		.thumb_func
 1899              	psxExitConfigMode:
 1900              	.LFB125:
 516:../Main.c     **** 
 517:../Main.c     **** void psxExitConfigMode()
 518:../Main.c     **** {
 1901              		.loc 1 518 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905 0000 80B5     		push	{r7, lr}
 1906              	.LCFI22:
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 14, -4
 1910 0002 82B0     		sub	sp, sp, #8
 1911              	.LCFI23:
 1912              		.cfi_def_cfa_offset 16
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI24:
 1915              		.cfi_def_cfa_register 7
 519:../Main.c     **** 	int psxByte = 0;
 1916              		.loc 1 519 0
 1917 0006 4FF00003 		mov	r3, #0
 1918 000a 7B60     		str	r3, [r7, #4]
 520:../Main.c     **** 	IO004_SetPin(CMD);
 1919              		.loc 1 520 0
 1920 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1921 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1922 0014 5A68     		ldr	r2, [r3, #4]
 1923 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1924 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1925 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1926 0020 4FF00101 		mov	r1, #1
 1927 0024 01FA03F3 		lsl	r3, r1, r3
 1928 0028 5360     		str	r3, [r2, #4]
 521:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1929              		.loc 1 521 0
 1930 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1931 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1932 0032 5A68     		ldr	r2, [r3, #4]
 1933 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1934 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1935 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1936 003e 4FF00101 		mov	r1, #1
 1937 0042 01FA03F3 		lsl	r3, r1, r3
 1938 0046 5360     		str	r3, [r2, #4]
 522:../Main.c     **** 	IO004_ResetPin(ATT);
 1939              		.loc 1 522 0
 1940 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1941 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1942 0050 5A68     		ldr	r2, [r3, #4]
 1943 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1944 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1945 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1946 005c 4FF48031 		mov	r1, #65536
 1947 0060 01FA03F3 		lsl	r3, r1, r3
 1948 0064 5360     		str	r3, [r2, #4]
 523:../Main.c     **** 	delay(tempoInicio);
 1949              		.loc 1 523 0
 1950 0066 4FF49670 		mov	r0, #300
 1951 006a FFF7FEFF 		bl	delay
 524:../Main.c     **** 
 525:../Main.c     **** 	psxByte = 1;
 1952              		.loc 1 525 0
 1953 006e 4FF00103 		mov	r3, #1
 1954 0072 7B60     		str	r3, [r7, #4]
 526:../Main.c     **** 	psxTrocaByte(psxByte);
 1955              		.loc 1 526 0
 1956 0074 7868     		ldr	r0, [r7, #4]
 1957 0076 FFF7FEFF 		bl	psxTrocaByte
 527:../Main.c     **** 
 528:../Main.c     **** 	psxByte = 0x43;
 1958              		.loc 1 528 0
 1959 007a 4FF04303 		mov	r3, #67
 1960 007e 7B60     		str	r3, [r7, #4]
 529:../Main.c     **** 	psxTrocaByte(psxByte);
 1961              		.loc 1 529 0
 1962 0080 7868     		ldr	r0, [r7, #4]
 1963 0082 FFF7FEFF 		bl	psxTrocaByte
 530:../Main.c     **** 
 531:../Main.c     **** 	psxByte = 0;
 1964              		.loc 1 531 0
 1965 0086 4FF00003 		mov	r3, #0
 1966 008a 7B60     		str	r3, [r7, #4]
 532:../Main.c     **** 	psxTrocaByte(psxByte);
 1967              		.loc 1 532 0
 1968 008c 7868     		ldr	r0, [r7, #4]
 1969 008e FFF7FEFF 		bl	psxTrocaByte
 533:../Main.c     **** 
 534:../Main.c     **** 	psxByte = 0;
 1970              		.loc 1 534 0
 1971 0092 4FF00003 		mov	r3, #0
 1972 0096 7B60     		str	r3, [r7, #4]
 535:../Main.c     **** 	psxTrocaByte(psxByte);
 1973              		.loc 1 535 0
 1974 0098 7868     		ldr	r0, [r7, #4]
 1975 009a FFF7FEFF 		bl	psxTrocaByte
 536:../Main.c     **** 
 537:../Main.c     **** 	psxByte = 0x5A;
 1976              		.loc 1 537 0
 1977 009e 4FF05A03 		mov	r3, #90
 1978 00a2 7B60     		str	r3, [r7, #4]
 538:../Main.c     **** 	psxTrocaByte(psxByte);
 1979              		.loc 1 538 0
 1980 00a4 7868     		ldr	r0, [r7, #4]
 1981 00a6 FFF7FEFF 		bl	psxTrocaByte
 539:../Main.c     **** 
 540:../Main.c     **** 	psxByte = 0x5A;
 1982              		.loc 1 540 0
 1983 00aa 4FF05A03 		mov	r3, #90
 1984 00ae 7B60     		str	r3, [r7, #4]
 541:../Main.c     **** 	psxTrocaByte(psxByte);
 1985              		.loc 1 541 0
 1986 00b0 7868     		ldr	r0, [r7, #4]
 1987 00b2 FFF7FEFF 		bl	psxTrocaByte
 542:../Main.c     **** 
 543:../Main.c     **** 	psxByte = 0x5A;
 1988              		.loc 1 543 0
 1989 00b6 4FF05A03 		mov	r3, #90
 1990 00ba 7B60     		str	r3, [r7, #4]
 544:../Main.c     **** 	psxTrocaByte(psxByte);
 1991              		.loc 1 544 0
 1992 00bc 7868     		ldr	r0, [r7, #4]
 1993 00be FFF7FEFF 		bl	psxTrocaByte
 545:../Main.c     **** 
 546:../Main.c     **** 	psxByte = 0x5A;
 1994              		.loc 1 546 0
 1995 00c2 4FF05A03 		mov	r3, #90
 1996 00c6 7B60     		str	r3, [r7, #4]
 547:../Main.c     **** 	psxTrocaByte(psxByte);
 1997              		.loc 1 547 0
 1998 00c8 7868     		ldr	r0, [r7, #4]
 1999 00ca FFF7FEFF 		bl	psxTrocaByte
 548:../Main.c     **** 
 549:../Main.c     **** 	psxByte = 0x5A;
 2000              		.loc 1 549 0
 2001 00ce 4FF05A03 		mov	r3, #90
 2002 00d2 7B60     		str	r3, [r7, #4]
 550:../Main.c     **** 	psxTrocaByte(psxByte);
 2003              		.loc 1 550 0
 2004 00d4 7868     		ldr	r0, [r7, #4]
 2005 00d6 FFF7FEFF 		bl	psxTrocaByte
 551:../Main.c     **** 
 552:../Main.c     **** 	IO004_SetPin(ATT);
 2006              		.loc 1 552 0
 2007 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2008 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2009 00e2 5A68     		ldr	r2, [r3, #4]
 2010 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2011 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2012 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2013 00ee 4FF00101 		mov	r1, #1
 2014 00f2 01FA03F3 		lsl	r3, r1, r3
 2015 00f6 5360     		str	r3, [r2, #4]
 553:../Main.c     **** }
 2016              		.loc 1 553 0
 2017 00f8 07F10807 		add	r7, r7, #8
 2018 00fc BD46     		mov	sp, r7
 2019 00fe 80BD     		pop	{r7, pc}
 2020              		.cfi_endproc
 2021              	.LFE125:
 2023              		.section	.text.psxLeControle,"ax",%progbits
 2024              		.align	2
 2025              		.global	psxLeControle
 2026              		.thumb
 2027              		.thumb_func
 2029              	psxLeControle:
 2030              	.LFB126:
 554:../Main.c     **** 
 555:../Main.c     **** void psxLeControle()
 556:../Main.c     **** {
 2031              		.loc 1 556 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 8
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035 0000 80B5     		push	{r7, lr}
 2036              	.LCFI25:
 2037              		.cfi_def_cfa_offset 8
 2038              		.cfi_offset 7, -8
 2039              		.cfi_offset 14, -4
 2040 0002 82B0     		sub	sp, sp, #8
 2041              	.LCFI26:
 2042              		.cfi_def_cfa_offset 16
 2043 0004 00AF     		add	r7, sp, #0
 2044              	.LCFI27:
 2045              		.cfi_def_cfa_register 7
 557:../Main.c     **** 	int psxByte = 0;
 2046              		.loc 1 557 0
 2047 0006 4FF00003 		mov	r3, #0
 2048 000a 3B60     		str	r3, [r7, #0]
 558:../Main.c     **** 	int psxCont;
 559:../Main.c     **** 
 560:../Main.c     **** 	IO004_SetPin(CMD);
 2049              		.loc 1 560 0
 2050 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2051 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2052 0014 5A68     		ldr	r2, [r3, #4]
 2053 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2054 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2055 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2056 0020 4FF00101 		mov	r1, #1
 2057 0024 01FA03F3 		lsl	r3, r1, r3
 2058 0028 5360     		str	r3, [r2, #4]
 561:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2059              		.loc 1 561 0
 2060 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2061 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2062 0032 5A68     		ldr	r2, [r3, #4]
 2063 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2064 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2065 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2066 003e 4FF00101 		mov	r1, #1
 2067 0042 01FA03F3 		lsl	r3, r1, r3
 2068 0046 5360     		str	r3, [r2, #4]
 562:../Main.c     **** 	IO004_ResetPin(ATT);
 2069              		.loc 1 562 0
 2070 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2071 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2072 0050 5A68     		ldr	r2, [r3, #4]
 2073 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2074 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2075 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2076 005c 4FF48031 		mov	r1, #65536
 2077 0060 01FA03F3 		lsl	r3, r1, r3
 2078 0064 5360     		str	r3, [r2, #4]
 563:../Main.c     **** 	delay(tempoInicio);
 2079              		.loc 1 563 0
 2080 0066 4FF49670 		mov	r0, #300
 2081 006a FFF7FEFF 		bl	delay
 564:../Main.c     **** 
 565:../Main.c     **** 	psxByte = 1;
 2082              		.loc 1 565 0
 2083 006e 4FF00103 		mov	r3, #1
 2084 0072 3B60     		str	r3, [r7, #0]
 566:../Main.c     **** 	psxTrocaByte(psxByte);
 2085              		.loc 1 566 0
 2086 0074 3868     		ldr	r0, [r7, #0]
 2087 0076 FFF7FEFF 		bl	psxTrocaByte
 567:../Main.c     **** 
 568:../Main.c     **** 	psxByte = 0x42;
 2088              		.loc 1 568 0
 2089 007a 4FF04203 		mov	r3, #66
 2090 007e 3B60     		str	r3, [r7, #0]
 569:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2091              		.loc 1 569 0
 2092 0080 3868     		ldr	r0, [r7, #0]
 2093 0082 FFF7FEFF 		bl	psxTrocaByte
 2094 0086 0346     		mov	r3, r0
 2095 0088 DAB2     		uxtb	r2, r3
 2096 008a 40F20003 		movw	r3, #:lower16:psx_status
 2097 008e C0F20003 		movt	r3, #:upper16:psx_status
 2098 0092 1A70     		strb	r2, [r3, #0]
 570:../Main.c     **** 
 571:../Main.c     **** 	psxByte = 0;
 2099              		.loc 1 571 0
 2100 0094 4FF00003 		mov	r3, #0
 2101 0098 3B60     		str	r3, [r7, #0]
 572:../Main.c     **** 	psxTrocaByte(psxByte);
 2102              		.loc 1 572 0
 2103 009a 3868     		ldr	r0, [r7, #0]
 2104 009c FFF7FEFF 		bl	psxTrocaByte
 573:../Main.c     **** 
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 2105              		.loc 1 574 0
 2106 00a0 4FF00003 		mov	r3, #0
 2107 00a4 7B60     		str	r3, [r7, #4]
 2108 00a6 0FE0     		b	.L69
 2109              	.L70:
 575:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 2110              		.loc 1 575 0 discriminator 2
 2111 00a8 4FF00000 		mov	r0, #0
 2112 00ac FFF7FEFF 		bl	psxTrocaByte
 2113 00b0 0146     		mov	r1, r0
 2114 00b2 40F20003 		movw	r3, #:lower16:psxDado
 2115 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 2116 00ba 7A68     		ldr	r2, [r7, #4]
 2117 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 2118              		.loc 1 574 0 discriminator 2
 2119 00c0 7B68     		ldr	r3, [r7, #4]
 2120 00c2 03F10103 		add	r3, r3, #1
 2121 00c6 7B60     		str	r3, [r7, #4]
 2122              	.L69:
 574:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 2123              		.loc 1 574 0 is_stmt 0 discriminator 1
 2124 00c8 7B68     		ldr	r3, [r7, #4]
 2125 00ca 052B     		cmp	r3, #5
 2126 00cc ECDD     		ble	.L70
 576:../Main.c     **** 
 577:../Main.c     **** 	IO004_SetPin(ATT);
 2127              		.loc 1 577 0 is_stmt 1
 2128 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2129 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2130 00d6 5A68     		ldr	r2, [r3, #4]
 2131 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2132 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2133 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2134 00e2 4FF00101 		mov	r1, #1
 2135 00e6 01FA03F3 		lsl	r3, r1, r3
 2136 00ea 5360     		str	r3, [r2, #4]
 578:../Main.c     **** }
 2137              		.loc 1 578 0
 2138 00ec 07F10807 		add	r7, r7, #8
 2139 00f0 BD46     		mov	sp, r7
 2140 00f2 80BD     		pop	{r7, pc}
 2141              		.cfi_endproc
 2142              	.LFE126:
 2144              		.section	.text.psxHandShake,"ax",%progbits
 2145              		.align	2
 2146              		.global	psxHandShake
 2147              		.thumb
 2148              		.thumb_func
 2150              	psxHandShake:
 2151              	.LFB127:
 579:../Main.c     **** 
 580:../Main.c     **** void psxHandShake()
 581:../Main.c     **** {
 2152              		.loc 1 581 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 8
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156 0000 80B5     		push	{r7, lr}
 2157              	.LCFI28:
 2158              		.cfi_def_cfa_offset 8
 2159              		.cfi_offset 7, -8
 2160              		.cfi_offset 14, -4
 2161 0002 82B0     		sub	sp, sp, #8
 2162              	.LCFI29:
 2163              		.cfi_def_cfa_offset 16
 2164 0004 00AF     		add	r7, sp, #0
 2165              	.LCFI30:
 2166              		.cfi_def_cfa_register 7
 582:../Main.c     **** 	int psxByte = 0;
 2167              		.loc 1 582 0
 2168 0006 4FF00003 		mov	r3, #0
 2169 000a 7B60     		str	r3, [r7, #4]
 583:../Main.c     **** 
 584:../Main.c     **** 	IO004_SetPin(CMD);
 2170              		.loc 1 584 0
 2171 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2172 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2173 0014 5A68     		ldr	r2, [r3, #4]
 2174 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2175 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2176 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2177 0020 4FF00101 		mov	r1, #1
 2178 0024 01FA03F3 		lsl	r3, r1, r3
 2179 0028 5360     		str	r3, [r2, #4]
 585:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2180              		.loc 1 585 0
 2181 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2182 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2183 0032 5A68     		ldr	r2, [r3, #4]
 2184 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2185 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2186 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2187 003e 4FF00101 		mov	r1, #1
 2188 0042 01FA03F3 		lsl	r3, r1, r3
 2189 0046 5360     		str	r3, [r2, #4]
 586:../Main.c     **** 	IO004_ResetPin(ATT);
 2190              		.loc 1 586 0
 2191 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2192 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2193 0050 5A68     		ldr	r2, [r3, #4]
 2194 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2195 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2196 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2197 005c 4FF48031 		mov	r1, #65536
 2198 0060 01FA03F3 		lsl	r3, r1, r3
 2199 0064 5360     		str	r3, [r2, #4]
 587:../Main.c     **** 	delay(tempoInicio);
 2200              		.loc 1 587 0
 2201 0066 4FF49670 		mov	r0, #300
 2202 006a FFF7FEFF 		bl	delay
 588:../Main.c     **** 
 589:../Main.c     **** 	psxByte = 1;
 2203              		.loc 1 589 0
 2204 006e 4FF00103 		mov	r3, #1
 2205 0072 7B60     		str	r3, [r7, #4]
 590:../Main.c     **** 	psxTrocaByte(psxByte);
 2206              		.loc 1 590 0
 2207 0074 7868     		ldr	r0, [r7, #4]
 2208 0076 FFF7FEFF 		bl	psxTrocaByte
 591:../Main.c     **** 
 592:../Main.c     **** 	psxByte = 0x42;
 2209              		.loc 1 592 0
 2210 007a 4FF04203 		mov	r3, #66
 2211 007e 7B60     		str	r3, [r7, #4]
 593:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2212              		.loc 1 593 0
 2213 0080 7868     		ldr	r0, [r7, #4]
 2214 0082 FFF7FEFF 		bl	psxTrocaByte
 2215 0086 0346     		mov	r3, r0
 2216 0088 DAB2     		uxtb	r2, r3
 2217 008a 40F20003 		movw	r3, #:lower16:psx_status
 2218 008e C0F20003 		movt	r3, #:upper16:psx_status
 2219 0092 1A70     		strb	r2, [r3, #0]
 594:../Main.c     **** 
 595:../Main.c     **** 	psxByte = 0;
 2220              		.loc 1 595 0
 2221 0094 4FF00003 		mov	r3, #0
 2222 0098 7B60     		str	r3, [r7, #4]
 596:../Main.c     **** 	psxTrocaByte(psxByte);
 2223              		.loc 1 596 0
 2224 009a 7868     		ldr	r0, [r7, #4]
 2225 009c FFF7FEFF 		bl	psxTrocaByte
 597:../Main.c     **** 
 598:../Main.c     **** 	psxByte = 0;
 2226              		.loc 1 598 0
 2227 00a0 4FF00003 		mov	r3, #0
 2228 00a4 7B60     		str	r3, [r7, #4]
 599:../Main.c     **** 	psxTrocaByte(psxByte);
 2229              		.loc 1 599 0
 2230 00a6 7868     		ldr	r0, [r7, #4]
 2231 00a8 FFF7FEFF 		bl	psxTrocaByte
 600:../Main.c     **** 
 601:../Main.c     **** 	psxByte = 0;
 2232              		.loc 1 601 0
 2233 00ac 4FF00003 		mov	r3, #0
 2234 00b0 7B60     		str	r3, [r7, #4]
 602:../Main.c     **** 	psxTrocaByte(psxByte);
 2235              		.loc 1 602 0
 2236 00b2 7868     		ldr	r0, [r7, #4]
 2237 00b4 FFF7FEFF 		bl	psxTrocaByte
 603:../Main.c     **** 
 604:../Main.c     **** 	IO004_SetPin(ATT);
 2238              		.loc 1 604 0
 2239 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2240 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2241 00c0 5A68     		ldr	r2, [r3, #4]
 2242 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2243 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2244 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2245 00cc 4FF00101 		mov	r1, #1
 2246 00d0 01FA03F3 		lsl	r3, r1, r3
 2247 00d4 5360     		str	r3, [r2, #4]
 605:../Main.c     **** }
 2248              		.loc 1 605 0
 2249 00d6 07F10807 		add	r7, r7, #8
 2250 00da BD46     		mov	sp, r7
 2251 00dc 80BD     		pop	{r7, pc}
 2252              		.cfi_endproc
 2253              	.LFE127:
 2255 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 2256              		.align	2
 2257              		.global	psxTrocaByte
 2258              		.thumb
 2259              		.thumb_func
 2261              	psxTrocaByte:
 2262              	.LFB128:
 606:../Main.c     **** 
 607:../Main.c     **** int psxTrocaByte(int byteDado)
 608:../Main.c     **** {
 2263              		.loc 1 608 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 16
 2266              		@ frame_needed = 1, uses_anonymous_args = 0
 2267 0000 80B5     		push	{r7, lr}
 2268              	.LCFI31:
 2269              		.cfi_def_cfa_offset 8
 2270              		.cfi_offset 7, -8
 2271              		.cfi_offset 14, -4
 2272 0002 84B0     		sub	sp, sp, #16
 2273              	.LCFI32:
 2274              		.cfi_def_cfa_offset 24
 2275 0004 00AF     		add	r7, sp, #0
 2276              	.LCFI33:
 2277              		.cfi_def_cfa_register 7
 2278 0006 7860     		str	r0, [r7, #4]
 609:../Main.c     **** 	int c;
 610:../Main.c     **** 	int aux = 0;
 2279              		.loc 1 610 0
 2280 0008 4FF00003 		mov	r3, #0
 2281 000c BB60     		str	r3, [r7, #8]
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 2282              		.loc 1 611 0
 2283 000e 4FF00003 		mov	r3, #0
 2284 0012 FB60     		str	r3, [r7, #12]
 2285 0014 69E0     		b	.L73
 2286              	.L77:
 612:../Main.c     **** 	{
 613:../Main.c     **** 
 614:../Main.c     **** 		if(byteDado & (0x01<<c))
 2287              		.loc 1 614 0
 2288 0016 7A68     		ldr	r2, [r7, #4]
 2289 0018 FB68     		ldr	r3, [r7, #12]
 2290 001a 42FA03F3 		asr	r3, r2, r3
 2291 001e 03F00103 		and	r3, r3, #1
 2292 0022 002B     		cmp	r3, #0
 2293 0024 0FD0     		beq	.L74
 615:../Main.c     **** 			IO004_SetPin(CMD);
 2294              		.loc 1 615 0
 2295 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2296 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2297 002e 5A68     		ldr	r2, [r3, #4]
 2298 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2299 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2300 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2301 003a 4FF00101 		mov	r1, #1
 2302 003e 01FA03F3 		lsl	r3, r1, r3
 2303 0042 5360     		str	r3, [r2, #4]
 2304 0044 0EE0     		b	.L75
 2305              	.L74:
 616:../Main.c     **** 		else
 617:../Main.c     **** 			IO004_ResetPin(CMD);
 2306              		.loc 1 617 0
 2307 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2308 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2309 004e 5A68     		ldr	r2, [r3, #4]
 2310 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2311 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2312 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2313 005a 4FF48031 		mov	r1, #65536
 2314 005e 01FA03F3 		lsl	r3, r1, r3
 2315 0062 5360     		str	r3, [r2, #4]
 2316              	.L75:
 618:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 2317              		.loc 1 618 0
 2318 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2319 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2320 006c 5A68     		ldr	r2, [r3, #4]
 2321 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2322 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2323 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2324 0078 4FF48031 		mov	r1, #65536
 2325 007c 01FA03F3 		lsl	r3, r1, r3
 2326 0080 5360     		str	r3, [r2, #4]
 619:../Main.c     **** 		delay(tempoClk);
 2327              		.loc 1 619 0
 2328 0082 4FF49670 		mov	r0, #300
 2329 0086 FFF7FEFF 		bl	delay
 620:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 2330              		.loc 1 620 0
 2331 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2332 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2333 0092 5B68     		ldr	r3, [r3, #4]
 2334 0094 5A6A     		ldr	r2, [r3, #36]
 2335 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2336 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2337 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2338 00a0 22FA03F3 		lsr	r3, r2, r3
 2339 00a4 03F00103 		and	r3, r3, #1
 2340 00a8 002B     		cmp	r3, #0
 2341 00aa 07D1     		bne	.L76
 621:../Main.c     **** 			aux = aux | (1 << c);
 2342              		.loc 1 621 0
 2343 00ac 4FF00102 		mov	r2, #1
 2344 00b0 FB68     		ldr	r3, [r7, #12]
 2345 00b2 02FA03F3 		lsl	r3, r2, r3
 2346 00b6 BA68     		ldr	r2, [r7, #8]
 2347 00b8 1343     		orrs	r3, r3, r2
 2348 00ba BB60     		str	r3, [r7, #8]
 2349              	.L76:
 622:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 2350              		.loc 1 622 0
 2351 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2352 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2353 00c4 5A68     		ldr	r2, [r3, #4]
 2354 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2355 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2356 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2357 00d0 4FF00101 		mov	r1, #1
 2358 00d4 01FA03F3 		lsl	r3, r1, r3
 2359 00d8 5360     		str	r3, [r2, #4]
 623:../Main.c     **** 		delay(tempoClk);
 2360              		.loc 1 623 0
 2361 00da 4FF49670 		mov	r0, #300
 2362 00de FFF7FEFF 		bl	delay
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 2363              		.loc 1 611 0
 2364 00e2 FB68     		ldr	r3, [r7, #12]
 2365 00e4 03F10103 		add	r3, r3, #1
 2366 00e8 FB60     		str	r3, [r7, #12]
 2367              	.L73:
 611:../Main.c     **** 	for (c=0;c<=7;c++)
 2368              		.loc 1 611 0 is_stmt 0 discriminator 1
 2369 00ea FB68     		ldr	r3, [r7, #12]
 2370 00ec 072B     		cmp	r3, #7
 2371 00ee 92DD     		ble	.L77
 624:../Main.c     **** 	}
 625:../Main.c     **** 	IO004_SetPin(CMD);
 2372              		.loc 1 625 0 is_stmt 1
 2373 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2374 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2375 00f8 5A68     		ldr	r2, [r3, #4]
 2376 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2377 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2378 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2379 0104 4FF00101 		mov	r1, #1
 2380 0108 01FA03F3 		lsl	r3, r1, r3
 2381 010c 5360     		str	r3, [r2, #4]
 626:../Main.c     **** 	delay(tempoEntreByte);
 2382              		.loc 1 626 0
 2383 010e 4FF06400 		mov	r0, #100
 2384 0112 FFF7FEFF 		bl	delay
 627:../Main.c     **** 	return aux;
 2385              		.loc 1 627 0
 2386 0116 BB68     		ldr	r3, [r7, #8]
 628:../Main.c     **** }
 2387              		.loc 1 628 0
 2388 0118 1846     		mov	r0, r3
 2389 011a 07F11007 		add	r7, r7, #16
 2390 011e BD46     		mov	sp, r7
 2391 0120 80BD     		pop	{r7, pc}
 2392              		.cfi_endproc
 2393              	.LFE128:
 2395 0122 00BF     		.section	.text.delay,"ax",%progbits
 2396              		.align	2
 2397              		.global	delay
 2398              		.thumb
 2399              		.thumb_func
 2401              	delay:
 2402              	.LFB129:
 629:../Main.c     **** //void psxLeControle()
 630:../Main.c     **** //{
 631:../Main.c     **** //	int psxByte = 0;
 632:../Main.c     **** //	int psxCont;
 633:../Main.c     **** //
 634:../Main.c     **** //	IO004_SetPin(CMD);
 635:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 636:../Main.c     **** //	IO004_ResetPin(ATT);
 637:../Main.c     **** //	delay(tempoInicio);
 638:../Main.c     **** //
 639:../Main.c     **** //	psxByte = 1;
 640:../Main.c     **** //	psxGravaByte(psxByte);
 641:../Main.c     **** //
 642:../Main.c     **** //	psxByte = 66;
 643:../Main.c     **** //	psxGravaByte(psxByte);
 644:../Main.c     **** //
 645:../Main.c     **** //	psxByte = 0;
 646:../Main.c     **** //	psxGravaByte(psxByte);
 647:../Main.c     **** //
 648:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 649:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 650:../Main.c     **** //
 651:../Main.c     **** //	IO004_SetPin(ATT);
 652:../Main.c     **** //}
 653:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 654:../Main.c     **** //{
 655:../Main.c     **** //	int c;
 656:../Main.c     **** //	for (c=0;c<=7;c++)
 657:../Main.c     **** //	{
 658:../Main.c     **** //		if(byteDado & (0x01<<c))
 659:../Main.c     **** //			IO004_SetPin(CMD);
 660:../Main.c     **** //		else
 661:../Main.c     **** //			IO004_ResetPin(CMD);
 662:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 663:../Main.c     **** //		delay(tempoClk);
 664:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 665:../Main.c     **** //		delay(tempoClk);
 666:../Main.c     **** //	}
 667:../Main.c     **** //	IO004_SetPin(CMD);
 668:../Main.c     **** //	delay(tempoEntreByte);
 669:../Main.c     **** //}
 670:../Main.c     **** //int psxLeByte()
 671:../Main.c     **** //{
 672:../Main.c     **** //	int aux = 0;
 673:../Main.c     **** //	int c;
 674:../Main.c     **** //
 675:../Main.c     **** //	for (c=0;c<=7;c++)
 676:../Main.c     **** //	{
 677:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 678:../Main.c     **** //		delay(tempoClk);
 679:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 680:../Main.c     **** //	  		  aux = aux | (1 << c);
 681:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 682:../Main.c     **** //	  	delay(tempoClk);
 683:../Main.c     **** //	}
 684:../Main.c     **** //	delay(tempoEntreByte);
 685:../Main.c     **** //	return (aux);
 686:../Main.c     **** //}
 687:../Main.c     **** 
 688:../Main.c     **** /***************************************************/
 689:../Main.c     **** /*****************FUNCOES GERAIS********************/
 690:../Main.c     **** /***************************************************/
 691:../Main.c     **** 
 692:../Main.c     **** void delay(long unsigned int i)
 693:../Main.c     **** {
 2403              		.loc 1 693 0
 2404              		.cfi_startproc
 2405              		@ args = 0, pretend = 0, frame = 8
 2406              		@ frame_needed = 1, uses_anonymous_args = 0
 2407              		@ link register save eliminated.
 2408 0000 80B4     		push	{r7}
 2409              	.LCFI34:
 2410              		.cfi_def_cfa_offset 4
 2411              		.cfi_offset 7, -4
 2412 0002 83B0     		sub	sp, sp, #12
 2413              	.LCFI35:
 2414              		.cfi_def_cfa_offset 16
 2415 0004 00AF     		add	r7, sp, #0
 2416              	.LCFI36:
 2417              		.cfi_def_cfa_register 7
 2418 0006 7860     		str	r0, [r7, #4]
 694:../Main.c     **** 	while(i--)
 2419              		.loc 1 694 0
 2420 0008 00E0     		b	.L80
 2421              	.L81:
 2422              	.LBB6:
 2423              	.LBB7:
 2424              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 2425              		.loc 2 327 0
 2426              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 2427 000a 00BF     		nop
 2428              	@ 0 "" 2
 2429              		.thumb
 2430              	.L80:
 2431              	.LBE7:
 2432              	.LBE6:
 2433              		.loc 1 694 0 discriminator 1
 2434 000c 7B68     		ldr	r3, [r7, #4]
 2435 000e 002B     		cmp	r3, #0
 2436 0010 0CBF     		ite	eq
 2437 0012 0023     		moveq	r3, #0
 2438 0014 0123     		movne	r3, #1
 2439 0016 DBB2     		uxtb	r3, r3
 2440 0018 7A68     		ldr	r2, [r7, #4]
 2441 001a 02F1FF32 		add	r2, r2, #-1
 2442 001e 7A60     		str	r2, [r7, #4]
 2443 0020 002B     		cmp	r3, #0
 2444 0022 F2D1     		bne	.L81
 695:../Main.c     **** 	{
 696:../Main.c     **** 		__NOP();
 697:../Main.c     **** 	}
 698:../Main.c     **** }
 2445              		.loc 1 698 0
 2446 0024 07F10C07 		add	r7, r7, #12
 2447 0028 BD46     		mov	sp, r7
 2448 002a 80BC     		pop	{r7}
 2449 002c 7047     		bx	lr
 2450              		.cfi_endproc
 2451              	.LFE129:
 2453 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 2454              		.align	2
 2455              		.global	printByteToInt
 2456              		.thumb
 2457              		.thumb_func
 2459              	printByteToInt:
 2460              	.LFB130:
 699:../Main.c     **** void printByteToInt(char a)
 700:../Main.c     **** {
 2461              		.loc 1 700 0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 16
 2464              		@ frame_needed = 1, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
 2466 0000 80B4     		push	{r7}
 2467              	.LCFI37:
 2468              		.cfi_def_cfa_offset 4
 2469              		.cfi_offset 7, -4
 2470 0002 85B0     		sub	sp, sp, #20
 2471              	.LCFI38:
 2472              		.cfi_def_cfa_offset 24
 2473 0004 00AF     		add	r7, sp, #0
 2474              	.LCFI39:
 2475              		.cfi_def_cfa_register 7
 2476 0006 0346     		mov	r3, r0
 2477 0008 FB71     		strb	r3, [r7, #7]
 701:../Main.c     **** 	char c = a%10 + '0';
 2478              		.loc 1 701 0
 2479 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2480 000c 4CF6CD43 		movw	r3, #52429
 2481 0010 CCF6CC43 		movt	r3, 52428
 2482 0014 A3FB0213 		umull	r1, r3, r3, r2
 2483 0018 4FEAD301 		lsr	r1, r3, #3
 2484 001c 0B46     		mov	r3, r1
 2485 001e 4FEA8303 		lsl	r3, r3, #2
 2486 0022 5B18     		adds	r3, r3, r1
 2487 0024 4FEA4303 		lsl	r3, r3, #1
 2488 0028 D31A     		subs	r3, r2, r3
 2489 002a DBB2     		uxtb	r3, r3
 2490 002c 03F13003 		add	r3, r3, #48
 2491 0030 FB73     		strb	r3, [r7, #15]
 702:../Main.c     **** 	a /=10;
 2492              		.loc 1 702 0
 2493 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2494 0034 4CF6CD43 		movw	r3, #52429
 2495 0038 CCF6CC43 		movt	r3, 52428
 2496 003c A3FB0213 		umull	r1, r3, r3, r2
 2497 0040 4FEAD303 		lsr	r3, r3, #3
 2498 0044 FB71     		strb	r3, [r7, #7]
 703:../Main.c     **** 	char d = a%10 + '0';
 2499              		.loc 1 703 0
 2500 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2501 0048 4CF6CD43 		movw	r3, #52429
 2502 004c CCF6CC43 		movt	r3, 52428
 2503 0050 A3FB0213 		umull	r1, r3, r3, r2
 2504 0054 4FEAD301 		lsr	r1, r3, #3
 2505 0058 0B46     		mov	r3, r1
 2506 005a 4FEA8303 		lsl	r3, r3, #2
 2507 005e 5B18     		adds	r3, r3, r1
 2508 0060 4FEA4303 		lsl	r3, r3, #1
 2509 0064 D31A     		subs	r3, r2, r3
 2510 0066 DBB2     		uxtb	r3, r3
 2511 0068 03F13003 		add	r3, r3, #48
 2512 006c BB73     		strb	r3, [r7, #14]
 704:../Main.c     **** 	a /=10;
 2513              		.loc 1 704 0
 2514 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2515 0070 4CF6CD43 		movw	r3, #52429
 2516 0074 CCF6CC43 		movt	r3, 52428
 2517 0078 A3FB0213 		umull	r1, r3, r3, r2
 2518 007c 4FEAD303 		lsr	r3, r3, #3
 2519 0080 FB71     		strb	r3, [r7, #7]
 705:../Main.c     **** 	char e = a%10 + '0';
 2520              		.loc 1 705 0
 2521 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2522 0084 4CF6CD43 		movw	r3, #52429
 2523 0088 CCF6CC43 		movt	r3, 52428
 2524 008c A3FB0213 		umull	r1, r3, r3, r2
 2525 0090 4FEAD301 		lsr	r1, r3, #3
 2526 0094 0B46     		mov	r3, r1
 2527 0096 4FEA8303 		lsl	r3, r3, #2
 2528 009a 5B18     		adds	r3, r3, r1
 2529 009c 4FEA4303 		lsl	r3, r3, #1
 2530 00a0 D31A     		subs	r3, r2, r3
 2531 00a2 DBB2     		uxtb	r3, r3
 2532 00a4 03F13003 		add	r3, r3, #48
 2533 00a8 7B73     		strb	r3, [r7, #13]
 706:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2534              		.loc 1 706 0
 2535 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2536 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2537 00b2 1B68     		ldr	r3, [r3, #0]
 2538 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2539 00b6 C3F88021 		str	r2, [r3, #384]
 707:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2540              		.loc 1 707 0
 2541 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2542 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2543 00c2 1B68     		ldr	r3, [r3, #0]
 2544 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2545 00c6 C3F88021 		str	r2, [r3, #384]
 708:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2546              		.loc 1 708 0
 2547 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2548 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2549 00d2 1B68     		ldr	r3, [r3, #0]
 2550 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2551 00d6 C3F88021 		str	r2, [r3, #384]
 709:../Main.c     **** 
 710:../Main.c     **** }
 2552              		.loc 1 710 0
 2553 00da 07F11407 		add	r7, r7, #20
 2554 00de BD46     		mov	sp, r7
 2555 00e0 80BC     		pop	{r7}
 2556 00e2 7047     		bx	lr
 2557              		.cfi_endproc
 2558              	.LFE130:
 2560              		.section	.text.VADC0_C0_2_IRQHandler,"ax",%progbits
 2561              		.align	2
 2562              		.global	VADC0_C0_2_IRQHandler
 2563              		.thumb
 2564              		.thumb_func
 2566              	VADC0_C0_2_IRQHandler:
 2567              	.LFB131:
 711:../Main.c     **** 
 712:../Main.c     **** void adc_event(void)
 713:../Main.c     **** {
 2568              		.loc 1 713 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 0
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572 0000 80B5     		push	{r7, lr}
 2573              	.LCFI40:
 2574              		.cfi_def_cfa_offset 8
 2575              		.cfi_offset 7, -8
 2576              		.cfi_offset 14, -4
 2577 0002 00AF     		add	r7, sp, #0
 2578              	.LCFI41:
 2579              		.cfi_def_cfa_register 7
 714:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 2580              		.loc 1 714 0
 2581 0004 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 2582 0008 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 2583 000c 40F20001 		movw	r1, #:lower16:result
 2584 0010 C0F20001 		movt	r1, #:upper16:result
 2585 0014 FFF7FEFF 		bl	ADC001_GetResult
 715:../Main.c     **** }
 2586              		.loc 1 715 0
 2587 0018 80BD     		pop	{r7, pc}
 2588              		.cfi_endproc
 2589              	.LFE131:
 2591 001a 00BF     		.section	.text.updateButtonStates,"ax",%progbits
 2592              		.align	2
 2593              		.global	updateButtonStates
 2594              		.thumb
 2595              		.thumb_func
 2597              	updateButtonStates:
 2598              	.LFB132:
 716:../Main.c     **** 
 717:../Main.c     **** /***************************************************/
 718:../Main.c     **** /*****************FUNCOES BOTOES********************/
 719:../Main.c     **** /***************************************************/
 720:../Main.c     **** 
 721:../Main.c     **** void updateButtonStates()
 722:../Main.c     **** {
 2599              		.loc 1 722 0
 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 0
 2602              		@ frame_needed = 1, uses_anonymous_args = 0
 2603              		@ link register save eliminated.
 2604 0000 80B4     		push	{r7}
 2605              	.LCFI42:
 2606              		.cfi_def_cfa_offset 4
 2607              		.cfi_offset 7, -4
 2608 0002 00AF     		add	r7, sp, #0
 2609              	.LCFI43:
 2610              		.cfi_def_cfa_register 7
 723:../Main.c     **** 	l_um_state_before = l_um_state;
 2611              		.loc 1 723 0
 2612 0004 40F20003 		movw	r3, #:lower16:l_um_state
 2613 0008 C0F20003 		movt	r3, #:upper16:l_um_state
 2614 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2615 000e 40F20003 		movw	r3, #:lower16:l_um_state_before
 2616 0012 C0F20003 		movt	r3, #:upper16:l_um_state_before
 2617 0016 1A70     		strb	r2, [r3, #0]
 724:../Main.c     **** 	l_dois_state_before = l_dois_state;
 2618              		.loc 1 724 0
 2619 0018 40F20003 		movw	r3, #:lower16:l_dois_state
 2620 001c C0F20003 		movt	r3, #:upper16:l_dois_state
 2621 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2622 0022 40F20003 		movw	r3, #:lower16:l_dois_state_before
 2623 0026 C0F20003 		movt	r3, #:upper16:l_dois_state_before
 2624 002a 1A70     		strb	r2, [r3, #0]
 725:../Main.c     **** 	l_tres_state_before = l_tres_state;
 2625              		.loc 1 725 0
 2626 002c 40F20003 		movw	r3, #:lower16:l_tres_state
 2627 0030 C0F20003 		movt	r3, #:upper16:l_tres_state
 2628 0034 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2629 0036 40F20003 		movw	r3, #:lower16:l_tres_state_before
 2630 003a C0F20003 		movt	r3, #:upper16:l_tres_state_before
 2631 003e 1A70     		strb	r2, [r3, #0]
 726:../Main.c     **** 	r_um_state_before = r_um_state;
 2632              		.loc 1 726 0
 2633 0040 40F20003 		movw	r3, #:lower16:r_um_state
 2634 0044 C0F20003 		movt	r3, #:upper16:r_um_state
 2635 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2636 004a 40F20003 		movw	r3, #:lower16:r_um_state_before
 2637 004e C0F20003 		movt	r3, #:upper16:r_um_state_before
 2638 0052 1A70     		strb	r2, [r3, #0]
 727:../Main.c     **** 	r_dois_state_before = r_dois_state;
 2639              		.loc 1 727 0
 2640 0054 40F20003 		movw	r3, #:lower16:r_dois_state
 2641 0058 C0F20003 		movt	r3, #:upper16:r_dois_state
 2642 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2643 005e 40F20003 		movw	r3, #:lower16:r_dois_state_before
 2644 0062 C0F20003 		movt	r3, #:upper16:r_dois_state_before
 2645 0066 1A70     		strb	r2, [r3, #0]
 728:../Main.c     **** 	r_tres_state_before = r_tres_state;
 2646              		.loc 1 728 0
 2647 0068 40F20003 		movw	r3, #:lower16:r_tres_state
 2648 006c C0F20003 		movt	r3, #:upper16:r_tres_state
 2649 0070 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2650 0072 40F20003 		movw	r3, #:lower16:r_tres_state_before
 2651 0076 C0F20003 		movt	r3, #:upper16:r_tres_state_before
 2652 007a 1A70     		strb	r2, [r3, #0]
 729:../Main.c     **** 	cross_state_before = cross_state;
 2653              		.loc 1 729 0
 2654 007c 40F20003 		movw	r3, #:lower16:cross_state
 2655 0080 C0F20003 		movt	r3, #:upper16:cross_state
 2656 0084 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2657 0086 40F20003 		movw	r3, #:lower16:cross_state_before
 2658 008a C0F20003 		movt	r3, #:upper16:cross_state_before
 2659 008e 1A70     		strb	r2, [r3, #0]
 730:../Main.c     **** 	sqr_state_before = sqr_state;
 2660              		.loc 1 730 0
 2661 0090 40F20003 		movw	r3, #:lower16:sqr_state
 2662 0094 C0F20003 		movt	r3, #:upper16:sqr_state
 2663 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2664 009a 40F20003 		movw	r3, #:lower16:sqr_state_before
 2665 009e C0F20003 		movt	r3, #:upper16:sqr_state_before
 2666 00a2 1A70     		strb	r2, [r3, #0]
 731:../Main.c     **** 	triangle_state_before = triangle_state;
 2667              		.loc 1 731 0
 2668 00a4 40F20003 		movw	r3, #:lower16:triangle_state
 2669 00a8 C0F20003 		movt	r3, #:upper16:triangle_state
 2670 00ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2671 00ae 40F20003 		movw	r3, #:lower16:triangle_state_before
 2672 00b2 C0F20003 		movt	r3, #:upper16:triangle_state_before
 2673 00b6 1A70     		strb	r2, [r3, #0]
 732:../Main.c     **** 	circle_state_before = circle_state;
 2674              		.loc 1 732 0
 2675 00b8 40F20003 		movw	r3, #:lower16:circle_state
 2676 00bc C0F20003 		movt	r3, #:upper16:circle_state
 2677 00c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2678 00c2 40F20003 		movw	r3, #:lower16:circle_state_before
 2679 00c6 C0F20003 		movt	r3, #:upper16:circle_state_before
 2680 00ca 1A70     		strb	r2, [r3, #0]
 733:../Main.c     **** 	left_state_before = left_state;
 2681              		.loc 1 733 0
 2682 00cc 40F20003 		movw	r3, #:lower16:left_state
 2683 00d0 C0F20003 		movt	r3, #:upper16:left_state
 2684 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2685 00d6 40F20003 		movw	r3, #:lower16:left_state_before
 2686 00da C0F20003 		movt	r3, #:upper16:left_state_before
 2687 00de 1A70     		strb	r2, [r3, #0]
 734:../Main.c     **** 	right_state_before = right_state;
 2688              		.loc 1 734 0
 2689 00e0 40F20003 		movw	r3, #:lower16:right_state
 2690 00e4 C0F20003 		movt	r3, #:upper16:right_state
 2691 00e8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2692 00ea 40F20003 		movw	r3, #:lower16:right_state_before
 2693 00ee C0F20003 		movt	r3, #:upper16:right_state_before
 2694 00f2 1A70     		strb	r2, [r3, #0]
 735:../Main.c     **** 	up_state_before = up_state;
 2695              		.loc 1 735 0
 2696 00f4 40F20003 		movw	r3, #:lower16:up_state
 2697 00f8 C0F20003 		movt	r3, #:upper16:up_state
 2698 00fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2699 00fe 40F20003 		movw	r3, #:lower16:up_state_before
 2700 0102 C0F20003 		movt	r3, #:upper16:up_state_before
 2701 0106 1A70     		strb	r2, [r3, #0]
 736:../Main.c     **** 	down_state_before = down_state;
 2702              		.loc 1 736 0
 2703 0108 40F20003 		movw	r3, #:lower16:down_state
 2704 010c C0F20003 		movt	r3, #:upper16:down_state
 2705 0110 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2706 0112 40F20003 		movw	r3, #:lower16:down_state_before
 2707 0116 C0F20003 		movt	r3, #:upper16:down_state_before
 2708 011a 1A70     		strb	r2, [r3, #0]
 737:../Main.c     **** 	start_state_before = start_state;
 2709              		.loc 1 737 0
 2710 011c 40F20003 		movw	r3, #:lower16:start_state
 2711 0120 C0F20003 		movt	r3, #:upper16:start_state
 2712 0124 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2713 0126 40F20003 		movw	r3, #:lower16:start_state_before
 2714 012a C0F20003 		movt	r3, #:upper16:start_state_before
 2715 012e 1A70     		strb	r2, [r3, #0]
 738:../Main.c     **** 	select_state_before = select_state;
 2716              		.loc 1 738 0
 2717 0130 40F20003 		movw	r3, #:lower16:select_state
 2718 0134 C0F20003 		movt	r3, #:upper16:select_state
 2719 0138 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2720 013a 40F20003 		movw	r3, #:lower16:select_state_before
 2721 013e C0F20003 		movt	r3, #:upper16:select_state_before
 2722 0142 1A70     		strb	r2, [r3, #0]
 739:../Main.c     **** 
 740:../Main.c     **** 	l_um_state = 0;
 2723              		.loc 1 740 0
 2724 0144 40F20003 		movw	r3, #:lower16:l_um_state
 2725 0148 C0F20003 		movt	r3, #:upper16:l_um_state
 2726 014c 4FF00002 		mov	r2, #0
 2727 0150 1A70     		strb	r2, [r3, #0]
 741:../Main.c     **** 	l_dois_state = 0;
 2728              		.loc 1 741 0
 2729 0152 40F20003 		movw	r3, #:lower16:l_dois_state
 2730 0156 C0F20003 		movt	r3, #:upper16:l_dois_state
 2731 015a 4FF00002 		mov	r2, #0
 2732 015e 1A70     		strb	r2, [r3, #0]
 742:../Main.c     **** 	l_tres_state = 0;
 2733              		.loc 1 742 0
 2734 0160 40F20003 		movw	r3, #:lower16:l_tres_state
 2735 0164 C0F20003 		movt	r3, #:upper16:l_tres_state
 2736 0168 4FF00002 		mov	r2, #0
 2737 016c 1A70     		strb	r2, [r3, #0]
 743:../Main.c     **** 	r_um_state = 0;
 2738              		.loc 1 743 0
 2739 016e 40F20003 		movw	r3, #:lower16:r_um_state
 2740 0172 C0F20003 		movt	r3, #:upper16:r_um_state
 2741 0176 4FF00002 		mov	r2, #0
 2742 017a 1A70     		strb	r2, [r3, #0]
 744:../Main.c     **** 	r_dois_state = 0;
 2743              		.loc 1 744 0
 2744 017c 40F20003 		movw	r3, #:lower16:r_dois_state
 2745 0180 C0F20003 		movt	r3, #:upper16:r_dois_state
 2746 0184 4FF00002 		mov	r2, #0
 2747 0188 1A70     		strb	r2, [r3, #0]
 745:../Main.c     **** 	r_tres_state = 0;
 2748              		.loc 1 745 0
 2749 018a 40F20003 		movw	r3, #:lower16:r_tres_state
 2750 018e C0F20003 		movt	r3, #:upper16:r_tres_state
 2751 0192 4FF00002 		mov	r2, #0
 2752 0196 1A70     		strb	r2, [r3, #0]
 746:../Main.c     **** 	cross_state = 0;
 2753              		.loc 1 746 0
 2754 0198 40F20003 		movw	r3, #:lower16:cross_state
 2755 019c C0F20003 		movt	r3, #:upper16:cross_state
 2756 01a0 4FF00002 		mov	r2, #0
 2757 01a4 1A70     		strb	r2, [r3, #0]
 747:../Main.c     **** 	sqr_state = 0;
 2758              		.loc 1 747 0
 2759 01a6 40F20003 		movw	r3, #:lower16:sqr_state
 2760 01aa C0F20003 		movt	r3, #:upper16:sqr_state
 2761 01ae 4FF00002 		mov	r2, #0
 2762 01b2 1A70     		strb	r2, [r3, #0]
 748:../Main.c     **** 	triangle_state = 0;
 2763              		.loc 1 748 0
 2764 01b4 40F20003 		movw	r3, #:lower16:triangle_state
 2765 01b8 C0F20003 		movt	r3, #:upper16:triangle_state
 2766 01bc 4FF00002 		mov	r2, #0
 2767 01c0 1A70     		strb	r2, [r3, #0]
 749:../Main.c     **** 	circle_state = 0;
 2768              		.loc 1 749 0
 2769 01c2 40F20003 		movw	r3, #:lower16:circle_state
 2770 01c6 C0F20003 		movt	r3, #:upper16:circle_state
 2771 01ca 4FF00002 		mov	r2, #0
 2772 01ce 1A70     		strb	r2, [r3, #0]
 750:../Main.c     **** 	left_state = 0;
 2773              		.loc 1 750 0
 2774 01d0 40F20003 		movw	r3, #:lower16:left_state
 2775 01d4 C0F20003 		movt	r3, #:upper16:left_state
 2776 01d8 4FF00002 		mov	r2, #0
 2777 01dc 1A70     		strb	r2, [r3, #0]
 751:../Main.c     **** 	right_state = 0;
 2778              		.loc 1 751 0
 2779 01de 40F20003 		movw	r3, #:lower16:right_state
 2780 01e2 C0F20003 		movt	r3, #:upper16:right_state
 2781 01e6 4FF00002 		mov	r2, #0
 2782 01ea 1A70     		strb	r2, [r3, #0]
 752:../Main.c     **** 	up_state = 0;
 2783              		.loc 1 752 0
 2784 01ec 40F20003 		movw	r3, #:lower16:up_state
 2785 01f0 C0F20003 		movt	r3, #:upper16:up_state
 2786 01f4 4FF00002 		mov	r2, #0
 2787 01f8 1A70     		strb	r2, [r3, #0]
 753:../Main.c     **** 	down_state = 0;
 2788              		.loc 1 753 0
 2789 01fa 40F20003 		movw	r3, #:lower16:down_state
 2790 01fe C0F20003 		movt	r3, #:upper16:down_state
 2791 0202 4FF00002 		mov	r2, #0
 2792 0206 1A70     		strb	r2, [r3, #0]
 754:../Main.c     **** 	start_state = 0;
 2793              		.loc 1 754 0
 2794 0208 40F20003 		movw	r3, #:lower16:start_state
 2795 020c C0F20003 		movt	r3, #:upper16:start_state
 2796 0210 4FF00002 		mov	r2, #0
 2797 0214 1A70     		strb	r2, [r3, #0]
 755:../Main.c     **** 	select_state = 0;
 2798              		.loc 1 755 0
 2799 0216 40F20003 		movw	r3, #:lower16:select_state
 2800 021a C0F20003 		movt	r3, #:upper16:select_state
 2801 021e 4FF00002 		mov	r2, #0
 2802 0222 1A70     		strb	r2, [r3, #0]
 756:../Main.c     **** }
 2803              		.loc 1 756 0
 2804 0224 BD46     		mov	sp, r7
 2805 0226 80BC     		pop	{r7}
 2806 0228 7047     		bx	lr
 2807              		.cfi_endproc
 2808              	.LFE132:
 2810 022a 00BF     		.section	.text.turbo,"ax",%progbits
 2811              		.align	2
 2812              		.global	turbo
 2813              		.thumb
 2814              		.thumb_func
 2816              	turbo:
 2817              	.LFB133:
 757:../Main.c     **** 
 758:../Main.c     **** void turbo(void)
 759:../Main.c     **** {
 2818              		.loc 1 759 0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 1, uses_anonymous_args = 0
 2822              		@ link register save eliminated.
 2823 0000 80B4     		push	{r7}
 2824              	.LCFI44:
 2825              		.cfi_def_cfa_offset 4
 2826              		.cfi_offset 7, -4
 2827 0002 00AF     		add	r7, sp, #0
 2828              	.LCFI45:
 2829              		.cfi_def_cfa_register 7
 760:../Main.c     **** 	pwm_max = 95;
 2830              		.loc 1 760 0
 2831 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2832 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2833 000c 4FF05F02 		mov	r2, #95
 2834 0010 1A70     		strb	r2, [r3, #0]
 761:../Main.c     **** }
 2835              		.loc 1 761 0
 2836 0012 BD46     		mov	sp, r7
 2837 0014 80BC     		pop	{r7}
 2838 0016 7047     		bx	lr
 2839              		.cfi_endproc
 2840              	.LFE133:
 2842              		.section	.text.shunt,"ax",%progbits
 2843              		.align	2
 2844              		.global	shunt
 2845              		.thumb
 2846              		.thumb_func
 2848              	shunt:
 2849              	.LFB134:
 762:../Main.c     **** 
 763:../Main.c     **** void shunt(void)
 764:../Main.c     **** {
 2850              		.loc 1 764 0
 2851              		.cfi_startproc
 2852              		@ args = 0, pretend = 0, frame = 0
 2853              		@ frame_needed = 1, uses_anonymous_args = 0
 2854              		@ link register save eliminated.
 2855 0000 80B4     		push	{r7}
 2856              	.LCFI46:
 2857              		.cfi_def_cfa_offset 4
 2858              		.cfi_offset 7, -4
 2859 0002 00AF     		add	r7, sp, #0
 2860              	.LCFI47:
 2861              		.cfi_def_cfa_register 7
 765:../Main.c     **** 	pwm_max = 40;
 2862              		.loc 1 765 0
 2863 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2864 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2865 000c 4FF02802 		mov	r2, #40
 2866 0010 1A70     		strb	r2, [r3, #0]
 766:../Main.c     **** }
 2867              		.loc 1 766 0
 2868 0012 BD46     		mov	sp, r7
 2869 0014 80BC     		pop	{r7}
 2870 0016 7047     		bx	lr
 2871              		.cfi_endproc
 2872              	.LFE134:
 2874              		.section	.text.flip,"ax",%progbits
 2875              		.align	2
 2876              		.global	flip
 2877              		.thumb
 2878              		.thumb_func
 2880              	flip:
 2881              	.LFB135:
 767:../Main.c     **** 
 768:../Main.c     **** void flip(void)
 769:../Main.c     **** {
 2882              		.loc 1 769 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 1, uses_anonymous_args = 0
 2886              		@ link register save eliminated.
 2887 0000 80B4     		push	{r7}
 2888              	.LCFI48:
 2889              		.cfi_def_cfa_offset 4
 2890              		.cfi_offset 7, -4
 2891 0002 00AF     		add	r7, sp, #0
 2892              	.LCFI49:
 2893              		.cfi_def_cfa_register 7
 770:../Main.c     **** 	flipped = !flipped;
 2894              		.loc 1 770 0
 2895 0004 40F20003 		movw	r3, #:lower16:flipped
 2896 0008 C0F20003 		movt	r3, #:upper16:flipped
 2897 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2898 000e 002B     		cmp	r3, #0
 2899 0010 14BF     		ite	ne
 2900 0012 0023     		movne	r3, #0
 2901 0014 0123     		moveq	r3, #1
 2902 0016 DBB2     		uxtb	r3, r3
 2903 0018 1A46     		mov	r2, r3
 2904 001a 40F20003 		movw	r3, #:lower16:flipped
 2905 001e C0F20003 		movt	r3, #:upper16:flipped
 2906 0022 1A70     		strb	r2, [r3, #0]
 771:../Main.c     **** }
 2907              		.loc 1 771 0
 2908 0024 BD46     		mov	sp, r7
 2909 0026 80BC     		pop	{r7}
 2910 0028 7047     		bx	lr
 2911              		.cfi_endproc
 2912              	.LFE135:
 2914 002a 00BF     		.text
 2915              	.Letext0:
 2916              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2917              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2918              		.file 5 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/..
 2919              		.file 6 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/..
 2920              		.file 7 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/..
 2921              		.file 8 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/..
 2922              		.file 9 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/..
 2923              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2924              		.file 11 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/.
 2925              		.file 12 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/.
 2926              		.file 13 "C:\\Users\\Carlos\\Desktop\\NOVOWORKSPACE\\Joystick\\Dave\\Generated\\inc\\DAVESupport/.
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:24     .bss:00000000 l_um
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:21     .bss:00000000 $d
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:30     .bss:00000004 l_dois
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:36     .bss:00000008 l_tres
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:42     .bss:0000000c r_um
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:48     .bss:00000010 r_dois
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:54     .bss:00000014 r_tres
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:60     .bss:00000018 cross
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:66     .bss:0000001c sqr
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:72     .bss:00000020 triangle
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:78     .bss:00000024 circle
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:84     .bss:00000028 left
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:90     .bss:0000002c right
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:96     .bss:00000030 up
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:102    .bss:00000034 down
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:108    .bss:00000038 start
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:114    .bss:0000003c select
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:119    .bss:00000040 l_um_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:124    .bss:00000041 l_dois_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:129    .bss:00000042 l_tres_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:134    .bss:00000043 r_um_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:139    .bss:00000044 r_dois_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:144    .bss:00000045 r_tres_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:149    .bss:00000046 cross_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:154    .bss:00000047 sqr_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:159    .bss:00000048 triangle_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:164    .bss:00000049 circle_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:169    .bss:0000004a left_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:174    .bss:0000004b right_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:179    .bss:0000004c up_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:184    .bss:0000004d down_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:189    .bss:0000004e start_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:194    .bss:0000004f select_state
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:199    .bss:00000050 l_um_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:204    .bss:00000051 l_dois_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:209    .bss:00000052 l_tres_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:214    .bss:00000053 r_um_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:219    .bss:00000054 r_dois_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:224    .bss:00000055 r_tres_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:229    .bss:00000056 cross_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:234    .bss:00000057 sqr_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:239    .bss:00000058 triangle_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:244    .bss:00000059 circle_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:249    .bss:0000005a left_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:254    .bss:0000005b right_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:259    .bss:0000005c up_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:264    .bss:0000005d down_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:269    .bss:0000005e start_state_before
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:274    .bss:0000005f select_state_before
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:282    .data:00000000 data_R
                            *COM*:00000005 data_E
                            *COM*:00000001 psx_status
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:290    .bss:00000060 flipped
                            *COM*:00000004 result
                            *COM*:00000001 pwm_max
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:295    .text.main:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:300    .text.main:00000000 main
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1240   .text.configure_E:00000000 configure_E
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2150   .text.psxHandShake:00000000 psxHandShake
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1632   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2029   .text.psxLeControle:00000000 psxLeControle
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1444   .text.write_E:00000000 write_E
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2597   .text.updateButtonStates:00000000 updateButtonStates
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1082   .text.read_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1087   .text.read_R:00000000 read_R
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2401   .text.delay:00000000 delay
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1189   .text.pulse_R:00000000 pulse_R
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1184   .text.pulse_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1235   .text.configure_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1439   .text.write_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1627   .text.psxConfiguraControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1663   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1769   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1899   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1658   .text.psxEnterConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2261   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1764   .text.psxSetAnalogMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:1894   .text.psxExitConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2024   .text.psxLeControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2145   .text.psxHandShake:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2256   .text.psxTrocaByte:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2396   .text.delay:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2454   .text.printByteToInt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2459   .text.printByteToInt:00000000 printByteToInt
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2561   .text.VADC0_C0_2_IRQHandler:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2566   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2592   .text.updateButtonStates:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2811   .text.turbo:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2816   .text.turbo:00000000 turbo
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2843   .text.shunt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2848   .text.shunt:00000000 shunt
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2875   .text.flip:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\cc1TXILJ.s:2880   .text.flip:00000000 flip
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
ADC001_Handle0
ADC001_GetResult
