   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.bss
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.space	4
  26              		.global	l_dois
  27              		.align	2
  30              	l_dois:
  31 0004 00000000 		.space	4
  32              		.global	l_tres
  33              		.align	2
  36              	l_tres:
  37 0008 00000000 		.space	4
  38              		.global	r_um
  39              		.align	2
  42              	r_um:
  43 000c 00000000 		.space	4
  44              		.global	r_dois
  45              		.align	2
  48              	r_dois:
  49 0010 00000000 		.space	4
  50              		.global	r_tres
  51              		.align	2
  54              	r_tres:
  55 0014 00000000 		.space	4
  56              		.global	cross
  57              		.align	2
  60              	cross:
  61 0018 00000000 		.space	4
  62              		.global	sqr
  63              		.align	2
  66              	sqr:
  67 001c 00000000 		.space	4
  68              		.global	triangle
  69              		.align	2
  72              	triangle:
  73 0020 00000000 		.space	4
  74              		.global	circle
  75              		.align	2
  78              	circle:
  79 0024 00000000 		.space	4
  80              		.global	left
  81              		.align	2
  84              	left:
  85 0028 00000000 		.space	4
  86              		.global	right
  87              		.align	2
  90              	right:
  91 002c 00000000 		.space	4
  92              		.global	up
  93              		.align	2
  96              	up:
  97 0030 00000000 		.space	4
  98              		.global	down
  99              		.align	2
 102              	down:
 103 0034 00000000 		.space	4
 104              		.global	start
 105              		.align	2
 108              	start:
 109 0038 00000000 		.space	4
 110              		.global	select
 111              		.align	2
 114              	select:
 115 003c 00000000 		.space	4
 116              		.comm	psxDado,24,4
 117              		.comm	configuration,15,4
 118              		.global	data_R
 119              		.data
 122              	data_R:
 123 0000 30       		.byte	48
 124              		.comm	data_E,4,4
 125              		.comm	psx_status,1,1
 126              		.global	flipped
 127              		.bss
 130              	flipped:
 131 0040 00       		.space	1
 132              		.global	isPressed
 135              	isPressed:
 136 0041 00       		.space	1
 137              		.global	lastIsPressed
 140              	lastIsPressed:
 141 0042 00       		.space	1
 142 0043 00       		.section	.text.main,"ax",%progbits
 143              		.align	2
 144              		.global	main
 145              		.thumb
 146              		.thumb_func
 148              	main:
 149              	.LFB112:
 150              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     **** BIT 0: BLAH2
  10:../Main.c     **** BIT 1: BUZINA
  11:../Main.c     **** BIT 2: ENABLE
  12:../Main.c     **** BIT 3: ALBH2
  13:../Main.c     **** BIT 4: BLAH1
  14:../Main.c     **** BIT 5: ALBH1
  15:../Main.c     **** */
  16:../Main.c     **** 
  17:../Main.c     **** /***************************************************
  18:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  19:../Main.c     ****  * ----Protocolo de comunicacao: todo
  20:../Main.c     ****  *
  21:../Main.c     ****  *
  22:../Main.c     ****  ***************************************************/
  23:../Main.c     **** 
  24:../Main.c     **** 
  25:../Main.c     **** /***************************************************/
  26:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  27:../Main.c     **** /***************************************************/
  28:../Main.c     **** 
  29:../Main.c     **** #define NULL 0
  30:../Main.c     **** //Defines referentes aos limites
  31:../Main.c     **** #define PWM_LIM 60
  32:../Main.c     **** 
  33:../Main.c     **** //Defines referentes ao protocolo
  34:../Main.c     **** #define BYTES_TO_SEND 4
  35:../Main.c     **** //Defines referentes ao byte DADO 3
  36:../Main.c     **** #define	BLAH2		0
  37:../Main.c     **** #define	BUZINA		1
  38:../Main.c     **** #define	ENABLE		2
  39:../Main.c     **** #define	ALBH2		3
  40:../Main.c     **** #define	BLAH1		4
  41:../Main.c     **** #define	ALBH1		5
  42:../Main.c     **** //Defines referentes ao transceptor
  43:../Main.c     **** #define CS	 	IO004_Handle1
  44:../Main.c     **** #define CLK1 	IO004_Handle2
  45:../Main.c     **** #define DATA 	IO004_Handle4
  46:../Main.c     **** #define DR1		IO004_Handle5
  47:../Main.c     **** #define CE 		IO004_Handle6
  48:../Main.c     **** //Defines referentes ao controle
  49:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  50:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  51:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  52:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  53:../Main.c     **** //Defines referentes aos delays do controle
  54:../Main.c     **** #define tempoInicio     300
  55:../Main.c     **** #define tempoClk        300
  56:../Main.c     **** #define tempoEntreByte  100
  57:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  58:../Main.c     **** #define LED1 IO004_Handle7
  59:../Main.c     **** #define LED2 IO004_Handle8
  60:../Main.c     **** //Defines dos botoes para realizar as callbacks
  61:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  62:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  63:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  64:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  65:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  66:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  67:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  68:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  69:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  70:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  71:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  72:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  73:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  74:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  75:../Main.c     **** #define START (psxDado[0] & (1<<3))
  76:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  77:../Main.c     **** 
  78:../Main.c     **** /***************************************************/
  79:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
  80:../Main.c     **** /***************************************************/
  81:../Main.c     **** 
  82:../Main.c     **** void psxLeControle();
  83:../Main.c     **** int psxTrocaByte(int byteDado);
  84:../Main.c     **** int psxLeByte();
  85:../Main.c     **** void delay(long unsigned int i);
  86:../Main.c     **** void pulse_R();
  87:../Main.c     **** void configure_R();
  88:../Main.c     **** void configure_E();
  89:../Main.c     **** void write_E();
  90:../Main.c     **** void read_R();
  91:../Main.c     **** void delay(long unsigned int i);
  92:../Main.c     **** void printByteToInt(char a);
  93:../Main.c     **** void psxConfiguraControle();
  94:../Main.c     **** void psxEnterConfigMode();
  95:../Main.c     **** void psxExitConfigMode();
  96:../Main.c     **** void psxSetAnalogMode();
  97:../Main.c     **** void psxHandShake();
  98:../Main.c     **** 
  99:../Main.c     **** /***************************************************/
 100:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 101:../Main.c     **** /***************************************************/
 102:../Main.c     **** 
 103:../Main.c     **** void (*l_um)(void) = NULL;
 104:../Main.c     **** void (*l_dois)(void) = NULL;
 105:../Main.c     **** void (*l_tres)(void) = NULL;
 106:../Main.c     **** void (*r_um)(void) = NULL;
 107:../Main.c     **** void (*r_dois)(void) = NULL;
 108:../Main.c     **** void (*r_tres)(void) = NULL;
 109:../Main.c     **** void (*cross)(void) = NULL;
 110:../Main.c     **** void (*sqr)(void) = NULL;
 111:../Main.c     **** void (*triangle)(void) = NULL;
 112:../Main.c     **** void (*circle)(void) = NULL;
 113:../Main.c     **** void (*left)(void) = NULL;
 114:../Main.c     **** void (*right)(void) = NULL;
 115:../Main.c     **** void (*up)(void) = NULL;
 116:../Main.c     **** void (*down)(void) = NULL;
 117:../Main.c     **** void (*start)(void) = NULL;
 118:../Main.c     **** void (*select)(void) = NULL;
 119:../Main.c     **** 
 120:../Main.c     **** /***************************************************/
 121:../Main.c     **** /*********************INCLUDES**********************/
 122:../Main.c     **** /***************************************************/
 123:../Main.c     **** 
 124:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
 125:../Main.c     **** 
 126:../Main.c     **** /***************************************************/
 127:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 128:../Main.c     **** /***************************************************/
 129:../Main.c     **** 
 130:../Main.c     **** int psxDado[6];
 131:../Main.c     **** char configuration[15];
 132:../Main.c     **** char data_R = '0';
 133:../Main.c     **** char data_E[BYTES_TO_SEND];
 134:../Main.c     **** uint8_t psx_status;
 135:../Main.c     **** /*Booleanos de controle para estados do robo*/
 136:../Main.c     **** BOOLType flipped = 0;
 137:../Main.c     **** BOOLType isPressed = 0;
 138:../Main.c     **** BOOLType lastIsPressed = 0;
 139:../Main.c     **** 
 140:../Main.c     **** /***************************************************/
 141:../Main.c     **** /***********************MAIN************************/
 142:../Main.c     **** /***************************************************/
 143:../Main.c     **** 
 144:../Main.c     **** int main(void)
 145:../Main.c     **** {
 151              		.loc 1 145 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 16
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0000 80B5     		push	{r7, lr}
 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 84B0     		sub	sp, sp, #16
 161              	.LCFI1:
 162              		.cfi_def_cfa_offset 24
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI2:
 165              		.cfi_def_cfa_register 7
 146:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 147:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
 166              		.loc 1 147 0
 167 0006 FFF7FEFF 		bl	DAVE_Init
 148:../Main.c     **** 	/*Etapa de inicializacao*/
 149:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 168              		.loc 1 149 0
 169 000a FFF7FEFF 		bl	configure_E
 150:../Main.c     **** 	IO004_SetPin(LED1); //Leds para debug
 170              		.loc 1 150 0
 171 000e 40F20003 		movw	r3, #:lower16:IO004_Handle7
 172 0012 C0F20003 		movt	r3, #:upper16:IO004_Handle7
 173 0016 5A68     		ldr	r2, [r3, #4]
 174 0018 40F20003 		movw	r3, #:lower16:IO004_Handle7
 175 001c C0F20003 		movt	r3, #:upper16:IO004_Handle7
 176 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 177 0022 4FF00101 		mov	r1, #1
 178 0026 01FA03F3 		lsl	r3, r1, r3
 179 002a 5360     		str	r3, [r2, #4]
 151:../Main.c     **** 	IO004_SetPin(LED2);
 180              		.loc 1 151 0
 181 002c 40F20003 		movw	r3, #:lower16:IO004_Handle8
 182 0030 C0F20003 		movt	r3, #:upper16:IO004_Handle8
 183 0034 5A68     		ldr	r2, [r3, #4]
 184 0036 40F20003 		movw	r3, #:lower16:IO004_Handle8
 185 003a C0F20003 		movt	r3, #:upper16:IO004_Handle8
 186 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 187 0040 4FF00101 		mov	r1, #1
 188 0044 01FA03F3 		lsl	r3, r1, r3
 189 0048 5360     		str	r3, [r2, #4]
 152:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 153:../Main.c     **** 	psxHandShake();
 190              		.loc 1 153 0
 191 004a FFF7FEFF 		bl	psxHandShake
 154:../Main.c     **** 	psxConfiguraControle();
 192              		.loc 1 154 0
 193 004e FFF7FEFF 		bl	psxConfiguraControle
 194              	.L42:
 195              	.LBB4:
 155:../Main.c     **** 	/*Loop do controle*/
 156:../Main.c     **** 	while(1)
 157:../Main.c     **** 	{
 158:../Main.c     **** 		/*Inicializa o que sera mandado*/
 159:../Main.c     **** 		BOOLType blah2 = 1;
 196              		.loc 1 159 0
 197 0052 4FF00103 		mov	r3, #1
 198 0056 FB73     		strb	r3, [r7, #15]
 160:../Main.c     **** 		BOOLType buzina = 1;
 199              		.loc 1 160 0
 200 0058 4FF00103 		mov	r3, #1
 201 005c FB72     		strb	r3, [r7, #11]
 161:../Main.c     **** 		BOOLType enable = 0;
 202              		.loc 1 161 0
 203 005e 4FF00003 		mov	r3, #0
 204 0062 BB72     		strb	r3, [r7, #10]
 162:../Main.c     **** 		BOOLType albh2 = 1;
 205              		.loc 1 162 0
 206 0064 4FF00103 		mov	r3, #1
 207 0068 BB73     		strb	r3, [r7, #14]
 163:../Main.c     **** 		BOOLType blah1 = 1;
 208              		.loc 1 163 0
 209 006a 4FF00103 		mov	r3, #1
 210 006e 7B73     		strb	r3, [r7, #13]
 164:../Main.c     **** 		BOOLType albh1 = 1;
 211              		.loc 1 164 0
 212 0070 4FF00103 		mov	r3, #1
 213 0074 3B73     		strb	r3, [r7, #12]
 165:../Main.c     **** 		int16_t pow1, pow2;
 166:../Main.c     **** 		/*Le controle*/
 167:../Main.c     **** 		psxLeControle();
 214              		.loc 1 167 0
 215 0076 FFF7FEFF 		bl	psxLeControle
 168:../Main.c     **** 		if (psx_status != 140)//Nao ta analogico
 216              		.loc 1 168 0
 217 007a 40F20003 		movw	r3, #:lower16:psx_status
 218 007e C0F20003 		movt	r3, #:upper16:psx_status
 219 0082 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 220 0084 8C2B     		cmp	r3, #140
 221 0086 02D0     		beq	.L2
 169:../Main.c     **** 		{
 170:../Main.c     **** 			psxConfiguraControle();
 222              		.loc 1 170 0
 223 0088 FFF7FEFF 		bl	psxConfiguraControle
 171:../Main.c     **** 			continue;
 224              		.loc 1 171 0
 225 008c 01E3     		b	.L3
 226              	.L2:
 172:../Main.c     **** 		}
 173:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 174:../Main.c     **** 		if (START && start) start();
 227              		.loc 1 174 0
 228 008e 40F20003 		movw	r3, #:lower16:psxDado
 229 0092 C0F20003 		movt	r3, #:upper16:psxDado
 230 0096 1B68     		ldr	r3, [r3, #0]
 231 0098 03F00803 		and	r3, r3, #8
 232 009c 002B     		cmp	r3, #0
 233 009e 0CD0     		beq	.L4
 234              		.loc 1 174 0 is_stmt 0 discriminator 1
 235 00a0 40F20003 		movw	r3, #:lower16:start
 236 00a4 C0F20003 		movt	r3, #:upper16:start
 237 00a8 1B68     		ldr	r3, [r3, #0]
 238 00aa 002B     		cmp	r3, #0
 239 00ac 05D0     		beq	.L4
 240 00ae 40F20003 		movw	r3, #:lower16:start
 241 00b2 C0F20003 		movt	r3, #:upper16:start
 242 00b6 1B68     		ldr	r3, [r3, #0]
 243 00b8 9847     		blx	r3
 244              	.L4:
 175:../Main.c     **** 		if (SELECT && select) select();
 245              		.loc 1 175 0 is_stmt 1
 246 00ba 40F20003 		movw	r3, #:lower16:psxDado
 247 00be C0F20003 		movt	r3, #:upper16:psxDado
 248 00c2 1B68     		ldr	r3, [r3, #0]
 249 00c4 03F00103 		and	r3, r3, #1
 250 00c8 002B     		cmp	r3, #0
 251 00ca 0CD0     		beq	.L5
 252              		.loc 1 175 0 is_stmt 0 discriminator 1
 253 00cc 40F20003 		movw	r3, #:lower16:select
 254 00d0 C0F20003 		movt	r3, #:upper16:select
 255 00d4 1B68     		ldr	r3, [r3, #0]
 256 00d6 002B     		cmp	r3, #0
 257 00d8 05D0     		beq	.L5
 258 00da 40F20003 		movw	r3, #:lower16:select
 259 00de C0F20003 		movt	r3, #:upper16:select
 260 00e2 1B68     		ldr	r3, [r3, #0]
 261 00e4 9847     		blx	r3
 262              	.L5:
 176:../Main.c     **** 		if (L_DOIS && l_dois) l_dois();
 263              		.loc 1 176 0 is_stmt 1
 264 00e6 40F20003 		movw	r3, #:lower16:psxDado
 265 00ea C0F20003 		movt	r3, #:upper16:psxDado
 266 00ee 5B68     		ldr	r3, [r3, #4]
 267 00f0 03F00103 		and	r3, r3, #1
 268 00f4 002B     		cmp	r3, #0
 269 00f6 0CD0     		beq	.L6
 270              		.loc 1 176 0 is_stmt 0 discriminator 1
 271 00f8 40F20003 		movw	r3, #:lower16:l_dois
 272 00fc C0F20003 		movt	r3, #:upper16:l_dois
 273 0100 1B68     		ldr	r3, [r3, #0]
 274 0102 002B     		cmp	r3, #0
 275 0104 05D0     		beq	.L6
 276 0106 40F20003 		movw	r3, #:lower16:l_dois
 277 010a C0F20003 		movt	r3, #:upper16:l_dois
 278 010e 1B68     		ldr	r3, [r3, #0]
 279 0110 9847     		blx	r3
 280              	.L6:
 177:../Main.c     **** 		if (L_UM && l_um) l_um();
 281              		.loc 1 177 0 is_stmt 1
 282 0112 40F20003 		movw	r3, #:lower16:psxDado
 283 0116 C0F20003 		movt	r3, #:upper16:psxDado
 284 011a 5B68     		ldr	r3, [r3, #4]
 285 011c 03F00403 		and	r3, r3, #4
 286 0120 002B     		cmp	r3, #0
 287 0122 0CD0     		beq	.L7
 288              		.loc 1 177 0 is_stmt 0 discriminator 1
 289 0124 40F20003 		movw	r3, #:lower16:l_um
 290 0128 C0F20003 		movt	r3, #:upper16:l_um
 291 012c 1B68     		ldr	r3, [r3, #0]
 292 012e 002B     		cmp	r3, #0
 293 0130 05D0     		beq	.L7
 294 0132 40F20003 		movw	r3, #:lower16:l_um
 295 0136 C0F20003 		movt	r3, #:upper16:l_um
 296 013a 1B68     		ldr	r3, [r3, #0]
 297 013c 9847     		blx	r3
 298              	.L7:
 178:../Main.c     **** 		if (L_TRES && l_tres) l_tres();
 299              		.loc 1 178 0 is_stmt 1
 300 013e 40F20003 		movw	r3, #:lower16:psxDado
 301 0142 C0F20003 		movt	r3, #:upper16:psxDado
 302 0146 1B68     		ldr	r3, [r3, #0]
 303 0148 03F00403 		and	r3, r3, #4
 304 014c 002B     		cmp	r3, #0
 305 014e 0CD0     		beq	.L8
 306              		.loc 1 178 0 is_stmt 0 discriminator 1
 307 0150 40F20003 		movw	r3, #:lower16:l_tres
 308 0154 C0F20003 		movt	r3, #:upper16:l_tres
 309 0158 1B68     		ldr	r3, [r3, #0]
 310 015a 002B     		cmp	r3, #0
 311 015c 05D0     		beq	.L8
 312 015e 40F20003 		movw	r3, #:lower16:l_tres
 313 0162 C0F20003 		movt	r3, #:upper16:l_tres
 314 0166 1B68     		ldr	r3, [r3, #0]
 315 0168 9847     		blx	r3
 316              	.L8:
 179:../Main.c     **** 		if (R_UM && r_um) r_um();
 317              		.loc 1 179 0 is_stmt 1
 318 016a 40F20003 		movw	r3, #:lower16:psxDado
 319 016e C0F20003 		movt	r3, #:upper16:psxDado
 320 0172 5B68     		ldr	r3, [r3, #4]
 321 0174 03F00803 		and	r3, r3, #8
 322 0178 002B     		cmp	r3, #0
 323 017a 0CD0     		beq	.L9
 324              		.loc 1 179 0 is_stmt 0 discriminator 1
 325 017c 40F20003 		movw	r3, #:lower16:r_um
 326 0180 C0F20003 		movt	r3, #:upper16:r_um
 327 0184 1B68     		ldr	r3, [r3, #0]
 328 0186 002B     		cmp	r3, #0
 329 0188 05D0     		beq	.L9
 330 018a 40F20003 		movw	r3, #:lower16:r_um
 331 018e C0F20003 		movt	r3, #:upper16:r_um
 332 0192 1B68     		ldr	r3, [r3, #0]
 333 0194 9847     		blx	r3
 334              	.L9:
 180:../Main.c     **** 		if (R_DOIS && r_dois) r_dois();
 335              		.loc 1 180 0 is_stmt 1
 336 0196 40F20003 		movw	r3, #:lower16:psxDado
 337 019a C0F20003 		movt	r3, #:upper16:psxDado
 338 019e 5B68     		ldr	r3, [r3, #4]
 339 01a0 03F00203 		and	r3, r3, #2
 340 01a4 002B     		cmp	r3, #0
 341 01a6 0CD0     		beq	.L10
 342              		.loc 1 180 0 is_stmt 0 discriminator 1
 343 01a8 40F20003 		movw	r3, #:lower16:r_dois
 344 01ac C0F20003 		movt	r3, #:upper16:r_dois
 345 01b0 1B68     		ldr	r3, [r3, #0]
 346 01b2 002B     		cmp	r3, #0
 347 01b4 05D0     		beq	.L10
 348 01b6 40F20003 		movw	r3, #:lower16:r_dois
 349 01ba C0F20003 		movt	r3, #:upper16:r_dois
 350 01be 1B68     		ldr	r3, [r3, #0]
 351 01c0 9847     		blx	r3
 352              	.L10:
 181:../Main.c     **** 		if (R_TRES && r_tres) r_tres();
 353              		.loc 1 181 0 is_stmt 1
 354 01c2 40F20003 		movw	r3, #:lower16:psxDado
 355 01c6 C0F20003 		movt	r3, #:upper16:psxDado
 356 01ca 1B68     		ldr	r3, [r3, #0]
 357 01cc 03F00203 		and	r3, r3, #2
 358 01d0 002B     		cmp	r3, #0
 359 01d2 0CD0     		beq	.L11
 360              		.loc 1 181 0 is_stmt 0 discriminator 1
 361 01d4 40F20003 		movw	r3, #:lower16:r_tres
 362 01d8 C0F20003 		movt	r3, #:upper16:r_tres
 363 01dc 1B68     		ldr	r3, [r3, #0]
 364 01de 002B     		cmp	r3, #0
 365 01e0 05D0     		beq	.L11
 366 01e2 40F20003 		movw	r3, #:lower16:r_tres
 367 01e6 C0F20003 		movt	r3, #:upper16:r_tres
 368 01ea 1B68     		ldr	r3, [r3, #0]
 369 01ec 9847     		blx	r3
 370              	.L11:
 182:../Main.c     **** 		if (SQR && sqr) sqr();
 371              		.loc 1 182 0 is_stmt 1
 372 01ee 40F20003 		movw	r3, #:lower16:psxDado
 373 01f2 C0F20003 		movt	r3, #:upper16:psxDado
 374 01f6 5B68     		ldr	r3, [r3, #4]
 375 01f8 03F08003 		and	r3, r3, #128
 376 01fc 002B     		cmp	r3, #0
 377 01fe 0CD0     		beq	.L12
 378              		.loc 1 182 0 is_stmt 0 discriminator 1
 379 0200 40F20003 		movw	r3, #:lower16:sqr
 380 0204 C0F20003 		movt	r3, #:upper16:sqr
 381 0208 1B68     		ldr	r3, [r3, #0]
 382 020a 002B     		cmp	r3, #0
 383 020c 05D0     		beq	.L12
 384 020e 40F20003 		movw	r3, #:lower16:sqr
 385 0212 C0F20003 		movt	r3, #:upper16:sqr
 386 0216 1B68     		ldr	r3, [r3, #0]
 387 0218 9847     		blx	r3
 388              	.L12:
 183:../Main.c     **** 		if (TRIANGLE && triangle) triangle();
 389              		.loc 1 183 0 is_stmt 1
 390 021a 40F20003 		movw	r3, #:lower16:psxDado
 391 021e C0F20003 		movt	r3, #:upper16:psxDado
 392 0222 5B68     		ldr	r3, [r3, #4]
 393 0224 03F01003 		and	r3, r3, #16
 394 0228 002B     		cmp	r3, #0
 395 022a 0CD0     		beq	.L13
 396              		.loc 1 183 0 is_stmt 0 discriminator 1
 397 022c 40F20003 		movw	r3, #:lower16:triangle
 398 0230 C0F20003 		movt	r3, #:upper16:triangle
 399 0234 1B68     		ldr	r3, [r3, #0]
 400 0236 002B     		cmp	r3, #0
 401 0238 05D0     		beq	.L13
 402 023a 40F20003 		movw	r3, #:lower16:triangle
 403 023e C0F20003 		movt	r3, #:upper16:triangle
 404 0242 1B68     		ldr	r3, [r3, #0]
 405 0244 9847     		blx	r3
 406              	.L13:
 184:../Main.c     **** 		if (CIRCLE && circle) circle();
 407              		.loc 1 184 0 is_stmt 1
 408 0246 40F20003 		movw	r3, #:lower16:psxDado
 409 024a C0F20003 		movt	r3, #:upper16:psxDado
 410 024e 5B68     		ldr	r3, [r3, #4]
 411 0250 03F02003 		and	r3, r3, #32
 412 0254 002B     		cmp	r3, #0
 413 0256 0CD0     		beq	.L14
 414              		.loc 1 184 0 is_stmt 0 discriminator 1
 415 0258 40F20003 		movw	r3, #:lower16:circle
 416 025c C0F20003 		movt	r3, #:upper16:circle
 417 0260 1B68     		ldr	r3, [r3, #0]
 418 0262 002B     		cmp	r3, #0
 419 0264 05D0     		beq	.L14
 420 0266 40F20003 		movw	r3, #:lower16:circle
 421 026a C0F20003 		movt	r3, #:upper16:circle
 422 026e 1B68     		ldr	r3, [r3, #0]
 423 0270 9847     		blx	r3
 424              	.L14:
 185:../Main.c     **** 		if (CROSS && cross) cross();
 425              		.loc 1 185 0 is_stmt 1
 426 0272 40F20003 		movw	r3, #:lower16:psxDado
 427 0276 C0F20003 		movt	r3, #:upper16:psxDado
 428 027a 5B68     		ldr	r3, [r3, #4]
 429 027c 03F04003 		and	r3, r3, #64
 430 0280 002B     		cmp	r3, #0
 431 0282 0CD0     		beq	.L15
 432              		.loc 1 185 0 is_stmt 0 discriminator 1
 433 0284 40F20003 		movw	r3, #:lower16:cross
 434 0288 C0F20003 		movt	r3, #:upper16:cross
 435 028c 1B68     		ldr	r3, [r3, #0]
 436 028e 002B     		cmp	r3, #0
 437 0290 05D0     		beq	.L15
 438 0292 40F20003 		movw	r3, #:lower16:cross
 439 0296 C0F20003 		movt	r3, #:upper16:cross
 440 029a 1B68     		ldr	r3, [r3, #0]
 441 029c 9847     		blx	r3
 442              	.L15:
 186:../Main.c     **** 		if (LEFT && left) left();
 443              		.loc 1 186 0 is_stmt 1
 444 029e 40F20003 		movw	r3, #:lower16:psxDado
 445 02a2 C0F20003 		movt	r3, #:upper16:psxDado
 446 02a6 1B68     		ldr	r3, [r3, #0]
 447 02a8 03F08003 		and	r3, r3, #128
 448 02ac 002B     		cmp	r3, #0
 449 02ae 0CD0     		beq	.L16
 450              		.loc 1 186 0 is_stmt 0 discriminator 1
 451 02b0 40F20003 		movw	r3, #:lower16:left
 452 02b4 C0F20003 		movt	r3, #:upper16:left
 453 02b8 1B68     		ldr	r3, [r3, #0]
 454 02ba 002B     		cmp	r3, #0
 455 02bc 05D0     		beq	.L16
 456 02be 40F20003 		movw	r3, #:lower16:left
 457 02c2 C0F20003 		movt	r3, #:upper16:left
 458 02c6 1B68     		ldr	r3, [r3, #0]
 459 02c8 9847     		blx	r3
 460              	.L16:
 187:../Main.c     **** 		if (RIGHT && right) right();
 461              		.loc 1 187 0 is_stmt 1
 462 02ca 40F20003 		movw	r3, #:lower16:psxDado
 463 02ce C0F20003 		movt	r3, #:upper16:psxDado
 464 02d2 1B68     		ldr	r3, [r3, #0]
 465 02d4 03F02003 		and	r3, r3, #32
 466 02d8 002B     		cmp	r3, #0
 467 02da 0CD0     		beq	.L17
 468              		.loc 1 187 0 is_stmt 0 discriminator 1
 469 02dc 40F20003 		movw	r3, #:lower16:right
 470 02e0 C0F20003 		movt	r3, #:upper16:right
 471 02e4 1B68     		ldr	r3, [r3, #0]
 472 02e6 002B     		cmp	r3, #0
 473 02e8 05D0     		beq	.L17
 474 02ea 40F20003 		movw	r3, #:lower16:right
 475 02ee C0F20003 		movt	r3, #:upper16:right
 476 02f2 1B68     		ldr	r3, [r3, #0]
 477 02f4 9847     		blx	r3
 478              	.L17:
 188:../Main.c     **** 		if (UP && up) up();
 479              		.loc 1 188 0 is_stmt 1
 480 02f6 40F20003 		movw	r3, #:lower16:psxDado
 481 02fa C0F20003 		movt	r3, #:upper16:psxDado
 482 02fe 1B68     		ldr	r3, [r3, #0]
 483 0300 03F01003 		and	r3, r3, #16
 484 0304 002B     		cmp	r3, #0
 485 0306 0CD0     		beq	.L18
 486              		.loc 1 188 0 is_stmt 0 discriminator 1
 487 0308 40F20003 		movw	r3, #:lower16:up
 488 030c C0F20003 		movt	r3, #:upper16:up
 489 0310 1B68     		ldr	r3, [r3, #0]
 490 0312 002B     		cmp	r3, #0
 491 0314 05D0     		beq	.L18
 492 0316 40F20003 		movw	r3, #:lower16:up
 493 031a C0F20003 		movt	r3, #:upper16:up
 494 031e 1B68     		ldr	r3, [r3, #0]
 495 0320 9847     		blx	r3
 496              	.L18:
 189:../Main.c     **** 		if (DOWN && down) down();
 497              		.loc 1 189 0 is_stmt 1
 498 0322 40F20003 		movw	r3, #:lower16:psxDado
 499 0326 C0F20003 		movt	r3, #:upper16:psxDado
 500 032a 1B68     		ldr	r3, [r3, #0]
 501 032c 03F04003 		and	r3, r3, #64
 502 0330 002B     		cmp	r3, #0
 503 0332 0CD0     		beq	.L19
 504              		.loc 1 189 0 is_stmt 0 discriminator 1
 505 0334 40F20003 		movw	r3, #:lower16:down
 506 0338 C0F20003 		movt	r3, #:upper16:down
 507 033c 1B68     		ldr	r3, [r3, #0]
 508 033e 002B     		cmp	r3, #0
 509 0340 05D0     		beq	.L19
 510 0342 40F20003 		movw	r3, #:lower16:down
 511 0346 C0F20003 		movt	r3, #:upper16:down
 512 034a 1B68     		ldr	r3, [r3, #0]
 513 034c 9847     		blx	r3
 514              	.L19:
 190:../Main.c     **** 
 191:../Main.c     **** 		if (psxDado[1]&1<<3) isPressed = 1;
 515              		.loc 1 191 0 is_stmt 1
 516 034e 40F20003 		movw	r3, #:lower16:psxDado
 517 0352 C0F20003 		movt	r3, #:upper16:psxDado
 518 0356 5B68     		ldr	r3, [r3, #4]
 519 0358 03F00803 		and	r3, r3, #8
 520 035c 002B     		cmp	r3, #0
 521 035e 07D0     		beq	.L20
 522              		.loc 1 191 0 is_stmt 0 discriminator 1
 523 0360 40F20003 		movw	r3, #:lower16:isPressed
 524 0364 C0F20003 		movt	r3, #:upper16:isPressed
 525 0368 4FF00102 		mov	r2, #1
 526 036c 1A70     		strb	r2, [r3, #0]
 527 036e 06E0     		b	.L21
 528              	.L20:
 192:../Main.c     **** 		else isPressed = 0;
 529              		.loc 1 192 0 is_stmt 1
 530 0370 40F20003 		movw	r3, #:lower16:isPressed
 531 0374 C0F20003 		movt	r3, #:upper16:isPressed
 532 0378 4FF00002 		mov	r2, #0
 533 037c 1A70     		strb	r2, [r3, #0]
 534              	.L21:
 193:../Main.c     **** 		if (lastIsPressed == 0 && isPressed == 1) flipped = !flipped;
 535              		.loc 1 193 0
 536 037e 40F20003 		movw	r3, #:lower16:lastIsPressed
 537 0382 C0F20003 		movt	r3, #:upper16:lastIsPressed
 538 0386 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 539 0388 002B     		cmp	r3, #0
 540 038a 16D1     		bne	.L22
 541              		.loc 1 193 0 is_stmt 0 discriminator 1
 542 038c 40F20003 		movw	r3, #:lower16:isPressed
 543 0390 C0F20003 		movt	r3, #:upper16:isPressed
 544 0394 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 545 0396 012B     		cmp	r3, #1
 546 0398 0FD1     		bne	.L22
 547 039a 40F20003 		movw	r3, #:lower16:flipped
 548 039e C0F20003 		movt	r3, #:upper16:flipped
 549 03a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 550 03a4 002B     		cmp	r3, #0
 551 03a6 14BF     		ite	ne
 552 03a8 0023     		movne	r3, #0
 553 03aa 0123     		moveq	r3, #1
 554 03ac DBB2     		uxtb	r3, r3
 555 03ae 1A46     		mov	r2, r3
 556 03b0 40F20003 		movw	r3, #:lower16:flipped
 557 03b4 C0F20003 		movt	r3, #:upper16:flipped
 558 03b8 1A70     		strb	r2, [r3, #0]
 559              	.L22:
 194:../Main.c     **** 		data_E[0] = 173;
 560              		.loc 1 194 0 is_stmt 1
 561 03ba 40F20003 		movw	r3, #:lower16:data_E
 562 03be C0F20003 		movt	r3, #:upper16:data_E
 563 03c2 4FF0AD02 		mov	r2, #173
 564 03c6 1A70     		strb	r2, [r3, #0]
 195:../Main.c     **** 		if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar quand
 565              		.loc 1 195 0
 566 03c8 40F20003 		movw	r3, #:lower16:psxDado
 567 03cc C0F20003 		movt	r3, #:upper16:psxDado
 568 03d0 5B69     		ldr	r3, [r3, #20]
 569 03d2 002B     		cmp	r3, #0
 570 03d4 07D1     		bne	.L23
 571              		.loc 1 195 0 is_stmt 0 discriminator 1
 572 03d6 40F20003 		movw	r3, #:lower16:psxDado
 573 03da C0F20003 		movt	r3, #:upper16:psxDado
 574 03de DB68     		ldr	r3, [r3, #12]
 575 03e0 002B     		cmp	r3, #0
 576 03e2 00F05581 		beq	.L43
 577              	.L23:
 196:../Main.c     **** 		pow1 = (psxDado[5]-127);//<<1; //Analog esq //Subtrai 127 para saber o sentido
 578              		.loc 1 196 0 is_stmt 1
 579 03e6 40F20003 		movw	r3, #:lower16:psxDado
 580 03ea C0F20003 		movt	r3, #:upper16:psxDado
 581 03ee 5B69     		ldr	r3, [r3, #20]
 582 03f0 9BB2     		uxth	r3, r3
 583 03f2 A3F17F03 		sub	r3, r3, #127
 584 03f6 9BB2     		uxth	r3, r3
 585 03f8 3B81     		strh	r3, [r7, #8]	@ movhi
 197:../Main.c     **** 		pow2 = (psxDado[3]-127);//<<1;
 586              		.loc 1 197 0
 587 03fa 40F20003 		movw	r3, #:lower16:psxDado
 588 03fe C0F20003 		movt	r3, #:upper16:psxDado
 589 0402 DB68     		ldr	r3, [r3, #12]
 590 0404 9BB2     		uxth	r3, r3
 591 0406 A3F17F03 		sub	r3, r3, #127
 592 040a 9BB2     		uxth	r3, r3
 593 040c FB80     		strh	r3, [r7, #6]	@ movhi
 198:../Main.c     **** 		data_E[3] = 0;
 594              		.loc 1 198 0
 595 040e 40F20003 		movw	r3, #:lower16:data_E
 596 0412 C0F20003 		movt	r3, #:upper16:data_E
 597 0416 4FF00002 		mov	r2, #0
 598 041a DA70     		strb	r2, [r3, #3]
 199:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 200:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 599              		.loc 1 200 0
 600 041c 40F20003 		movw	r3, #:lower16:flipped
 601 0420 C0F20003 		movt	r3, #:upper16:flipped
 602 0424 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 603 0426 002B     		cmp	r3, #0
 604 0428 7CD1     		bne	.L24
 201:../Main.c     **** 		{
 202:../Main.c     **** 			if (pow1 < -30) albh2 = 0; //ok
 605              		.loc 1 202 0
 606 042a B7F90830 		ldrsh	r3, [r7, #8]
 607 042e 13F11E0F 		cmn	r3, #30
 608 0432 03DA     		bge	.L25
 609              		.loc 1 202 0 is_stmt 0 discriminator 1
 610 0434 4FF00003 		mov	r3, #0
 611 0438 BB73     		strb	r3, [r7, #14]
 612 043a 06E0     		b	.L26
 613              	.L25:
 203:../Main.c     **** 			else if (pow1 > 30) blah2 = 0; //ok
 614              		.loc 1 203 0 is_stmt 1
 615 043c B7F90830 		ldrsh	r3, [r7, #8]
 616 0440 1E2B     		cmp	r3, #30
 617 0442 02DD     		ble	.L26
 618              		.loc 1 203 0 is_stmt 0 discriminator 1
 619 0444 4FF00003 		mov	r3, #0
 620 0448 FB73     		strb	r3, [r7, #15]
 621              	.L26:
 204:../Main.c     **** 			if (pow2 < -30) albh1 = 0;
 622              		.loc 1 204 0 is_stmt 1
 623 044a B7F90630 		ldrsh	r3, [r7, #6]
 624 044e 13F11E0F 		cmn	r3, #30
 625 0452 03DA     		bge	.L27
 626              		.loc 1 204 0 is_stmt 0 discriminator 1
 627 0454 4FF00003 		mov	r3, #0
 628 0458 3B73     		strb	r3, [r7, #12]
 629 045a 06E0     		b	.L28
 630              	.L27:
 205:../Main.c     **** 			else if (pow2 > 30) blah1 = 0;
 631              		.loc 1 205 0 is_stmt 1
 632 045c B7F90630 		ldrsh	r3, [r7, #6]
 633 0460 1E2B     		cmp	r3, #30
 634 0462 02DD     		ble	.L28
 635              		.loc 1 205 0 is_stmt 0 discriminator 1
 636 0464 4FF00003 		mov	r3, #0
 637 0468 7B73     		strb	r3, [r7, #13]
 638              	.L28:
 206:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 639              		.loc 1 206 0 is_stmt 1
 640 046a B7F90830 		ldrsh	r3, [r7, #8]
 641 046e 002B     		cmp	r3, #0
 642 0470 05DD     		ble	.L29
 643              		.loc 1 206 0 is_stmt 0 discriminator 1
 644 0472 3B89     		ldrh	r3, [r7, #8]
 645 0474 4FEA4303 		lsl	r3, r3, #1
 646 0478 9BB2     		uxth	r3, r3
 647 047a 9BB2     		uxth	r3, r3
 648 047c 08E0     		b	.L30
 649              	.L29:
 650              		.loc 1 206 0 discriminator 2
 651 047e 3B89     		ldrh	r3, [r7, #8]
 652 0480 1A46     		mov	r2, r3	@ movhi
 653 0482 4FEAC232 		lsl	r2, r2, #15
 654 0486 D31A     		subs	r3, r2, r3
 655 0488 4FEA4303 		lsl	r3, r3, #1
 656 048c 9BB2     		uxth	r3, r3
 657 048e 9BB2     		uxth	r3, r3
 658              	.L30:
 659              		.loc 1 206 0 discriminator 3
 660 0490 BB80     		strh	r3, [r7, #4]	@ movhi
 207:../Main.c     **** 			data_E[1] = temp*PWM_LIM/100;
 661              		.loc 1 207 0 is_stmt 1 discriminator 3
 662 0492 B7F90420 		ldrsh	r2, [r7, #4]
 663 0496 1346     		mov	r3, r2
 664 0498 4FEA0313 		lsl	r3, r3, #4
 665 049c 9B1A     		subs	r3, r3, r2
 666 049e 4FEA8303 		lsl	r3, r3, #2
 667 04a2 1A46     		mov	r2, r3
 668 04a4 48F21F53 		movw	r3, #34079
 669 04a8 C5F2EB13 		movt	r3, 20971
 670 04ac 83FB0213 		smull	r1, r3, r3, r2
 671 04b0 4FEA6311 		asr	r1, r3, #5
 672 04b4 4FEAE273 		asr	r3, r2, #31
 673 04b8 CB1A     		subs	r3, r1, r3
 674 04ba DAB2     		uxtb	r2, r3
 675 04bc 40F20003 		movw	r3, #:lower16:data_E
 676 04c0 C0F20003 		movt	r3, #:upper16:data_E
 677 04c4 5A70     		strb	r2, [r3, #1]
 208:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 678              		.loc 1 208 0 discriminator 3
 679 04c6 B7F90630 		ldrsh	r3, [r7, #6]
 680 04ca 002B     		cmp	r3, #0
 681 04cc 05DD     		ble	.L31
 682              		.loc 1 208 0 is_stmt 0 discriminator 1
 683 04ce FB88     		ldrh	r3, [r7, #6]
 684 04d0 4FEA4303 		lsl	r3, r3, #1
 685 04d4 9BB2     		uxth	r3, r3
 686 04d6 9BB2     		uxth	r3, r3
 687 04d8 08E0     		b	.L32
 688              	.L31:
 689              		.loc 1 208 0 discriminator 2
 690 04da FB88     		ldrh	r3, [r7, #6]
 691 04dc 1A46     		mov	r2, r3	@ movhi
 692 04de 4FEAC232 		lsl	r2, r2, #15
 693 04e2 D31A     		subs	r3, r2, r3
 694 04e4 4FEA4303 		lsl	r3, r3, #1
 695 04e8 9BB2     		uxth	r3, r3
 696 04ea 9BB2     		uxth	r3, r3
 697              	.L32:
 698              		.loc 1 208 0 discriminator 3
 699 04ec BB80     		strh	r3, [r7, #4]	@ movhi
 209:../Main.c     **** 			data_E[2] = temp*PWM_LIM/100;
 700              		.loc 1 209 0 is_stmt 1 discriminator 3
 701 04ee B7F90420 		ldrsh	r2, [r7, #4]
 702 04f2 1346     		mov	r3, r2
 703 04f4 4FEA0313 		lsl	r3, r3, #4
 704 04f8 9B1A     		subs	r3, r3, r2
 705 04fa 4FEA8303 		lsl	r3, r3, #2
 706 04fe 1A46     		mov	r2, r3
 707 0500 48F21F53 		movw	r3, #34079
 708 0504 C5F2EB13 		movt	r3, 20971
 709 0508 83FB0213 		smull	r1, r3, r3, r2
 710 050c 4FEA6311 		asr	r1, r3, #5
 711 0510 4FEAE273 		asr	r3, r2, #31
 712 0514 CB1A     		subs	r3, r1, r3
 713 0516 DAB2     		uxtb	r2, r3
 714 0518 40F20003 		movw	r3, #:lower16:data_E
 715 051c C0F20003 		movt	r3, #:upper16:data_E
 716 0520 9A70     		strb	r2, [r3, #2]
 717 0522 7BE0     		b	.L33
 718              	.L24:
 210:../Main.c     **** 		}
 211:../Main.c     **** 		else
 212:../Main.c     **** 		{
 213:../Main.c     **** 			if (pow2 > 30) albh2 = 0; //ok
 719              		.loc 1 213 0
 720 0524 B7F90630 		ldrsh	r3, [r7, #6]
 721 0528 1E2B     		cmp	r3, #30
 722 052a 03DD     		ble	.L34
 723              		.loc 1 213 0 is_stmt 0 discriminator 1
 724 052c 4FF00003 		mov	r3, #0
 725 0530 BB73     		strb	r3, [r7, #14]
 726 0532 07E0     		b	.L35
 727              	.L34:
 214:../Main.c     **** 			else if (pow2 < -30) blah2 = 0; //ok
 728              		.loc 1 214 0 is_stmt 1
 729 0534 B7F90630 		ldrsh	r3, [r7, #6]
 730 0538 13F11E0F 		cmn	r3, #30
 731 053c 02DA     		bge	.L35
 732              		.loc 1 214 0 is_stmt 0 discriminator 1
 733 053e 4FF00003 		mov	r3, #0
 734 0542 FB73     		strb	r3, [r7, #15]
 735              	.L35:
 215:../Main.c     **** 			if (pow1 > 30) albh1 = 0;
 736              		.loc 1 215 0 is_stmt 1
 737 0544 B7F90830 		ldrsh	r3, [r7, #8]
 738 0548 1E2B     		cmp	r3, #30
 739 054a 03DD     		ble	.L36
 740              		.loc 1 215 0 is_stmt 0 discriminator 1
 741 054c 4FF00003 		mov	r3, #0
 742 0550 3B73     		strb	r3, [r7, #12]
 743 0552 07E0     		b	.L37
 744              	.L36:
 216:../Main.c     **** 			else if (pow1 < -30) blah1 = 0;
 745              		.loc 1 216 0 is_stmt 1
 746 0554 B7F90830 		ldrsh	r3, [r7, #8]
 747 0558 13F11E0F 		cmn	r3, #30
 748 055c 02DA     		bge	.L37
 749              		.loc 1 216 0 is_stmt 0 discriminator 1
 750 055e 4FF00003 		mov	r3, #0
 751 0562 7B73     		strb	r3, [r7, #13]
 752              	.L37:
 217:../Main.c     **** 			temp = pow1>0?pow1*2:(-pow1)*2;
 753              		.loc 1 217 0 is_stmt 1
 754 0564 B7F90830 		ldrsh	r3, [r7, #8]
 755 0568 002B     		cmp	r3, #0
 756 056a 05DD     		ble	.L38
 757              		.loc 1 217 0 is_stmt 0 discriminator 1
 758 056c 3B89     		ldrh	r3, [r7, #8]
 759 056e 4FEA4303 		lsl	r3, r3, #1
 760 0572 9BB2     		uxth	r3, r3
 761 0574 9BB2     		uxth	r3, r3
 762 0576 08E0     		b	.L39
 763              	.L38:
 764              		.loc 1 217 0 discriminator 2
 765 0578 3B89     		ldrh	r3, [r7, #8]
 766 057a 1A46     		mov	r2, r3	@ movhi
 767 057c 4FEAC232 		lsl	r2, r2, #15
 768 0580 D31A     		subs	r3, r2, r3
 769 0582 4FEA4303 		lsl	r3, r3, #1
 770 0586 9BB2     		uxth	r3, r3
 771 0588 9BB2     		uxth	r3, r3
 772              	.L39:
 773              		.loc 1 217 0 discriminator 3
 774 058a BB80     		strh	r3, [r7, #4]	@ movhi
 218:../Main.c     **** 			data_E[2] = temp*PWM_LIM/100;
 775              		.loc 1 218 0 is_stmt 1 discriminator 3
 776 058c B7F90420 		ldrsh	r2, [r7, #4]
 777 0590 1346     		mov	r3, r2
 778 0592 4FEA0313 		lsl	r3, r3, #4
 779 0596 9B1A     		subs	r3, r3, r2
 780 0598 4FEA8303 		lsl	r3, r3, #2
 781 059c 1A46     		mov	r2, r3
 782 059e 48F21F53 		movw	r3, #34079
 783 05a2 C5F2EB13 		movt	r3, 20971
 784 05a6 83FB0213 		smull	r1, r3, r3, r2
 785 05aa 4FEA6311 		asr	r1, r3, #5
 786 05ae 4FEAE273 		asr	r3, r2, #31
 787 05b2 CB1A     		subs	r3, r1, r3
 788 05b4 DAB2     		uxtb	r2, r3
 789 05b6 40F20003 		movw	r3, #:lower16:data_E
 790 05ba C0F20003 		movt	r3, #:upper16:data_E
 791 05be 9A70     		strb	r2, [r3, #2]
 219:../Main.c     **** 			temp = pow2>0?pow2*2:(-pow2)*2;
 792              		.loc 1 219 0 discriminator 3
 793 05c0 B7F90630 		ldrsh	r3, [r7, #6]
 794 05c4 002B     		cmp	r3, #0
 795 05c6 05DD     		ble	.L40
 796              		.loc 1 219 0 is_stmt 0 discriminator 1
 797 05c8 FB88     		ldrh	r3, [r7, #6]
 798 05ca 4FEA4303 		lsl	r3, r3, #1
 799 05ce 9BB2     		uxth	r3, r3
 800 05d0 9BB2     		uxth	r3, r3
 801 05d2 08E0     		b	.L41
 802              	.L40:
 803              		.loc 1 219 0 discriminator 2
 804 05d4 FB88     		ldrh	r3, [r7, #6]
 805 05d6 1A46     		mov	r2, r3	@ movhi
 806 05d8 4FEAC232 		lsl	r2, r2, #15
 807 05dc D31A     		subs	r3, r2, r3
 808 05de 4FEA4303 		lsl	r3, r3, #1
 809 05e2 9BB2     		uxth	r3, r3
 810 05e4 9BB2     		uxth	r3, r3
 811              	.L41:
 812              		.loc 1 219 0 discriminator 3
 813 05e6 BB80     		strh	r3, [r7, #4]	@ movhi
 220:../Main.c     **** 			data_E[1] = temp*PWM_LIM/100;
 814              		.loc 1 220 0 is_stmt 1 discriminator 3
 815 05e8 B7F90420 		ldrsh	r2, [r7, #4]
 816 05ec 1346     		mov	r3, r2
 817 05ee 4FEA0313 		lsl	r3, r3, #4
 818 05f2 9B1A     		subs	r3, r3, r2
 819 05f4 4FEA8303 		lsl	r3, r3, #2
 820 05f8 1A46     		mov	r2, r3
 821 05fa 48F21F53 		movw	r3, #34079
 822 05fe C5F2EB13 		movt	r3, 20971
 823 0602 83FB0213 		smull	r1, r3, r3, r2
 824 0606 4FEA6311 		asr	r1, r3, #5
 825 060a 4FEAE273 		asr	r3, r2, #31
 826 060e CB1A     		subs	r3, r1, r3
 827 0610 DAB2     		uxtb	r2, r3
 828 0612 40F20003 		movw	r3, #:lower16:data_E
 829 0616 C0F20003 		movt	r3, #:upper16:data_E
 830 061a 5A70     		strb	r2, [r3, #1]
 831              	.L33:
 221:../Main.c     **** 		}
 222:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 223:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2) | (albh1 << ALBH1) | (albh2 << ALBH2)
 832              		.loc 1 223 0
 833 061c 40F20003 		movw	r3, #:lower16:data_E
 834 0620 C0F20003 		movt	r3, #:upper16:data_E
 835 0624 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 836 0626 DAB2     		uxtb	r2, r3
 837 0628 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 838 062a 4FEA0313 		lsl	r3, r3, #4
 839 062e DBB2     		uxtb	r3, r3
 840 0630 1343     		orrs	r3, r3, r2
 841 0632 DAB2     		uxtb	r2, r3
 842 0634 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 843 0636 1343     		orrs	r3, r3, r2
 844 0638 DAB2     		uxtb	r2, r3
 845 063a 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 846 063c 4FEA4313 		lsl	r3, r3, #5
 847 0640 DBB2     		uxtb	r3, r3
 848 0642 1343     		orrs	r3, r3, r2
 849 0644 DAB2     		uxtb	r2, r3
 850 0646 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 851 0648 4FEAC303 		lsl	r3, r3, #3
 852 064c DBB2     		uxtb	r3, r3
 853 064e 1343     		orrs	r3, r3, r2
 854 0650 DAB2     		uxtb	r2, r3
 855 0652 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 856 0654 4FEA8303 		lsl	r3, r3, #2
 857 0658 DBB2     		uxtb	r3, r3
 858 065a 1343     		orrs	r3, r3, r2
 859 065c DAB2     		uxtb	r2, r3
 860 065e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 861 0660 4FEA4303 		lsl	r3, r3, #1
 862 0664 DBB2     		uxtb	r3, r3
 863 0666 1343     		orrs	r3, r3, r2
 864 0668 DBB2     		uxtb	r3, r3
 865 066a DAB2     		uxtb	r2, r3
 866 066c 40F20003 		movw	r3, #:lower16:data_E
 867 0670 C0F20003 		movt	r3, #:upper16:data_E
 868 0674 DA70     		strb	r2, [r3, #3]
 224:../Main.c     **** 		write_E();
 869              		.loc 1 224 0
 870 0676 FFF7FEFF 		bl	write_E
 225:../Main.c     **** 		lastIsPressed = isPressed;
 871              		.loc 1 225 0
 872 067a 40F20003 		movw	r3, #:lower16:isPressed
 873 067e C0F20003 		movt	r3, #:upper16:isPressed
 874 0682 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 875 0684 40F20003 		movw	r3, #:lower16:lastIsPressed
 876 0688 C0F20003 		movt	r3, #:upper16:lastIsPressed
 877 068c 1A70     		strb	r2, [r3, #0]
 878              	.LBE4:
 226:../Main.c     **** 	}
 879              		.loc 1 226 0
 880 068e E0E4     		b	.L42
 881              	.L43:
 882              	.LBB5:
 195:../Main.c     **** 		if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar quand
 883              		.loc 1 195 0
 884 0690 00BF     		nop
 885              	.L3:
 886              	.LBE5:
 887              		.loc 1 226 0
 888 0692 DEE4     		b	.L42
 889              		.cfi_endproc
 890              	.LFE112:
 892              		.section	.text.read_R,"ax",%progbits
 893              		.align	2
 894              		.global	read_R
 895              		.thumb
 896              		.thumb_func
 898              	read_R:
 899              	.LFB113:
 227:../Main.c     **** 	return 0;
 228:../Main.c     **** }
 229:../Main.c     **** 
 230:../Main.c     **** /***************************************************/
 231:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 232:../Main.c     **** /***************************************************/
 233:../Main.c     **** 
 234:../Main.c     **** void read_R()
 235:../Main.c     **** {
 900              		.loc 1 235 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 8
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}
 905              	.LCFI3:
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 82B0     		sub	sp, sp, #8
 910              	.LCFI4:
 911              		.cfi_def_cfa_offset 16
 912 0004 00AF     		add	r7, sp, #0
 913              	.LCFI5:
 914              		.cfi_def_cfa_register 7
 236:../Main.c     **** 	int i;
 237:../Main.c     **** 	IO004_ResetPin(CE);
 915              		.loc 1 237 0
 916 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 917 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 918 000e 5A68     		ldr	r2, [r3, #4]
 919 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 920 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 921 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 922 001a 4FF48031 		mov	r1, #65536
 923 001e 01FA03F3 		lsl	r3, r1, r3
 924 0022 5360     		str	r3, [r2, #4]
 238:../Main.c     **** 	delay(50000);
 925              		.loc 1 238 0
 926 0024 4CF25030 		movw	r0, #50000
 927 0028 FFF7FEFF 		bl	delay
 239:../Main.c     **** 	uint8_t temp = 0;
 928              		.loc 1 239 0
 929 002c 4FF00003 		mov	r3, #0
 930 0030 FB70     		strb	r3, [r7, #3]
 240:../Main.c     **** 
 241:../Main.c     **** 	for (i = 7; i > -1; i --)
 931              		.loc 1 241 0
 932 0032 4FF00703 		mov	r3, #7
 933 0036 7B60     		str	r3, [r7, #4]
 934 0038 20E0     		b	.L45
 935              	.L47:
 242:../Main.c     **** 	{
 243:../Main.c     **** 		if (IO004_ReadPin(DATA)) temp |= (1<<i);
 936              		.loc 1 243 0
 937 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 938 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 939 0042 5B68     		ldr	r3, [r3, #4]
 940 0044 5A6A     		ldr	r2, [r3, #36]
 941 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 942 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 943 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 944 0050 22FA03F3 		lsr	r3, r2, r3
 945 0054 03F00103 		and	r3, r3, #1
 946 0058 002B     		cmp	r3, #0
 947 005a 09D0     		beq	.L46
 948              		.loc 1 243 0 is_stmt 0 discriminator 1
 949 005c 4FF00102 		mov	r2, #1
 950 0060 7B68     		ldr	r3, [r7, #4]
 951 0062 02FA03F3 		lsl	r3, r2, r3
 952 0066 DAB2     		uxtb	r2, r3
 953 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 954 006a 1343     		orrs	r3, r3, r2
 955 006c DBB2     		uxtb	r3, r3
 956 006e FB70     		strb	r3, [r7, #3]
 957              	.L46:
 244:../Main.c     **** 		pulse_R();
 958              		.loc 1 244 0 is_stmt 1
 959 0070 FFF7FEFF 		bl	pulse_R
 241:../Main.c     **** 	for (i = 7; i > -1; i --)
 960              		.loc 1 241 0
 961 0074 7B68     		ldr	r3, [r7, #4]
 962 0076 03F1FF33 		add	r3, r3, #-1
 963 007a 7B60     		str	r3, [r7, #4]
 964              	.L45:
 241:../Main.c     **** 	for (i = 7; i > -1; i --)
 965              		.loc 1 241 0 is_stmt 0 discriminator 1
 966 007c 7B68     		ldr	r3, [r7, #4]
 967 007e 002B     		cmp	r3, #0
 968 0080 DBDA     		bge	.L47
 245:../Main.c     **** 	}
 246:../Main.c     **** 	data_R = temp;
 969              		.loc 1 246 0 is_stmt 1
 970 0082 40F20003 		movw	r3, #:lower16:data_R
 971 0086 C0F20003 		movt	r3, #:upper16:data_R
 972 008a FA78     		ldrb	r2, [r7, #3]
 973 008c 1A70     		strb	r2, [r3, #0]
 247:../Main.c     **** 	IO004_SetPin(CE);
 974              		.loc 1 247 0
 975 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 976 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 977 0096 5A68     		ldr	r2, [r3, #4]
 978 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 979 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 980 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 981 00a2 4FF00101 		mov	r1, #1
 982 00a6 01FA03F3 		lsl	r3, r1, r3
 983 00aa 5360     		str	r3, [r2, #4]
 248:../Main.c     **** 	delay(50000);
 984              		.loc 1 248 0
 985 00ac 4CF25030 		movw	r0, #50000
 986 00b0 FFF7FEFF 		bl	delay
 249:../Main.c     **** }
 987              		.loc 1 249 0
 988 00b4 07F10807 		add	r7, r7, #8
 989 00b8 BD46     		mov	sp, r7
 990 00ba 80BD     		pop	{r7, pc}
 991              		.cfi_endproc
 992              	.LFE113:
 994              		.section	.text.pulse_R,"ax",%progbits
 995              		.align	2
 996              		.global	pulse_R
 997              		.thumb
 998              		.thumb_func
 1000              	pulse_R:
 1001              	.LFB114:
 250:../Main.c     **** 
 251:../Main.c     **** void pulse_R()
 252:../Main.c     **** {
 1002              		.loc 1 252 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006 0000 80B5     		push	{r7, lr}
 1007              	.LCFI6:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 7, -8
 1010              		.cfi_offset 14, -4
 1011 0002 00AF     		add	r7, sp, #0
 1012              	.LCFI7:
 1013              		.cfi_def_cfa_register 7
 253:../Main.c     **** 	delay(300);
 1014              		.loc 1 253 0
 1015 0004 4FF49670 		mov	r0, #300
 1016 0008 FFF7FEFF 		bl	delay
 254:../Main.c     **** 	IO004_SetPin(CLK1);
 1017              		.loc 1 254 0
 1018 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1019 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1020 0014 5A68     		ldr	r2, [r3, #4]
 1021 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1022 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1023 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1024 0020 4FF00101 		mov	r1, #1
 1025 0024 01FA03F3 		lsl	r3, r1, r3
 1026 0028 5360     		str	r3, [r2, #4]
 255:../Main.c     **** 	delay(300);
 1027              		.loc 1 255 0
 1028 002a 4FF49670 		mov	r0, #300
 1029 002e FFF7FEFF 		bl	delay
 256:../Main.c     **** 	IO004_ResetPin(CLK1);
 1030              		.loc 1 256 0
 1031 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1032 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1033 003a 5A68     		ldr	r2, [r3, #4]
 1034 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1035 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1036 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1037 0046 4FF48031 		mov	r1, #65536
 1038 004a 01FA03F3 		lsl	r3, r1, r3
 1039 004e 5360     		str	r3, [r2, #4]
 257:../Main.c     **** }
 1040              		.loc 1 257 0
 1041 0050 80BD     		pop	{r7, pc}
 1042              		.cfi_endproc
 1043              	.LFE114:
 1045 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 1046              		.align	2
 1047              		.global	configure_E
 1048              		.thumb
 1049              		.thumb_func
 1051              	configure_E:
 1052              	.LFB115:
 258:../Main.c     **** 
 259:../Main.c     **** void configure_E()
 260:../Main.c     **** {
 1053              		.loc 1 260 0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 8
 1056              		@ frame_needed = 1, uses_anonymous_args = 0
 1057 0000 80B5     		push	{r7, lr}
 1058              	.LCFI8:
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 0002 82B0     		sub	sp, sp, #8
 1063              	.LCFI9:
 1064              		.cfi_def_cfa_offset 16
 1065 0004 00AF     		add	r7, sp, #0
 1066              	.LCFI10:
 1067              		.cfi_def_cfa_register 7
 261:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 262:../Main.c     **** 	configuration[0] = 0xC4;//RF_CH# e OP_MODE 0b11011110
 1068              		.loc 1 262 0
 1069 0006 40F20003 		movw	r3, #:lower16:configuration
 1070 000a C0F20003 		movt	r3, #:upper16:configuration
 1071 000e 4FF0C402 		mov	r2, #196
 1072 0012 1A70     		strb	r2, [r3, #0]
 263:../Main.c     **** 	configuration[1] = 0x4F;//RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1073              		.loc 1 263 0
 1074 0014 40F20003 		movw	r3, #:lower16:configuration
 1075 0018 C0F20003 		movt	r3, #:upper16:configuration
 1076 001c 4FF04F02 		mov	r2, #79
 1077 0020 5A70     		strb	r2, [r3, #1]
 264:../Main.c     **** 	configuration[2] = 0xA3;//addr_w
 1078              		.loc 1 264 0
 1079 0022 40F20003 		movw	r3, #:lower16:configuration
 1080 0026 C0F20003 		movt	r3, #:upper16:configuration
 1081 002a 4FF0A302 		mov	r2, #163
 1082 002e 9A70     		strb	r2, [r3, #2]
 265:../Main.c     **** 	configuration[3] = 0xEE;//Comeco enderco CH1 00000001
 1083              		.loc 1 265 0
 1084 0030 40F20003 		movw	r3, #:lower16:configuration
 1085 0034 C0F20003 		movt	r3, #:upper16:configuration
 1086 0038 4FF0EE02 		mov	r2, #238
 1087 003c DA70     		strb	r2, [r3, #3]
 266:../Main.c     **** 	configuration[4] = 0xDD;//0b00000000
 1088              		.loc 1 266 0
 1089 003e 40F20003 		movw	r3, #:lower16:configuration
 1090 0042 C0F20003 		movt	r3, #:upper16:configuration
 1091 0046 4FF0DD02 		mov	r2, #221
 1092 004a 1A71     		strb	r2, [r3, #4]
 267:../Main.c     **** 	configuration[5] = 0xCC;//0b11010100
 1093              		.loc 1 267 0
 1094 004c 40F20003 		movw	r3, #:lower16:configuration
 1095 0050 C0F20003 		movt	r3, #:upper16:configuration
 1096 0054 4FF0CC02 		mov	r2, #204
 1097 0058 5A71     		strb	r2, [r3, #5]
 268:../Main.c     **** 	configuration[6] = 0xBB;//0b11011111
 1098              		.loc 1 268 0
 1099 005a 40F20003 		movw	r3, #:lower16:configuration
 1100 005e C0F20003 		movt	r3, #:upper16:configuration
 1101 0062 4FF0BB02 		mov	r2, #187
 1102 0066 9A71     		strb	r2, [r3, #6]
 269:../Main.c     **** 	configuration[7] = 0xAA;//Fim enderco CH1 0b11101010
 1103              		.loc 1 269 0
 1104 0068 40F20003 		movw	r3, #:lower16:configuration
 1105 006c C0F20003 		movt	r3, #:upper16:configuration
 1106 0070 4FF0AA02 		mov	r2, #170
 1107 0074 DA71     		strb	r2, [r3, #7]
 270:../Main.c     **** 	configuration[8] = 0b00000000;//Comeco enderco CH2
 1108              		.loc 1 270 0
 1109 0076 40F20003 		movw	r3, #:lower16:configuration
 1110 007a C0F20003 		movt	r3, #:upper16:configuration
 1111 007e 4FF00002 		mov	r2, #0
 1112 0082 1A72     		strb	r2, [r3, #8]
 271:../Main.c     **** 	configuration[9] = 0b00000000;
 1113              		.loc 1 271 0
 1114 0084 40F20003 		movw	r3, #:lower16:configuration
 1115 0088 C0F20003 		movt	r3, #:upper16:configuration
 1116 008c 4FF00002 		mov	r2, #0
 1117 0090 5A72     		strb	r2, [r3, #9]
 272:../Main.c     **** 	configuration[10] = 0b00000000;
 1118              		.loc 1 272 0
 1119 0092 40F20003 		movw	r3, #:lower16:configuration
 1120 0096 C0F20003 		movt	r3, #:upper16:configuration
 1121 009a 4FF00002 		mov	r2, #0
 1122 009e 9A72     		strb	r2, [r3, #10]
 273:../Main.c     **** 	configuration[11] = 0b00000000;
 1123              		.loc 1 273 0
 1124 00a0 40F20003 		movw	r3, #:lower16:configuration
 1125 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1126 00a8 4FF00002 		mov	r2, #0
 1127 00ac DA72     		strb	r2, [r3, #11]
 274:../Main.c     **** 	configuration[12] = 0b00000000;//Fim enderco CH2
 1128              		.loc 1 274 0
 1129 00ae 40F20003 		movw	r3, #:lower16:configuration
 1130 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1131 00b6 4FF00002 		mov	r2, #0
 1132 00ba 1A73     		strb	r2, [r3, #12]
 275:../Main.c     **** 	configuration[13] = 0x20;//num bits enviados (1 byte nesse ex)
 1133              		.loc 1 275 0
 1134 00bc 40F20003 		movw	r3, #:lower16:configuration
 1135 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1136 00c4 4FF02002 		mov	r2, #32
 1137 00c8 5A73     		strb	r2, [r3, #13]
 276:../Main.c     **** 	configuration[14] = 0b00000000;
 1138              		.loc 1 276 0
 1139 00ca 40F20003 		movw	r3, #:lower16:configuration
 1140 00ce C0F20003 		movt	r3, #:upper16:configuration
 1141 00d2 4FF00002 		mov	r2, #0
 1142 00d6 9A73     		strb	r2, [r3, #14]
 277:../Main.c     **** 
 278:../Main.c     **** 	IO004_ResetPin(CE);
 1143              		.loc 1 278 0
 1144 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1145 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1146 00e0 5A68     		ldr	r2, [r3, #4]
 1147 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1148 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1149 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1150 00ec 4FF48031 		mov	r1, #65536
 1151 00f0 01FA03F3 		lsl	r3, r1, r3
 1152 00f4 5360     		str	r3, [r2, #4]
 279:../Main.c     **** 	IO004_SetPin(CS);
 1153              		.loc 1 279 0
 1154 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1155 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1156 00fe 5A68     		ldr	r2, [r3, #4]
 1157 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1158 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1159 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1160 010a 4FF00101 		mov	r1, #1
 1161 010e 01FA03F3 		lsl	r3, r1, r3
 1162 0112 5360     		str	r3, [r2, #4]
 280:../Main.c     **** 	int i, j;
 281:../Main.c     **** 	for (i = 14; i > -1; i--)
 1163              		.loc 1 281 0
 1164 0114 4FF00E03 		mov	r3, #14
 1165 0118 7B60     		str	r3, [r7, #4]
 1166 011a 3FE0     		b	.L50
 1167              	.L55:
 282:../Main.c     **** 	{
 283:../Main.c     **** 		for (j = 7; j > -1; j--)
 1168              		.loc 1 283 0
 1169 011c 4FF00703 		mov	r3, #7
 1170 0120 3B60     		str	r3, [r7, #0]
 1171 0122 34E0     		b	.L51
 1172              	.L54:
 284:../Main.c     **** 		{
 285:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 1173              		.loc 1 285 0
 1174 0124 40F20003 		movw	r3, #:lower16:configuration
 1175 0128 C0F20003 		movt	r3, #:upper16:configuration
 1176 012c 7A68     		ldr	r2, [r7, #4]
 1177 012e 9B18     		adds	r3, r3, r2
 1178 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1179 0132 1A46     		mov	r2, r3
 1180 0134 4FF00101 		mov	r1, #1
 1181 0138 3B68     		ldr	r3, [r7, #0]
 1182 013a 01FA03F3 		lsl	r3, r1, r3
 1183 013e 1340     		ands	r3, r3, r2
 1184 0140 002B     		cmp	r3, #0
 1185 0142 0FDD     		ble	.L52
 1186              		.loc 1 285 0 is_stmt 0 discriminator 1
 1187 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1188 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1189 014c 5A68     		ldr	r2, [r3, #4]
 1190 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1191 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1192 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1193 0158 4FF00101 		mov	r1, #1
 1194 015c 01FA03F3 		lsl	r3, r1, r3
 1195 0160 5360     		str	r3, [r2, #4]
 1196 0162 0EE0     		b	.L53
 1197              	.L52:
 286:../Main.c     **** 			else IO004_ResetPin(DATA);;
 1198              		.loc 1 286 0 is_stmt 1
 1199 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1200 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1201 016c 5A68     		ldr	r2, [r3, #4]
 1202 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1203 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1204 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1205 0178 4FF48031 		mov	r1, #65536
 1206 017c 01FA03F3 		lsl	r3, r1, r3
 1207 0180 5360     		str	r3, [r2, #4]
 1208              	.L53:
 287:../Main.c     **** 			pulse_R();
 1209              		.loc 1 287 0
 1210 0182 FFF7FEFF 		bl	pulse_R
 283:../Main.c     **** 		for (j = 7; j > -1; j--)
 1211              		.loc 1 283 0
 1212 0186 3B68     		ldr	r3, [r7, #0]
 1213 0188 03F1FF33 		add	r3, r3, #-1
 1214 018c 3B60     		str	r3, [r7, #0]
 1215              	.L51:
 283:../Main.c     **** 		for (j = 7; j > -1; j--)
 1216              		.loc 1 283 0 is_stmt 0 discriminator 1
 1217 018e 3B68     		ldr	r3, [r7, #0]
 1218 0190 002B     		cmp	r3, #0
 1219 0192 C7DA     		bge	.L54
 281:../Main.c     **** 	for (i = 14; i > -1; i--)
 1220              		.loc 1 281 0 is_stmt 1
 1221 0194 7B68     		ldr	r3, [r7, #4]
 1222 0196 03F1FF33 		add	r3, r3, #-1
 1223 019a 7B60     		str	r3, [r7, #4]
 1224              	.L50:
 281:../Main.c     **** 	for (i = 14; i > -1; i--)
 1225              		.loc 1 281 0 is_stmt 0 discriminator 1
 1226 019c 7B68     		ldr	r3, [r7, #4]
 1227 019e 002B     		cmp	r3, #0
 1228 01a0 BCDA     		bge	.L55
 288:../Main.c     **** 		}
 289:../Main.c     **** 	}
 290:../Main.c     **** 	IO004_ResetPin(CS);
 1229              		.loc 1 290 0 is_stmt 1
 1230 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1231 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1232 01aa 5A68     		ldr	r2, [r3, #4]
 1233 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1234 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1235 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1236 01b6 4FF48031 		mov	r1, #65536
 1237 01ba 01FA03F3 		lsl	r3, r1, r3
 1238 01be 5360     		str	r3, [r2, #4]
 291:../Main.c     **** 	delay(50000);
 1239              		.loc 1 291 0
 1240 01c0 4CF25030 		movw	r0, #50000
 1241 01c4 FFF7FEFF 		bl	delay
 292:../Main.c     **** }
 1242              		.loc 1 292 0
 1243 01c8 07F10807 		add	r7, r7, #8
 1244 01cc BD46     		mov	sp, r7
 1245 01ce 80BD     		pop	{r7, pc}
 1246              		.cfi_endproc
 1247              	.LFE115:
 1249              		.section	.text.write_E,"ax",%progbits
 1250              		.align	2
 1251              		.global	write_E
 1252              		.thumb
 1253              		.thumb_func
 1255              	write_E:
 1256              	.LFB116:
 293:../Main.c     **** void write_E()
 294:../Main.c     **** {
 1257              		.loc 1 294 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 8
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261 0000 80B5     		push	{r7, lr}
 1262              	.LCFI11:
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 0002 82B0     		sub	sp, sp, #8
 1267              	.LCFI12:
 1268              		.cfi_def_cfa_offset 16
 1269 0004 00AF     		add	r7, sp, #0
 1270              	.LCFI13:
 1271              		.cfi_def_cfa_register 7
 295:../Main.c     **** 	int i, j;
 296:../Main.c     **** 	IO004_SetPin(CE);
 1272              		.loc 1 296 0
 1273 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1274 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1275 000e 5A68     		ldr	r2, [r3, #4]
 1276 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1277 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1278 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1279 001a 4FF00101 		mov	r1, #1
 1280 001e 01FA03F3 		lsl	r3, r1, r3
 1281 0022 5360     		str	r3, [r2, #4]
 297:../Main.c     **** 	delay(1000);
 1282              		.loc 1 297 0
 1283 0024 4FF47A70 		mov	r0, #1000
 1284 0028 FFF7FEFF 		bl	delay
 298:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1285              		.loc 1 298 0
 1286 002c 4FF00703 		mov	r3, #7
 1287 0030 7B60     		str	r3, [r7, #4]
 1288 0032 3FE0     		b	.L57
 1289              	.L62:
 299:../Main.c     **** 	{
 300:../Main.c     **** 		for (j = 7; j > -1; j --)
 1290              		.loc 1 300 0
 1291 0034 4FF00703 		mov	r3, #7
 1292 0038 3B60     		str	r3, [r7, #0]
 1293 003a 34E0     		b	.L58
 1294              	.L61:
 301:../Main.c     **** 		{
 302:../Main.c     **** 			if ((configuration[i]&(1<<j))>0) IO004_SetPin(DATA);
 1295              		.loc 1 302 0
 1296 003c 40F20003 		movw	r3, #:lower16:configuration
 1297 0040 C0F20003 		movt	r3, #:upper16:configuration
 1298 0044 7A68     		ldr	r2, [r7, #4]
 1299 0046 9B18     		adds	r3, r3, r2
 1300 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1301 004a 1A46     		mov	r2, r3
 1302 004c 4FF00101 		mov	r1, #1
 1303 0050 3B68     		ldr	r3, [r7, #0]
 1304 0052 01FA03F3 		lsl	r3, r1, r3
 1305 0056 1340     		ands	r3, r3, r2
 1306 0058 002B     		cmp	r3, #0
 1307 005a 0FDD     		ble	.L59
 1308              		.loc 1 302 0 is_stmt 0 discriminator 1
 1309 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1310 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1311 0064 5A68     		ldr	r2, [r3, #4]
 1312 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1313 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1314 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1315 0070 4FF00101 		mov	r1, #1
 1316 0074 01FA03F3 		lsl	r3, r1, r3
 1317 0078 5360     		str	r3, [r2, #4]
 1318 007a 0EE0     		b	.L60
 1319              	.L59:
 303:../Main.c     **** 			else IO004_ResetPin(DATA);
 1320              		.loc 1 303 0 is_stmt 1
 1321 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1322 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1323 0084 5A68     		ldr	r2, [r3, #4]
 1324 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1325 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1326 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1327 0090 4FF48031 		mov	r1, #65536
 1328 0094 01FA03F3 		lsl	r3, r1, r3
 1329 0098 5360     		str	r3, [r2, #4]
 1330              	.L60:
 304:../Main.c     **** 			pulse_R();
 1331              		.loc 1 304 0
 1332 009a FFF7FEFF 		bl	pulse_R
 300:../Main.c     **** 		for (j = 7; j > -1; j --)
 1333              		.loc 1 300 0
 1334 009e 3B68     		ldr	r3, [r7, #0]
 1335 00a0 03F1FF33 		add	r3, r3, #-1
 1336 00a4 3B60     		str	r3, [r7, #0]
 1337              	.L58:
 300:../Main.c     **** 		for (j = 7; j > -1; j --)
 1338              		.loc 1 300 0 is_stmt 0 discriminator 1
 1339 00a6 3B68     		ldr	r3, [r7, #0]
 1340 00a8 002B     		cmp	r3, #0
 1341 00aa C7DA     		bge	.L61
 298:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1342              		.loc 1 298 0 is_stmt 1
 1343 00ac 7B68     		ldr	r3, [r7, #4]
 1344 00ae 03F1FF33 		add	r3, r3, #-1
 1345 00b2 7B60     		str	r3, [r7, #4]
 1346              	.L57:
 298:../Main.c     **** 	for (i = 7; i > 2 ; i --)
 1347              		.loc 1 298 0 is_stmt 0 discriminator 1
 1348 00b4 7B68     		ldr	r3, [r7, #4]
 1349 00b6 022B     		cmp	r3, #2
 1350 00b8 BCDC     		bgt	.L62
 305:../Main.c     **** 		}
 306:../Main.c     **** 	}
 307:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1351              		.loc 1 307 0 is_stmt 1
 1352 00ba 4FF00003 		mov	r3, #0
 1353 00be 7B60     		str	r3, [r7, #4]
 1354 00c0 3FE0     		b	.L63
 1355              	.L68:
 308:../Main.c     **** 	{
 309:../Main.c     **** 		for (j = 7; j > -1; j --)
 1356              		.loc 1 309 0
 1357 00c2 4FF00703 		mov	r3, #7
 1358 00c6 3B60     		str	r3, [r7, #0]
 1359 00c8 34E0     		b	.L64
 1360              	.L67:
 310:../Main.c     **** 		{
 311:../Main.c     **** 			if ((data_E[i] & (1<<j))>0) IO004_SetPin(DATA);
 1361              		.loc 1 311 0
 1362 00ca 40F20003 		movw	r3, #:lower16:data_E
 1363 00ce C0F20003 		movt	r3, #:upper16:data_E
 1364 00d2 7A68     		ldr	r2, [r7, #4]
 1365 00d4 9B18     		adds	r3, r3, r2
 1366 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1367 00d8 1A46     		mov	r2, r3
 1368 00da 4FF00101 		mov	r1, #1
 1369 00de 3B68     		ldr	r3, [r7, #0]
 1370 00e0 01FA03F3 		lsl	r3, r1, r3
 1371 00e4 1340     		ands	r3, r3, r2
 1372 00e6 002B     		cmp	r3, #0
 1373 00e8 0FDD     		ble	.L65
 1374              		.loc 1 311 0 is_stmt 0 discriminator 1
 1375 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1376 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1377 00f2 5A68     		ldr	r2, [r3, #4]
 1378 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1379 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1380 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1381 00fe 4FF00101 		mov	r1, #1
 1382 0102 01FA03F3 		lsl	r3, r1, r3
 1383 0106 5360     		str	r3, [r2, #4]
 1384 0108 0EE0     		b	.L66
 1385              	.L65:
 312:../Main.c     **** 			else IO004_ResetPin(DATA);
 1386              		.loc 1 312 0 is_stmt 1
 1387 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1388 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1389 0112 5A68     		ldr	r2, [r3, #4]
 1390 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1391 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1392 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1393 011e 4FF48031 		mov	r1, #65536
 1394 0122 01FA03F3 		lsl	r3, r1, r3
 1395 0126 5360     		str	r3, [r2, #4]
 1396              	.L66:
 313:../Main.c     **** 			pulse_R();
 1397              		.loc 1 313 0
 1398 0128 FFF7FEFF 		bl	pulse_R
 309:../Main.c     **** 		for (j = 7; j > -1; j --)
 1399              		.loc 1 309 0
 1400 012c 3B68     		ldr	r3, [r7, #0]
 1401 012e 03F1FF33 		add	r3, r3, #-1
 1402 0132 3B60     		str	r3, [r7, #0]
 1403              	.L64:
 309:../Main.c     **** 		for (j = 7; j > -1; j --)
 1404              		.loc 1 309 0 is_stmt 0 discriminator 1
 1405 0134 3B68     		ldr	r3, [r7, #0]
 1406 0136 002B     		cmp	r3, #0
 1407 0138 C7DA     		bge	.L67
 307:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1408              		.loc 1 307 0 is_stmt 1
 1409 013a 7B68     		ldr	r3, [r7, #4]
 1410 013c 03F10103 		add	r3, r3, #1
 1411 0140 7B60     		str	r3, [r7, #4]
 1412              	.L63:
 307:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++)
 1413              		.loc 1 307 0 is_stmt 0 discriminator 1
 1414 0142 7B68     		ldr	r3, [r7, #4]
 1415 0144 032B     		cmp	r3, #3
 1416 0146 BCDD     		ble	.L68
 314:../Main.c     **** 		}
 315:../Main.c     **** 	}//termina de enviar dados
 316:../Main.c     **** 	IO004_ResetPin(CE);
 1417              		.loc 1 316 0 is_stmt 1
 1418 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1419 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1420 0150 5A68     		ldr	r2, [r3, #4]
 1421 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1422 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1423 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1424 015c 4FF48031 		mov	r1, #65536
 1425 0160 01FA03F3 		lsl	r3, r1, r3
 1426 0164 5360     		str	r3, [r2, #4]
 317:../Main.c     **** 	delay(5000);
 1427              		.loc 1 317 0
 1428 0166 41F28830 		movw	r0, #5000
 1429 016a FFF7FEFF 		bl	delay
 318:../Main.c     **** }
 1430              		.loc 1 318 0
 1431 016e 07F10807 		add	r7, r7, #8
 1432 0172 BD46     		mov	sp, r7
 1433 0174 80BD     		pop	{r7, pc}
 1434              		.cfi_endproc
 1435              	.LFE116:
 1437 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1438              		.align	2
 1439              		.global	psxConfiguraControle
 1440              		.thumb
 1441              		.thumb_func
 1443              	psxConfiguraControle:
 1444              	.LFB117:
 319:../Main.c     **** /***************************************************/
 320:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 321:../Main.c     **** /***************************************************/
 322:../Main.c     **** void psxConfiguraControle()
 323:../Main.c     **** {
 1445              		.loc 1 323 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449 0000 80B5     		push	{r7, lr}
 1450              	.LCFI14:
 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 7, -8
 1453              		.cfi_offset 14, -4
 1454 0002 00AF     		add	r7, sp, #0
 1455              	.LCFI15:
 1456              		.cfi_def_cfa_register 7
 324:../Main.c     **** 	psxEnterConfigMode();
 1457              		.loc 1 324 0
 1458 0004 FFF7FEFF 		bl	psxEnterConfigMode
 325:../Main.c     **** 	psxSetAnalogMode();
 1459              		.loc 1 325 0
 1460 0008 FFF7FEFF 		bl	psxSetAnalogMode
 326:../Main.c     **** 	psxExitConfigMode();
 1461              		.loc 1 326 0
 1462 000c FFF7FEFF 		bl	psxExitConfigMode
 327:../Main.c     **** }
 1463              		.loc 1 327 0
 1464 0010 80BD     		pop	{r7, pc}
 1465              		.cfi_endproc
 1466              	.LFE117:
 1468 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1469              		.align	2
 1470              		.global	psxEnterConfigMode
 1471              		.thumb
 1472              		.thumb_func
 1474              	psxEnterConfigMode:
 1475              	.LFB118:
 328:../Main.c     **** 
 329:../Main.c     **** void psxEnterConfigMode()
 330:../Main.c     **** {
 1476              		.loc 1 330 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 8
 1479              		@ frame_needed = 1, uses_anonymous_args = 0
 1480 0000 80B5     		push	{r7, lr}
 1481              	.LCFI16:
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 82B0     		sub	sp, sp, #8
 1486              	.LCFI17:
 1487              		.cfi_def_cfa_offset 16
 1488 0004 00AF     		add	r7, sp, #0
 1489              	.LCFI18:
 1490              		.cfi_def_cfa_register 7
 331:../Main.c     **** 	int psxByte = 0;
 1491              		.loc 1 331 0
 1492 0006 4FF00003 		mov	r3, #0
 1493 000a 7B60     		str	r3, [r7, #4]
 332:../Main.c     **** 	IO004_SetPin(CMD);
 1494              		.loc 1 332 0
 1495 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1496 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1497 0014 5A68     		ldr	r2, [r3, #4]
 1498 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1499 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1500 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1501 0020 4FF00101 		mov	r1, #1
 1502 0024 01FA03F3 		lsl	r3, r1, r3
 1503 0028 5360     		str	r3, [r2, #4]
 333:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1504              		.loc 1 333 0
 1505 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1506 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1507 0032 5A68     		ldr	r2, [r3, #4]
 1508 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1509 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1510 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1511 003e 4FF00101 		mov	r1, #1
 1512 0042 01FA03F3 		lsl	r3, r1, r3
 1513 0046 5360     		str	r3, [r2, #4]
 334:../Main.c     **** 	IO004_ResetPin(ATT);
 1514              		.loc 1 334 0
 1515 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1516 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1517 0050 5A68     		ldr	r2, [r3, #4]
 1518 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1519 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1520 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1521 005c 4FF48031 		mov	r1, #65536
 1522 0060 01FA03F3 		lsl	r3, r1, r3
 1523 0064 5360     		str	r3, [r2, #4]
 335:../Main.c     **** 	delay(tempoInicio);
 1524              		.loc 1 335 0
 1525 0066 4FF49670 		mov	r0, #300
 1526 006a FFF7FEFF 		bl	delay
 336:../Main.c     **** 
 337:../Main.c     **** 	psxByte = 1;
 1527              		.loc 1 337 0
 1528 006e 4FF00103 		mov	r3, #1
 1529 0072 7B60     		str	r3, [r7, #4]
 338:../Main.c     **** 	psxTrocaByte(psxByte);
 1530              		.loc 1 338 0
 1531 0074 7868     		ldr	r0, [r7, #4]
 1532 0076 FFF7FEFF 		bl	psxTrocaByte
 339:../Main.c     **** 
 340:../Main.c     **** 	psxByte = 0x43;
 1533              		.loc 1 340 0
 1534 007a 4FF04303 		mov	r3, #67
 1535 007e 7B60     		str	r3, [r7, #4]
 341:../Main.c     **** 	psxTrocaByte(psxByte);
 1536              		.loc 1 341 0
 1537 0080 7868     		ldr	r0, [r7, #4]
 1538 0082 FFF7FEFF 		bl	psxTrocaByte
 342:../Main.c     **** 
 343:../Main.c     **** 	psxByte = 0;
 1539              		.loc 1 343 0
 1540 0086 4FF00003 		mov	r3, #0
 1541 008a 7B60     		str	r3, [r7, #4]
 344:../Main.c     **** 	psxTrocaByte(psxByte);
 1542              		.loc 1 344 0
 1543 008c 7868     		ldr	r0, [r7, #4]
 1544 008e FFF7FEFF 		bl	psxTrocaByte
 345:../Main.c     **** 
 346:../Main.c     **** 	psxByte = 0x1;
 1545              		.loc 1 346 0
 1546 0092 4FF00103 		mov	r3, #1
 1547 0096 7B60     		str	r3, [r7, #4]
 347:../Main.c     **** 	psxTrocaByte(psxByte);
 1548              		.loc 1 347 0
 1549 0098 7868     		ldr	r0, [r7, #4]
 1550 009a FFF7FEFF 		bl	psxTrocaByte
 348:../Main.c     **** 
 349:../Main.c     **** 	psxByte = 0;
 1551              		.loc 1 349 0
 1552 009e 4FF00003 		mov	r3, #0
 1553 00a2 7B60     		str	r3, [r7, #4]
 350:../Main.c     **** 	psxTrocaByte(psxByte);
 1554              		.loc 1 350 0
 1555 00a4 7868     		ldr	r0, [r7, #4]
 1556 00a6 FFF7FEFF 		bl	psxTrocaByte
 351:../Main.c     **** 
 352:../Main.c     **** 	IO004_SetPin(ATT);
 1557              		.loc 1 352 0
 1558 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1559 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1560 00b2 5A68     		ldr	r2, [r3, #4]
 1561 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1562 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1563 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1564 00be 4FF00101 		mov	r1, #1
 1565 00c2 01FA03F3 		lsl	r3, r1, r3
 1566 00c6 5360     		str	r3, [r2, #4]
 353:../Main.c     **** }
 1567              		.loc 1 353 0
 1568 00c8 07F10807 		add	r7, r7, #8
 1569 00cc BD46     		mov	sp, r7
 1570 00ce 80BD     		pop	{r7, pc}
 1571              		.cfi_endproc
 1572              	.LFE118:
 1574              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1575              		.align	2
 1576              		.global	psxSetAnalogMode
 1577              		.thumb
 1578              		.thumb_func
 1580              	psxSetAnalogMode:
 1581              	.LFB119:
 354:../Main.c     **** 
 355:../Main.c     **** void psxSetAnalogMode()
 356:../Main.c     **** {
 1582              		.loc 1 356 0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 8
 1585              		@ frame_needed = 1, uses_anonymous_args = 0
 1586 0000 80B5     		push	{r7, lr}
 1587              	.LCFI19:
 1588              		.cfi_def_cfa_offset 8
 1589              		.cfi_offset 7, -8
 1590              		.cfi_offset 14, -4
 1591 0002 82B0     		sub	sp, sp, #8
 1592              	.LCFI20:
 1593              		.cfi_def_cfa_offset 16
 1594 0004 00AF     		add	r7, sp, #0
 1595              	.LCFI21:
 1596              		.cfi_def_cfa_register 7
 357:../Main.c     **** 	int psxByte = 0;
 1597              		.loc 1 357 0
 1598 0006 4FF00003 		mov	r3, #0
 1599 000a 7B60     		str	r3, [r7, #4]
 358:../Main.c     **** 	IO004_SetPin(CMD);
 1600              		.loc 1 358 0
 1601 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1602 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1603 0014 5A68     		ldr	r2, [r3, #4]
 1604 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1605 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1606 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1607 0020 4FF00101 		mov	r1, #1
 1608 0024 01FA03F3 		lsl	r3, r1, r3
 1609 0028 5360     		str	r3, [r2, #4]
 359:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1610              		.loc 1 359 0
 1611 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1612 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1613 0032 5A68     		ldr	r2, [r3, #4]
 1614 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1615 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1616 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1617 003e 4FF00101 		mov	r1, #1
 1618 0042 01FA03F3 		lsl	r3, r1, r3
 1619 0046 5360     		str	r3, [r2, #4]
 360:../Main.c     **** 	IO004_ResetPin(ATT);
 1620              		.loc 1 360 0
 1621 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1622 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1623 0050 5A68     		ldr	r2, [r3, #4]
 1624 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1625 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1626 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1627 005c 4FF48031 		mov	r1, #65536
 1628 0060 01FA03F3 		lsl	r3, r1, r3
 1629 0064 5360     		str	r3, [r2, #4]
 361:../Main.c     **** 	delay(tempoInicio);
 1630              		.loc 1 361 0
 1631 0066 4FF49670 		mov	r0, #300
 1632 006a FFF7FEFF 		bl	delay
 362:../Main.c     **** 
 363:../Main.c     **** 	psxByte = 1;
 1633              		.loc 1 363 0
 1634 006e 4FF00103 		mov	r3, #1
 1635 0072 7B60     		str	r3, [r7, #4]
 364:../Main.c     **** 	psxTrocaByte(psxByte);
 1636              		.loc 1 364 0
 1637 0074 7868     		ldr	r0, [r7, #4]
 1638 0076 FFF7FEFF 		bl	psxTrocaByte
 365:../Main.c     **** 
 366:../Main.c     **** 	psxByte = 0x44;
 1639              		.loc 1 366 0
 1640 007a 4FF04403 		mov	r3, #68
 1641 007e 7B60     		str	r3, [r7, #4]
 367:../Main.c     **** 	psxTrocaByte(psxByte);
 1642              		.loc 1 367 0
 1643 0080 7868     		ldr	r0, [r7, #4]
 1644 0082 FFF7FEFF 		bl	psxTrocaByte
 368:../Main.c     **** 
 369:../Main.c     **** 	psxByte = 0;
 1645              		.loc 1 369 0
 1646 0086 4FF00003 		mov	r3, #0
 1647 008a 7B60     		str	r3, [r7, #4]
 370:../Main.c     **** 	psxTrocaByte(psxByte);
 1648              		.loc 1 370 0
 1649 008c 7868     		ldr	r0, [r7, #4]
 1650 008e FFF7FEFF 		bl	psxTrocaByte
 371:../Main.c     **** 
 372:../Main.c     **** 	psxByte = 0x1;
 1651              		.loc 1 372 0
 1652 0092 4FF00103 		mov	r3, #1
 1653 0096 7B60     		str	r3, [r7, #4]
 373:../Main.c     **** 	psxTrocaByte(psxByte);
 1654              		.loc 1 373 0
 1655 0098 7868     		ldr	r0, [r7, #4]
 1656 009a FFF7FEFF 		bl	psxTrocaByte
 374:../Main.c     **** 
 375:../Main.c     **** 	psxByte = 0x3;
 1657              		.loc 1 375 0
 1658 009e 4FF00303 		mov	r3, #3
 1659 00a2 7B60     		str	r3, [r7, #4]
 376:../Main.c     **** 	psxTrocaByte(psxByte);
 1660              		.loc 1 376 0
 1661 00a4 7868     		ldr	r0, [r7, #4]
 1662 00a6 FFF7FEFF 		bl	psxTrocaByte
 377:../Main.c     **** 
 378:../Main.c     **** 	psxByte = 0;
 1663              		.loc 1 378 0
 1664 00aa 4FF00003 		mov	r3, #0
 1665 00ae 7B60     		str	r3, [r7, #4]
 379:../Main.c     **** 	psxTrocaByte(psxByte);
 1666              		.loc 1 379 0
 1667 00b0 7868     		ldr	r0, [r7, #4]
 1668 00b2 FFF7FEFF 		bl	psxTrocaByte
 380:../Main.c     **** 
 381:../Main.c     **** 	psxByte = 0;
 1669              		.loc 1 381 0
 1670 00b6 4FF00003 		mov	r3, #0
 1671 00ba 7B60     		str	r3, [r7, #4]
 382:../Main.c     **** 	psxTrocaByte(psxByte);
 1672              		.loc 1 382 0
 1673 00bc 7868     		ldr	r0, [r7, #4]
 1674 00be FFF7FEFF 		bl	psxTrocaByte
 383:../Main.c     **** 
 384:../Main.c     **** 	psxByte = 0;
 1675              		.loc 1 384 0
 1676 00c2 4FF00003 		mov	r3, #0
 1677 00c6 7B60     		str	r3, [r7, #4]
 385:../Main.c     **** 	psxTrocaByte(psxByte);
 1678              		.loc 1 385 0
 1679 00c8 7868     		ldr	r0, [r7, #4]
 1680 00ca FFF7FEFF 		bl	psxTrocaByte
 386:../Main.c     **** 
 387:../Main.c     **** 	psxByte = 0;
 1681              		.loc 1 387 0
 1682 00ce 4FF00003 		mov	r3, #0
 1683 00d2 7B60     		str	r3, [r7, #4]
 388:../Main.c     **** 	psxTrocaByte(psxByte);
 1684              		.loc 1 388 0
 1685 00d4 7868     		ldr	r0, [r7, #4]
 1686 00d6 FFF7FEFF 		bl	psxTrocaByte
 389:../Main.c     **** 
 390:../Main.c     **** 	IO004_SetPin(ATT);
 1687              		.loc 1 390 0
 1688 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1689 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1690 00e2 5A68     		ldr	r2, [r3, #4]
 1691 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1692 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1693 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1694 00ee 4FF00101 		mov	r1, #1
 1695 00f2 01FA03F3 		lsl	r3, r1, r3
 1696 00f6 5360     		str	r3, [r2, #4]
 391:../Main.c     **** }
 1697              		.loc 1 391 0
 1698 00f8 07F10807 		add	r7, r7, #8
 1699 00fc BD46     		mov	sp, r7
 1700 00fe 80BD     		pop	{r7, pc}
 1701              		.cfi_endproc
 1702              	.LFE119:
 1704              		.section	.text.psxExitConfigMode,"ax",%progbits
 1705              		.align	2
 1706              		.global	psxExitConfigMode
 1707              		.thumb
 1708              		.thumb_func
 1710              	psxExitConfigMode:
 1711              	.LFB120:
 392:../Main.c     **** 
 393:../Main.c     **** void psxExitConfigMode()
 394:../Main.c     **** {
 1712              		.loc 1 394 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 8
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
 1716 0000 80B5     		push	{r7, lr}
 1717              	.LCFI22:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 7, -8
 1720              		.cfi_offset 14, -4
 1721 0002 82B0     		sub	sp, sp, #8
 1722              	.LCFI23:
 1723              		.cfi_def_cfa_offset 16
 1724 0004 00AF     		add	r7, sp, #0
 1725              	.LCFI24:
 1726              		.cfi_def_cfa_register 7
 395:../Main.c     **** 	int psxByte = 0;
 1727              		.loc 1 395 0
 1728 0006 4FF00003 		mov	r3, #0
 1729 000a 7B60     		str	r3, [r7, #4]
 396:../Main.c     **** 	IO004_SetPin(CMD);
 1730              		.loc 1 396 0
 1731 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1732 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1733 0014 5A68     		ldr	r2, [r3, #4]
 1734 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1735 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1736 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1737 0020 4FF00101 		mov	r1, #1
 1738 0024 01FA03F3 		lsl	r3, r1, r3
 1739 0028 5360     		str	r3, [r2, #4]
 397:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1740              		.loc 1 397 0
 1741 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1742 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1743 0032 5A68     		ldr	r2, [r3, #4]
 1744 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1745 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1746 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1747 003e 4FF00101 		mov	r1, #1
 1748 0042 01FA03F3 		lsl	r3, r1, r3
 1749 0046 5360     		str	r3, [r2, #4]
 398:../Main.c     **** 	IO004_ResetPin(ATT);
 1750              		.loc 1 398 0
 1751 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1752 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1753 0050 5A68     		ldr	r2, [r3, #4]
 1754 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1755 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1756 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1757 005c 4FF48031 		mov	r1, #65536
 1758 0060 01FA03F3 		lsl	r3, r1, r3
 1759 0064 5360     		str	r3, [r2, #4]
 399:../Main.c     **** 	delay(tempoInicio);
 1760              		.loc 1 399 0
 1761 0066 4FF49670 		mov	r0, #300
 1762 006a FFF7FEFF 		bl	delay
 400:../Main.c     **** 
 401:../Main.c     **** 	psxByte = 1;
 1763              		.loc 1 401 0
 1764 006e 4FF00103 		mov	r3, #1
 1765 0072 7B60     		str	r3, [r7, #4]
 402:../Main.c     **** 	psxTrocaByte(psxByte);
 1766              		.loc 1 402 0
 1767 0074 7868     		ldr	r0, [r7, #4]
 1768 0076 FFF7FEFF 		bl	psxTrocaByte
 403:../Main.c     **** 
 404:../Main.c     **** 	psxByte = 0x43;
 1769              		.loc 1 404 0
 1770 007a 4FF04303 		mov	r3, #67
 1771 007e 7B60     		str	r3, [r7, #4]
 405:../Main.c     **** 	psxTrocaByte(psxByte);
 1772              		.loc 1 405 0
 1773 0080 7868     		ldr	r0, [r7, #4]
 1774 0082 FFF7FEFF 		bl	psxTrocaByte
 406:../Main.c     **** 
 407:../Main.c     **** 	psxByte = 0;
 1775              		.loc 1 407 0
 1776 0086 4FF00003 		mov	r3, #0
 1777 008a 7B60     		str	r3, [r7, #4]
 408:../Main.c     **** 	psxTrocaByte(psxByte);
 1778              		.loc 1 408 0
 1779 008c 7868     		ldr	r0, [r7, #4]
 1780 008e FFF7FEFF 		bl	psxTrocaByte
 409:../Main.c     **** 
 410:../Main.c     **** 	psxByte = 0;
 1781              		.loc 1 410 0
 1782 0092 4FF00003 		mov	r3, #0
 1783 0096 7B60     		str	r3, [r7, #4]
 411:../Main.c     **** 	psxTrocaByte(psxByte);
 1784              		.loc 1 411 0
 1785 0098 7868     		ldr	r0, [r7, #4]
 1786 009a FFF7FEFF 		bl	psxTrocaByte
 412:../Main.c     **** 
 413:../Main.c     **** 	psxByte = 0x5A;
 1787              		.loc 1 413 0
 1788 009e 4FF05A03 		mov	r3, #90
 1789 00a2 7B60     		str	r3, [r7, #4]
 414:../Main.c     **** 	psxTrocaByte(psxByte);
 1790              		.loc 1 414 0
 1791 00a4 7868     		ldr	r0, [r7, #4]
 1792 00a6 FFF7FEFF 		bl	psxTrocaByte
 415:../Main.c     **** 
 416:../Main.c     **** 	psxByte = 0x5A;
 1793              		.loc 1 416 0
 1794 00aa 4FF05A03 		mov	r3, #90
 1795 00ae 7B60     		str	r3, [r7, #4]
 417:../Main.c     **** 	psxTrocaByte(psxByte);
 1796              		.loc 1 417 0
 1797 00b0 7868     		ldr	r0, [r7, #4]
 1798 00b2 FFF7FEFF 		bl	psxTrocaByte
 418:../Main.c     **** 
 419:../Main.c     **** 	psxByte = 0x5A;
 1799              		.loc 1 419 0
 1800 00b6 4FF05A03 		mov	r3, #90
 1801 00ba 7B60     		str	r3, [r7, #4]
 420:../Main.c     **** 	psxTrocaByte(psxByte);
 1802              		.loc 1 420 0
 1803 00bc 7868     		ldr	r0, [r7, #4]
 1804 00be FFF7FEFF 		bl	psxTrocaByte
 421:../Main.c     **** 
 422:../Main.c     **** 	psxByte = 0x5A;
 1805              		.loc 1 422 0
 1806 00c2 4FF05A03 		mov	r3, #90
 1807 00c6 7B60     		str	r3, [r7, #4]
 423:../Main.c     **** 	psxTrocaByte(psxByte);
 1808              		.loc 1 423 0
 1809 00c8 7868     		ldr	r0, [r7, #4]
 1810 00ca FFF7FEFF 		bl	psxTrocaByte
 424:../Main.c     **** 
 425:../Main.c     **** 	psxByte = 0x5A;
 1811              		.loc 1 425 0
 1812 00ce 4FF05A03 		mov	r3, #90
 1813 00d2 7B60     		str	r3, [r7, #4]
 426:../Main.c     **** 	psxTrocaByte(psxByte);
 1814              		.loc 1 426 0
 1815 00d4 7868     		ldr	r0, [r7, #4]
 1816 00d6 FFF7FEFF 		bl	psxTrocaByte
 427:../Main.c     **** 
 428:../Main.c     **** 	IO004_SetPin(ATT);
 1817              		.loc 1 428 0
 1818 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1819 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1820 00e2 5A68     		ldr	r2, [r3, #4]
 1821 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1822 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1823 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1824 00ee 4FF00101 		mov	r1, #1
 1825 00f2 01FA03F3 		lsl	r3, r1, r3
 1826 00f6 5360     		str	r3, [r2, #4]
 429:../Main.c     **** }
 1827              		.loc 1 429 0
 1828 00f8 07F10807 		add	r7, r7, #8
 1829 00fc BD46     		mov	sp, r7
 1830 00fe 80BD     		pop	{r7, pc}
 1831              		.cfi_endproc
 1832              	.LFE120:
 1834              		.section	.text.psxLeControle,"ax",%progbits
 1835              		.align	2
 1836              		.global	psxLeControle
 1837              		.thumb
 1838              		.thumb_func
 1840              	psxLeControle:
 1841              	.LFB121:
 430:../Main.c     **** 
 431:../Main.c     **** void psxLeControle()
 432:../Main.c     **** {
 1842              		.loc 1 432 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 8
 1845              		@ frame_needed = 1, uses_anonymous_args = 0
 1846 0000 80B5     		push	{r7, lr}
 1847              	.LCFI25:
 1848              		.cfi_def_cfa_offset 8
 1849              		.cfi_offset 7, -8
 1850              		.cfi_offset 14, -4
 1851 0002 82B0     		sub	sp, sp, #8
 1852              	.LCFI26:
 1853              		.cfi_def_cfa_offset 16
 1854 0004 00AF     		add	r7, sp, #0
 1855              	.LCFI27:
 1856              		.cfi_def_cfa_register 7
 433:../Main.c     **** 	int psxByte = 0;
 1857              		.loc 1 433 0
 1858 0006 4FF00003 		mov	r3, #0
 1859 000a 3B60     		str	r3, [r7, #0]
 434:../Main.c     **** 	int psxCont;
 435:../Main.c     **** 
 436:../Main.c     **** 	IO004_SetPin(CMD);
 1860              		.loc 1 436 0
 1861 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1862 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1863 0014 5A68     		ldr	r2, [r3, #4]
 1864 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1865 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1866 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1867 0020 4FF00101 		mov	r1, #1
 1868 0024 01FA03F3 		lsl	r3, r1, r3
 1869 0028 5360     		str	r3, [r2, #4]
 437:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1870              		.loc 1 437 0
 1871 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1872 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1873 0032 5A68     		ldr	r2, [r3, #4]
 1874 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1875 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1876 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1877 003e 4FF00101 		mov	r1, #1
 1878 0042 01FA03F3 		lsl	r3, r1, r3
 1879 0046 5360     		str	r3, [r2, #4]
 438:../Main.c     **** 	IO004_ResetPin(ATT);
 1880              		.loc 1 438 0
 1881 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1882 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1883 0050 5A68     		ldr	r2, [r3, #4]
 1884 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1885 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1886 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1887 005c 4FF48031 		mov	r1, #65536
 1888 0060 01FA03F3 		lsl	r3, r1, r3
 1889 0064 5360     		str	r3, [r2, #4]
 439:../Main.c     **** 	delay(tempoInicio);
 1890              		.loc 1 439 0
 1891 0066 4FF49670 		mov	r0, #300
 1892 006a FFF7FEFF 		bl	delay
 440:../Main.c     **** 
 441:../Main.c     **** 	psxByte = 1;
 1893              		.loc 1 441 0
 1894 006e 4FF00103 		mov	r3, #1
 1895 0072 3B60     		str	r3, [r7, #0]
 442:../Main.c     **** 	psxTrocaByte(psxByte);
 1896              		.loc 1 442 0
 1897 0074 3868     		ldr	r0, [r7, #0]
 1898 0076 FFF7FEFF 		bl	psxTrocaByte
 443:../Main.c     **** 
 444:../Main.c     **** 	psxByte = 0x42;
 1899              		.loc 1 444 0
 1900 007a 4FF04203 		mov	r3, #66
 1901 007e 3B60     		str	r3, [r7, #0]
 445:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 1902              		.loc 1 445 0
 1903 0080 3868     		ldr	r0, [r7, #0]
 1904 0082 FFF7FEFF 		bl	psxTrocaByte
 1905 0086 0346     		mov	r3, r0
 1906 0088 DAB2     		uxtb	r2, r3
 1907 008a 40F20003 		movw	r3, #:lower16:psx_status
 1908 008e C0F20003 		movt	r3, #:upper16:psx_status
 1909 0092 1A70     		strb	r2, [r3, #0]
 446:../Main.c     **** 
 447:../Main.c     **** 	psxByte = 0;
 1910              		.loc 1 447 0
 1911 0094 4FF00003 		mov	r3, #0
 1912 0098 3B60     		str	r3, [r7, #0]
 448:../Main.c     **** 	psxTrocaByte(psxByte);
 1913              		.loc 1 448 0
 1914 009a 3868     		ldr	r0, [r7, #0]
 1915 009c FFF7FEFF 		bl	psxTrocaByte
 449:../Main.c     **** 
 450:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1916              		.loc 1 450 0
 1917 00a0 4FF00003 		mov	r3, #0
 1918 00a4 7B60     		str	r3, [r7, #4]
 1919 00a6 0FE0     		b	.L74
 1920              	.L75:
 451:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 1921              		.loc 1 451 0 discriminator 2
 1922 00a8 4FF00000 		mov	r0, #0
 1923 00ac FFF7FEFF 		bl	psxTrocaByte
 1924 00b0 0146     		mov	r1, r0
 1925 00b2 40F20003 		movw	r3, #:lower16:psxDado
 1926 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 1927 00ba 7A68     		ldr	r2, [r7, #4]
 1928 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 450:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1929              		.loc 1 450 0 discriminator 2
 1930 00c0 7B68     		ldr	r3, [r7, #4]
 1931 00c2 03F10103 		add	r3, r3, #1
 1932 00c6 7B60     		str	r3, [r7, #4]
 1933              	.L74:
 450:../Main.c     **** 	for (psxCont = 0; psxCont<6; psxCont++)
 1934              		.loc 1 450 0 is_stmt 0 discriminator 1
 1935 00c8 7B68     		ldr	r3, [r7, #4]
 1936 00ca 052B     		cmp	r3, #5
 1937 00cc ECDD     		ble	.L75
 452:../Main.c     **** 
 453:../Main.c     **** 	IO004_SetPin(ATT);
 1938              		.loc 1 453 0 is_stmt 1
 1939 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1940 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1941 00d6 5A68     		ldr	r2, [r3, #4]
 1942 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1943 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1944 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1945 00e2 4FF00101 		mov	r1, #1
 1946 00e6 01FA03F3 		lsl	r3, r1, r3
 1947 00ea 5360     		str	r3, [r2, #4]
 454:../Main.c     **** }
 1948              		.loc 1 454 0
 1949 00ec 07F10807 		add	r7, r7, #8
 1950 00f0 BD46     		mov	sp, r7
 1951 00f2 80BD     		pop	{r7, pc}
 1952              		.cfi_endproc
 1953              	.LFE121:
 1955              		.section	.text.psxHandShake,"ax",%progbits
 1956              		.align	2
 1957              		.global	psxHandShake
 1958              		.thumb
 1959              		.thumb_func
 1961              	psxHandShake:
 1962              	.LFB122:
 455:../Main.c     **** 
 456:../Main.c     **** void psxHandShake()
 457:../Main.c     **** {
 1963              		.loc 1 457 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 8
 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967 0000 80B5     		push	{r7, lr}
 1968              	.LCFI28:
 1969              		.cfi_def_cfa_offset 8
 1970              		.cfi_offset 7, -8
 1971              		.cfi_offset 14, -4
 1972 0002 82B0     		sub	sp, sp, #8
 1973              	.LCFI29:
 1974              		.cfi_def_cfa_offset 16
 1975 0004 00AF     		add	r7, sp, #0
 1976              	.LCFI30:
 1977              		.cfi_def_cfa_register 7
 458:../Main.c     **** 	int psxByte = 0;
 1978              		.loc 1 458 0
 1979 0006 4FF00003 		mov	r3, #0
 1980 000a 7B60     		str	r3, [r7, #4]
 459:../Main.c     **** 
 460:../Main.c     **** 	IO004_SetPin(CMD);
 1981              		.loc 1 460 0
 1982 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1983 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1984 0014 5A68     		ldr	r2, [r3, #4]
 1985 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1986 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1987 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1988 0020 4FF00101 		mov	r1, #1
 1989 0024 01FA03F3 		lsl	r3, r1, r3
 1990 0028 5360     		str	r3, [r2, #4]
 461:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1991              		.loc 1 461 0
 1992 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1993 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1994 0032 5A68     		ldr	r2, [r3, #4]
 1995 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1996 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1997 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1998 003e 4FF00101 		mov	r1, #1
 1999 0042 01FA03F3 		lsl	r3, r1, r3
 2000 0046 5360     		str	r3, [r2, #4]
 462:../Main.c     **** 	IO004_ResetPin(ATT);
 2001              		.loc 1 462 0
 2002 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2003 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2004 0050 5A68     		ldr	r2, [r3, #4]
 2005 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2006 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2007 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2008 005c 4FF48031 		mov	r1, #65536
 2009 0060 01FA03F3 		lsl	r3, r1, r3
 2010 0064 5360     		str	r3, [r2, #4]
 463:../Main.c     **** 	delay(tempoInicio);
 2011              		.loc 1 463 0
 2012 0066 4FF49670 		mov	r0, #300
 2013 006a FFF7FEFF 		bl	delay
 464:../Main.c     **** 
 465:../Main.c     **** 	psxByte = 1;
 2014              		.loc 1 465 0
 2015 006e 4FF00103 		mov	r3, #1
 2016 0072 7B60     		str	r3, [r7, #4]
 466:../Main.c     **** 	psxTrocaByte(psxByte);
 2017              		.loc 1 466 0
 2018 0074 7868     		ldr	r0, [r7, #4]
 2019 0076 FFF7FEFF 		bl	psxTrocaByte
 467:../Main.c     **** 
 468:../Main.c     **** 	psxByte = 0x42;
 2020              		.loc 1 468 0
 2021 007a 4FF04203 		mov	r3, #66
 2022 007e 7B60     		str	r3, [r7, #4]
 469:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2023              		.loc 1 469 0
 2024 0080 7868     		ldr	r0, [r7, #4]
 2025 0082 FFF7FEFF 		bl	psxTrocaByte
 2026 0086 0346     		mov	r3, r0
 2027 0088 DAB2     		uxtb	r2, r3
 2028 008a 40F20003 		movw	r3, #:lower16:psx_status
 2029 008e C0F20003 		movt	r3, #:upper16:psx_status
 2030 0092 1A70     		strb	r2, [r3, #0]
 470:../Main.c     **** 
 471:../Main.c     **** 	psxByte = 0;
 2031              		.loc 1 471 0
 2032 0094 4FF00003 		mov	r3, #0
 2033 0098 7B60     		str	r3, [r7, #4]
 472:../Main.c     **** 	psxTrocaByte(psxByte);
 2034              		.loc 1 472 0
 2035 009a 7868     		ldr	r0, [r7, #4]
 2036 009c FFF7FEFF 		bl	psxTrocaByte
 473:../Main.c     **** 
 474:../Main.c     **** 	psxByte = 0;
 2037              		.loc 1 474 0
 2038 00a0 4FF00003 		mov	r3, #0
 2039 00a4 7B60     		str	r3, [r7, #4]
 475:../Main.c     **** 	psxTrocaByte(psxByte);
 2040              		.loc 1 475 0
 2041 00a6 7868     		ldr	r0, [r7, #4]
 2042 00a8 FFF7FEFF 		bl	psxTrocaByte
 476:../Main.c     **** 
 477:../Main.c     **** 	psxByte = 0;
 2043              		.loc 1 477 0
 2044 00ac 4FF00003 		mov	r3, #0
 2045 00b0 7B60     		str	r3, [r7, #4]
 478:../Main.c     **** 	psxTrocaByte(psxByte);
 2046              		.loc 1 478 0
 2047 00b2 7868     		ldr	r0, [r7, #4]
 2048 00b4 FFF7FEFF 		bl	psxTrocaByte
 479:../Main.c     **** 
 480:../Main.c     **** 	IO004_SetPin(ATT);
 2049              		.loc 1 480 0
 2050 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2051 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2052 00c0 5A68     		ldr	r2, [r3, #4]
 2053 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2054 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2055 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2056 00cc 4FF00101 		mov	r1, #1
 2057 00d0 01FA03F3 		lsl	r3, r1, r3
 2058 00d4 5360     		str	r3, [r2, #4]
 481:../Main.c     **** }
 2059              		.loc 1 481 0
 2060 00d6 07F10807 		add	r7, r7, #8
 2061 00da BD46     		mov	sp, r7
 2062 00dc 80BD     		pop	{r7, pc}
 2063              		.cfi_endproc
 2064              	.LFE122:
 2066 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 2067              		.align	2
 2068              		.global	psxTrocaByte
 2069              		.thumb
 2070              		.thumb_func
 2072              	psxTrocaByte:
 2073              	.LFB123:
 482:../Main.c     **** 
 483:../Main.c     **** int psxTrocaByte(int byteDado)
 484:../Main.c     **** {
 2074              		.loc 1 484 0
 2075              		.cfi_startproc
 2076              		@ args = 0, pretend = 0, frame = 16
 2077              		@ frame_needed = 1, uses_anonymous_args = 0
 2078 0000 80B5     		push	{r7, lr}
 2079              	.LCFI31:
 2080              		.cfi_def_cfa_offset 8
 2081              		.cfi_offset 7, -8
 2082              		.cfi_offset 14, -4
 2083 0002 84B0     		sub	sp, sp, #16
 2084              	.LCFI32:
 2085              		.cfi_def_cfa_offset 24
 2086 0004 00AF     		add	r7, sp, #0
 2087              	.LCFI33:
 2088              		.cfi_def_cfa_register 7
 2089 0006 7860     		str	r0, [r7, #4]
 485:../Main.c     **** 	int c;
 486:../Main.c     **** 	int aux = 0;
 2090              		.loc 1 486 0
 2091 0008 4FF00003 		mov	r3, #0
 2092 000c BB60     		str	r3, [r7, #8]
 487:../Main.c     **** 	for (c=0;c<=7;c++)
 2093              		.loc 1 487 0
 2094 000e 4FF00003 		mov	r3, #0
 2095 0012 FB60     		str	r3, [r7, #12]
 2096 0014 69E0     		b	.L78
 2097              	.L82:
 488:../Main.c     **** 	{
 489:../Main.c     **** 
 490:../Main.c     **** 		if(byteDado & (0x01<<c))
 2098              		.loc 1 490 0
 2099 0016 7A68     		ldr	r2, [r7, #4]
 2100 0018 FB68     		ldr	r3, [r7, #12]
 2101 001a 42FA03F3 		asr	r3, r2, r3
 2102 001e 03F00103 		and	r3, r3, #1
 2103 0022 002B     		cmp	r3, #0
 2104 0024 0FD0     		beq	.L79
 491:../Main.c     **** 			IO004_SetPin(CMD);
 2105              		.loc 1 491 0
 2106 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2107 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2108 002e 5A68     		ldr	r2, [r3, #4]
 2109 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2110 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2111 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2112 003a 4FF00101 		mov	r1, #1
 2113 003e 01FA03F3 		lsl	r3, r1, r3
 2114 0042 5360     		str	r3, [r2, #4]
 2115 0044 0EE0     		b	.L80
 2116              	.L79:
 492:../Main.c     **** 		else
 493:../Main.c     **** 			IO004_ResetPin(CMD);
 2117              		.loc 1 493 0
 2118 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2119 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2120 004e 5A68     		ldr	r2, [r3, #4]
 2121 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2122 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2123 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2124 005a 4FF48031 		mov	r1, #65536
 2125 005e 01FA03F3 		lsl	r3, r1, r3
 2126 0062 5360     		str	r3, [r2, #4]
 2127              	.L80:
 494:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 2128              		.loc 1 494 0
 2129 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2130 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2131 006c 5A68     		ldr	r2, [r3, #4]
 2132 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2133 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2134 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2135 0078 4FF48031 		mov	r1, #65536
 2136 007c 01FA03F3 		lsl	r3, r1, r3
 2137 0080 5360     		str	r3, [r2, #4]
 495:../Main.c     **** 		delay(tempoClk);
 2138              		.loc 1 495 0
 2139 0082 4FF49670 		mov	r0, #300
 2140 0086 FFF7FEFF 		bl	delay
 496:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 2141              		.loc 1 496 0
 2142 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2143 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2144 0092 5B68     		ldr	r3, [r3, #4]
 2145 0094 5A6A     		ldr	r2, [r3, #36]
 2146 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2147 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2148 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2149 00a0 22FA03F3 		lsr	r3, r2, r3
 2150 00a4 03F00103 		and	r3, r3, #1
 2151 00a8 002B     		cmp	r3, #0
 2152 00aa 07D1     		bne	.L81
 497:../Main.c     **** 			aux = aux | (1 << c);
 2153              		.loc 1 497 0
 2154 00ac 4FF00102 		mov	r2, #1
 2155 00b0 FB68     		ldr	r3, [r7, #12]
 2156 00b2 02FA03F3 		lsl	r3, r2, r3
 2157 00b6 BA68     		ldr	r2, [r7, #8]
 2158 00b8 1343     		orrs	r3, r3, r2
 2159 00ba BB60     		str	r3, [r7, #8]
 2160              	.L81:
 498:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 2161              		.loc 1 498 0
 2162 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2163 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2164 00c4 5A68     		ldr	r2, [r3, #4]
 2165 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2166 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2167 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2168 00d0 4FF00101 		mov	r1, #1
 2169 00d4 01FA03F3 		lsl	r3, r1, r3
 2170 00d8 5360     		str	r3, [r2, #4]
 499:../Main.c     **** 		delay(tempoClk);
 2171              		.loc 1 499 0
 2172 00da 4FF49670 		mov	r0, #300
 2173 00de FFF7FEFF 		bl	delay
 487:../Main.c     **** 	for (c=0;c<=7;c++)
 2174              		.loc 1 487 0
 2175 00e2 FB68     		ldr	r3, [r7, #12]
 2176 00e4 03F10103 		add	r3, r3, #1
 2177 00e8 FB60     		str	r3, [r7, #12]
 2178              	.L78:
 487:../Main.c     **** 	for (c=0;c<=7;c++)
 2179              		.loc 1 487 0 is_stmt 0 discriminator 1
 2180 00ea FB68     		ldr	r3, [r7, #12]
 2181 00ec 072B     		cmp	r3, #7
 2182 00ee 92DD     		ble	.L82
 500:../Main.c     **** 	}
 501:../Main.c     **** 	IO004_SetPin(CMD);
 2183              		.loc 1 501 0 is_stmt 1
 2184 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2185 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2186 00f8 5A68     		ldr	r2, [r3, #4]
 2187 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2188 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2189 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2190 0104 4FF00101 		mov	r1, #1
 2191 0108 01FA03F3 		lsl	r3, r1, r3
 2192 010c 5360     		str	r3, [r2, #4]
 502:../Main.c     **** 	delay(tempoEntreByte);
 2193              		.loc 1 502 0
 2194 010e 4FF06400 		mov	r0, #100
 2195 0112 FFF7FEFF 		bl	delay
 503:../Main.c     **** 	return aux;
 2196              		.loc 1 503 0
 2197 0116 BB68     		ldr	r3, [r7, #8]
 504:../Main.c     **** }
 2198              		.loc 1 504 0
 2199 0118 1846     		mov	r0, r3
 2200 011a 07F11007 		add	r7, r7, #16
 2201 011e BD46     		mov	sp, r7
 2202 0120 80BD     		pop	{r7, pc}
 2203              		.cfi_endproc
 2204              	.LFE123:
 2206 0122 00BF     		.section	.text.delay,"ax",%progbits
 2207              		.align	2
 2208              		.global	delay
 2209              		.thumb
 2210              		.thumb_func
 2212              	delay:
 2213              	.LFB124:
 505:../Main.c     **** //void psxLeControle()
 506:../Main.c     **** //{
 507:../Main.c     **** //	int psxByte = 0;
 508:../Main.c     **** //	int psxCont;
 509:../Main.c     **** //
 510:../Main.c     **** //	IO004_SetPin(CMD);
 511:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 512:../Main.c     **** //	IO004_ResetPin(ATT);
 513:../Main.c     **** //	delay(tempoInicio);
 514:../Main.c     **** //
 515:../Main.c     **** //	psxByte = 1;
 516:../Main.c     **** //	psxGravaByte(psxByte);
 517:../Main.c     **** //
 518:../Main.c     **** //	psxByte = 66;
 519:../Main.c     **** //	psxGravaByte(psxByte);
 520:../Main.c     **** //
 521:../Main.c     **** //	psxByte = 0;
 522:../Main.c     **** //	psxGravaByte(psxByte);
 523:../Main.c     **** //
 524:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 525:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 526:../Main.c     **** //
 527:../Main.c     **** //	IO004_SetPin(ATT);
 528:../Main.c     **** //}
 529:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 530:../Main.c     **** //{
 531:../Main.c     **** //	int c;
 532:../Main.c     **** //	for (c=0;c<=7;c++)
 533:../Main.c     **** //	{
 534:../Main.c     **** //		if(byteDado & (0x01<<c))
 535:../Main.c     **** //			IO004_SetPin(CMD);
 536:../Main.c     **** //		else
 537:../Main.c     **** //			IO004_ResetPin(CMD);
 538:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 539:../Main.c     **** //		delay(tempoClk);
 540:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 541:../Main.c     **** //		delay(tempoClk);
 542:../Main.c     **** //	}
 543:../Main.c     **** //	IO004_SetPin(CMD);
 544:../Main.c     **** //	delay(tempoEntreByte);
 545:../Main.c     **** //}
 546:../Main.c     **** //int psxLeByte()
 547:../Main.c     **** //{
 548:../Main.c     **** //	int aux = 0;
 549:../Main.c     **** //	int c;
 550:../Main.c     **** //
 551:../Main.c     **** //	for (c=0;c<=7;c++)
 552:../Main.c     **** //	{
 553:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 554:../Main.c     **** //		delay(tempoClk);
 555:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 556:../Main.c     **** //	  		  aux = aux | (1 << c);
 557:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 558:../Main.c     **** //	  	delay(tempoClk);
 559:../Main.c     **** //	}
 560:../Main.c     **** //	delay(tempoEntreByte);
 561:../Main.c     **** //	return (aux);
 562:../Main.c     **** //}
 563:../Main.c     **** 
 564:../Main.c     **** /***************************************************/
 565:../Main.c     **** /*****************FUNCOES GERAIS********************/
 566:../Main.c     **** /***************************************************/
 567:../Main.c     **** 
 568:../Main.c     **** void delay(long unsigned int i)
 569:../Main.c     **** {
 2214              		.loc 1 569 0
 2215              		.cfi_startproc
 2216              		@ args = 0, pretend = 0, frame = 8
 2217              		@ frame_needed = 1, uses_anonymous_args = 0
 2218              		@ link register save eliminated.
 2219 0000 80B4     		push	{r7}
 2220              	.LCFI34:
 2221              		.cfi_def_cfa_offset 4
 2222              		.cfi_offset 7, -4
 2223 0002 83B0     		sub	sp, sp, #12
 2224              	.LCFI35:
 2225              		.cfi_def_cfa_offset 16
 2226 0004 00AF     		add	r7, sp, #0
 2227              	.LCFI36:
 2228              		.cfi_def_cfa_register 7
 2229 0006 7860     		str	r0, [r7, #4]
 570:../Main.c     **** 	while(i--)
 2230              		.loc 1 570 0
 2231 0008 00E0     		b	.L85
 2232              	.L86:
 2233              	.LBB6:
 2234              	.LBB7:
 2235              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 2236              		.loc 2 327 0
 2237              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 2238 000a 00BF     		nop
 2239              	@ 0 "" 2
 2240              		.thumb
 2241              	.L85:
 2242              	.LBE7:
 2243              	.LBE6:
 2244              		.loc 1 570 0 discriminator 1
 2245 000c 7B68     		ldr	r3, [r7, #4]
 2246 000e 002B     		cmp	r3, #0
 2247 0010 0CBF     		ite	eq
 2248 0012 0023     		moveq	r3, #0
 2249 0014 0123     		movne	r3, #1
 2250 0016 DBB2     		uxtb	r3, r3
 2251 0018 7A68     		ldr	r2, [r7, #4]
 2252 001a 02F1FF32 		add	r2, r2, #-1
 2253 001e 7A60     		str	r2, [r7, #4]
 2254 0020 002B     		cmp	r3, #0
 2255 0022 F2D1     		bne	.L86
 571:../Main.c     **** 	{
 572:../Main.c     **** 		__NOP();
 573:../Main.c     **** 	}
 574:../Main.c     **** }
 2256              		.loc 1 574 0
 2257 0024 07F10C07 		add	r7, r7, #12
 2258 0028 BD46     		mov	sp, r7
 2259 002a 80BC     		pop	{r7}
 2260 002c 7047     		bx	lr
 2261              		.cfi_endproc
 2262              	.LFE124:
 2264 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 2265              		.align	2
 2266              		.global	printByteToInt
 2267              		.thumb
 2268              		.thumb_func
 2270              	printByteToInt:
 2271              	.LFB125:
 575:../Main.c     **** void printByteToInt(char a)
 576:../Main.c     **** {
 2272              		.loc 1 576 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 16
 2275              		@ frame_needed = 1, uses_anonymous_args = 0
 2276              		@ link register save eliminated.
 2277 0000 80B4     		push	{r7}
 2278              	.LCFI37:
 2279              		.cfi_def_cfa_offset 4
 2280              		.cfi_offset 7, -4
 2281 0002 85B0     		sub	sp, sp, #20
 2282              	.LCFI38:
 2283              		.cfi_def_cfa_offset 24
 2284 0004 00AF     		add	r7, sp, #0
 2285              	.LCFI39:
 2286              		.cfi_def_cfa_register 7
 2287 0006 0346     		mov	r3, r0
 2288 0008 FB71     		strb	r3, [r7, #7]
 577:../Main.c     **** 	char c = a%10 + '0';
 2289              		.loc 1 577 0
 2290 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2291 000c 4CF6CD43 		movw	r3, #52429
 2292 0010 CCF6CC43 		movt	r3, 52428
 2293 0014 A3FB0213 		umull	r1, r3, r3, r2
 2294 0018 4FEAD301 		lsr	r1, r3, #3
 2295 001c 0B46     		mov	r3, r1
 2296 001e 4FEA8303 		lsl	r3, r3, #2
 2297 0022 5B18     		adds	r3, r3, r1
 2298 0024 4FEA4303 		lsl	r3, r3, #1
 2299 0028 D31A     		subs	r3, r2, r3
 2300 002a DBB2     		uxtb	r3, r3
 2301 002c 03F13003 		add	r3, r3, #48
 2302 0030 FB73     		strb	r3, [r7, #15]
 578:../Main.c     **** 	a /=10;
 2303              		.loc 1 578 0
 2304 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2305 0034 4CF6CD43 		movw	r3, #52429
 2306 0038 CCF6CC43 		movt	r3, 52428
 2307 003c A3FB0213 		umull	r1, r3, r3, r2
 2308 0040 4FEAD303 		lsr	r3, r3, #3
 2309 0044 FB71     		strb	r3, [r7, #7]
 579:../Main.c     **** 	char d = a%10 + '0';
 2310              		.loc 1 579 0
 2311 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2312 0048 4CF6CD43 		movw	r3, #52429
 2313 004c CCF6CC43 		movt	r3, 52428
 2314 0050 A3FB0213 		umull	r1, r3, r3, r2
 2315 0054 4FEAD301 		lsr	r1, r3, #3
 2316 0058 0B46     		mov	r3, r1
 2317 005a 4FEA8303 		lsl	r3, r3, #2
 2318 005e 5B18     		adds	r3, r3, r1
 2319 0060 4FEA4303 		lsl	r3, r3, #1
 2320 0064 D31A     		subs	r3, r2, r3
 2321 0066 DBB2     		uxtb	r3, r3
 2322 0068 03F13003 		add	r3, r3, #48
 2323 006c BB73     		strb	r3, [r7, #14]
 580:../Main.c     **** 	a /=10;
 2324              		.loc 1 580 0
 2325 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2326 0070 4CF6CD43 		movw	r3, #52429
 2327 0074 CCF6CC43 		movt	r3, 52428
 2328 0078 A3FB0213 		umull	r1, r3, r3, r2
 2329 007c 4FEAD303 		lsr	r3, r3, #3
 2330 0080 FB71     		strb	r3, [r7, #7]
 581:../Main.c     **** 	char e = a%10 + '0';
 2331              		.loc 1 581 0
 2332 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2333 0084 4CF6CD43 		movw	r3, #52429
 2334 0088 CCF6CC43 		movt	r3, 52428
 2335 008c A3FB0213 		umull	r1, r3, r3, r2
 2336 0090 4FEAD301 		lsr	r1, r3, #3
 2337 0094 0B46     		mov	r3, r1
 2338 0096 4FEA8303 		lsl	r3, r3, #2
 2339 009a 5B18     		adds	r3, r3, r1
 2340 009c 4FEA4303 		lsl	r3, r3, #1
 2341 00a0 D31A     		subs	r3, r2, r3
 2342 00a2 DBB2     		uxtb	r3, r3
 2343 00a4 03F13003 		add	r3, r3, #48
 2344 00a8 7B73     		strb	r3, [r7, #13]
 582:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2345              		.loc 1 582 0
 2346 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2347 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2348 00b2 1B68     		ldr	r3, [r3, #0]
 2349 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2350 00b6 C3F88021 		str	r2, [r3, #384]
 583:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2351              		.loc 1 583 0
 2352 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2353 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2354 00c2 1B68     		ldr	r3, [r3, #0]
 2355 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2356 00c6 C3F88021 		str	r2, [r3, #384]
 584:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2357              		.loc 1 584 0
 2358 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2359 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2360 00d2 1B68     		ldr	r3, [r3, #0]
 2361 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2362 00d6 C3F88021 		str	r2, [r3, #384]
 585:../Main.c     **** 
 586:../Main.c     **** }
 2363              		.loc 1 586 0
 2364 00da 07F11407 		add	r7, r7, #20
 2365 00de BD46     		mov	sp, r7
 2366 00e0 80BC     		pop	{r7}
 2367 00e2 7047     		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE125:
 2371              		.text
 2372              	.Letext0:
 2373              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2374              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2375              		.file 5 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2376              		.file 6 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2377              		.file 7 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2378              		.file 8 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Genera
 2379              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2380              		.file 10 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
 2381              		.file 11 "C:\\Users\\Carlos\\Documents\\GitHub\\Controle-e-Telemetria\\DAVE\\Joystick\\Dave\\Gener
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:24     .bss:00000000 l_um
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:21     .bss:00000000 $d
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:30     .bss:00000004 l_dois
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:36     .bss:00000008 l_tres
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:42     .bss:0000000c r_um
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:48     .bss:00000010 r_dois
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:54     .bss:00000014 r_tres
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:60     .bss:00000018 cross
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:66     .bss:0000001c sqr
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:72     .bss:00000020 triangle
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:78     .bss:00000024 circle
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:84     .bss:00000028 left
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:90     .bss:0000002c right
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:96     .bss:00000030 up
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:102    .bss:00000034 down
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:108    .bss:00000038 start
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:114    .bss:0000003c select
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:122    .data:00000000 data_R
                            *COM*:00000004 data_E
                            *COM*:00000001 psx_status
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:130    .bss:00000040 flipped
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:135    .bss:00000041 isPressed
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:140    .bss:00000042 lastIsPressed
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:143    .text.main:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:148    .text.main:00000000 main
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1051   .text.configure_E:00000000 configure_E
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1961   .text.psxHandShake:00000000 psxHandShake
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1443   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1840   .text.psxLeControle:00000000 psxLeControle
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1255   .text.write_E:00000000 write_E
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:893    .text.read_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:898    .text.read_R:00000000 read_R
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2212   .text.delay:00000000 delay
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1000   .text.pulse_R:00000000 pulse_R
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:995    .text.pulse_R:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1046   .text.configure_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1250   .text.write_E:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1438   .text.psxConfiguraControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1474   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1580   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1710   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1469   .text.psxEnterConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2072   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1575   .text.psxSetAnalogMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1705   .text.psxExitConfigMode:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1835   .text.psxLeControle:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:1956   .text.psxHandShake:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2067   .text.psxTrocaByte:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2207   .text.delay:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2265   .text.printByteToInt:00000000 $t
C:\Users\Carlos\AppData\Local\Temp\ccaxND5L.s:2270   .text.printByteToInt:00000000 printByteToInt
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.6730aed6a8e49268c462cbcb73e91a8e
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.91819d6149ee56f9404d69053d48d018
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9

UNDEFINED SYMBOLS
DAVE_Init
IO004_Handle7
IO004_Handle8
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
