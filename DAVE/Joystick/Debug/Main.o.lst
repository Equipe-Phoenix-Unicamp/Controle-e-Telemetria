   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.bss
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.space	4
  26              		.global	l_dois
  27              		.align	2
  30              	l_dois:
  31 0004 00000000 		.space	4
  32              		.global	l_tres
  33              		.align	2
  36              	l_tres:
  37 0008 00000000 		.space	4
  38              		.global	r_um
  39              		.align	2
  42              	r_um:
  43 000c 00000000 		.space	4
  44              		.global	r_dois
  45              		.align	2
  48              	r_dois:
  49 0010 00000000 		.space	4
  50              		.global	r_tres
  51              		.align	2
  54              	r_tres:
  55 0014 00000000 		.space	4
  56              		.global	cross
  57              		.align	2
  60              	cross:
  61 0018 00000000 		.space	4
  62              		.global	sqr
  63              		.align	2
  66              	sqr:
  67 001c 00000000 		.space	4
  68              		.global	triangle
  69              		.align	2
  72              	triangle:
  73 0020 00000000 		.space	4
  74              		.global	circle
  75              		.align	2
  78              	circle:
  79 0024 00000000 		.space	4
  80              		.global	left
  81              		.align	2
  84              	left:
  85 0028 00000000 		.space	4
  86              		.global	right
  87              		.align	2
  90              	right:
  91 002c 00000000 		.space	4
  92              		.global	up
  93              		.align	2
  96              	up:
  97 0030 00000000 		.space	4
  98              		.global	down
  99              		.align	2
 102              	down:
 103 0034 00000000 		.space	4
 104              		.global	start
 105              		.align	2
 108              	start:
 109 0038 00000000 		.space	4
 110              		.global	select
 111              		.align	2
 114              	select:
 115 003c 00000000 		.space	4
 116              		.global	l_um_state
 119              	l_um_state:
 120 0040 00       		.space	1
 121              		.global	l_dois_state
 124              	l_dois_state:
 125 0041 00       		.space	1
 126              		.global	l_tres_state
 129              	l_tres_state:
 130 0042 00       		.space	1
 131              		.global	r_um_state
 134              	r_um_state:
 135 0043 00       		.space	1
 136              		.global	r_dois_state
 139              	r_dois_state:
 140 0044 00       		.space	1
 141              		.global	r_tres_state
 144              	r_tres_state:
 145 0045 00       		.space	1
 146              		.global	cross_state
 149              	cross_state:
 150 0046 00       		.space	1
 151              		.global	sqr_state
 154              	sqr_state:
 155 0047 00       		.space	1
 156              		.global	triangle_state
 159              	triangle_state:
 160 0048 00       		.space	1
 161              		.global	circle_state
 164              	circle_state:
 165 0049 00       		.space	1
 166              		.global	left_state
 169              	left_state:
 170 004a 00       		.space	1
 171              		.global	right_state
 174              	right_state:
 175 004b 00       		.space	1
 176              		.global	up_state
 179              	up_state:
 180 004c 00       		.space	1
 181              		.global	down_state
 184              	down_state:
 185 004d 00       		.space	1
 186              		.global	start_state
 189              	start_state:
 190 004e 00       		.space	1
 191              		.global	select_state
 194              	select_state:
 195 004f 00       		.space	1
 196              		.global	l_um_state_before
 199              	l_um_state_before:
 200 0050 00       		.space	1
 201              		.global	l_dois_state_before
 204              	l_dois_state_before:
 205 0051 00       		.space	1
 206              		.global	l_tres_state_before
 209              	l_tres_state_before:
 210 0052 00       		.space	1
 211              		.global	r_um_state_before
 214              	r_um_state_before:
 215 0053 00       		.space	1
 216              		.global	r_dois_state_before
 219              	r_dois_state_before:
 220 0054 00       		.space	1
 221              		.global	r_tres_state_before
 224              	r_tres_state_before:
 225 0055 00       		.space	1
 226              		.global	cross_state_before
 229              	cross_state_before:
 230 0056 00       		.space	1
 231              		.global	sqr_state_before
 234              	sqr_state_before:
 235 0057 00       		.space	1
 236              		.global	triangle_state_before
 239              	triangle_state_before:
 240 0058 00       		.space	1
 241              		.global	circle_state_before
 244              	circle_state_before:
 245 0059 00       		.space	1
 246              		.global	left_state_before
 249              	left_state_before:
 250 005a 00       		.space	1
 251              		.global	right_state_before
 254              	right_state_before:
 255 005b 00       		.space	1
 256              		.global	up_state_before
 259              	up_state_before:
 260 005c 00       		.space	1
 261              		.global	down_state_before
 264              	down_state_before:
 265 005d 00       		.space	1
 266              		.global	start_state_before
 269              	start_state_before:
 270 005e 00       		.space	1
 271              		.global	select_state_before
 274              	select_state_before:
 275 005f 00       		.space	1
 276              		.comm	psxDado,24,4
 277              		.comm	configuration,15,4
 278              		.global	data_R
 279              		.data
 282              	data_R:
 283 0000 30       		.byte	48
 284              		.comm	data_E,5,4
 285              		.comm	psx_status,1,1
 286              		.global	flipped
 287              		.bss
 290              	flipped:
 291 0060 00       		.space	1
 292              		.comm	result,4,4
 293              		.comm	pwm_max,1,1
 294 0061 000000   		.section	.text.main,"ax",%progbits
 295              		.align	2
 296              		.global	main
 297              		.thumb
 298              		.thumb_func
 300              	main:
 301              	.LFB117:
 302              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     ****  BIT 0: BLAH2
  10:../Main.c     ****  BIT 1: BUZINA
  11:../Main.c     ****  BIT 2: ENABLE
  12:../Main.c     ****  BIT 3: ALBH2
  13:../Main.c     ****  BIT 4: BLAH1
  14:../Main.c     ****  BIT 5: ALBH1
  15:../Main.c     ****  */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 3 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 60
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_SEND 5
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0
  52:../Main.c     **** #define	BUZINA		1
  53:../Main.c     **** #define	ENABLE		2
  54:../Main.c     **** #define	ALBH2		3
  55:../Main.c     **** #define	BLAH1		4
  56:../Main.c     **** #define	ALBH1		5
  57:../Main.c     **** //Defines referentes ao transceptor
  58:../Main.c     **** #define CS	 	IO004_Handle1
  59:../Main.c     **** #define CLK1 	IO004_Handle2
  60:../Main.c     **** #define DATA 	IO004_Handle4
  61:../Main.c     **** #define DR1		IO004_Handle5
  62:../Main.c     **** #define CE 		IO004_Handle6
  63:../Main.c     **** //Defines referentes ao controle
  64:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  65:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  66:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  67:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  68:../Main.c     **** //Defines referentes aos delays do controle
  69:../Main.c     **** #define tempoInicio     300
  70:../Main.c     **** #define tempoClk        300
  71:../Main.c     **** #define tempoEntreByte  100
  72:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  73:../Main.c     **** #define LED1 IO004_Handle7
  74:../Main.c     **** #define LED2 IO004_Handle8
  75:../Main.c     **** //Defines dos botoes para realizar as callbacks
  76:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  77:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  78:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  79:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  80:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  81:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  82:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  83:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  84:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  85:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  86:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  87:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  88:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  89:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  90:../Main.c     **** #define START (psxDado[0] & (1<<3))
  91:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  92:../Main.c     **** 
  93:../Main.c     **** /***************************************************/
  94:../Main.c     **** /*********************INCLUDES**********************/
  95:../Main.c     **** /***************************************************/
  96:../Main.c     **** 
  97:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
  98:../Main.c     **** /***************************************************/
  99:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** 
 102:../Main.c     **** void psxLeControle();
 103:../Main.c     **** int psxTrocaByte(int byteDado);
 104:../Main.c     **** int psxLeByte();
 105:../Main.c     **** void delay(long unsigned int i);
 106:../Main.c     **** void pulse_R();
 107:../Main.c     **** void configure_R();
 108:../Main.c     **** void configure_E();
 109:../Main.c     **** void write_E();
 110:../Main.c     **** void read_R();
 111:../Main.c     **** void delay(long unsigned int i);
 112:../Main.c     **** void printByteToInt(char a);
 113:../Main.c     **** void psxConfiguraControle();
 114:../Main.c     **** void psxEnterConfigMode();
 115:../Main.c     **** void psxExitConfigMode();
 116:../Main.c     **** void psxSetAnalogMode();
 117:../Main.c     **** void psxHandShake();
 118:../Main.c     **** void updateButtonStates();
 119:../Main.c     **** 
 120:../Main.c     **** /***************************************************/
 121:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 122:../Main.c     **** /***************************************************/
 123:../Main.c     **** 
 124:../Main.c     **** void (*l_um)(void) = NULL;
 125:../Main.c     **** void (*l_dois)(void) = NULL;
 126:../Main.c     **** void (*l_tres)(void) = NULL;
 127:../Main.c     **** void (*r_um)(void) = NULL;
 128:../Main.c     **** void (*r_dois)(void) = NULL;
 129:../Main.c     **** void (*r_tres)(void) = NULL;
 130:../Main.c     **** void (*cross)(void) = NULL;
 131:../Main.c     **** void (*sqr)(void) = NULL;
 132:../Main.c     **** void (*triangle)(void) = NULL;
 133:../Main.c     **** void (*circle)(void) = NULL;
 134:../Main.c     **** void (*left)(void) = NULL;
 135:../Main.c     **** void (*right)(void) = NULL;
 136:../Main.c     **** void (*up)(void) = NULL;
 137:../Main.c     **** void (*down)(void) = NULL;
 138:../Main.c     **** void (*start)(void) = NULL;
 139:../Main.c     **** void (*select)(void) = NULL;
 140:../Main.c     **** 
 141:../Main.c     **** //Variaveis de controle do joystick
 142:../Main.c     **** BOOLType l_um_state = 0;
 143:../Main.c     **** BOOLType l_dois_state = 0;
 144:../Main.c     **** BOOLType l_tres_state = 0;
 145:../Main.c     **** BOOLType r_um_state = 0;
 146:../Main.c     **** BOOLType r_dois_state = 0;
 147:../Main.c     **** BOOLType r_tres_state = 0;
 148:../Main.c     **** BOOLType cross_state = 0;
 149:../Main.c     **** BOOLType sqr_state = 0;
 150:../Main.c     **** BOOLType triangle_state = 0;
 151:../Main.c     **** BOOLType circle_state = 0;
 152:../Main.c     **** BOOLType left_state = 0;
 153:../Main.c     **** BOOLType right_state = 0;
 154:../Main.c     **** BOOLType up_state = 0;
 155:../Main.c     **** BOOLType down_state = 0;
 156:../Main.c     **** BOOLType start_state = 0;
 157:../Main.c     **** BOOLType select_state = 0;
 158:../Main.c     **** 
 159:../Main.c     **** BOOLType l_um_state_before = 0;
 160:../Main.c     **** BOOLType l_dois_state_before = 0;
 161:../Main.c     **** BOOLType l_tres_state_before = 0;
 162:../Main.c     **** BOOLType r_um_state_before = 0;
 163:../Main.c     **** BOOLType r_dois_state_before = 0;
 164:../Main.c     **** BOOLType r_tres_state_before = 0;
 165:../Main.c     **** BOOLType cross_state_before = 0;
 166:../Main.c     **** BOOLType sqr_state_before = 0;
 167:../Main.c     **** BOOLType triangle_state_before = 0;
 168:../Main.c     **** BOOLType circle_state_before = 0;
 169:../Main.c     **** BOOLType left_state_before = 0;
 170:../Main.c     **** BOOLType right_state_before = 0;
 171:../Main.c     **** BOOLType up_state_before = 0;
 172:../Main.c     **** BOOLType down_state_before = 0;
 173:../Main.c     **** BOOLType start_state_before = 0;
 174:../Main.c     **** BOOLType select_state_before = 0;
 175:../Main.c     **** 
 176:../Main.c     **** /***************************************************/
 177:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 178:../Main.c     **** /***************************************************/
 179:../Main.c     **** 
 180:../Main.c     **** int psxDado[6];
 181:../Main.c     **** char configuration[15];
 182:../Main.c     **** char data_R = '0';
 183:../Main.c     **** char data_E[BYTES_TO_SEND];
 184:../Main.c     **** uint8_t psx_status;
 185:../Main.c     **** /*Booleanos de controle para estados do robo*/
 186:../Main.c     **** BOOLType flipped = 0;
 187:../Main.c     **** ADC001_ResultHandleType result;
 188:../Main.c     **** uint8_t pwm_max;
 189:../Main.c     **** 
 190:../Main.c     **** /***************************************************/
 191:../Main.c     **** /***********************MAIN************************/
 192:../Main.c     **** /***************************************************/
 193:../Main.c     **** 
 194:../Main.c     **** int main(void) {
 303              		.loc 1 194 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 16
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 0000 80B5     		push	{r7, lr}
 308              	.LCFI0:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 7, -8
 311              		.cfi_offset 14, -4
 312 0002 84B0     		sub	sp, sp, #16
 313              	.LCFI1:
 314              		.cfi_def_cfa_offset 24
 315 0004 00AF     		add	r7, sp, #0
 316              	.LCFI2:
 317              		.cfi_def_cfa_register 7
 195:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 196:../Main.c     **** 	PORT0 ->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 318              		.loc 1 196 0
 319 0006 4FF40043 		mov	r3, #32768
 320 000a C4F60203 		movt	r3, 18434
 321 000e 4FF40042 		mov	r2, #32768
 322 0012 C4F60202 		movt	r2, 18434
 323 0016 526F     		ldr	r2, [r2, #116]
 324 0018 22F44042 		bic	r2, r2, #49152
 325 001c 5A67     		str	r2, [r3, #116]
 197:../Main.c     **** 	PORT0 ->HWSEL |= 0 << 14;
 326              		.loc 1 197 0
 327 001e 4FF40043 		mov	r3, #32768
 328 0022 C4F60203 		movt	r3, 18434
 329 0026 4FF40042 		mov	r2, #32768
 330 002a C4F60202 		movt	r2, 18434
 331 002e 526F     		ldr	r2, [r2, #116]
 332 0030 5A67     		str	r2, [r3, #116]
 198:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
 333              		.loc 1 198 0
 334 0032 FFF7FEFF 		bl	DAVE_Init
 199:../Main.c     **** 	//PORT0->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 200:../Main.c     **** 	//PORT0->HWSEL |= 0 << 14;
 201:../Main.c     **** 	/*Etapa de inicializacao*/
 202:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 335              		.loc 1 202 0
 336 0036 FFF7FEFF 		bl	configure_E
 203:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 204:../Main.c     **** 	//IO004_SetPin(LED2);
 205:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 206:../Main.c     **** 
 207:../Main.c     **** 	psxHandShake();
 337              		.loc 1 207 0
 338 003a FFF7FEFF 		bl	psxHandShake
 208:../Main.c     **** 	psxConfiguraControle();
 339              		.loc 1 208 0
 340 003e FFF7FEFF 		bl	psxConfiguraControle
 209:../Main.c     **** 	ADC001_GenerateLoadEvent(&ADC001_Handle0);
 341              		.loc 1 209 0
 342 0042 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 343 0046 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 344 004a FFF7FEFF 		bl	ADC001_GenerateLoadEvent
 210:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 345              		.loc 1 210 0
 346 004e 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 347 0052 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 348 0056 40F20001 		movw	r1, #:lower16:result
 349 005a C0F20001 		movt	r1, #:upper16:result
 350 005e FFF7FEFF 		bl	ADC001_GetResult
 351              	.L38:
 352              	.LBB4:
 211:../Main.c     **** 	/*Loop do controle*/
 212:../Main.c     **** 	while (1) {
 213:../Main.c     **** 		ADC001_GetResult(&ADC001_Handle0, &result);
 353              		.loc 1 213 0
 354 0062 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 355 0066 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 356 006a 40F20001 		movw	r1, #:lower16:result
 357 006e C0F20001 		movt	r1, #:upper16:result
 358 0072 FFF7FEFF 		bl	ADC001_GetResult
 214:../Main.c     **** 		pwm_max = PWM_LIM;
 359              		.loc 1 214 0
 360 0076 40F20003 		movw	r3, #:lower16:pwm_max
 361 007a C0F20003 		movt	r3, #:upper16:pwm_max
 362 007e 4FF03C02 		mov	r2, #60
 363 0082 1A70     		strb	r2, [r3, #0]
 215:../Main.c     **** 		/*Inicializa o que sera mandado*/
 216:../Main.c     **** 		BOOLType blah2 = 1;
 364              		.loc 1 216 0
 365 0084 4FF00103 		mov	r3, #1
 366 0088 FB73     		strb	r3, [r7, #15]
 217:../Main.c     **** 		BOOLType buzina = 1;
 367              		.loc 1 217 0
 368 008a 4FF00103 		mov	r3, #1
 369 008e FB72     		strb	r3, [r7, #11]
 218:../Main.c     **** 		BOOLType enable = 0;
 370              		.loc 1 218 0
 371 0090 4FF00003 		mov	r3, #0
 372 0094 BB72     		strb	r3, [r7, #10]
 219:../Main.c     **** 		BOOLType albh2 = 1;
 373              		.loc 1 219 0
 374 0096 4FF00103 		mov	r3, #1
 375 009a BB73     		strb	r3, [r7, #14]
 220:../Main.c     **** 		BOOLType blah1 = 1;
 376              		.loc 1 220 0
 377 009c 4FF00103 		mov	r3, #1
 378 00a0 7B73     		strb	r3, [r7, #13]
 221:../Main.c     **** 		BOOLType albh1 = 1;
 379              		.loc 1 221 0
 380 00a2 4FF00103 		mov	r3, #1
 381 00a6 3B73     		strb	r3, [r7, #12]
 222:../Main.c     **** 		int16_t pow1, pow2;
 223:../Main.c     **** 		/*Le controle*/
 224:../Main.c     **** 		psxLeControle();
 382              		.loc 1 224 0
 383 00a8 FFF7FEFF 		bl	psxLeControle
 225:../Main.c     **** 		if (psx_status != 140) //Nao ta analogico
 384              		.loc 1 225 0
 385 00ac 40F20003 		movw	r3, #:lower16:psx_status
 386 00b0 C0F20003 		movt	r3, #:upper16:psx_status
 387 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 388 00b6 8C2B     		cmp	r3, #140
 389 00b8 05D0     		beq	.L2
 226:../Main.c     **** 				{
 227:../Main.c     **** 			psxHandShake();
 390              		.loc 1 227 0
 391 00ba FFF7FEFF 		bl	psxHandShake
 228:../Main.c     **** 			psxConfiguraControle();
 392              		.loc 1 228 0
 393 00be FFF7FEFF 		bl	psxConfiguraControle
 229:../Main.c     **** 			continue;
 394              		.loc 1 229 0
 395 00c2 00BF     		nop
 396              	.LBE4:
 230:../Main.c     **** 		}
 231:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 232:../Main.c     **** 		if (START && start) {
 233:../Main.c     **** 			start_state = 1;
 234:../Main.c     **** 			start();
 235:../Main.c     **** 		}
 236:../Main.c     **** 		if (SELECT && select) {
 237:../Main.c     **** 			select_state = 1;
 238:../Main.c     **** 			select();
 239:../Main.c     **** 		}
 240:../Main.c     **** 		if (L_DOIS && l_dois) {
 241:../Main.c     **** 			l_dois_state = 1;
 242:../Main.c     **** 			l_dois();
 243:../Main.c     **** 		}
 244:../Main.c     **** 		if (L_UM && l_um) {
 245:../Main.c     **** 			l_um_state = 1;
 246:../Main.c     **** 			l_um();
 247:../Main.c     **** 		}
 248:../Main.c     **** 		if (L_TRES && l_tres) {
 249:../Main.c     **** 			l_tres_state = 1;
 250:../Main.c     **** 			l_tres();
 251:../Main.c     **** 		}
 252:../Main.c     **** 		if (R_UM && r_um) {
 253:../Main.c     **** 			r_um_state = 1;
 254:../Main.c     **** 			r_um();
 255:../Main.c     **** 		}
 256:../Main.c     **** 		if (R_DOIS && r_dois) {
 257:../Main.c     **** 			r_dois_state = 1;
 258:../Main.c     **** 			r_dois();
 259:../Main.c     **** 		}
 260:../Main.c     **** 		if (R_TRES && r_tres) {
 261:../Main.c     **** 			r_tres_state = 1;
 262:../Main.c     **** 			r_tres();
 263:../Main.c     **** 		}
 264:../Main.c     **** 		if (SQR && sqr) {
 265:../Main.c     **** 			sqr_state = 1;
 266:../Main.c     **** 			sqr();
 267:../Main.c     **** 		}
 268:../Main.c     **** 		if (TRIANGLE && triangle) {
 269:../Main.c     **** 			triangle_state = 1;
 270:../Main.c     **** 			triangle();
 271:../Main.c     **** 		}
 272:../Main.c     **** 		if (CIRCLE && circle) {
 273:../Main.c     **** 			circle_state = 1;
 274:../Main.c     **** 			circle();
 275:../Main.c     **** 		}
 276:../Main.c     **** 		if (CROSS && cross) {
 277:../Main.c     **** 			cross_state = 1;
 278:../Main.c     **** 			cross();
 279:../Main.c     **** 		}
 280:../Main.c     **** 		if (LEFT && left) {
 281:../Main.c     **** 			left_state = 1;
 282:../Main.c     **** 			left();
 283:../Main.c     **** 		}
 284:../Main.c     **** 		if (RIGHT && right) {
 285:../Main.c     **** 			right_state = 1;
 286:../Main.c     **** 			right();
 287:../Main.c     **** 		}
 288:../Main.c     **** 		if (UP && up) {
 289:../Main.c     **** 			up_state = 1;
 290:../Main.c     **** 			up();
 291:../Main.c     **** 		}
 292:../Main.c     **** 		if (DOWN && down) {
 293:../Main.c     **** 			down_state = 1;
 294:../Main.c     **** 			down();
 295:../Main.c     **** 		}
 296:../Main.c     **** 
 297:../Main.c     **** 		//
 298:../Main.c     **** 
 299:../Main.c     **** 		data_E[0] = 0;
 300:../Main.c     **** 		//if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar qua
 301:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 302:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 303:../Main.c     **** 		data_E[3] = 0;
 304:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 305:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 306:../Main.c     **** 		{
 307:../Main.c     **** 			if (pow1 < -30)
 308:../Main.c     **** 				albh2 = 0; //ok
 309:../Main.c     **** 			else if (pow1 > 30)
 310:../Main.c     **** 				blah2 = 0; //ok
 311:../Main.c     **** 			if (pow2 < -30)
 312:../Main.c     **** 				albh1 = 0;
 313:../Main.c     **** 			else if (pow2 > 30)
 314:../Main.c     **** 				blah1 = 0;
 315:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 316:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 317:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 318:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 319:../Main.c     **** 		} else {
 320:../Main.c     **** 			if (pow2 > 30)
 321:../Main.c     **** 				albh2 = 0; //ok
 322:../Main.c     **** 			else if (pow2 < -30)
 323:../Main.c     **** 				blah2 = 0; //ok
 324:../Main.c     **** 			if (pow1 > 30)
 325:../Main.c     **** 				albh1 = 0;
 326:../Main.c     **** 			else if (pow1 < -30)
 327:../Main.c     **** 				blah1 = 0;
 328:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 329:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 330:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 331:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 332:../Main.c     **** 		}
 333:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 335:../Main.c     **** 				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 336:../Main.c     **** 				| (buzina << BUZINA);
 337:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 338:../Main.c     **** 
 339:../Main.c     **** 		write_E();
 340:../Main.c     **** 		updateButtonStates();
 341:../Main.c     **** 	}
 397              		.loc 1 341 0
 398 00c4 CDE7     		b	.L38
 399              	.L2:
 400              	.LBB5:
 232:../Main.c     **** 		if (START && start) {
 401              		.loc 1 232 0
 402 00c6 40F20003 		movw	r3, #:lower16:psxDado
 403 00ca C0F20003 		movt	r3, #:upper16:psxDado
 404 00ce 1B68     		ldr	r3, [r3, #0]
 405 00d0 03F00803 		and	r3, r3, #8
 406 00d4 002B     		cmp	r3, #0
 407 00d6 13D0     		beq	.L4
 232:../Main.c     **** 		if (START && start) {
 408              		.loc 1 232 0 is_stmt 0 discriminator 1
 409 00d8 40F20003 		movw	r3, #:lower16:start
 410 00dc C0F20003 		movt	r3, #:upper16:start
 411 00e0 1B68     		ldr	r3, [r3, #0]
 412 00e2 002B     		cmp	r3, #0
 413 00e4 0CD0     		beq	.L4
 233:../Main.c     **** 			start_state = 1;
 414              		.loc 1 233 0 is_stmt 1
 415 00e6 40F20003 		movw	r3, #:lower16:start_state
 416 00ea C0F20003 		movt	r3, #:upper16:start_state
 417 00ee 4FF00102 		mov	r2, #1
 418 00f2 1A70     		strb	r2, [r3, #0]
 234:../Main.c     **** 			start();
 419              		.loc 1 234 0
 420 00f4 40F20003 		movw	r3, #:lower16:start
 421 00f8 C0F20003 		movt	r3, #:upper16:start
 422 00fc 1B68     		ldr	r3, [r3, #0]
 423 00fe 9847     		blx	r3
 424              	.L4:
 236:../Main.c     **** 		if (SELECT && select) {
 425              		.loc 1 236 0
 426 0100 40F20003 		movw	r3, #:lower16:psxDado
 427 0104 C0F20003 		movt	r3, #:upper16:psxDado
 428 0108 1B68     		ldr	r3, [r3, #0]
 429 010a 03F00103 		and	r3, r3, #1
 430 010e 002B     		cmp	r3, #0
 431 0110 13D0     		beq	.L5
 236:../Main.c     **** 		if (SELECT && select) {
 432              		.loc 1 236 0 is_stmt 0 discriminator 1
 433 0112 40F20003 		movw	r3, #:lower16:select
 434 0116 C0F20003 		movt	r3, #:upper16:select
 435 011a 1B68     		ldr	r3, [r3, #0]
 436 011c 002B     		cmp	r3, #0
 437 011e 0CD0     		beq	.L5
 237:../Main.c     **** 			select_state = 1;
 438              		.loc 1 237 0 is_stmt 1
 439 0120 40F20003 		movw	r3, #:lower16:select_state
 440 0124 C0F20003 		movt	r3, #:upper16:select_state
 441 0128 4FF00102 		mov	r2, #1
 442 012c 1A70     		strb	r2, [r3, #0]
 238:../Main.c     **** 			select();
 443              		.loc 1 238 0
 444 012e 40F20003 		movw	r3, #:lower16:select
 445 0132 C0F20003 		movt	r3, #:upper16:select
 446 0136 1B68     		ldr	r3, [r3, #0]
 447 0138 9847     		blx	r3
 448              	.L5:
 240:../Main.c     **** 		if (L_DOIS && l_dois) {
 449              		.loc 1 240 0
 450 013a 40F20003 		movw	r3, #:lower16:psxDado
 451 013e C0F20003 		movt	r3, #:upper16:psxDado
 452 0142 5B68     		ldr	r3, [r3, #4]
 453 0144 03F00103 		and	r3, r3, #1
 454 0148 002B     		cmp	r3, #0
 455 014a 13D0     		beq	.L6
 240:../Main.c     **** 		if (L_DOIS && l_dois) {
 456              		.loc 1 240 0 is_stmt 0 discriminator 1
 457 014c 40F20003 		movw	r3, #:lower16:l_dois
 458 0150 C0F20003 		movt	r3, #:upper16:l_dois
 459 0154 1B68     		ldr	r3, [r3, #0]
 460 0156 002B     		cmp	r3, #0
 461 0158 0CD0     		beq	.L6
 241:../Main.c     **** 			l_dois_state = 1;
 462              		.loc 1 241 0 is_stmt 1
 463 015a 40F20003 		movw	r3, #:lower16:l_dois_state
 464 015e C0F20003 		movt	r3, #:upper16:l_dois_state
 465 0162 4FF00102 		mov	r2, #1
 466 0166 1A70     		strb	r2, [r3, #0]
 242:../Main.c     **** 			l_dois();
 467              		.loc 1 242 0
 468 0168 40F20003 		movw	r3, #:lower16:l_dois
 469 016c C0F20003 		movt	r3, #:upper16:l_dois
 470 0170 1B68     		ldr	r3, [r3, #0]
 471 0172 9847     		blx	r3
 472              	.L6:
 244:../Main.c     **** 		if (L_UM && l_um) {
 473              		.loc 1 244 0
 474 0174 40F20003 		movw	r3, #:lower16:psxDado
 475 0178 C0F20003 		movt	r3, #:upper16:psxDado
 476 017c 5B68     		ldr	r3, [r3, #4]
 477 017e 03F00403 		and	r3, r3, #4
 478 0182 002B     		cmp	r3, #0
 479 0184 13D0     		beq	.L7
 244:../Main.c     **** 		if (L_UM && l_um) {
 480              		.loc 1 244 0 is_stmt 0 discriminator 1
 481 0186 40F20003 		movw	r3, #:lower16:l_um
 482 018a C0F20003 		movt	r3, #:upper16:l_um
 483 018e 1B68     		ldr	r3, [r3, #0]
 484 0190 002B     		cmp	r3, #0
 485 0192 0CD0     		beq	.L7
 245:../Main.c     **** 			l_um_state = 1;
 486              		.loc 1 245 0 is_stmt 1
 487 0194 40F20003 		movw	r3, #:lower16:l_um_state
 488 0198 C0F20003 		movt	r3, #:upper16:l_um_state
 489 019c 4FF00102 		mov	r2, #1
 490 01a0 1A70     		strb	r2, [r3, #0]
 246:../Main.c     **** 			l_um();
 491              		.loc 1 246 0
 492 01a2 40F20003 		movw	r3, #:lower16:l_um
 493 01a6 C0F20003 		movt	r3, #:upper16:l_um
 494 01aa 1B68     		ldr	r3, [r3, #0]
 495 01ac 9847     		blx	r3
 496              	.L7:
 248:../Main.c     **** 		if (L_TRES && l_tres) {
 497              		.loc 1 248 0
 498 01ae 40F20003 		movw	r3, #:lower16:psxDado
 499 01b2 C0F20003 		movt	r3, #:upper16:psxDado
 500 01b6 1B68     		ldr	r3, [r3, #0]
 501 01b8 03F00403 		and	r3, r3, #4
 502 01bc 002B     		cmp	r3, #0
 503 01be 13D0     		beq	.L8
 248:../Main.c     **** 		if (L_TRES && l_tres) {
 504              		.loc 1 248 0 is_stmt 0 discriminator 1
 505 01c0 40F20003 		movw	r3, #:lower16:l_tres
 506 01c4 C0F20003 		movt	r3, #:upper16:l_tres
 507 01c8 1B68     		ldr	r3, [r3, #0]
 508 01ca 002B     		cmp	r3, #0
 509 01cc 0CD0     		beq	.L8
 249:../Main.c     **** 			l_tres_state = 1;
 510              		.loc 1 249 0 is_stmt 1
 511 01ce 40F20003 		movw	r3, #:lower16:l_tres_state
 512 01d2 C0F20003 		movt	r3, #:upper16:l_tres_state
 513 01d6 4FF00102 		mov	r2, #1
 514 01da 1A70     		strb	r2, [r3, #0]
 250:../Main.c     **** 			l_tres();
 515              		.loc 1 250 0
 516 01dc 40F20003 		movw	r3, #:lower16:l_tres
 517 01e0 C0F20003 		movt	r3, #:upper16:l_tres
 518 01e4 1B68     		ldr	r3, [r3, #0]
 519 01e6 9847     		blx	r3
 520              	.L8:
 252:../Main.c     **** 		if (R_UM && r_um) {
 521              		.loc 1 252 0
 522 01e8 40F20003 		movw	r3, #:lower16:psxDado
 523 01ec C0F20003 		movt	r3, #:upper16:psxDado
 524 01f0 5B68     		ldr	r3, [r3, #4]
 525 01f2 03F00803 		and	r3, r3, #8
 526 01f6 002B     		cmp	r3, #0
 527 01f8 13D0     		beq	.L9
 252:../Main.c     **** 		if (R_UM && r_um) {
 528              		.loc 1 252 0 is_stmt 0 discriminator 1
 529 01fa 40F20003 		movw	r3, #:lower16:r_um
 530 01fe C0F20003 		movt	r3, #:upper16:r_um
 531 0202 1B68     		ldr	r3, [r3, #0]
 532 0204 002B     		cmp	r3, #0
 533 0206 0CD0     		beq	.L9
 253:../Main.c     **** 			r_um_state = 1;
 534              		.loc 1 253 0 is_stmt 1
 535 0208 40F20003 		movw	r3, #:lower16:r_um_state
 536 020c C0F20003 		movt	r3, #:upper16:r_um_state
 537 0210 4FF00102 		mov	r2, #1
 538 0214 1A70     		strb	r2, [r3, #0]
 254:../Main.c     **** 			r_um();
 539              		.loc 1 254 0
 540 0216 40F20003 		movw	r3, #:lower16:r_um
 541 021a C0F20003 		movt	r3, #:upper16:r_um
 542 021e 1B68     		ldr	r3, [r3, #0]
 543 0220 9847     		blx	r3
 544              	.L9:
 256:../Main.c     **** 		if (R_DOIS && r_dois) {
 545              		.loc 1 256 0
 546 0222 40F20003 		movw	r3, #:lower16:psxDado
 547 0226 C0F20003 		movt	r3, #:upper16:psxDado
 548 022a 5B68     		ldr	r3, [r3, #4]
 549 022c 03F00203 		and	r3, r3, #2
 550 0230 002B     		cmp	r3, #0
 551 0232 13D0     		beq	.L10
 256:../Main.c     **** 		if (R_DOIS && r_dois) {
 552              		.loc 1 256 0 is_stmt 0 discriminator 1
 553 0234 40F20003 		movw	r3, #:lower16:r_dois
 554 0238 C0F20003 		movt	r3, #:upper16:r_dois
 555 023c 1B68     		ldr	r3, [r3, #0]
 556 023e 002B     		cmp	r3, #0
 557 0240 0CD0     		beq	.L10
 257:../Main.c     **** 			r_dois_state = 1;
 558              		.loc 1 257 0 is_stmt 1
 559 0242 40F20003 		movw	r3, #:lower16:r_dois_state
 560 0246 C0F20003 		movt	r3, #:upper16:r_dois_state
 561 024a 4FF00102 		mov	r2, #1
 562 024e 1A70     		strb	r2, [r3, #0]
 258:../Main.c     **** 			r_dois();
 563              		.loc 1 258 0
 564 0250 40F20003 		movw	r3, #:lower16:r_dois
 565 0254 C0F20003 		movt	r3, #:upper16:r_dois
 566 0258 1B68     		ldr	r3, [r3, #0]
 567 025a 9847     		blx	r3
 568              	.L10:
 260:../Main.c     **** 		if (R_TRES && r_tres) {
 569              		.loc 1 260 0
 570 025c 40F20003 		movw	r3, #:lower16:psxDado
 571 0260 C0F20003 		movt	r3, #:upper16:psxDado
 572 0264 1B68     		ldr	r3, [r3, #0]
 573 0266 03F00203 		and	r3, r3, #2
 574 026a 002B     		cmp	r3, #0
 575 026c 13D0     		beq	.L11
 260:../Main.c     **** 		if (R_TRES && r_tres) {
 576              		.loc 1 260 0 is_stmt 0 discriminator 1
 577 026e 40F20003 		movw	r3, #:lower16:r_tres
 578 0272 C0F20003 		movt	r3, #:upper16:r_tres
 579 0276 1B68     		ldr	r3, [r3, #0]
 580 0278 002B     		cmp	r3, #0
 581 027a 0CD0     		beq	.L11
 261:../Main.c     **** 			r_tres_state = 1;
 582              		.loc 1 261 0 is_stmt 1
 583 027c 40F20003 		movw	r3, #:lower16:r_tres_state
 584 0280 C0F20003 		movt	r3, #:upper16:r_tres_state
 585 0284 4FF00102 		mov	r2, #1
 586 0288 1A70     		strb	r2, [r3, #0]
 262:../Main.c     **** 			r_tres();
 587              		.loc 1 262 0
 588 028a 40F20003 		movw	r3, #:lower16:r_tres
 589 028e C0F20003 		movt	r3, #:upper16:r_tres
 590 0292 1B68     		ldr	r3, [r3, #0]
 591 0294 9847     		blx	r3
 592              	.L11:
 264:../Main.c     **** 		if (SQR && sqr) {
 593              		.loc 1 264 0
 594 0296 40F20003 		movw	r3, #:lower16:psxDado
 595 029a C0F20003 		movt	r3, #:upper16:psxDado
 596 029e 5B68     		ldr	r3, [r3, #4]
 597 02a0 03F08003 		and	r3, r3, #128
 598 02a4 002B     		cmp	r3, #0
 599 02a6 13D0     		beq	.L12
 264:../Main.c     **** 		if (SQR && sqr) {
 600              		.loc 1 264 0 is_stmt 0 discriminator 1
 601 02a8 40F20003 		movw	r3, #:lower16:sqr
 602 02ac C0F20003 		movt	r3, #:upper16:sqr
 603 02b0 1B68     		ldr	r3, [r3, #0]
 604 02b2 002B     		cmp	r3, #0
 605 02b4 0CD0     		beq	.L12
 265:../Main.c     **** 			sqr_state = 1;
 606              		.loc 1 265 0 is_stmt 1
 607 02b6 40F20003 		movw	r3, #:lower16:sqr_state
 608 02ba C0F20003 		movt	r3, #:upper16:sqr_state
 609 02be 4FF00102 		mov	r2, #1
 610 02c2 1A70     		strb	r2, [r3, #0]
 266:../Main.c     **** 			sqr();
 611              		.loc 1 266 0
 612 02c4 40F20003 		movw	r3, #:lower16:sqr
 613 02c8 C0F20003 		movt	r3, #:upper16:sqr
 614 02cc 1B68     		ldr	r3, [r3, #0]
 615 02ce 9847     		blx	r3
 616              	.L12:
 268:../Main.c     **** 		if (TRIANGLE && triangle) {
 617              		.loc 1 268 0
 618 02d0 40F20003 		movw	r3, #:lower16:psxDado
 619 02d4 C0F20003 		movt	r3, #:upper16:psxDado
 620 02d8 5B68     		ldr	r3, [r3, #4]
 621 02da 03F01003 		and	r3, r3, #16
 622 02de 002B     		cmp	r3, #0
 623 02e0 13D0     		beq	.L13
 268:../Main.c     **** 		if (TRIANGLE && triangle) {
 624              		.loc 1 268 0 is_stmt 0 discriminator 1
 625 02e2 40F20003 		movw	r3, #:lower16:triangle
 626 02e6 C0F20003 		movt	r3, #:upper16:triangle
 627 02ea 1B68     		ldr	r3, [r3, #0]
 628 02ec 002B     		cmp	r3, #0
 629 02ee 0CD0     		beq	.L13
 269:../Main.c     **** 			triangle_state = 1;
 630              		.loc 1 269 0 is_stmt 1
 631 02f0 40F20003 		movw	r3, #:lower16:triangle_state
 632 02f4 C0F20003 		movt	r3, #:upper16:triangle_state
 633 02f8 4FF00102 		mov	r2, #1
 634 02fc 1A70     		strb	r2, [r3, #0]
 270:../Main.c     **** 			triangle();
 635              		.loc 1 270 0
 636 02fe 40F20003 		movw	r3, #:lower16:triangle
 637 0302 C0F20003 		movt	r3, #:upper16:triangle
 638 0306 1B68     		ldr	r3, [r3, #0]
 639 0308 9847     		blx	r3
 640              	.L13:
 272:../Main.c     **** 		if (CIRCLE && circle) {
 641              		.loc 1 272 0
 642 030a 40F20003 		movw	r3, #:lower16:psxDado
 643 030e C0F20003 		movt	r3, #:upper16:psxDado
 644 0312 5B68     		ldr	r3, [r3, #4]
 645 0314 03F02003 		and	r3, r3, #32
 646 0318 002B     		cmp	r3, #0
 647 031a 13D0     		beq	.L14
 272:../Main.c     **** 		if (CIRCLE && circle) {
 648              		.loc 1 272 0 is_stmt 0 discriminator 1
 649 031c 40F20003 		movw	r3, #:lower16:circle
 650 0320 C0F20003 		movt	r3, #:upper16:circle
 651 0324 1B68     		ldr	r3, [r3, #0]
 652 0326 002B     		cmp	r3, #0
 653 0328 0CD0     		beq	.L14
 273:../Main.c     **** 			circle_state = 1;
 654              		.loc 1 273 0 is_stmt 1
 655 032a 40F20003 		movw	r3, #:lower16:circle_state
 656 032e C0F20003 		movt	r3, #:upper16:circle_state
 657 0332 4FF00102 		mov	r2, #1
 658 0336 1A70     		strb	r2, [r3, #0]
 274:../Main.c     **** 			circle();
 659              		.loc 1 274 0
 660 0338 40F20003 		movw	r3, #:lower16:circle
 661 033c C0F20003 		movt	r3, #:upper16:circle
 662 0340 1B68     		ldr	r3, [r3, #0]
 663 0342 9847     		blx	r3
 664              	.L14:
 276:../Main.c     **** 		if (CROSS && cross) {
 665              		.loc 1 276 0
 666 0344 40F20003 		movw	r3, #:lower16:psxDado
 667 0348 C0F20003 		movt	r3, #:upper16:psxDado
 668 034c 5B68     		ldr	r3, [r3, #4]
 669 034e 03F04003 		and	r3, r3, #64
 670 0352 002B     		cmp	r3, #0
 671 0354 13D0     		beq	.L15
 276:../Main.c     **** 		if (CROSS && cross) {
 672              		.loc 1 276 0 is_stmt 0 discriminator 1
 673 0356 40F20003 		movw	r3, #:lower16:cross
 674 035a C0F20003 		movt	r3, #:upper16:cross
 675 035e 1B68     		ldr	r3, [r3, #0]
 676 0360 002B     		cmp	r3, #0
 677 0362 0CD0     		beq	.L15
 277:../Main.c     **** 			cross_state = 1;
 678              		.loc 1 277 0 is_stmt 1
 679 0364 40F20003 		movw	r3, #:lower16:cross_state
 680 0368 C0F20003 		movt	r3, #:upper16:cross_state
 681 036c 4FF00102 		mov	r2, #1
 682 0370 1A70     		strb	r2, [r3, #0]
 278:../Main.c     **** 			cross();
 683              		.loc 1 278 0
 684 0372 40F20003 		movw	r3, #:lower16:cross
 685 0376 C0F20003 		movt	r3, #:upper16:cross
 686 037a 1B68     		ldr	r3, [r3, #0]
 687 037c 9847     		blx	r3
 688              	.L15:
 280:../Main.c     **** 		if (LEFT && left) {
 689              		.loc 1 280 0
 690 037e 40F20003 		movw	r3, #:lower16:psxDado
 691 0382 C0F20003 		movt	r3, #:upper16:psxDado
 692 0386 1B68     		ldr	r3, [r3, #0]
 693 0388 03F08003 		and	r3, r3, #128
 694 038c 002B     		cmp	r3, #0
 695 038e 13D0     		beq	.L16
 280:../Main.c     **** 		if (LEFT && left) {
 696              		.loc 1 280 0 is_stmt 0 discriminator 1
 697 0390 40F20003 		movw	r3, #:lower16:left
 698 0394 C0F20003 		movt	r3, #:upper16:left
 699 0398 1B68     		ldr	r3, [r3, #0]
 700 039a 002B     		cmp	r3, #0
 701 039c 0CD0     		beq	.L16
 281:../Main.c     **** 			left_state = 1;
 702              		.loc 1 281 0 is_stmt 1
 703 039e 40F20003 		movw	r3, #:lower16:left_state
 704 03a2 C0F20003 		movt	r3, #:upper16:left_state
 705 03a6 4FF00102 		mov	r2, #1
 706 03aa 1A70     		strb	r2, [r3, #0]
 282:../Main.c     **** 			left();
 707              		.loc 1 282 0
 708 03ac 40F20003 		movw	r3, #:lower16:left
 709 03b0 C0F20003 		movt	r3, #:upper16:left
 710 03b4 1B68     		ldr	r3, [r3, #0]
 711 03b6 9847     		blx	r3
 712              	.L16:
 284:../Main.c     **** 		if (RIGHT && right) {
 713              		.loc 1 284 0
 714 03b8 40F20003 		movw	r3, #:lower16:psxDado
 715 03bc C0F20003 		movt	r3, #:upper16:psxDado
 716 03c0 1B68     		ldr	r3, [r3, #0]
 717 03c2 03F02003 		and	r3, r3, #32
 718 03c6 002B     		cmp	r3, #0
 719 03c8 13D0     		beq	.L17
 284:../Main.c     **** 		if (RIGHT && right) {
 720              		.loc 1 284 0 is_stmt 0 discriminator 1
 721 03ca 40F20003 		movw	r3, #:lower16:right
 722 03ce C0F20003 		movt	r3, #:upper16:right
 723 03d2 1B68     		ldr	r3, [r3, #0]
 724 03d4 002B     		cmp	r3, #0
 725 03d6 0CD0     		beq	.L17
 285:../Main.c     **** 			right_state = 1;
 726              		.loc 1 285 0 is_stmt 1
 727 03d8 40F20003 		movw	r3, #:lower16:right_state
 728 03dc C0F20003 		movt	r3, #:upper16:right_state
 729 03e0 4FF00102 		mov	r2, #1
 730 03e4 1A70     		strb	r2, [r3, #0]
 286:../Main.c     **** 			right();
 731              		.loc 1 286 0
 732 03e6 40F20003 		movw	r3, #:lower16:right
 733 03ea C0F20003 		movt	r3, #:upper16:right
 734 03ee 1B68     		ldr	r3, [r3, #0]
 735 03f0 9847     		blx	r3
 736              	.L17:
 288:../Main.c     **** 		if (UP && up) {
 737              		.loc 1 288 0
 738 03f2 40F20003 		movw	r3, #:lower16:psxDado
 739 03f6 C0F20003 		movt	r3, #:upper16:psxDado
 740 03fa 1B68     		ldr	r3, [r3, #0]
 741 03fc 03F01003 		and	r3, r3, #16
 742 0400 002B     		cmp	r3, #0
 743 0402 13D0     		beq	.L18
 288:../Main.c     **** 		if (UP && up) {
 744              		.loc 1 288 0 is_stmt 0 discriminator 1
 745 0404 40F20003 		movw	r3, #:lower16:up
 746 0408 C0F20003 		movt	r3, #:upper16:up
 747 040c 1B68     		ldr	r3, [r3, #0]
 748 040e 002B     		cmp	r3, #0
 749 0410 0CD0     		beq	.L18
 289:../Main.c     **** 			up_state = 1;
 750              		.loc 1 289 0 is_stmt 1
 751 0412 40F20003 		movw	r3, #:lower16:up_state
 752 0416 C0F20003 		movt	r3, #:upper16:up_state
 753 041a 4FF00102 		mov	r2, #1
 754 041e 1A70     		strb	r2, [r3, #0]
 290:../Main.c     **** 			up();
 755              		.loc 1 290 0
 756 0420 40F20003 		movw	r3, #:lower16:up
 757 0424 C0F20003 		movt	r3, #:upper16:up
 758 0428 1B68     		ldr	r3, [r3, #0]
 759 042a 9847     		blx	r3
 760              	.L18:
 292:../Main.c     **** 		if (DOWN && down) {
 761              		.loc 1 292 0
 762 042c 40F20003 		movw	r3, #:lower16:psxDado
 763 0430 C0F20003 		movt	r3, #:upper16:psxDado
 764 0434 1B68     		ldr	r3, [r3, #0]
 765 0436 03F04003 		and	r3, r3, #64
 766 043a 002B     		cmp	r3, #0
 767 043c 13D0     		beq	.L19
 292:../Main.c     **** 		if (DOWN && down) {
 768              		.loc 1 292 0 is_stmt 0 discriminator 1
 769 043e 40F20003 		movw	r3, #:lower16:down
 770 0442 C0F20003 		movt	r3, #:upper16:down
 771 0446 1B68     		ldr	r3, [r3, #0]
 772 0448 002B     		cmp	r3, #0
 773 044a 0CD0     		beq	.L19
 293:../Main.c     **** 			down_state = 1;
 774              		.loc 1 293 0 is_stmt 1
 775 044c 40F20003 		movw	r3, #:lower16:down_state
 776 0450 C0F20003 		movt	r3, #:upper16:down_state
 777 0454 4FF00102 		mov	r2, #1
 778 0458 1A70     		strb	r2, [r3, #0]
 294:../Main.c     **** 			down();
 779              		.loc 1 294 0
 780 045a 40F20003 		movw	r3, #:lower16:down
 781 045e C0F20003 		movt	r3, #:upper16:down
 782 0462 1B68     		ldr	r3, [r3, #0]
 783 0464 9847     		blx	r3
 784              	.L19:
 299:../Main.c     **** 		data_E[0] = 0;
 785              		.loc 1 299 0
 786 0466 40F20003 		movw	r3, #:lower16:data_E
 787 046a C0F20003 		movt	r3, #:upper16:data_E
 788 046e 4FF00002 		mov	r2, #0
 789 0472 1A70     		strb	r2, [r3, #0]
 301:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 790              		.loc 1 301 0
 791 0474 40F20003 		movw	r3, #:lower16:psxDado
 792 0478 C0F20003 		movt	r3, #:upper16:psxDado
 793 047c 5B69     		ldr	r3, [r3, #20]
 794 047e 9BB2     		uxth	r3, r3
 795 0480 A3F17F03 		sub	r3, r3, #127
 796 0484 9BB2     		uxth	r3, r3
 797 0486 3B81     		strh	r3, [r7, #8]	@ movhi
 302:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 798              		.loc 1 302 0
 799 0488 40F20003 		movw	r3, #:lower16:psxDado
 800 048c C0F20003 		movt	r3, #:upper16:psxDado
 801 0490 DB68     		ldr	r3, [r3, #12]
 802 0492 9BB2     		uxth	r3, r3
 803 0494 A3F17F03 		sub	r3, r3, #127
 804 0498 9BB2     		uxth	r3, r3
 805 049a FB80     		strh	r3, [r7, #6]	@ movhi
 303:../Main.c     **** 		data_E[3] = 0;
 806              		.loc 1 303 0
 807 049c 40F20003 		movw	r3, #:lower16:data_E
 808 04a0 C0F20003 		movt	r3, #:upper16:data_E
 809 04a4 4FF00002 		mov	r2, #0
 810 04a8 DA70     		strb	r2, [r3, #3]
 305:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 811              		.loc 1 305 0
 812 04aa 40F20003 		movw	r3, #:lower16:flipped
 813 04ae C0F20003 		movt	r3, #:upper16:flipped
 814 04b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 815 04b4 002B     		cmp	r3, #0
 816 04b6 7CD1     		bne	.L20
 307:../Main.c     **** 			if (pow1 < -30)
 817              		.loc 1 307 0
 818 04b8 B7F90830 		ldrsh	r3, [r7, #8]
 819 04bc 13F11E0F 		cmn	r3, #30
 820 04c0 03DA     		bge	.L21
 308:../Main.c     **** 				albh2 = 0; //ok
 821              		.loc 1 308 0
 822 04c2 4FF00003 		mov	r3, #0
 823 04c6 BB73     		strb	r3, [r7, #14]
 824 04c8 06E0     		b	.L22
 825              	.L21:
 309:../Main.c     **** 			else if (pow1 > 30)
 826              		.loc 1 309 0
 827 04ca B7F90830 		ldrsh	r3, [r7, #8]
 828 04ce 1E2B     		cmp	r3, #30
 829 04d0 02DD     		ble	.L22
 310:../Main.c     **** 				blah2 = 0; //ok
 830              		.loc 1 310 0
 831 04d2 4FF00003 		mov	r3, #0
 832 04d6 FB73     		strb	r3, [r7, #15]
 833              	.L22:
 311:../Main.c     **** 			if (pow2 < -30)
 834              		.loc 1 311 0
 835 04d8 B7F90630 		ldrsh	r3, [r7, #6]
 836 04dc 13F11E0F 		cmn	r3, #30
 837 04e0 03DA     		bge	.L23
 312:../Main.c     **** 				albh1 = 0;
 838              		.loc 1 312 0
 839 04e2 4FF00003 		mov	r3, #0
 840 04e6 3B73     		strb	r3, [r7, #12]
 841 04e8 06E0     		b	.L24
 842              	.L23:
 313:../Main.c     **** 			else if (pow2 > 30)
 843              		.loc 1 313 0
 844 04ea B7F90630 		ldrsh	r3, [r7, #6]
 845 04ee 1E2B     		cmp	r3, #30
 846 04f0 02DD     		ble	.L24
 314:../Main.c     **** 				blah1 = 0;
 847              		.loc 1 314 0
 848 04f2 4FF00003 		mov	r3, #0
 849 04f6 7B73     		strb	r3, [r7, #13]
 850              	.L24:
 315:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 851              		.loc 1 315 0
 852 04f8 B7F90830 		ldrsh	r3, [r7, #8]
 853 04fc 002B     		cmp	r3, #0
 854 04fe 05DD     		ble	.L25
 315:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 855              		.loc 1 315 0 is_stmt 0 discriminator 1
 856 0500 3B89     		ldrh	r3, [r7, #8]
 857 0502 4FEA4303 		lsl	r3, r3, #1
 858 0506 9BB2     		uxth	r3, r3
 859 0508 9BB2     		uxth	r3, r3
 860 050a 08E0     		b	.L26
 861              	.L25:
 315:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 862              		.loc 1 315 0 discriminator 2
 863 050c 3B89     		ldrh	r3, [r7, #8]
 864 050e 1A46     		mov	r2, r3	@ movhi
 865 0510 4FEAC232 		lsl	r2, r2, #15
 866 0514 D31A     		subs	r3, r2, r3
 867 0516 4FEA4303 		lsl	r3, r3, #1
 868 051a 9BB2     		uxth	r3, r3
 869 051c 9BB2     		uxth	r3, r3
 870              	.L26:
 315:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 871              		.loc 1 315 0 discriminator 3
 872 051e BB80     		strh	r3, [r7, #4]	@ movhi
 316:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 873              		.loc 1 316 0 is_stmt 1 discriminator 3
 874 0520 B7F90420 		ldrsh	r2, [r7, #4]
 875 0524 40F20003 		movw	r3, #:lower16:pwm_max
 876 0528 C0F20003 		movt	r3, #:upper16:pwm_max
 877 052c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 878 052e 03FB02F2 		mul	r2, r3, r2
 879 0532 48F21F53 		movw	r3, #34079
 880 0536 C5F2EB13 		movt	r3, 20971
 881 053a 83FB0213 		smull	r1, r3, r3, r2
 882 053e 4FEA6311 		asr	r1, r3, #5
 883 0542 4FEAE273 		asr	r3, r2, #31
 884 0546 CB1A     		subs	r3, r1, r3
 885 0548 DAB2     		uxtb	r2, r3
 886 054a 40F20003 		movw	r3, #:lower16:data_E
 887 054e C0F20003 		movt	r3, #:upper16:data_E
 888 0552 5A70     		strb	r2, [r3, #1]
 317:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 889              		.loc 1 317 0 discriminator 3
 890 0554 B7F90630 		ldrsh	r3, [r7, #6]
 891 0558 002B     		cmp	r3, #0
 892 055a 05DD     		ble	.L27
 317:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 893              		.loc 1 317 0 is_stmt 0 discriminator 1
 894 055c FB88     		ldrh	r3, [r7, #6]
 895 055e 4FEA4303 		lsl	r3, r3, #1
 896 0562 9BB2     		uxth	r3, r3
 897 0564 9BB2     		uxth	r3, r3
 898 0566 08E0     		b	.L28
 899              	.L27:
 317:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 900              		.loc 1 317 0 discriminator 2
 901 0568 FB88     		ldrh	r3, [r7, #6]
 902 056a 1A46     		mov	r2, r3	@ movhi
 903 056c 4FEAC232 		lsl	r2, r2, #15
 904 0570 D31A     		subs	r3, r2, r3
 905 0572 4FEA4303 		lsl	r3, r3, #1
 906 0576 9BB2     		uxth	r3, r3
 907 0578 9BB2     		uxth	r3, r3
 908              	.L28:
 317:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 909              		.loc 1 317 0 discriminator 3
 910 057a BB80     		strh	r3, [r7, #4]	@ movhi
 318:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 911              		.loc 1 318 0 is_stmt 1 discriminator 3
 912 057c B7F90420 		ldrsh	r2, [r7, #4]
 913 0580 40F20003 		movw	r3, #:lower16:pwm_max
 914 0584 C0F20003 		movt	r3, #:upper16:pwm_max
 915 0588 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 916 058a 03FB02F2 		mul	r2, r3, r2
 917 058e 48F21F53 		movw	r3, #34079
 918 0592 C5F2EB13 		movt	r3, 20971
 919 0596 83FB0213 		smull	r1, r3, r3, r2
 920 059a 4FEA6311 		asr	r1, r3, #5
 921 059e 4FEAE273 		asr	r3, r2, #31
 922 05a2 CB1A     		subs	r3, r1, r3
 923 05a4 DAB2     		uxtb	r2, r3
 924 05a6 40F20003 		movw	r3, #:lower16:data_E
 925 05aa C0F20003 		movt	r3, #:upper16:data_E
 926 05ae 9A70     		strb	r2, [r3, #2]
 927 05b0 7BE0     		b	.L29
 928              	.L20:
 320:../Main.c     **** 			if (pow2 > 30)
 929              		.loc 1 320 0
 930 05b2 B7F90630 		ldrsh	r3, [r7, #6]
 931 05b6 1E2B     		cmp	r3, #30
 932 05b8 03DD     		ble	.L30
 321:../Main.c     **** 				albh2 = 0; //ok
 933              		.loc 1 321 0
 934 05ba 4FF00003 		mov	r3, #0
 935 05be BB73     		strb	r3, [r7, #14]
 936 05c0 07E0     		b	.L31
 937              	.L30:
 322:../Main.c     **** 			else if (pow2 < -30)
 938              		.loc 1 322 0
 939 05c2 B7F90630 		ldrsh	r3, [r7, #6]
 940 05c6 13F11E0F 		cmn	r3, #30
 941 05ca 02DA     		bge	.L31
 323:../Main.c     **** 				blah2 = 0; //ok
 942              		.loc 1 323 0
 943 05cc 4FF00003 		mov	r3, #0
 944 05d0 FB73     		strb	r3, [r7, #15]
 945              	.L31:
 324:../Main.c     **** 			if (pow1 > 30)
 946              		.loc 1 324 0
 947 05d2 B7F90830 		ldrsh	r3, [r7, #8]
 948 05d6 1E2B     		cmp	r3, #30
 949 05d8 03DD     		ble	.L32
 325:../Main.c     **** 				albh1 = 0;
 950              		.loc 1 325 0
 951 05da 4FF00003 		mov	r3, #0
 952 05de 3B73     		strb	r3, [r7, #12]
 953 05e0 07E0     		b	.L33
 954              	.L32:
 326:../Main.c     **** 			else if (pow1 < -30)
 955              		.loc 1 326 0
 956 05e2 B7F90830 		ldrsh	r3, [r7, #8]
 957 05e6 13F11E0F 		cmn	r3, #30
 958 05ea 02DA     		bge	.L33
 327:../Main.c     **** 				blah1 = 0;
 959              		.loc 1 327 0
 960 05ec 4FF00003 		mov	r3, #0
 961 05f0 7B73     		strb	r3, [r7, #13]
 962              	.L33:
 328:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 963              		.loc 1 328 0
 964 05f2 B7F90830 		ldrsh	r3, [r7, #8]
 965 05f6 002B     		cmp	r3, #0
 966 05f8 05DD     		ble	.L34
 328:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 967              		.loc 1 328 0 is_stmt 0 discriminator 1
 968 05fa 3B89     		ldrh	r3, [r7, #8]
 969 05fc 4FEA4303 		lsl	r3, r3, #1
 970 0600 9BB2     		uxth	r3, r3
 971 0602 9BB2     		uxth	r3, r3
 972 0604 08E0     		b	.L35
 973              	.L34:
 328:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 974              		.loc 1 328 0 discriminator 2
 975 0606 3B89     		ldrh	r3, [r7, #8]
 976 0608 1A46     		mov	r2, r3	@ movhi
 977 060a 4FEAC232 		lsl	r2, r2, #15
 978 060e D31A     		subs	r3, r2, r3
 979 0610 4FEA4303 		lsl	r3, r3, #1
 980 0614 9BB2     		uxth	r3, r3
 981 0616 9BB2     		uxth	r3, r3
 982              	.L35:
 328:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 983              		.loc 1 328 0 discriminator 3
 984 0618 BB80     		strh	r3, [r7, #4]	@ movhi
 329:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 985              		.loc 1 329 0 is_stmt 1 discriminator 3
 986 061a B7F90420 		ldrsh	r2, [r7, #4]
 987 061e 40F20003 		movw	r3, #:lower16:pwm_max
 988 0622 C0F20003 		movt	r3, #:upper16:pwm_max
 989 0626 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 990 0628 03FB02F2 		mul	r2, r3, r2
 991 062c 48F21F53 		movw	r3, #34079
 992 0630 C5F2EB13 		movt	r3, 20971
 993 0634 83FB0213 		smull	r1, r3, r3, r2
 994 0638 4FEA6311 		asr	r1, r3, #5
 995 063c 4FEAE273 		asr	r3, r2, #31
 996 0640 CB1A     		subs	r3, r1, r3
 997 0642 DAB2     		uxtb	r2, r3
 998 0644 40F20003 		movw	r3, #:lower16:data_E
 999 0648 C0F20003 		movt	r3, #:upper16:data_E
 1000 064c 9A70     		strb	r2, [r3, #2]
 330:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1001              		.loc 1 330 0 discriminator 3
 1002 064e B7F90630 		ldrsh	r3, [r7, #6]
 1003 0652 002B     		cmp	r3, #0
 1004 0654 05DD     		ble	.L36
 330:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1005              		.loc 1 330 0 is_stmt 0 discriminator 1
 1006 0656 FB88     		ldrh	r3, [r7, #6]
 1007 0658 4FEA4303 		lsl	r3, r3, #1
 1008 065c 9BB2     		uxth	r3, r3
 1009 065e 9BB2     		uxth	r3, r3
 1010 0660 08E0     		b	.L37
 1011              	.L36:
 330:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1012              		.loc 1 330 0 discriminator 2
 1013 0662 FB88     		ldrh	r3, [r7, #6]
 1014 0664 1A46     		mov	r2, r3	@ movhi
 1015 0666 4FEAC232 		lsl	r2, r2, #15
 1016 066a D31A     		subs	r3, r2, r3
 1017 066c 4FEA4303 		lsl	r3, r3, #1
 1018 0670 9BB2     		uxth	r3, r3
 1019 0672 9BB2     		uxth	r3, r3
 1020              	.L37:
 330:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1021              		.loc 1 330 0 discriminator 3
 1022 0674 BB80     		strh	r3, [r7, #4]	@ movhi
 331:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 1023              		.loc 1 331 0 is_stmt 1 discriminator 3
 1024 0676 B7F90420 		ldrsh	r2, [r7, #4]
 1025 067a 40F20003 		movw	r3, #:lower16:pwm_max
 1026 067e C0F20003 		movt	r3, #:upper16:pwm_max
 1027 0682 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1028 0684 03FB02F2 		mul	r2, r3, r2
 1029 0688 48F21F53 		movw	r3, #34079
 1030 068c C5F2EB13 		movt	r3, 20971
 1031 0690 83FB0213 		smull	r1, r3, r3, r2
 1032 0694 4FEA6311 		asr	r1, r3, #5
 1033 0698 4FEAE273 		asr	r3, r2, #31
 1034 069c CB1A     		subs	r3, r1, r3
 1035 069e DAB2     		uxtb	r2, r3
 1036 06a0 40F20003 		movw	r3, #:lower16:data_E
 1037 06a4 C0F20003 		movt	r3, #:upper16:data_E
 1038 06a8 5A70     		strb	r2, [r3, #1]
 1039              	.L29:
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1040              		.loc 1 334 0
 1041 06aa 40F20003 		movw	r3, #:lower16:data_E
 1042 06ae C0F20003 		movt	r3, #:upper16:data_E
 1043 06b2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1044 06b4 DAB2     		uxtb	r2, r3
 1045 06b6 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1046 06b8 4FEA0313 		lsl	r3, r3, #4
 1047 06bc DBB2     		uxtb	r3, r3
 1048 06be 1343     		orrs	r3, r3, r2
 1049 06c0 DAB2     		uxtb	r2, r3
 1050 06c2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1051 06c4 1343     		orrs	r3, r3, r2
 1052 06c6 DAB2     		uxtb	r2, r3
 335:../Main.c     **** 				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 1053              		.loc 1 335 0
 1054 06c8 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 1055 06ca 4FEA4313 		lsl	r3, r3, #5
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1056              		.loc 1 334 0
 1057 06ce DBB2     		uxtb	r3, r3
 1058 06d0 1343     		orrs	r3, r3, r2
 1059 06d2 DAB2     		uxtb	r2, r3
 335:../Main.c     **** 				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 1060              		.loc 1 335 0
 1061 06d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1062 06d6 4FEAC303 		lsl	r3, r3, #3
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1063              		.loc 1 334 0
 1064 06da DBB2     		uxtb	r3, r3
 1065 06dc 1343     		orrs	r3, r3, r2
 1066 06de DAB2     		uxtb	r2, r3
 335:../Main.c     **** 				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 1067              		.loc 1 335 0
 1068 06e0 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1069 06e2 4FEA8303 		lsl	r3, r3, #2
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1070              		.loc 1 334 0
 1071 06e6 DBB2     		uxtb	r3, r3
 1072 06e8 1343     		orrs	r3, r3, r2
 1073 06ea DAB2     		uxtb	r2, r3
 336:../Main.c     **** 				| (buzina << BUZINA);
 1074              		.loc 1 336 0
 1075 06ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1076 06ee 4FEA4303 		lsl	r3, r3, #1
 334:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 1077              		.loc 1 334 0
 1078 06f2 DBB2     		uxtb	r3, r3
 1079 06f4 1343     		orrs	r3, r3, r2
 1080 06f6 DBB2     		uxtb	r3, r3
 1081 06f8 DAB2     		uxtb	r2, r3
 1082 06fa 40F20003 		movw	r3, #:lower16:data_E
 1083 06fe C0F20003 		movt	r3, #:upper16:data_E
 1084 0702 DA70     		strb	r2, [r3, #3]
 337:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 1085              		.loc 1 337 0
 1086 0704 40F20003 		movw	r3, #:lower16:result
 1087 0708 C0F20003 		movt	r3, #:upper16:result
 1088 070c 5B88     		ldrh	r3, [r3, #2]
 1089 070e 4FEA1313 		lsr	r3, r3, #4
 1090 0712 9BB2     		uxth	r3, r3
 1091 0714 DAB2     		uxtb	r2, r3
 1092 0716 40F20003 		movw	r3, #:lower16:data_E
 1093 071a C0F20003 		movt	r3, #:upper16:data_E
 1094 071e 1A71     		strb	r2, [r3, #4]
 339:../Main.c     **** 		write_E();
 1095              		.loc 1 339 0
 1096 0720 FFF7FEFF 		bl	write_E
 340:../Main.c     **** 		updateButtonStates();
 1097              		.loc 1 340 0
 1098 0724 FFF7FEFF 		bl	updateButtonStates
 1099              	.LBE5:
 1100              		.loc 1 341 0
 1101 0728 9BE4     		b	.L38
 1102              		.cfi_endproc
 1103              	.LFE117:
 1105 072a 00BF     		.section	.text.read_R,"ax",%progbits
 1106              		.align	2
 1107              		.global	read_R
 1108              		.thumb
 1109              		.thumb_func
 1111              	read_R:
 1112              	.LFB118:
 342:../Main.c     **** 	return 0;
 343:../Main.c     **** }
 344:../Main.c     **** 
 345:../Main.c     **** /***************************************************/
 346:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 347:../Main.c     **** /***************************************************/
 348:../Main.c     **** 
 349:../Main.c     **** void read_R() {
 1113              		.loc 1 349 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 8
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117 0000 80B5     		push	{r7, lr}
 1118              	.LCFI3:
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 82B0     		sub	sp, sp, #8
 1123              	.LCFI4:
 1124              		.cfi_def_cfa_offset 16
 1125 0004 00AF     		add	r7, sp, #0
 1126              	.LCFI5:
 1127              		.cfi_def_cfa_register 7
 350:../Main.c     **** 	int i;
 351:../Main.c     **** 	IO004_ResetPin(CE);
 1128              		.loc 1 351 0
 1129 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1130 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1131 000e 5A68     		ldr	r2, [r3, #4]
 1132 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1133 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1134 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1135 001a 4FF48031 		mov	r1, #65536
 1136 001e 01FA03F3 		lsl	r3, r1, r3
 1137 0022 5360     		str	r3, [r2, #4]
 352:../Main.c     **** 	delay(50000);
 1138              		.loc 1 352 0
 1139 0024 4CF25030 		movw	r0, #50000
 1140 0028 FFF7FEFF 		bl	delay
 353:../Main.c     **** 	uint8_t temp = 0;
 1141              		.loc 1 353 0
 1142 002c 4FF00003 		mov	r3, #0
 1143 0030 FB70     		strb	r3, [r7, #3]
 354:../Main.c     **** 
 355:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1144              		.loc 1 355 0
 1145 0032 4FF00703 		mov	r3, #7
 1146 0036 7B60     		str	r3, [r7, #4]
 1147 0038 20E0     		b	.L40
 1148              	.L42:
 356:../Main.c     **** 		if (IO004_ReadPin(DATA))
 1149              		.loc 1 356 0
 1150 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1151 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1152 0042 5B68     		ldr	r3, [r3, #4]
 1153 0044 5A6A     		ldr	r2, [r3, #36]
 1154 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1155 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1156 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1157 0050 22FA03F3 		lsr	r3, r2, r3
 1158 0054 03F00103 		and	r3, r3, #1
 1159 0058 002B     		cmp	r3, #0
 1160 005a 09D0     		beq	.L41
 357:../Main.c     **** 			temp |= (1 << i);
 1161              		.loc 1 357 0
 1162 005c 4FF00102 		mov	r2, #1
 1163 0060 7B68     		ldr	r3, [r7, #4]
 1164 0062 02FA03F3 		lsl	r3, r2, r3
 1165 0066 DAB2     		uxtb	r2, r3
 1166 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1167 006a 1343     		orrs	r3, r3, r2
 1168 006c DBB2     		uxtb	r3, r3
 1169 006e FB70     		strb	r3, [r7, #3]
 1170              	.L41:
 358:../Main.c     **** 		pulse_R();
 1171              		.loc 1 358 0
 1172 0070 FFF7FEFF 		bl	pulse_R
 355:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1173              		.loc 1 355 0
 1174 0074 7B68     		ldr	r3, [r7, #4]
 1175 0076 03F1FF33 		add	r3, r3, #-1
 1176 007a 7B60     		str	r3, [r7, #4]
 1177              	.L40:
 355:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1178              		.loc 1 355 0 is_stmt 0 discriminator 1
 1179 007c 7B68     		ldr	r3, [r7, #4]
 1180 007e 002B     		cmp	r3, #0
 1181 0080 DBDA     		bge	.L42
 359:../Main.c     **** 	}
 360:../Main.c     **** 	data_R = temp;
 1182              		.loc 1 360 0 is_stmt 1
 1183 0082 40F20003 		movw	r3, #:lower16:data_R
 1184 0086 C0F20003 		movt	r3, #:upper16:data_R
 1185 008a FA78     		ldrb	r2, [r7, #3]
 1186 008c 1A70     		strb	r2, [r3, #0]
 361:../Main.c     **** 	IO004_SetPin(CE);
 1187              		.loc 1 361 0
 1188 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1189 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1190 0096 5A68     		ldr	r2, [r3, #4]
 1191 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1192 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1193 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1194 00a2 4FF00101 		mov	r1, #1
 1195 00a6 01FA03F3 		lsl	r3, r1, r3
 1196 00aa 5360     		str	r3, [r2, #4]
 362:../Main.c     **** 	delay(50000);
 1197              		.loc 1 362 0
 1198 00ac 4CF25030 		movw	r0, #50000
 1199 00b0 FFF7FEFF 		bl	delay
 363:../Main.c     **** }
 1200              		.loc 1 363 0
 1201 00b4 07F10807 		add	r7, r7, #8
 1202 00b8 BD46     		mov	sp, r7
 1203 00ba 80BD     		pop	{r7, pc}
 1204              		.cfi_endproc
 1205              	.LFE118:
 1207              		.section	.text.pulse_R,"ax",%progbits
 1208              		.align	2
 1209              		.global	pulse_R
 1210              		.thumb
 1211              		.thumb_func
 1213              	pulse_R:
 1214              	.LFB119:
 364:../Main.c     **** 
 365:../Main.c     **** void pulse_R() {
 1215              		.loc 1 365 0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 0
 1218              		@ frame_needed = 1, uses_anonymous_args = 0
 1219 0000 80B5     		push	{r7, lr}
 1220              	.LCFI6:
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 7, -8
 1223              		.cfi_offset 14, -4
 1224 0002 00AF     		add	r7, sp, #0
 1225              	.LCFI7:
 1226              		.cfi_def_cfa_register 7
 366:../Main.c     **** 	delay(300);
 1227              		.loc 1 366 0
 1228 0004 4FF49670 		mov	r0, #300
 1229 0008 FFF7FEFF 		bl	delay
 367:../Main.c     **** 	IO004_SetPin(CLK1);
 1230              		.loc 1 367 0
 1231 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1232 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1233 0014 5A68     		ldr	r2, [r3, #4]
 1234 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1235 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1236 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1237 0020 4FF00101 		mov	r1, #1
 1238 0024 01FA03F3 		lsl	r3, r1, r3
 1239 0028 5360     		str	r3, [r2, #4]
 368:../Main.c     **** 	delay(300);
 1240              		.loc 1 368 0
 1241 002a 4FF49670 		mov	r0, #300
 1242 002e FFF7FEFF 		bl	delay
 369:../Main.c     **** 	IO004_ResetPin(CLK1);
 1243              		.loc 1 369 0
 1244 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1245 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1246 003a 5A68     		ldr	r2, [r3, #4]
 1247 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1248 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1249 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1250 0046 4FF48031 		mov	r1, #65536
 1251 004a 01FA03F3 		lsl	r3, r1, r3
 1252 004e 5360     		str	r3, [r2, #4]
 370:../Main.c     **** }
 1253              		.loc 1 370 0
 1254 0050 80BD     		pop	{r7, pc}
 1255              		.cfi_endproc
 1256              	.LFE119:
 1258 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 1259              		.align	2
 1260              		.global	configure_E
 1261              		.thumb
 1262              		.thumb_func
 1264              	configure_E:
 1265              	.LFB120:
 371:../Main.c     **** 
 372:../Main.c     **** void configure_E() {
 1266              		.loc 1 372 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 8
 1269              		@ frame_needed = 1, uses_anonymous_args = 0
 1270 0000 80B5     		push	{r7, lr}
 1271              	.LCFI8:
 1272              		.cfi_def_cfa_offset 8
 1273              		.cfi_offset 7, -8
 1274              		.cfi_offset 14, -4
 1275 0002 82B0     		sub	sp, sp, #8
 1276              	.LCFI9:
 1277              		.cfi_def_cfa_offset 16
 1278 0004 00AF     		add	r7, sp, #0
 1279              	.LCFI10:
 1280              		.cfi_def_cfa_register 7
 373:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 374:../Main.c     **** 	configuration[0] = 0xC4; //RF_CH# e OP_MODE 0b11011110
 1281              		.loc 1 374 0
 1282 0006 40F20003 		movw	r3, #:lower16:configuration
 1283 000a C0F20003 		movt	r3, #:upper16:configuration
 1284 000e 4FF0C402 		mov	r2, #196
 1285 0012 1A70     		strb	r2, [r3, #0]
 375:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1286              		.loc 1 375 0
 1287 0014 40F20003 		movw	r3, #:lower16:configuration
 1288 0018 C0F20003 		movt	r3, #:upper16:configuration
 1289 001c 4FF04F02 		mov	r2, #79
 1290 0020 5A70     		strb	r2, [r3, #1]
 376:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 1291              		.loc 1 376 0
 1292 0022 40F20003 		movw	r3, #:lower16:configuration
 1293 0026 C0F20003 		movt	r3, #:upper16:configuration
 1294 002a 4FF0A302 		mov	r2, #163
 1295 002e 9A70     		strb	r2, [r3, #2]
 377:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1296              		.loc 1 377 0
 1297 0030 40F20003 		movw	r3, #:lower16:configuration
 1298 0034 C0F20003 		movt	r3, #:upper16:configuration
 1299 0038 4FF0EE02 		mov	r2, #238
 1300 003c DA70     		strb	r2, [r3, #3]
 378:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1301              		.loc 1 378 0
 1302 003e 40F20003 		movw	r3, #:lower16:configuration
 1303 0042 C0F20003 		movt	r3, #:upper16:configuration
 1304 0046 4FF0DD02 		mov	r2, #221
 1305 004a 1A71     		strb	r2, [r3, #4]
 379:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1306              		.loc 1 379 0
 1307 004c 40F20003 		movw	r3, #:lower16:configuration
 1308 0050 C0F20003 		movt	r3, #:upper16:configuration
 1309 0054 4FF0CC02 		mov	r2, #204
 1310 0058 5A71     		strb	r2, [r3, #5]
 380:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1311              		.loc 1 380 0
 1312 005a 40F20003 		movw	r3, #:lower16:configuration
 1313 005e C0F20003 		movt	r3, #:upper16:configuration
 1314 0062 4FF0BB02 		mov	r2, #187
 1315 0066 9A71     		strb	r2, [r3, #6]
 381:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1316              		.loc 1 381 0
 1317 0068 40F20003 		movw	r3, #:lower16:configuration
 1318 006c C0F20003 		movt	r3, #:upper16:configuration
 1319 0070 4FF0AA02 		mov	r2, #170
 1320 0074 DA71     		strb	r2, [r3, #7]
 382:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1321              		.loc 1 382 0
 1322 0076 40F20003 		movw	r3, #:lower16:configuration
 1323 007a C0F20003 		movt	r3, #:upper16:configuration
 1324 007e 4FF00002 		mov	r2, #0
 1325 0082 1A72     		strb	r2, [r3, #8]
 383:../Main.c     **** 	configuration[9] = 0b00000000;
 1326              		.loc 1 383 0
 1327 0084 40F20003 		movw	r3, #:lower16:configuration
 1328 0088 C0F20003 		movt	r3, #:upper16:configuration
 1329 008c 4FF00002 		mov	r2, #0
 1330 0090 5A72     		strb	r2, [r3, #9]
 384:../Main.c     **** 	configuration[10] = 0b00000000;
 1331              		.loc 1 384 0
 1332 0092 40F20003 		movw	r3, #:lower16:configuration
 1333 0096 C0F20003 		movt	r3, #:upper16:configuration
 1334 009a 4FF00002 		mov	r2, #0
 1335 009e 9A72     		strb	r2, [r3, #10]
 385:../Main.c     **** 	configuration[11] = 0b00000000;
 1336              		.loc 1 385 0
 1337 00a0 40F20003 		movw	r3, #:lower16:configuration
 1338 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1339 00a8 4FF00002 		mov	r2, #0
 1340 00ac DA72     		strb	r2, [r3, #11]
 386:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1341              		.loc 1 386 0
 1342 00ae 40F20003 		movw	r3, #:lower16:configuration
 1343 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1344 00b6 4FF00002 		mov	r2, #0
 1345 00ba 1A73     		strb	r2, [r3, #12]
 387:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1346              		.loc 1 387 0
 1347 00bc 40F20003 		movw	r3, #:lower16:configuration
 1348 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1349 00c4 4FF02802 		mov	r2, #40
 1350 00c8 5A73     		strb	r2, [r3, #13]
 388:../Main.c     **** 	configuration[14] = 0b00000000;
 1351              		.loc 1 388 0
 1352 00ca 40F20003 		movw	r3, #:lower16:configuration
 1353 00ce C0F20003 		movt	r3, #:upper16:configuration
 1354 00d2 4FF00002 		mov	r2, #0
 1355 00d6 9A73     		strb	r2, [r3, #14]
 389:../Main.c     **** 
 390:../Main.c     **** 	IO004_ResetPin(CE);
 1356              		.loc 1 390 0
 1357 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1358 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1359 00e0 5A68     		ldr	r2, [r3, #4]
 1360 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1361 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1362 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1363 00ec 4FF48031 		mov	r1, #65536
 1364 00f0 01FA03F3 		lsl	r3, r1, r3
 1365 00f4 5360     		str	r3, [r2, #4]
 391:../Main.c     **** 	IO004_SetPin(CS);
 1366              		.loc 1 391 0
 1367 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1368 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1369 00fe 5A68     		ldr	r2, [r3, #4]
 1370 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1371 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1372 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1373 010a 4FF00101 		mov	r1, #1
 1374 010e 01FA03F3 		lsl	r3, r1, r3
 1375 0112 5360     		str	r3, [r2, #4]
 392:../Main.c     **** 	int i, j;
 393:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1376              		.loc 1 393 0
 1377 0114 4FF00E03 		mov	r3, #14
 1378 0118 7B60     		str	r3, [r7, #4]
 1379 011a 3FE0     		b	.L45
 1380              	.L50:
 394:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1381              		.loc 1 394 0
 1382 011c 4FF00703 		mov	r3, #7
 1383 0120 3B60     		str	r3, [r7, #0]
 1384 0122 34E0     		b	.L46
 1385              	.L49:
 395:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1386              		.loc 1 395 0
 1387 0124 40F20003 		movw	r3, #:lower16:configuration
 1388 0128 C0F20003 		movt	r3, #:upper16:configuration
 1389 012c 7A68     		ldr	r2, [r7, #4]
 1390 012e 9B18     		adds	r3, r3, r2
 1391 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1392 0132 1A46     		mov	r2, r3
 1393 0134 4FF00101 		mov	r1, #1
 1394 0138 3B68     		ldr	r3, [r7, #0]
 1395 013a 01FA03F3 		lsl	r3, r1, r3
 1396 013e 1340     		ands	r3, r3, r2
 1397 0140 002B     		cmp	r3, #0
 1398 0142 0FDD     		ble	.L47
 396:../Main.c     **** 				IO004_SetPin(DATA);
 1399              		.loc 1 396 0
 1400 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1401 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1402 014c 5A68     		ldr	r2, [r3, #4]
 1403 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1404 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1405 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1406 0158 4FF00101 		mov	r1, #1
 1407 015c 01FA03F3 		lsl	r3, r1, r3
 1408 0160 5360     		str	r3, [r2, #4]
 1409 0162 0EE0     		b	.L48
 1410              	.L47:
 397:../Main.c     **** 			else
 398:../Main.c     **** 				IO004_ResetPin(DATA);
 1411              		.loc 1 398 0
 1412 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1413 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1414 016c 5A68     		ldr	r2, [r3, #4]
 1415 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1416 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1417 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1418 0178 4FF48031 		mov	r1, #65536
 1419 017c 01FA03F3 		lsl	r3, r1, r3
 1420 0180 5360     		str	r3, [r2, #4]
 1421              	.L48:
 399:../Main.c     **** 			;
 400:../Main.c     **** 			pulse_R();
 1422              		.loc 1 400 0
 1423 0182 FFF7FEFF 		bl	pulse_R
 394:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1424              		.loc 1 394 0
 1425 0186 3B68     		ldr	r3, [r7, #0]
 1426 0188 03F1FF33 		add	r3, r3, #-1
 1427 018c 3B60     		str	r3, [r7, #0]
 1428              	.L46:
 394:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1429              		.loc 1 394 0 is_stmt 0 discriminator 1
 1430 018e 3B68     		ldr	r3, [r7, #0]
 1431 0190 002B     		cmp	r3, #0
 1432 0192 C7DA     		bge	.L49
 393:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1433              		.loc 1 393 0 is_stmt 1
 1434 0194 7B68     		ldr	r3, [r7, #4]
 1435 0196 03F1FF33 		add	r3, r3, #-1
 1436 019a 7B60     		str	r3, [r7, #4]
 1437              	.L45:
 393:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1438              		.loc 1 393 0 is_stmt 0 discriminator 1
 1439 019c 7B68     		ldr	r3, [r7, #4]
 1440 019e 002B     		cmp	r3, #0
 1441 01a0 BCDA     		bge	.L50
 401:../Main.c     **** 		}
 402:../Main.c     **** 	}
 403:../Main.c     **** 	IO004_ResetPin(CS);
 1442              		.loc 1 403 0 is_stmt 1
 1443 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1444 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1445 01aa 5A68     		ldr	r2, [r3, #4]
 1446 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1447 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1448 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1449 01b6 4FF48031 		mov	r1, #65536
 1450 01ba 01FA03F3 		lsl	r3, r1, r3
 1451 01be 5360     		str	r3, [r2, #4]
 404:../Main.c     **** 	delay(50000);
 1452              		.loc 1 404 0
 1453 01c0 4CF25030 		movw	r0, #50000
 1454 01c4 FFF7FEFF 		bl	delay
 405:../Main.c     **** }
 1455              		.loc 1 405 0
 1456 01c8 07F10807 		add	r7, r7, #8
 1457 01cc BD46     		mov	sp, r7
 1458 01ce 80BD     		pop	{r7, pc}
 1459              		.cfi_endproc
 1460              	.LFE120:
 1462              		.section	.text.write_E,"ax",%progbits
 1463              		.align	2
 1464              		.global	write_E
 1465              		.thumb
 1466              		.thumb_func
 1468              	write_E:
 1469              	.LFB121:
 406:../Main.c     **** void write_E() {
 1470              		.loc 1 406 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 8
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0000 80B5     		push	{r7, lr}
 1475              	.LCFI11:
 1476              		.cfi_def_cfa_offset 8
 1477              		.cfi_offset 7, -8
 1478              		.cfi_offset 14, -4
 1479 0002 82B0     		sub	sp, sp, #8
 1480              	.LCFI12:
 1481              		.cfi_def_cfa_offset 16
 1482 0004 00AF     		add	r7, sp, #0
 1483              	.LCFI13:
 1484              		.cfi_def_cfa_register 7
 407:../Main.c     **** 	int i, j;
 408:../Main.c     **** 	IO004_SetPin(CE);
 1485              		.loc 1 408 0
 1486 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1487 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1488 000e 5A68     		ldr	r2, [r3, #4]
 1489 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1490 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1491 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1492 001a 4FF00101 		mov	r1, #1
 1493 001e 01FA03F3 		lsl	r3, r1, r3
 1494 0022 5360     		str	r3, [r2, #4]
 409:../Main.c     **** 	delay(1000);
 1495              		.loc 1 409 0
 1496 0024 4FF47A70 		mov	r0, #1000
 1497 0028 FFF7FEFF 		bl	delay
 410:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1498              		.loc 1 410 0
 1499 002c 4FF00703 		mov	r3, #7
 1500 0030 7B60     		str	r3, [r7, #4]
 1501 0032 3FE0     		b	.L52
 1502              	.L57:
 411:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1503              		.loc 1 411 0
 1504 0034 4FF00703 		mov	r3, #7
 1505 0038 3B60     		str	r3, [r7, #0]
 1506 003a 34E0     		b	.L53
 1507              	.L56:
 412:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1508              		.loc 1 412 0
 1509 003c 40F20003 		movw	r3, #:lower16:configuration
 1510 0040 C0F20003 		movt	r3, #:upper16:configuration
 1511 0044 7A68     		ldr	r2, [r7, #4]
 1512 0046 9B18     		adds	r3, r3, r2
 1513 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1514 004a 1A46     		mov	r2, r3
 1515 004c 4FF00101 		mov	r1, #1
 1516 0050 3B68     		ldr	r3, [r7, #0]
 1517 0052 01FA03F3 		lsl	r3, r1, r3
 1518 0056 1340     		ands	r3, r3, r2
 1519 0058 002B     		cmp	r3, #0
 1520 005a 0FDD     		ble	.L54
 413:../Main.c     **** 				IO004_SetPin(DATA);
 1521              		.loc 1 413 0
 1522 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1523 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1524 0064 5A68     		ldr	r2, [r3, #4]
 1525 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1526 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1527 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1528 0070 4FF00101 		mov	r1, #1
 1529 0074 01FA03F3 		lsl	r3, r1, r3
 1530 0078 5360     		str	r3, [r2, #4]
 1531 007a 0EE0     		b	.L55
 1532              	.L54:
 414:../Main.c     **** 			else
 415:../Main.c     **** 				IO004_ResetPin(DATA);
 1533              		.loc 1 415 0
 1534 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1535 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1536 0084 5A68     		ldr	r2, [r3, #4]
 1537 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1538 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1539 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1540 0090 4FF48031 		mov	r1, #65536
 1541 0094 01FA03F3 		lsl	r3, r1, r3
 1542 0098 5360     		str	r3, [r2, #4]
 1543              	.L55:
 416:../Main.c     **** 			pulse_R();
 1544              		.loc 1 416 0
 1545 009a FFF7FEFF 		bl	pulse_R
 411:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1546              		.loc 1 411 0
 1547 009e 3B68     		ldr	r3, [r7, #0]
 1548 00a0 03F1FF33 		add	r3, r3, #-1
 1549 00a4 3B60     		str	r3, [r7, #0]
 1550              	.L53:
 411:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1551              		.loc 1 411 0 is_stmt 0 discriminator 1
 1552 00a6 3B68     		ldr	r3, [r7, #0]
 1553 00a8 002B     		cmp	r3, #0
 1554 00aa C7DA     		bge	.L56
 410:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1555              		.loc 1 410 0 is_stmt 1
 1556 00ac 7B68     		ldr	r3, [r7, #4]
 1557 00ae 03F1FF33 		add	r3, r3, #-1
 1558 00b2 7B60     		str	r3, [r7, #4]
 1559              	.L52:
 410:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1560              		.loc 1 410 0 is_stmt 0 discriminator 1
 1561 00b4 7B68     		ldr	r3, [r7, #4]
 1562 00b6 022B     		cmp	r3, #2
 1563 00b8 BCDC     		bgt	.L57
 417:../Main.c     **** 		}
 418:../Main.c     **** 	}
 419:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1564              		.loc 1 419 0 is_stmt 1
 1565 00ba 4FF00003 		mov	r3, #0
 1566 00be 7B60     		str	r3, [r7, #4]
 1567 00c0 3FE0     		b	.L58
 1568              	.L63:
 420:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1569              		.loc 1 420 0
 1570 00c2 4FF00703 		mov	r3, #7
 1571 00c6 3B60     		str	r3, [r7, #0]
 1572 00c8 34E0     		b	.L59
 1573              	.L62:
 421:../Main.c     **** 			if ((data_E[i] & (1 << j)) > 0)
 1574              		.loc 1 421 0
 1575 00ca 40F20003 		movw	r3, #:lower16:data_E
 1576 00ce C0F20003 		movt	r3, #:upper16:data_E
 1577 00d2 7A68     		ldr	r2, [r7, #4]
 1578 00d4 9B18     		adds	r3, r3, r2
 1579 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1580 00d8 1A46     		mov	r2, r3
 1581 00da 4FF00101 		mov	r1, #1
 1582 00de 3B68     		ldr	r3, [r7, #0]
 1583 00e0 01FA03F3 		lsl	r3, r1, r3
 1584 00e4 1340     		ands	r3, r3, r2
 1585 00e6 002B     		cmp	r3, #0
 1586 00e8 0FDD     		ble	.L60
 422:../Main.c     **** 				IO004_SetPin(DATA);
 1587              		.loc 1 422 0
 1588 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1589 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1590 00f2 5A68     		ldr	r2, [r3, #4]
 1591 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1592 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1593 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1594 00fe 4FF00101 		mov	r1, #1
 1595 0102 01FA03F3 		lsl	r3, r1, r3
 1596 0106 5360     		str	r3, [r2, #4]
 1597 0108 0EE0     		b	.L61
 1598              	.L60:
 423:../Main.c     **** 			else
 424:../Main.c     **** 				IO004_ResetPin(DATA);
 1599              		.loc 1 424 0
 1600 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1601 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1602 0112 5A68     		ldr	r2, [r3, #4]
 1603 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1604 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1605 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1606 011e 4FF48031 		mov	r1, #65536
 1607 0122 01FA03F3 		lsl	r3, r1, r3
 1608 0126 5360     		str	r3, [r2, #4]
 1609              	.L61:
 425:../Main.c     **** 			pulse_R();
 1610              		.loc 1 425 0
 1611 0128 FFF7FEFF 		bl	pulse_R
 420:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1612              		.loc 1 420 0
 1613 012c 3B68     		ldr	r3, [r7, #0]
 1614 012e 03F1FF33 		add	r3, r3, #-1
 1615 0132 3B60     		str	r3, [r7, #0]
 1616              	.L59:
 420:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1617              		.loc 1 420 0 is_stmt 0 discriminator 1
 1618 0134 3B68     		ldr	r3, [r7, #0]
 1619 0136 002B     		cmp	r3, #0
 1620 0138 C7DA     		bge	.L62
 419:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1621              		.loc 1 419 0 is_stmt 1
 1622 013a 7B68     		ldr	r3, [r7, #4]
 1623 013c 03F10103 		add	r3, r3, #1
 1624 0140 7B60     		str	r3, [r7, #4]
 1625              	.L58:
 419:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1626              		.loc 1 419 0 is_stmt 0 discriminator 1
 1627 0142 7B68     		ldr	r3, [r7, #4]
 1628 0144 042B     		cmp	r3, #4
 1629 0146 BCDD     		ble	.L63
 426:../Main.c     **** 		}
 427:../Main.c     **** 	} //termina de enviar dados
 428:../Main.c     **** 	IO004_ResetPin(CE);
 1630              		.loc 1 428 0 is_stmt 1
 1631 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1632 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1633 0150 5A68     		ldr	r2, [r3, #4]
 1634 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1635 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1636 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1637 015c 4FF48031 		mov	r1, #65536
 1638 0160 01FA03F3 		lsl	r3, r1, r3
 1639 0164 5360     		str	r3, [r2, #4]
 429:../Main.c     **** 	delay(5000);
 1640              		.loc 1 429 0
 1641 0166 41F28830 		movw	r0, #5000
 1642 016a FFF7FEFF 		bl	delay
 430:../Main.c     **** }
 1643              		.loc 1 430 0
 1644 016e 07F10807 		add	r7, r7, #8
 1645 0172 BD46     		mov	sp, r7
 1646 0174 80BD     		pop	{r7, pc}
 1647              		.cfi_endproc
 1648              	.LFE121:
 1650 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1651              		.align	2
 1652              		.global	psxConfiguraControle
 1653              		.thumb
 1654              		.thumb_func
 1656              	psxConfiguraControle:
 1657              	.LFB122:
 431:../Main.c     **** /***************************************************/
 432:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 433:../Main.c     **** /***************************************************/
 434:../Main.c     **** void psxConfiguraControle() {
 1658              		.loc 1 434 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 0
 1661              		@ frame_needed = 1, uses_anonymous_args = 0
 1662 0000 80B5     		push	{r7, lr}
 1663              	.LCFI14:
 1664              		.cfi_def_cfa_offset 8
 1665              		.cfi_offset 7, -8
 1666              		.cfi_offset 14, -4
 1667 0002 00AF     		add	r7, sp, #0
 1668              	.LCFI15:
 1669              		.cfi_def_cfa_register 7
 435:../Main.c     **** 	psxEnterConfigMode();
 1670              		.loc 1 435 0
 1671 0004 FFF7FEFF 		bl	psxEnterConfigMode
 436:../Main.c     **** 	psxSetAnalogMode();
 1672              		.loc 1 436 0
 1673 0008 FFF7FEFF 		bl	psxSetAnalogMode
 437:../Main.c     **** 	psxExitConfigMode();
 1674              		.loc 1 437 0
 1675 000c FFF7FEFF 		bl	psxExitConfigMode
 438:../Main.c     **** }
 1676              		.loc 1 438 0
 1677 0010 80BD     		pop	{r7, pc}
 1678              		.cfi_endproc
 1679              	.LFE122:
 1681 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1682              		.align	2
 1683              		.global	psxEnterConfigMode
 1684              		.thumb
 1685              		.thumb_func
 1687              	psxEnterConfigMode:
 1688              	.LFB123:
 439:../Main.c     **** 
 440:../Main.c     **** void psxEnterConfigMode() {
 1689              		.loc 1 440 0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 8
 1692              		@ frame_needed = 1, uses_anonymous_args = 0
 1693 0000 80B5     		push	{r7, lr}
 1694              	.LCFI16:
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 7, -8
 1697              		.cfi_offset 14, -4
 1698 0002 82B0     		sub	sp, sp, #8
 1699              	.LCFI17:
 1700              		.cfi_def_cfa_offset 16
 1701 0004 00AF     		add	r7, sp, #0
 1702              	.LCFI18:
 1703              		.cfi_def_cfa_register 7
 441:../Main.c     **** 	int psxByte = 0;
 1704              		.loc 1 441 0
 1705 0006 4FF00003 		mov	r3, #0
 1706 000a 7B60     		str	r3, [r7, #4]
 442:../Main.c     **** 	IO004_SetPin(CMD);
 1707              		.loc 1 442 0
 1708 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1709 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1710 0014 5A68     		ldr	r2, [r3, #4]
 1711 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1712 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1713 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1714 0020 4FF00101 		mov	r1, #1
 1715 0024 01FA03F3 		lsl	r3, r1, r3
 1716 0028 5360     		str	r3, [r2, #4]
 443:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1717              		.loc 1 443 0
 1718 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1719 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1720 0032 5A68     		ldr	r2, [r3, #4]
 1721 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1722 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1723 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1724 003e 4FF00101 		mov	r1, #1
 1725 0042 01FA03F3 		lsl	r3, r1, r3
 1726 0046 5360     		str	r3, [r2, #4]
 444:../Main.c     **** 	IO004_ResetPin(ATT);
 1727              		.loc 1 444 0
 1728 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1729 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1730 0050 5A68     		ldr	r2, [r3, #4]
 1731 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1732 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1733 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1734 005c 4FF48031 		mov	r1, #65536
 1735 0060 01FA03F3 		lsl	r3, r1, r3
 1736 0064 5360     		str	r3, [r2, #4]
 445:../Main.c     **** 	delay(tempoInicio);
 1737              		.loc 1 445 0
 1738 0066 4FF49670 		mov	r0, #300
 1739 006a FFF7FEFF 		bl	delay
 446:../Main.c     **** 
 447:../Main.c     **** 	psxByte = 1;
 1740              		.loc 1 447 0
 1741 006e 4FF00103 		mov	r3, #1
 1742 0072 7B60     		str	r3, [r7, #4]
 448:../Main.c     **** 	psxTrocaByte(psxByte);
 1743              		.loc 1 448 0
 1744 0074 7868     		ldr	r0, [r7, #4]
 1745 0076 FFF7FEFF 		bl	psxTrocaByte
 449:../Main.c     **** 
 450:../Main.c     **** 	psxByte = 0x43;
 1746              		.loc 1 450 0
 1747 007a 4FF04303 		mov	r3, #67
 1748 007e 7B60     		str	r3, [r7, #4]
 451:../Main.c     **** 	psxTrocaByte(psxByte);
 1749              		.loc 1 451 0
 1750 0080 7868     		ldr	r0, [r7, #4]
 1751 0082 FFF7FEFF 		bl	psxTrocaByte
 452:../Main.c     **** 
 453:../Main.c     **** 	psxByte = 0;
 1752              		.loc 1 453 0
 1753 0086 4FF00003 		mov	r3, #0
 1754 008a 7B60     		str	r3, [r7, #4]
 454:../Main.c     **** 	psxTrocaByte(psxByte);
 1755              		.loc 1 454 0
 1756 008c 7868     		ldr	r0, [r7, #4]
 1757 008e FFF7FEFF 		bl	psxTrocaByte
 455:../Main.c     **** 
 456:../Main.c     **** 	psxByte = 0x1;
 1758              		.loc 1 456 0
 1759 0092 4FF00103 		mov	r3, #1
 1760 0096 7B60     		str	r3, [r7, #4]
 457:../Main.c     **** 	psxTrocaByte(psxByte);
 1761              		.loc 1 457 0
 1762 0098 7868     		ldr	r0, [r7, #4]
 1763 009a FFF7FEFF 		bl	psxTrocaByte
 458:../Main.c     **** 
 459:../Main.c     **** 	psxByte = 0;
 1764              		.loc 1 459 0
 1765 009e 4FF00003 		mov	r3, #0
 1766 00a2 7B60     		str	r3, [r7, #4]
 460:../Main.c     **** 	psxTrocaByte(psxByte);
 1767              		.loc 1 460 0
 1768 00a4 7868     		ldr	r0, [r7, #4]
 1769 00a6 FFF7FEFF 		bl	psxTrocaByte
 461:../Main.c     **** 
 462:../Main.c     **** 	IO004_SetPin(ATT);
 1770              		.loc 1 462 0
 1771 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1772 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1773 00b2 5A68     		ldr	r2, [r3, #4]
 1774 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1775 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1776 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1777 00be 4FF00101 		mov	r1, #1
 1778 00c2 01FA03F3 		lsl	r3, r1, r3
 1779 00c6 5360     		str	r3, [r2, #4]
 463:../Main.c     **** }
 1780              		.loc 1 463 0
 1781 00c8 07F10807 		add	r7, r7, #8
 1782 00cc BD46     		mov	sp, r7
 1783 00ce 80BD     		pop	{r7, pc}
 1784              		.cfi_endproc
 1785              	.LFE123:
 1787              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1788              		.align	2
 1789              		.global	psxSetAnalogMode
 1790              		.thumb
 1791              		.thumb_func
 1793              	psxSetAnalogMode:
 1794              	.LFB124:
 464:../Main.c     **** 
 465:../Main.c     **** void psxSetAnalogMode() {
 1795              		.loc 1 465 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 8
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0000 80B5     		push	{r7, lr}
 1800              	.LCFI19:
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 7, -8
 1803              		.cfi_offset 14, -4
 1804 0002 82B0     		sub	sp, sp, #8
 1805              	.LCFI20:
 1806              		.cfi_def_cfa_offset 16
 1807 0004 00AF     		add	r7, sp, #0
 1808              	.LCFI21:
 1809              		.cfi_def_cfa_register 7
 466:../Main.c     **** 	int psxByte = 0;
 1810              		.loc 1 466 0
 1811 0006 4FF00003 		mov	r3, #0
 1812 000a 7B60     		str	r3, [r7, #4]
 467:../Main.c     **** 	IO004_SetPin(CMD);
 1813              		.loc 1 467 0
 1814 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1815 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1816 0014 5A68     		ldr	r2, [r3, #4]
 1817 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1818 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1819 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1820 0020 4FF00101 		mov	r1, #1
 1821 0024 01FA03F3 		lsl	r3, r1, r3
 1822 0028 5360     		str	r3, [r2, #4]
 468:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1823              		.loc 1 468 0
 1824 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1825 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1826 0032 5A68     		ldr	r2, [r3, #4]
 1827 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1828 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1829 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1830 003e 4FF00101 		mov	r1, #1
 1831 0042 01FA03F3 		lsl	r3, r1, r3
 1832 0046 5360     		str	r3, [r2, #4]
 469:../Main.c     **** 	IO004_ResetPin(ATT);
 1833              		.loc 1 469 0
 1834 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1835 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1836 0050 5A68     		ldr	r2, [r3, #4]
 1837 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1838 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1839 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1840 005c 4FF48031 		mov	r1, #65536
 1841 0060 01FA03F3 		lsl	r3, r1, r3
 1842 0064 5360     		str	r3, [r2, #4]
 470:../Main.c     **** 	delay(tempoInicio);
 1843              		.loc 1 470 0
 1844 0066 4FF49670 		mov	r0, #300
 1845 006a FFF7FEFF 		bl	delay
 471:../Main.c     **** 
 472:../Main.c     **** 	psxByte = 1;
 1846              		.loc 1 472 0
 1847 006e 4FF00103 		mov	r3, #1
 1848 0072 7B60     		str	r3, [r7, #4]
 473:../Main.c     **** 	psxTrocaByte(psxByte);
 1849              		.loc 1 473 0
 1850 0074 7868     		ldr	r0, [r7, #4]
 1851 0076 FFF7FEFF 		bl	psxTrocaByte
 474:../Main.c     **** 
 475:../Main.c     **** 	psxByte = 0x44;
 1852              		.loc 1 475 0
 1853 007a 4FF04403 		mov	r3, #68
 1854 007e 7B60     		str	r3, [r7, #4]
 476:../Main.c     **** 	psxTrocaByte(psxByte);
 1855              		.loc 1 476 0
 1856 0080 7868     		ldr	r0, [r7, #4]
 1857 0082 FFF7FEFF 		bl	psxTrocaByte
 477:../Main.c     **** 
 478:../Main.c     **** 	psxByte = 0;
 1858              		.loc 1 478 0
 1859 0086 4FF00003 		mov	r3, #0
 1860 008a 7B60     		str	r3, [r7, #4]
 479:../Main.c     **** 	psxTrocaByte(psxByte);
 1861              		.loc 1 479 0
 1862 008c 7868     		ldr	r0, [r7, #4]
 1863 008e FFF7FEFF 		bl	psxTrocaByte
 480:../Main.c     **** 
 481:../Main.c     **** 	psxByte = 0x1;
 1864              		.loc 1 481 0
 1865 0092 4FF00103 		mov	r3, #1
 1866 0096 7B60     		str	r3, [r7, #4]
 482:../Main.c     **** 	psxTrocaByte(psxByte);
 1867              		.loc 1 482 0
 1868 0098 7868     		ldr	r0, [r7, #4]
 1869 009a FFF7FEFF 		bl	psxTrocaByte
 483:../Main.c     **** 
 484:../Main.c     **** 	psxByte = 0x3;
 1870              		.loc 1 484 0
 1871 009e 4FF00303 		mov	r3, #3
 1872 00a2 7B60     		str	r3, [r7, #4]
 485:../Main.c     **** 	psxTrocaByte(psxByte);
 1873              		.loc 1 485 0
 1874 00a4 7868     		ldr	r0, [r7, #4]
 1875 00a6 FFF7FEFF 		bl	psxTrocaByte
 486:../Main.c     **** 
 487:../Main.c     **** 	psxByte = 0;
 1876              		.loc 1 487 0
 1877 00aa 4FF00003 		mov	r3, #0
 1878 00ae 7B60     		str	r3, [r7, #4]
 488:../Main.c     **** 	psxTrocaByte(psxByte);
 1879              		.loc 1 488 0
 1880 00b0 7868     		ldr	r0, [r7, #4]
 1881 00b2 FFF7FEFF 		bl	psxTrocaByte
 489:../Main.c     **** 
 490:../Main.c     **** 	psxByte = 0;
 1882              		.loc 1 490 0
 1883 00b6 4FF00003 		mov	r3, #0
 1884 00ba 7B60     		str	r3, [r7, #4]
 491:../Main.c     **** 	psxTrocaByte(psxByte);
 1885              		.loc 1 491 0
 1886 00bc 7868     		ldr	r0, [r7, #4]
 1887 00be FFF7FEFF 		bl	psxTrocaByte
 492:../Main.c     **** 
 493:../Main.c     **** 	psxByte = 0;
 1888              		.loc 1 493 0
 1889 00c2 4FF00003 		mov	r3, #0
 1890 00c6 7B60     		str	r3, [r7, #4]
 494:../Main.c     **** 	psxTrocaByte(psxByte);
 1891              		.loc 1 494 0
 1892 00c8 7868     		ldr	r0, [r7, #4]
 1893 00ca FFF7FEFF 		bl	psxTrocaByte
 495:../Main.c     **** 
 496:../Main.c     **** 	psxByte = 0;
 1894              		.loc 1 496 0
 1895 00ce 4FF00003 		mov	r3, #0
 1896 00d2 7B60     		str	r3, [r7, #4]
 497:../Main.c     **** 	psxTrocaByte(psxByte);
 1897              		.loc 1 497 0
 1898 00d4 7868     		ldr	r0, [r7, #4]
 1899 00d6 FFF7FEFF 		bl	psxTrocaByte
 498:../Main.c     **** 
 499:../Main.c     **** 	IO004_SetPin(ATT);
 1900              		.loc 1 499 0
 1901 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1902 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1903 00e2 5A68     		ldr	r2, [r3, #4]
 1904 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1905 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1906 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1907 00ee 4FF00101 		mov	r1, #1
 1908 00f2 01FA03F3 		lsl	r3, r1, r3
 1909 00f6 5360     		str	r3, [r2, #4]
 500:../Main.c     **** }
 1910              		.loc 1 500 0
 1911 00f8 07F10807 		add	r7, r7, #8
 1912 00fc BD46     		mov	sp, r7
 1913 00fe 80BD     		pop	{r7, pc}
 1914              		.cfi_endproc
 1915              	.LFE124:
 1917              		.section	.text.psxExitConfigMode,"ax",%progbits
 1918              		.align	2
 1919              		.global	psxExitConfigMode
 1920              		.thumb
 1921              		.thumb_func
 1923              	psxExitConfigMode:
 1924              	.LFB125:
 501:../Main.c     **** 
 502:../Main.c     **** void psxExitConfigMode() {
 1925              		.loc 1 502 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 8
 1928              		@ frame_needed = 1, uses_anonymous_args = 0
 1929 0000 80B5     		push	{r7, lr}
 1930              	.LCFI22:
 1931              		.cfi_def_cfa_offset 8
 1932              		.cfi_offset 7, -8
 1933              		.cfi_offset 14, -4
 1934 0002 82B0     		sub	sp, sp, #8
 1935              	.LCFI23:
 1936              		.cfi_def_cfa_offset 16
 1937 0004 00AF     		add	r7, sp, #0
 1938              	.LCFI24:
 1939              		.cfi_def_cfa_register 7
 503:../Main.c     **** 	int psxByte = 0;
 1940              		.loc 1 503 0
 1941 0006 4FF00003 		mov	r3, #0
 1942 000a 7B60     		str	r3, [r7, #4]
 504:../Main.c     **** 	IO004_SetPin(CMD);
 1943              		.loc 1 504 0
 1944 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1945 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1946 0014 5A68     		ldr	r2, [r3, #4]
 1947 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1948 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1949 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1950 0020 4FF00101 		mov	r1, #1
 1951 0024 01FA03F3 		lsl	r3, r1, r3
 1952 0028 5360     		str	r3, [r2, #4]
 505:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1953              		.loc 1 505 0
 1954 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1955 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1956 0032 5A68     		ldr	r2, [r3, #4]
 1957 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1958 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1959 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1960 003e 4FF00101 		mov	r1, #1
 1961 0042 01FA03F3 		lsl	r3, r1, r3
 1962 0046 5360     		str	r3, [r2, #4]
 506:../Main.c     **** 	IO004_ResetPin(ATT);
 1963              		.loc 1 506 0
 1964 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1965 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1966 0050 5A68     		ldr	r2, [r3, #4]
 1967 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1968 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1969 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1970 005c 4FF48031 		mov	r1, #65536
 1971 0060 01FA03F3 		lsl	r3, r1, r3
 1972 0064 5360     		str	r3, [r2, #4]
 507:../Main.c     **** 	delay(tempoInicio);
 1973              		.loc 1 507 0
 1974 0066 4FF49670 		mov	r0, #300
 1975 006a FFF7FEFF 		bl	delay
 508:../Main.c     **** 
 509:../Main.c     **** 	psxByte = 1;
 1976              		.loc 1 509 0
 1977 006e 4FF00103 		mov	r3, #1
 1978 0072 7B60     		str	r3, [r7, #4]
 510:../Main.c     **** 	psxTrocaByte(psxByte);
 1979              		.loc 1 510 0
 1980 0074 7868     		ldr	r0, [r7, #4]
 1981 0076 FFF7FEFF 		bl	psxTrocaByte
 511:../Main.c     **** 
 512:../Main.c     **** 	psxByte = 0x43;
 1982              		.loc 1 512 0
 1983 007a 4FF04303 		mov	r3, #67
 1984 007e 7B60     		str	r3, [r7, #4]
 513:../Main.c     **** 	psxTrocaByte(psxByte);
 1985              		.loc 1 513 0
 1986 0080 7868     		ldr	r0, [r7, #4]
 1987 0082 FFF7FEFF 		bl	psxTrocaByte
 514:../Main.c     **** 
 515:../Main.c     **** 	psxByte = 0;
 1988              		.loc 1 515 0
 1989 0086 4FF00003 		mov	r3, #0
 1990 008a 7B60     		str	r3, [r7, #4]
 516:../Main.c     **** 	psxTrocaByte(psxByte);
 1991              		.loc 1 516 0
 1992 008c 7868     		ldr	r0, [r7, #4]
 1993 008e FFF7FEFF 		bl	psxTrocaByte
 517:../Main.c     **** 
 518:../Main.c     **** 	psxByte = 0;
 1994              		.loc 1 518 0
 1995 0092 4FF00003 		mov	r3, #0
 1996 0096 7B60     		str	r3, [r7, #4]
 519:../Main.c     **** 	psxTrocaByte(psxByte);
 1997              		.loc 1 519 0
 1998 0098 7868     		ldr	r0, [r7, #4]
 1999 009a FFF7FEFF 		bl	psxTrocaByte
 520:../Main.c     **** 
 521:../Main.c     **** 	psxByte = 0x5A;
 2000              		.loc 1 521 0
 2001 009e 4FF05A03 		mov	r3, #90
 2002 00a2 7B60     		str	r3, [r7, #4]
 522:../Main.c     **** 	psxTrocaByte(psxByte);
 2003              		.loc 1 522 0
 2004 00a4 7868     		ldr	r0, [r7, #4]
 2005 00a6 FFF7FEFF 		bl	psxTrocaByte
 523:../Main.c     **** 
 524:../Main.c     **** 	psxByte = 0x5A;
 2006              		.loc 1 524 0
 2007 00aa 4FF05A03 		mov	r3, #90
 2008 00ae 7B60     		str	r3, [r7, #4]
 525:../Main.c     **** 	psxTrocaByte(psxByte);
 2009              		.loc 1 525 0
 2010 00b0 7868     		ldr	r0, [r7, #4]
 2011 00b2 FFF7FEFF 		bl	psxTrocaByte
 526:../Main.c     **** 
 527:../Main.c     **** 	psxByte = 0x5A;
 2012              		.loc 1 527 0
 2013 00b6 4FF05A03 		mov	r3, #90
 2014 00ba 7B60     		str	r3, [r7, #4]
 528:../Main.c     **** 	psxTrocaByte(psxByte);
 2015              		.loc 1 528 0
 2016 00bc 7868     		ldr	r0, [r7, #4]
 2017 00be FFF7FEFF 		bl	psxTrocaByte
 529:../Main.c     **** 
 530:../Main.c     **** 	psxByte = 0x5A;
 2018              		.loc 1 530 0
 2019 00c2 4FF05A03 		mov	r3, #90
 2020 00c6 7B60     		str	r3, [r7, #4]
 531:../Main.c     **** 	psxTrocaByte(psxByte);
 2021              		.loc 1 531 0
 2022 00c8 7868     		ldr	r0, [r7, #4]
 2023 00ca FFF7FEFF 		bl	psxTrocaByte
 532:../Main.c     **** 
 533:../Main.c     **** 	psxByte = 0x5A;
 2024              		.loc 1 533 0
 2025 00ce 4FF05A03 		mov	r3, #90
 2026 00d2 7B60     		str	r3, [r7, #4]
 534:../Main.c     **** 	psxTrocaByte(psxByte);
 2027              		.loc 1 534 0
 2028 00d4 7868     		ldr	r0, [r7, #4]
 2029 00d6 FFF7FEFF 		bl	psxTrocaByte
 535:../Main.c     **** 
 536:../Main.c     **** 	IO004_SetPin(ATT);
 2030              		.loc 1 536 0
 2031 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2032 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2033 00e2 5A68     		ldr	r2, [r3, #4]
 2034 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2035 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2036 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2037 00ee 4FF00101 		mov	r1, #1
 2038 00f2 01FA03F3 		lsl	r3, r1, r3
 2039 00f6 5360     		str	r3, [r2, #4]
 537:../Main.c     **** }
 2040              		.loc 1 537 0
 2041 00f8 07F10807 		add	r7, r7, #8
 2042 00fc BD46     		mov	sp, r7
 2043 00fe 80BD     		pop	{r7, pc}
 2044              		.cfi_endproc
 2045              	.LFE125:
 2047              		.section	.text.psxLeControle,"ax",%progbits
 2048              		.align	2
 2049              		.global	psxLeControle
 2050              		.thumb
 2051              		.thumb_func
 2053              	psxLeControle:
 2054              	.LFB126:
 538:../Main.c     **** 
 539:../Main.c     **** void psxLeControle() {
 2055              		.loc 1 539 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 8
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0000 80B5     		push	{r7, lr}
 2060              	.LCFI25:
 2061              		.cfi_def_cfa_offset 8
 2062              		.cfi_offset 7, -8
 2063              		.cfi_offset 14, -4
 2064 0002 82B0     		sub	sp, sp, #8
 2065              	.LCFI26:
 2066              		.cfi_def_cfa_offset 16
 2067 0004 00AF     		add	r7, sp, #0
 2068              	.LCFI27:
 2069              		.cfi_def_cfa_register 7
 540:../Main.c     **** 	int psxByte = 0;
 2070              		.loc 1 540 0
 2071 0006 4FF00003 		mov	r3, #0
 2072 000a 3B60     		str	r3, [r7, #0]
 541:../Main.c     **** 	int psxCont;
 542:../Main.c     **** 
 543:../Main.c     **** 	IO004_SetPin(CMD);
 2073              		.loc 1 543 0
 2074 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2075 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2076 0014 5A68     		ldr	r2, [r3, #4]
 2077 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2078 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2079 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2080 0020 4FF00101 		mov	r1, #1
 2081 0024 01FA03F3 		lsl	r3, r1, r3
 2082 0028 5360     		str	r3, [r2, #4]
 544:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2083              		.loc 1 544 0
 2084 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2085 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2086 0032 5A68     		ldr	r2, [r3, #4]
 2087 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2088 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2089 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2090 003e 4FF00101 		mov	r1, #1
 2091 0042 01FA03F3 		lsl	r3, r1, r3
 2092 0046 5360     		str	r3, [r2, #4]
 545:../Main.c     **** 	IO004_ResetPin(ATT);
 2093              		.loc 1 545 0
 2094 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2095 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2096 0050 5A68     		ldr	r2, [r3, #4]
 2097 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2098 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2099 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2100 005c 4FF48031 		mov	r1, #65536
 2101 0060 01FA03F3 		lsl	r3, r1, r3
 2102 0064 5360     		str	r3, [r2, #4]
 546:../Main.c     **** 	delay(tempoInicio);
 2103              		.loc 1 546 0
 2104 0066 4FF49670 		mov	r0, #300
 2105 006a FFF7FEFF 		bl	delay
 547:../Main.c     **** 
 548:../Main.c     **** 	psxByte = 1;
 2106              		.loc 1 548 0
 2107 006e 4FF00103 		mov	r3, #1
 2108 0072 3B60     		str	r3, [r7, #0]
 549:../Main.c     **** 	psxTrocaByte(psxByte);
 2109              		.loc 1 549 0
 2110 0074 3868     		ldr	r0, [r7, #0]
 2111 0076 FFF7FEFF 		bl	psxTrocaByte
 550:../Main.c     **** 
 551:../Main.c     **** 	psxByte = 0x42;
 2112              		.loc 1 551 0
 2113 007a 4FF04203 		mov	r3, #66
 2114 007e 3B60     		str	r3, [r7, #0]
 552:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2115              		.loc 1 552 0
 2116 0080 3868     		ldr	r0, [r7, #0]
 2117 0082 FFF7FEFF 		bl	psxTrocaByte
 2118 0086 0346     		mov	r3, r0
 2119 0088 DAB2     		uxtb	r2, r3
 2120 008a 40F20003 		movw	r3, #:lower16:psx_status
 2121 008e C0F20003 		movt	r3, #:upper16:psx_status
 2122 0092 1A70     		strb	r2, [r3, #0]
 553:../Main.c     **** 
 554:../Main.c     **** 	psxByte = 0;
 2123              		.loc 1 554 0
 2124 0094 4FF00003 		mov	r3, #0
 2125 0098 3B60     		str	r3, [r7, #0]
 555:../Main.c     **** 	psxTrocaByte(psxByte);
 2126              		.loc 1 555 0
 2127 009a 3868     		ldr	r0, [r7, #0]
 2128 009c FFF7FEFF 		bl	psxTrocaByte
 556:../Main.c     **** 
 557:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2129              		.loc 1 557 0
 2130 00a0 4FF00003 		mov	r3, #0
 2131 00a4 7B60     		str	r3, [r7, #4]
 2132 00a6 0FE0     		b	.L69
 2133              	.L70:
 558:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 2134              		.loc 1 558 0 discriminator 2
 2135 00a8 4FF00000 		mov	r0, #0
 2136 00ac FFF7FEFF 		bl	psxTrocaByte
 2137 00b0 0146     		mov	r1, r0
 2138 00b2 40F20003 		movw	r3, #:lower16:psxDado
 2139 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 2140 00ba 7A68     		ldr	r2, [r7, #4]
 2141 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 557:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2142              		.loc 1 557 0 discriminator 2
 2143 00c0 7B68     		ldr	r3, [r7, #4]
 2144 00c2 03F10103 		add	r3, r3, #1
 2145 00c6 7B60     		str	r3, [r7, #4]
 2146              	.L69:
 557:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2147              		.loc 1 557 0 is_stmt 0 discriminator 1
 2148 00c8 7B68     		ldr	r3, [r7, #4]
 2149 00ca 052B     		cmp	r3, #5
 2150 00cc ECDD     		ble	.L70
 559:../Main.c     **** 
 560:../Main.c     **** 	IO004_SetPin(ATT);
 2151              		.loc 1 560 0 is_stmt 1
 2152 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2153 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2154 00d6 5A68     		ldr	r2, [r3, #4]
 2155 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2156 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2157 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2158 00e2 4FF00101 		mov	r1, #1
 2159 00e6 01FA03F3 		lsl	r3, r1, r3
 2160 00ea 5360     		str	r3, [r2, #4]
 561:../Main.c     **** }
 2161              		.loc 1 561 0
 2162 00ec 07F10807 		add	r7, r7, #8
 2163 00f0 BD46     		mov	sp, r7
 2164 00f2 80BD     		pop	{r7, pc}
 2165              		.cfi_endproc
 2166              	.LFE126:
 2168              		.section	.text.psxHandShake,"ax",%progbits
 2169              		.align	2
 2170              		.global	psxHandShake
 2171              		.thumb
 2172              		.thumb_func
 2174              	psxHandShake:
 2175              	.LFB127:
 562:../Main.c     **** 
 563:../Main.c     **** void psxHandShake() {
 2176              		.loc 1 563 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 8
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0000 80B5     		push	{r7, lr}
 2181              	.LCFI28:
 2182              		.cfi_def_cfa_offset 8
 2183              		.cfi_offset 7, -8
 2184              		.cfi_offset 14, -4
 2185 0002 82B0     		sub	sp, sp, #8
 2186              	.LCFI29:
 2187              		.cfi_def_cfa_offset 16
 2188 0004 00AF     		add	r7, sp, #0
 2189              	.LCFI30:
 2190              		.cfi_def_cfa_register 7
 564:../Main.c     **** 	int psxByte = 0;
 2191              		.loc 1 564 0
 2192 0006 4FF00003 		mov	r3, #0
 2193 000a 7B60     		str	r3, [r7, #4]
 565:../Main.c     **** 
 566:../Main.c     **** 	IO004_SetPin(CMD);
 2194              		.loc 1 566 0
 2195 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2196 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2197 0014 5A68     		ldr	r2, [r3, #4]
 2198 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2199 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2200 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2201 0020 4FF00101 		mov	r1, #1
 2202 0024 01FA03F3 		lsl	r3, r1, r3
 2203 0028 5360     		str	r3, [r2, #4]
 567:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2204              		.loc 1 567 0
 2205 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2206 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2207 0032 5A68     		ldr	r2, [r3, #4]
 2208 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2209 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2210 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2211 003e 4FF00101 		mov	r1, #1
 2212 0042 01FA03F3 		lsl	r3, r1, r3
 2213 0046 5360     		str	r3, [r2, #4]
 568:../Main.c     **** 	IO004_ResetPin(ATT);
 2214              		.loc 1 568 0
 2215 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2216 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2217 0050 5A68     		ldr	r2, [r3, #4]
 2218 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2219 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2220 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2221 005c 4FF48031 		mov	r1, #65536
 2222 0060 01FA03F3 		lsl	r3, r1, r3
 2223 0064 5360     		str	r3, [r2, #4]
 569:../Main.c     **** 	delay(tempoInicio);
 2224              		.loc 1 569 0
 2225 0066 4FF49670 		mov	r0, #300
 2226 006a FFF7FEFF 		bl	delay
 570:../Main.c     **** 
 571:../Main.c     **** 	psxByte = 1;
 2227              		.loc 1 571 0
 2228 006e 4FF00103 		mov	r3, #1
 2229 0072 7B60     		str	r3, [r7, #4]
 572:../Main.c     **** 	psxTrocaByte(psxByte);
 2230              		.loc 1 572 0
 2231 0074 7868     		ldr	r0, [r7, #4]
 2232 0076 FFF7FEFF 		bl	psxTrocaByte
 573:../Main.c     **** 
 574:../Main.c     **** 	psxByte = 0x42;
 2233              		.loc 1 574 0
 2234 007a 4FF04203 		mov	r3, #66
 2235 007e 7B60     		str	r3, [r7, #4]
 575:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2236              		.loc 1 575 0
 2237 0080 7868     		ldr	r0, [r7, #4]
 2238 0082 FFF7FEFF 		bl	psxTrocaByte
 2239 0086 0346     		mov	r3, r0
 2240 0088 DAB2     		uxtb	r2, r3
 2241 008a 40F20003 		movw	r3, #:lower16:psx_status
 2242 008e C0F20003 		movt	r3, #:upper16:psx_status
 2243 0092 1A70     		strb	r2, [r3, #0]
 576:../Main.c     **** 
 577:../Main.c     **** 	psxByte = 0;
 2244              		.loc 1 577 0
 2245 0094 4FF00003 		mov	r3, #0
 2246 0098 7B60     		str	r3, [r7, #4]
 578:../Main.c     **** 	psxTrocaByte(psxByte);
 2247              		.loc 1 578 0
 2248 009a 7868     		ldr	r0, [r7, #4]
 2249 009c FFF7FEFF 		bl	psxTrocaByte
 579:../Main.c     **** 
 580:../Main.c     **** 	psxByte = 0;
 2250              		.loc 1 580 0
 2251 00a0 4FF00003 		mov	r3, #0
 2252 00a4 7B60     		str	r3, [r7, #4]
 581:../Main.c     **** 	psxTrocaByte(psxByte);
 2253              		.loc 1 581 0
 2254 00a6 7868     		ldr	r0, [r7, #4]
 2255 00a8 FFF7FEFF 		bl	psxTrocaByte
 582:../Main.c     **** 
 583:../Main.c     **** 	psxByte = 0;
 2256              		.loc 1 583 0
 2257 00ac 4FF00003 		mov	r3, #0
 2258 00b0 7B60     		str	r3, [r7, #4]
 584:../Main.c     **** 	psxTrocaByte(psxByte);
 2259              		.loc 1 584 0
 2260 00b2 7868     		ldr	r0, [r7, #4]
 2261 00b4 FFF7FEFF 		bl	psxTrocaByte
 585:../Main.c     **** 
 586:../Main.c     **** 	IO004_SetPin(ATT);
 2262              		.loc 1 586 0
 2263 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2264 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2265 00c0 5A68     		ldr	r2, [r3, #4]
 2266 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2267 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2268 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2269 00cc 4FF00101 		mov	r1, #1
 2270 00d0 01FA03F3 		lsl	r3, r1, r3
 2271 00d4 5360     		str	r3, [r2, #4]
 587:../Main.c     **** }
 2272              		.loc 1 587 0
 2273 00d6 07F10807 		add	r7, r7, #8
 2274 00da BD46     		mov	sp, r7
 2275 00dc 80BD     		pop	{r7, pc}
 2276              		.cfi_endproc
 2277              	.LFE127:
 2279 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 2280              		.align	2
 2281              		.global	psxTrocaByte
 2282              		.thumb
 2283              		.thumb_func
 2285              	psxTrocaByte:
 2286              	.LFB128:
 588:../Main.c     **** 
 589:../Main.c     **** int psxTrocaByte(int byteDado) {
 2287              		.loc 1 589 0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 16
 2290              		@ frame_needed = 1, uses_anonymous_args = 0
 2291 0000 80B5     		push	{r7, lr}
 2292              	.LCFI31:
 2293              		.cfi_def_cfa_offset 8
 2294              		.cfi_offset 7, -8
 2295              		.cfi_offset 14, -4
 2296 0002 84B0     		sub	sp, sp, #16
 2297              	.LCFI32:
 2298              		.cfi_def_cfa_offset 24
 2299 0004 00AF     		add	r7, sp, #0
 2300              	.LCFI33:
 2301              		.cfi_def_cfa_register 7
 2302 0006 7860     		str	r0, [r7, #4]
 590:../Main.c     **** 	int c;
 591:../Main.c     **** 	int aux = 0;
 2303              		.loc 1 591 0
 2304 0008 4FF00003 		mov	r3, #0
 2305 000c BB60     		str	r3, [r7, #8]
 592:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2306              		.loc 1 592 0
 2307 000e 4FF00003 		mov	r3, #0
 2308 0012 FB60     		str	r3, [r7, #12]
 2309 0014 69E0     		b	.L73
 2310              	.L77:
 593:../Main.c     **** 
 594:../Main.c     **** 		if (byteDado & (0x01 << c))
 2311              		.loc 1 594 0
 2312 0016 7A68     		ldr	r2, [r7, #4]
 2313 0018 FB68     		ldr	r3, [r7, #12]
 2314 001a 42FA03F3 		asr	r3, r2, r3
 2315 001e 03F00103 		and	r3, r3, #1
 2316 0022 002B     		cmp	r3, #0
 2317 0024 0FD0     		beq	.L74
 595:../Main.c     **** 			IO004_SetPin(CMD);
 2318              		.loc 1 595 0
 2319 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2320 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2321 002e 5A68     		ldr	r2, [r3, #4]
 2322 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2323 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2324 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2325 003a 4FF00101 		mov	r1, #1
 2326 003e 01FA03F3 		lsl	r3, r1, r3
 2327 0042 5360     		str	r3, [r2, #4]
 2328 0044 0EE0     		b	.L75
 2329              	.L74:
 596:../Main.c     **** 		else
 597:../Main.c     **** 			IO004_ResetPin(CMD);
 2330              		.loc 1 597 0
 2331 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2332 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2333 004e 5A68     		ldr	r2, [r3, #4]
 2334 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2335 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2336 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2337 005a 4FF48031 		mov	r1, #65536
 2338 005e 01FA03F3 		lsl	r3, r1, r3
 2339 0062 5360     		str	r3, [r2, #4]
 2340              	.L75:
 598:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 2341              		.loc 1 598 0
 2342 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2343 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2344 006c 5A68     		ldr	r2, [r3, #4]
 2345 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2346 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2347 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2348 0078 4FF48031 		mov	r1, #65536
 2349 007c 01FA03F3 		lsl	r3, r1, r3
 2350 0080 5360     		str	r3, [r2, #4]
 599:../Main.c     **** 		delay(tempoClk);
 2351              		.loc 1 599 0
 2352 0082 4FF49670 		mov	r0, #300
 2353 0086 FFF7FEFF 		bl	delay
 600:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 2354              		.loc 1 600 0
 2355 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2356 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2357 0092 5B68     		ldr	r3, [r3, #4]
 2358 0094 5A6A     		ldr	r2, [r3, #36]
 2359 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2360 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2361 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2362 00a0 22FA03F3 		lsr	r3, r2, r3
 2363 00a4 03F00103 		and	r3, r3, #1
 2364 00a8 002B     		cmp	r3, #0
 2365 00aa 07D1     		bne	.L76
 601:../Main.c     **** 			aux = aux | (1 << c);
 2366              		.loc 1 601 0
 2367 00ac 4FF00102 		mov	r2, #1
 2368 00b0 FB68     		ldr	r3, [r7, #12]
 2369 00b2 02FA03F3 		lsl	r3, r2, r3
 2370 00b6 BA68     		ldr	r2, [r7, #8]
 2371 00b8 1343     		orrs	r3, r3, r2
 2372 00ba BB60     		str	r3, [r7, #8]
 2373              	.L76:
 602:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 2374              		.loc 1 602 0
 2375 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2376 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2377 00c4 5A68     		ldr	r2, [r3, #4]
 2378 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2379 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2380 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2381 00d0 4FF00101 		mov	r1, #1
 2382 00d4 01FA03F3 		lsl	r3, r1, r3
 2383 00d8 5360     		str	r3, [r2, #4]
 603:../Main.c     **** 		delay(tempoClk);
 2384              		.loc 1 603 0
 2385 00da 4FF49670 		mov	r0, #300
 2386 00de FFF7FEFF 		bl	delay
 592:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2387              		.loc 1 592 0
 2388 00e2 FB68     		ldr	r3, [r7, #12]
 2389 00e4 03F10103 		add	r3, r3, #1
 2390 00e8 FB60     		str	r3, [r7, #12]
 2391              	.L73:
 592:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2392              		.loc 1 592 0 is_stmt 0 discriminator 1
 2393 00ea FB68     		ldr	r3, [r7, #12]
 2394 00ec 072B     		cmp	r3, #7
 2395 00ee 92DD     		ble	.L77
 604:../Main.c     **** 	}
 605:../Main.c     **** 	IO004_SetPin(CMD);
 2396              		.loc 1 605 0 is_stmt 1
 2397 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2398 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2399 00f8 5A68     		ldr	r2, [r3, #4]
 2400 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2401 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2402 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2403 0104 4FF00101 		mov	r1, #1
 2404 0108 01FA03F3 		lsl	r3, r1, r3
 2405 010c 5360     		str	r3, [r2, #4]
 606:../Main.c     **** 	delay(tempoEntreByte);
 2406              		.loc 1 606 0
 2407 010e 4FF06400 		mov	r0, #100
 2408 0112 FFF7FEFF 		bl	delay
 607:../Main.c     **** 	return aux;
 2409              		.loc 1 607 0
 2410 0116 BB68     		ldr	r3, [r7, #8]
 608:../Main.c     **** }
 2411              		.loc 1 608 0
 2412 0118 1846     		mov	r0, r3
 2413 011a 07F11007 		add	r7, r7, #16
 2414 011e BD46     		mov	sp, r7
 2415 0120 80BD     		pop	{r7, pc}
 2416              		.cfi_endproc
 2417              	.LFE128:
 2419 0122 00BF     		.section	.text.delay,"ax",%progbits
 2420              		.align	2
 2421              		.global	delay
 2422              		.thumb
 2423              		.thumb_func
 2425              	delay:
 2426              	.LFB129:
 609:../Main.c     **** //void psxLeControle()
 610:../Main.c     **** //{
 611:../Main.c     **** //	int psxByte = 0;
 612:../Main.c     **** //	int psxCont;
 613:../Main.c     **** //
 614:../Main.c     **** //	IO004_SetPin(CMD);
 615:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 616:../Main.c     **** //	IO004_ResetPin(ATT);
 617:../Main.c     **** //	delay(tempoInicio);
 618:../Main.c     **** //
 619:../Main.c     **** //	psxByte = 1;
 620:../Main.c     **** //	psxGravaByte(psxByte);
 621:../Main.c     **** //
 622:../Main.c     **** //	psxByte = 66;
 623:../Main.c     **** //	psxGravaByte(psxByte);
 624:../Main.c     **** //
 625:../Main.c     **** //	psxByte = 0;
 626:../Main.c     **** //	psxGravaByte(psxByte);
 627:../Main.c     **** //
 628:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 629:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 630:../Main.c     **** //
 631:../Main.c     **** //	IO004_SetPin(ATT);
 632:../Main.c     **** //}
 633:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 634:../Main.c     **** //{
 635:../Main.c     **** //	int c;
 636:../Main.c     **** //	for (c=0;c<=7;c++)
 637:../Main.c     **** //	{
 638:../Main.c     **** //		if(byteDado & (0x01<<c))
 639:../Main.c     **** //			IO004_SetPin(CMD);
 640:../Main.c     **** //		else
 641:../Main.c     **** //			IO004_ResetPin(CMD);
 642:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 643:../Main.c     **** //		delay(tempoClk);
 644:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 645:../Main.c     **** //		delay(tempoClk);
 646:../Main.c     **** //	}
 647:../Main.c     **** //	IO004_SetPin(CMD);
 648:../Main.c     **** //	delay(tempoEntreByte);
 649:../Main.c     **** //}
 650:../Main.c     **** //int psxLeByte()
 651:../Main.c     **** //{
 652:../Main.c     **** //	int aux = 0;
 653:../Main.c     **** //	int c;
 654:../Main.c     **** //
 655:../Main.c     **** //	for (c=0;c<=7;c++)
 656:../Main.c     **** //	{
 657:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 658:../Main.c     **** //		delay(tempoClk);
 659:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 660:../Main.c     **** //	  		  aux = aux | (1 << c);
 661:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 662:../Main.c     **** //	  	delay(tempoClk);
 663:../Main.c     **** //	}
 664:../Main.c     **** //	delay(tempoEntreByte);
 665:../Main.c     **** //	return (aux);
 666:../Main.c     **** //}
 667:../Main.c     **** 
 668:../Main.c     **** /***************************************************/
 669:../Main.c     **** /*****************FUNCOES GERAIS********************/
 670:../Main.c     **** /***************************************************/
 671:../Main.c     **** 
 672:../Main.c     **** void delay(long unsigned int i) {
 2427              		.loc 1 672 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 8
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431              		@ link register save eliminated.
 2432 0000 80B4     		push	{r7}
 2433              	.LCFI34:
 2434              		.cfi_def_cfa_offset 4
 2435              		.cfi_offset 7, -4
 2436 0002 83B0     		sub	sp, sp, #12
 2437              	.LCFI35:
 2438              		.cfi_def_cfa_offset 16
 2439 0004 00AF     		add	r7, sp, #0
 2440              	.LCFI36:
 2441              		.cfi_def_cfa_register 7
 2442 0006 7860     		str	r0, [r7, #4]
 673:../Main.c     **** 	while (i--) {
 2443              		.loc 1 673 0
 2444 0008 00E0     		b	.L80
 2445              	.L81:
 2446              	.LBB6:
 2447              	.LBB7:
 2448              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 2449              		.loc 2 327 0
 2450              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 2451 000a 00BF     		nop
 2452              	@ 0 "" 2
 2453              		.thumb
 2454              	.L80:
 2455              	.LBE7:
 2456              	.LBE6:
 2457              		.loc 1 673 0 discriminator 1
 2458 000c 7B68     		ldr	r3, [r7, #4]
 2459 000e 002B     		cmp	r3, #0
 2460 0010 0CBF     		ite	eq
 2461 0012 0023     		moveq	r3, #0
 2462 0014 0123     		movne	r3, #1
 2463 0016 DBB2     		uxtb	r3, r3
 2464 0018 7A68     		ldr	r2, [r7, #4]
 2465 001a 02F1FF32 		add	r2, r2, #-1
 2466 001e 7A60     		str	r2, [r7, #4]
 2467 0020 002B     		cmp	r3, #0
 2468 0022 F2D1     		bne	.L81
 674:../Main.c     **** 		__NOP();
 675:../Main.c     **** 	}
 676:../Main.c     **** }
 2469              		.loc 1 676 0
 2470 0024 07F10C07 		add	r7, r7, #12
 2471 0028 BD46     		mov	sp, r7
 2472 002a 80BC     		pop	{r7}
 2473 002c 7047     		bx	lr
 2474              		.cfi_endproc
 2475              	.LFE129:
 2477 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 2478              		.align	2
 2479              		.global	printByteToInt
 2480              		.thumb
 2481              		.thumb_func
 2483              	printByteToInt:
 2484              	.LFB130:
 677:../Main.c     **** void printByteToInt(char a) {
 2485              		.loc 1 677 0
 2486              		.cfi_startproc
 2487              		@ args = 0, pretend = 0, frame = 16
 2488              		@ frame_needed = 1, uses_anonymous_args = 0
 2489              		@ link register save eliminated.
 2490 0000 80B4     		push	{r7}
 2491              	.LCFI37:
 2492              		.cfi_def_cfa_offset 4
 2493              		.cfi_offset 7, -4
 2494 0002 85B0     		sub	sp, sp, #20
 2495              	.LCFI38:
 2496              		.cfi_def_cfa_offset 24
 2497 0004 00AF     		add	r7, sp, #0
 2498              	.LCFI39:
 2499              		.cfi_def_cfa_register 7
 2500 0006 0346     		mov	r3, r0
 2501 0008 FB71     		strb	r3, [r7, #7]
 678:../Main.c     **** 	char c = a % 10 + '0';
 2502              		.loc 1 678 0
 2503 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2504 000c 4CF6CD43 		movw	r3, #52429
 2505 0010 CCF6CC43 		movt	r3, 52428
 2506 0014 A3FB0213 		umull	r1, r3, r3, r2
 2507 0018 4FEAD301 		lsr	r1, r3, #3
 2508 001c 0B46     		mov	r3, r1
 2509 001e 4FEA8303 		lsl	r3, r3, #2
 2510 0022 5B18     		adds	r3, r3, r1
 2511 0024 4FEA4303 		lsl	r3, r3, #1
 2512 0028 D31A     		subs	r3, r2, r3
 2513 002a DBB2     		uxtb	r3, r3
 2514 002c 03F13003 		add	r3, r3, #48
 2515 0030 FB73     		strb	r3, [r7, #15]
 679:../Main.c     **** 	a /= 10;
 2516              		.loc 1 679 0
 2517 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2518 0034 4CF6CD43 		movw	r3, #52429
 2519 0038 CCF6CC43 		movt	r3, 52428
 2520 003c A3FB0213 		umull	r1, r3, r3, r2
 2521 0040 4FEAD303 		lsr	r3, r3, #3
 2522 0044 FB71     		strb	r3, [r7, #7]
 680:../Main.c     **** 	char d = a % 10 + '0';
 2523              		.loc 1 680 0
 2524 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2525 0048 4CF6CD43 		movw	r3, #52429
 2526 004c CCF6CC43 		movt	r3, 52428
 2527 0050 A3FB0213 		umull	r1, r3, r3, r2
 2528 0054 4FEAD301 		lsr	r1, r3, #3
 2529 0058 0B46     		mov	r3, r1
 2530 005a 4FEA8303 		lsl	r3, r3, #2
 2531 005e 5B18     		adds	r3, r3, r1
 2532 0060 4FEA4303 		lsl	r3, r3, #1
 2533 0064 D31A     		subs	r3, r2, r3
 2534 0066 DBB2     		uxtb	r3, r3
 2535 0068 03F13003 		add	r3, r3, #48
 2536 006c BB73     		strb	r3, [r7, #14]
 681:../Main.c     **** 	a /= 10;
 2537              		.loc 1 681 0
 2538 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2539 0070 4CF6CD43 		movw	r3, #52429
 2540 0074 CCF6CC43 		movt	r3, 52428
 2541 0078 A3FB0213 		umull	r1, r3, r3, r2
 2542 007c 4FEAD303 		lsr	r3, r3, #3
 2543 0080 FB71     		strb	r3, [r7, #7]
 682:../Main.c     **** 	char e = a % 10 + '0';
 2544              		.loc 1 682 0
 2545 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2546 0084 4CF6CD43 		movw	r3, #52429
 2547 0088 CCF6CC43 		movt	r3, 52428
 2548 008c A3FB0213 		umull	r1, r3, r3, r2
 2549 0090 4FEAD301 		lsr	r1, r3, #3
 2550 0094 0B46     		mov	r3, r1
 2551 0096 4FEA8303 		lsl	r3, r3, #2
 2552 009a 5B18     		adds	r3, r3, r1
 2553 009c 4FEA4303 		lsl	r3, r3, #1
 2554 00a0 D31A     		subs	r3, r2, r3
 2555 00a2 DBB2     		uxtb	r3, r3
 2556 00a4 03F13003 		add	r3, r3, #48
 2557 00a8 7B73     		strb	r3, [r7, #13]
 683:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2558              		.loc 1 683 0
 2559 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2560 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2561 00b2 1B68     		ldr	r3, [r3, #0]
 2562 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2563 00b6 C3F88021 		str	r2, [r3, #384]
 684:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2564              		.loc 1 684 0
 2565 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2566 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2567 00c2 1B68     		ldr	r3, [r3, #0]
 2568 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2569 00c6 C3F88021 		str	r2, [r3, #384]
 685:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2570              		.loc 1 685 0
 2571 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2572 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2573 00d2 1B68     		ldr	r3, [r3, #0]
 2574 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2575 00d6 C3F88021 		str	r2, [r3, #384]
 686:../Main.c     **** 
 687:../Main.c     **** }
 2576              		.loc 1 687 0
 2577 00da 07F11407 		add	r7, r7, #20
 2578 00de BD46     		mov	sp, r7
 2579 00e0 80BC     		pop	{r7}
 2580 00e2 7047     		bx	lr
 2581              		.cfi_endproc
 2582              	.LFE130:
 2584              		.section	.text.VADC0_C0_2_IRQHandler,"ax",%progbits
 2585              		.align	2
 2586              		.global	VADC0_C0_2_IRQHandler
 2587              		.thumb
 2588              		.thumb_func
 2590              	VADC0_C0_2_IRQHandler:
 2591              	.LFB131:
 688:../Main.c     **** 
 689:../Main.c     **** void adc_event(void) {
 2592              		.loc 1 689 0
 2593              		.cfi_startproc
 2594              		@ args = 0, pretend = 0, frame = 0
 2595              		@ frame_needed = 1, uses_anonymous_args = 0
 2596 0000 80B5     		push	{r7, lr}
 2597              	.LCFI40:
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 7, -8
 2600              		.cfi_offset 14, -4
 2601 0002 00AF     		add	r7, sp, #0
 2602              	.LCFI41:
 2603              		.cfi_def_cfa_register 7
 690:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 2604              		.loc 1 690 0
 2605 0004 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 2606 0008 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 2607 000c 40F20001 		movw	r1, #:lower16:result
 2608 0010 C0F20001 		movt	r1, #:upper16:result
 2609 0014 FFF7FEFF 		bl	ADC001_GetResult
 691:../Main.c     **** }
 2610              		.loc 1 691 0
 2611 0018 80BD     		pop	{r7, pc}
 2612              		.cfi_endproc
 2613              	.LFE131:
 2615 001a 00BF     		.section	.text.updateButtonStates,"ax",%progbits
 2616              		.align	2
 2617              		.global	updateButtonStates
 2618              		.thumb
 2619              		.thumb_func
 2621              	updateButtonStates:
 2622              	.LFB132:
 692:../Main.c     **** 
 693:../Main.c     **** /***************************************************/
 694:../Main.c     **** /*****************FUNCOES BOTOES********************/
 695:../Main.c     **** /***************************************************/
 696:../Main.c     **** 
 697:../Main.c     **** void updateButtonStates() {
 2623              		.loc 1 697 0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 1, uses_anonymous_args = 0
 2627              		@ link register save eliminated.
 2628 0000 80B4     		push	{r7}
 2629              	.LCFI42:
 2630              		.cfi_def_cfa_offset 4
 2631              		.cfi_offset 7, -4
 2632 0002 00AF     		add	r7, sp, #0
 2633              	.LCFI43:
 2634              		.cfi_def_cfa_register 7
 698:../Main.c     **** 	l_um_state_before = l_um_state;
 2635              		.loc 1 698 0
 2636 0004 40F20003 		movw	r3, #:lower16:l_um_state
 2637 0008 C0F20003 		movt	r3, #:upper16:l_um_state
 2638 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2639 000e 40F20003 		movw	r3, #:lower16:l_um_state_before
 2640 0012 C0F20003 		movt	r3, #:upper16:l_um_state_before
 2641 0016 1A70     		strb	r2, [r3, #0]
 699:../Main.c     **** 	l_dois_state_before = l_dois_state;
 2642              		.loc 1 699 0
 2643 0018 40F20003 		movw	r3, #:lower16:l_dois_state
 2644 001c C0F20003 		movt	r3, #:upper16:l_dois_state
 2645 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2646 0022 40F20003 		movw	r3, #:lower16:l_dois_state_before
 2647 0026 C0F20003 		movt	r3, #:upper16:l_dois_state_before
 2648 002a 1A70     		strb	r2, [r3, #0]
 700:../Main.c     **** 	l_tres_state_before = l_tres_state;
 2649              		.loc 1 700 0
 2650 002c 40F20003 		movw	r3, #:lower16:l_tres_state
 2651 0030 C0F20003 		movt	r3, #:upper16:l_tres_state
 2652 0034 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2653 0036 40F20003 		movw	r3, #:lower16:l_tres_state_before
 2654 003a C0F20003 		movt	r3, #:upper16:l_tres_state_before
 2655 003e 1A70     		strb	r2, [r3, #0]
 701:../Main.c     **** 	r_um_state_before = r_um_state;
 2656              		.loc 1 701 0
 2657 0040 40F20003 		movw	r3, #:lower16:r_um_state
 2658 0044 C0F20003 		movt	r3, #:upper16:r_um_state
 2659 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2660 004a 40F20003 		movw	r3, #:lower16:r_um_state_before
 2661 004e C0F20003 		movt	r3, #:upper16:r_um_state_before
 2662 0052 1A70     		strb	r2, [r3, #0]
 702:../Main.c     **** 	r_dois_state_before = r_dois_state;
 2663              		.loc 1 702 0
 2664 0054 40F20003 		movw	r3, #:lower16:r_dois_state
 2665 0058 C0F20003 		movt	r3, #:upper16:r_dois_state
 2666 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2667 005e 40F20003 		movw	r3, #:lower16:r_dois_state_before
 2668 0062 C0F20003 		movt	r3, #:upper16:r_dois_state_before
 2669 0066 1A70     		strb	r2, [r3, #0]
 703:../Main.c     **** 	r_tres_state_before = r_tres_state;
 2670              		.loc 1 703 0
 2671 0068 40F20003 		movw	r3, #:lower16:r_tres_state
 2672 006c C0F20003 		movt	r3, #:upper16:r_tres_state
 2673 0070 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2674 0072 40F20003 		movw	r3, #:lower16:r_tres_state_before
 2675 0076 C0F20003 		movt	r3, #:upper16:r_tres_state_before
 2676 007a 1A70     		strb	r2, [r3, #0]
 704:../Main.c     **** 	cross_state_before = cross_state;
 2677              		.loc 1 704 0
 2678 007c 40F20003 		movw	r3, #:lower16:cross_state
 2679 0080 C0F20003 		movt	r3, #:upper16:cross_state
 2680 0084 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2681 0086 40F20003 		movw	r3, #:lower16:cross_state_before
 2682 008a C0F20003 		movt	r3, #:upper16:cross_state_before
 2683 008e 1A70     		strb	r2, [r3, #0]
 705:../Main.c     **** 	sqr_state_before = sqr_state;
 2684              		.loc 1 705 0
 2685 0090 40F20003 		movw	r3, #:lower16:sqr_state
 2686 0094 C0F20003 		movt	r3, #:upper16:sqr_state
 2687 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2688 009a 40F20003 		movw	r3, #:lower16:sqr_state_before
 2689 009e C0F20003 		movt	r3, #:upper16:sqr_state_before
 2690 00a2 1A70     		strb	r2, [r3, #0]
 706:../Main.c     **** 	triangle_state_before = triangle_state;
 2691              		.loc 1 706 0
 2692 00a4 40F20003 		movw	r3, #:lower16:triangle_state
 2693 00a8 C0F20003 		movt	r3, #:upper16:triangle_state
 2694 00ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2695 00ae 40F20003 		movw	r3, #:lower16:triangle_state_before
 2696 00b2 C0F20003 		movt	r3, #:upper16:triangle_state_before
 2697 00b6 1A70     		strb	r2, [r3, #0]
 707:../Main.c     **** 	circle_state_before = circle_state;
 2698              		.loc 1 707 0
 2699 00b8 40F20003 		movw	r3, #:lower16:circle_state
 2700 00bc C0F20003 		movt	r3, #:upper16:circle_state
 2701 00c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2702 00c2 40F20003 		movw	r3, #:lower16:circle_state_before
 2703 00c6 C0F20003 		movt	r3, #:upper16:circle_state_before
 2704 00ca 1A70     		strb	r2, [r3, #0]
 708:../Main.c     **** 	left_state_before = left_state;
 2705              		.loc 1 708 0
 2706 00cc 40F20003 		movw	r3, #:lower16:left_state
 2707 00d0 C0F20003 		movt	r3, #:upper16:left_state
 2708 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2709 00d6 40F20003 		movw	r3, #:lower16:left_state_before
 2710 00da C0F20003 		movt	r3, #:upper16:left_state_before
 2711 00de 1A70     		strb	r2, [r3, #0]
 709:../Main.c     **** 	right_state_before = right_state;
 2712              		.loc 1 709 0
 2713 00e0 40F20003 		movw	r3, #:lower16:right_state
 2714 00e4 C0F20003 		movt	r3, #:upper16:right_state
 2715 00e8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2716 00ea 40F20003 		movw	r3, #:lower16:right_state_before
 2717 00ee C0F20003 		movt	r3, #:upper16:right_state_before
 2718 00f2 1A70     		strb	r2, [r3, #0]
 710:../Main.c     **** 	up_state_before = up_state;
 2719              		.loc 1 710 0
 2720 00f4 40F20003 		movw	r3, #:lower16:up_state
 2721 00f8 C0F20003 		movt	r3, #:upper16:up_state
 2722 00fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2723 00fe 40F20003 		movw	r3, #:lower16:up_state_before
 2724 0102 C0F20003 		movt	r3, #:upper16:up_state_before
 2725 0106 1A70     		strb	r2, [r3, #0]
 711:../Main.c     **** 	down_state_before = down_state;
 2726              		.loc 1 711 0
 2727 0108 40F20003 		movw	r3, #:lower16:down_state
 2728 010c C0F20003 		movt	r3, #:upper16:down_state
 2729 0110 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2730 0112 40F20003 		movw	r3, #:lower16:down_state_before
 2731 0116 C0F20003 		movt	r3, #:upper16:down_state_before
 2732 011a 1A70     		strb	r2, [r3, #0]
 712:../Main.c     **** 	start_state_before = start_state;
 2733              		.loc 1 712 0
 2734 011c 40F20003 		movw	r3, #:lower16:start_state
 2735 0120 C0F20003 		movt	r3, #:upper16:start_state
 2736 0124 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2737 0126 40F20003 		movw	r3, #:lower16:start_state_before
 2738 012a C0F20003 		movt	r3, #:upper16:start_state_before
 2739 012e 1A70     		strb	r2, [r3, #0]
 713:../Main.c     **** 	select_state_before = select_state;
 2740              		.loc 1 713 0
 2741 0130 40F20003 		movw	r3, #:lower16:select_state
 2742 0134 C0F20003 		movt	r3, #:upper16:select_state
 2743 0138 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2744 013a 40F20003 		movw	r3, #:lower16:select_state_before
 2745 013e C0F20003 		movt	r3, #:upper16:select_state_before
 2746 0142 1A70     		strb	r2, [r3, #0]
 714:../Main.c     **** 
 715:../Main.c     **** 	l_um_state = 0;
 2747              		.loc 1 715 0
 2748 0144 40F20003 		movw	r3, #:lower16:l_um_state
 2749 0148 C0F20003 		movt	r3, #:upper16:l_um_state
 2750 014c 4FF00002 		mov	r2, #0
 2751 0150 1A70     		strb	r2, [r3, #0]
 716:../Main.c     **** 	l_dois_state = 0;
 2752              		.loc 1 716 0
 2753 0152 40F20003 		movw	r3, #:lower16:l_dois_state
 2754 0156 C0F20003 		movt	r3, #:upper16:l_dois_state
 2755 015a 4FF00002 		mov	r2, #0
 2756 015e 1A70     		strb	r2, [r3, #0]
 717:../Main.c     **** 	l_tres_state = 0;
 2757              		.loc 1 717 0
 2758 0160 40F20003 		movw	r3, #:lower16:l_tres_state
 2759 0164 C0F20003 		movt	r3, #:upper16:l_tres_state
 2760 0168 4FF00002 		mov	r2, #0
 2761 016c 1A70     		strb	r2, [r3, #0]
 718:../Main.c     **** 	r_um_state = 0;
 2762              		.loc 1 718 0
 2763 016e 40F20003 		movw	r3, #:lower16:r_um_state
 2764 0172 C0F20003 		movt	r3, #:upper16:r_um_state
 2765 0176 4FF00002 		mov	r2, #0
 2766 017a 1A70     		strb	r2, [r3, #0]
 719:../Main.c     **** 	r_dois_state = 0;
 2767              		.loc 1 719 0
 2768 017c 40F20003 		movw	r3, #:lower16:r_dois_state
 2769 0180 C0F20003 		movt	r3, #:upper16:r_dois_state
 2770 0184 4FF00002 		mov	r2, #0
 2771 0188 1A70     		strb	r2, [r3, #0]
 720:../Main.c     **** 	r_tres_state = 0;
 2772              		.loc 1 720 0
 2773 018a 40F20003 		movw	r3, #:lower16:r_tres_state
 2774 018e C0F20003 		movt	r3, #:upper16:r_tres_state
 2775 0192 4FF00002 		mov	r2, #0
 2776 0196 1A70     		strb	r2, [r3, #0]
 721:../Main.c     **** 	cross_state = 0;
 2777              		.loc 1 721 0
 2778 0198 40F20003 		movw	r3, #:lower16:cross_state
 2779 019c C0F20003 		movt	r3, #:upper16:cross_state
 2780 01a0 4FF00002 		mov	r2, #0
 2781 01a4 1A70     		strb	r2, [r3, #0]
 722:../Main.c     **** 	sqr_state = 0;
 2782              		.loc 1 722 0
 2783 01a6 40F20003 		movw	r3, #:lower16:sqr_state
 2784 01aa C0F20003 		movt	r3, #:upper16:sqr_state
 2785 01ae 4FF00002 		mov	r2, #0
 2786 01b2 1A70     		strb	r2, [r3, #0]
 723:../Main.c     **** 	triangle_state = 0;
 2787              		.loc 1 723 0
 2788 01b4 40F20003 		movw	r3, #:lower16:triangle_state
 2789 01b8 C0F20003 		movt	r3, #:upper16:triangle_state
 2790 01bc 4FF00002 		mov	r2, #0
 2791 01c0 1A70     		strb	r2, [r3, #0]
 724:../Main.c     **** 	circle_state = 0;
 2792              		.loc 1 724 0
 2793 01c2 40F20003 		movw	r3, #:lower16:circle_state
 2794 01c6 C0F20003 		movt	r3, #:upper16:circle_state
 2795 01ca 4FF00002 		mov	r2, #0
 2796 01ce 1A70     		strb	r2, [r3, #0]
 725:../Main.c     **** 	left_state = 0;
 2797              		.loc 1 725 0
 2798 01d0 40F20003 		movw	r3, #:lower16:left_state
 2799 01d4 C0F20003 		movt	r3, #:upper16:left_state
 2800 01d8 4FF00002 		mov	r2, #0
 2801 01dc 1A70     		strb	r2, [r3, #0]
 726:../Main.c     **** 	right_state = 0;
 2802              		.loc 1 726 0
 2803 01de 40F20003 		movw	r3, #:lower16:right_state
 2804 01e2 C0F20003 		movt	r3, #:upper16:right_state
 2805 01e6 4FF00002 		mov	r2, #0
 2806 01ea 1A70     		strb	r2, [r3, #0]
 727:../Main.c     **** 	up_state = 0;
 2807              		.loc 1 727 0
 2808 01ec 40F20003 		movw	r3, #:lower16:up_state
 2809 01f0 C0F20003 		movt	r3, #:upper16:up_state
 2810 01f4 4FF00002 		mov	r2, #0
 2811 01f8 1A70     		strb	r2, [r3, #0]
 728:../Main.c     **** 	down_state = 0;
 2812              		.loc 1 728 0
 2813 01fa 40F20003 		movw	r3, #:lower16:down_state
 2814 01fe C0F20003 		movt	r3, #:upper16:down_state
 2815 0202 4FF00002 		mov	r2, #0
 2816 0206 1A70     		strb	r2, [r3, #0]
 729:../Main.c     **** 	start_state = 0;
 2817              		.loc 1 729 0
 2818 0208 40F20003 		movw	r3, #:lower16:start_state
 2819 020c C0F20003 		movt	r3, #:upper16:start_state
 2820 0210 4FF00002 		mov	r2, #0
 2821 0214 1A70     		strb	r2, [r3, #0]
 730:../Main.c     **** 	select_state = 0;
 2822              		.loc 1 730 0
 2823 0216 40F20003 		movw	r3, #:lower16:select_state
 2824 021a C0F20003 		movt	r3, #:upper16:select_state
 2825 021e 4FF00002 		mov	r2, #0
 2826 0222 1A70     		strb	r2, [r3, #0]
 731:../Main.c     **** }
 2827              		.loc 1 731 0
 2828 0224 BD46     		mov	sp, r7
 2829 0226 80BC     		pop	{r7}
 2830 0228 7047     		bx	lr
 2831              		.cfi_endproc
 2832              	.LFE132:
 2834 022a 00BF     		.section	.text.turbo,"ax",%progbits
 2835              		.align	2
 2836              		.global	turbo
 2837              		.thumb
 2838              		.thumb_func
 2840              	turbo:
 2841              	.LFB133:
 732:../Main.c     **** 
 733:../Main.c     **** void turbo(void) {
 2842              		.loc 1 733 0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 0
 2845              		@ frame_needed = 1, uses_anonymous_args = 0
 2846              		@ link register save eliminated.
 2847 0000 80B4     		push	{r7}
 2848              	.LCFI44:
 2849              		.cfi_def_cfa_offset 4
 2850              		.cfi_offset 7, -4
 2851 0002 00AF     		add	r7, sp, #0
 2852              	.LCFI45:
 2853              		.cfi_def_cfa_register 7
 734:../Main.c     **** 	pwm_max = 95;
 2854              		.loc 1 734 0
 2855 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2856 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2857 000c 4FF05F02 		mov	r2, #95
 2858 0010 1A70     		strb	r2, [r3, #0]
 735:../Main.c     **** }
 2859              		.loc 1 735 0
 2860 0012 BD46     		mov	sp, r7
 2861 0014 80BC     		pop	{r7}
 2862 0016 7047     		bx	lr
 2863              		.cfi_endproc
 2864              	.LFE133:
 2866              		.section	.text.shunt,"ax",%progbits
 2867              		.align	2
 2868              		.global	shunt
 2869              		.thumb
 2870              		.thumb_func
 2872              	shunt:
 2873              	.LFB134:
 736:../Main.c     **** 
 737:../Main.c     **** void shunt(void) {
 2874              		.loc 1 737 0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 0
 2877              		@ frame_needed = 1, uses_anonymous_args = 0
 2878              		@ link register save eliminated.
 2879 0000 80B4     		push	{r7}
 2880              	.LCFI46:
 2881              		.cfi_def_cfa_offset 4
 2882              		.cfi_offset 7, -4
 2883 0002 00AF     		add	r7, sp, #0
 2884              	.LCFI47:
 2885              		.cfi_def_cfa_register 7
 738:../Main.c     **** 	pwm_max = 40;
 2886              		.loc 1 738 0
 2887 0004 40F20003 		movw	r3, #:lower16:pwm_max
 2888 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 2889 000c 4FF02802 		mov	r2, #40
 2890 0010 1A70     		strb	r2, [r3, #0]
 739:../Main.c     **** }
 2891              		.loc 1 739 0
 2892 0012 BD46     		mov	sp, r7
 2893 0014 80BC     		pop	{r7}
 2894 0016 7047     		bx	lr
 2895              		.cfi_endproc
 2896              	.LFE134:
 2898              		.section	.text.flip,"ax",%progbits
 2899              		.align	2
 2900              		.global	flip
 2901              		.thumb
 2902              		.thumb_func
 2904              	flip:
 2905              	.LFB135:
 740:../Main.c     **** 
 741:../Main.c     **** void flip(void) {
 2906              		.loc 1 741 0
 2907              		.cfi_startproc
 2908              		@ args = 0, pretend = 0, frame = 0
 2909              		@ frame_needed = 1, uses_anonymous_args = 0
 2910              		@ link register save eliminated.
 2911 0000 80B4     		push	{r7}
 2912              	.LCFI48:
 2913              		.cfi_def_cfa_offset 4
 2914              		.cfi_offset 7, -4
 2915 0002 00AF     		add	r7, sp, #0
 2916              	.LCFI49:
 2917              		.cfi_def_cfa_register 7
 742:../Main.c     **** 	flipped = !flipped;
 2918              		.loc 1 742 0
 2919 0004 40F20003 		movw	r3, #:lower16:flipped
 2920 0008 C0F20003 		movt	r3, #:upper16:flipped
 2921 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2922 000e 002B     		cmp	r3, #0
 2923 0010 14BF     		ite	ne
 2924 0012 0023     		movne	r3, #0
 2925 0014 0123     		moveq	r3, #1
 2926 0016 DBB2     		uxtb	r3, r3
 2927 0018 1A46     		mov	r2, r3
 2928 001a 40F20003 		movw	r3, #:lower16:flipped
 2929 001e C0F20003 		movt	r3, #:upper16:flipped
 2930 0022 1A70     		strb	r2, [r3, #0]
 743:../Main.c     **** }
 2931              		.loc 1 743 0
 2932 0024 BD46     		mov	sp, r7
 2933 0026 80BC     		pop	{r7}
 2934 0028 7047     		bx	lr
 2935              		.cfi_endproc
 2936              	.LFE135:
 2938 002a 00BF     		.text
 2939              	.Letext0:
 2940              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2941              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2942              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 2943              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 2944              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 2945              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 2946              		.file 9 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 2947              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2948              		.file 11 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 2949              		.file 12 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 2950              		.file 13 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:24     .bss:00000000 l_um
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:21     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:30     .bss:00000004 l_dois
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:36     .bss:00000008 l_tres
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:42     .bss:0000000c r_um
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:48     .bss:00000010 r_dois
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:54     .bss:00000014 r_tres
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:60     .bss:00000018 cross
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:66     .bss:0000001c sqr
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:72     .bss:00000020 triangle
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:78     .bss:00000024 circle
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:84     .bss:00000028 left
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:90     .bss:0000002c right
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:96     .bss:00000030 up
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:102    .bss:00000034 down
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:108    .bss:00000038 start
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:114    .bss:0000003c select
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:119    .bss:00000040 l_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:124    .bss:00000041 l_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:129    .bss:00000042 l_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:134    .bss:00000043 r_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:139    .bss:00000044 r_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:144    .bss:00000045 r_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:149    .bss:00000046 cross_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:154    .bss:00000047 sqr_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:159    .bss:00000048 triangle_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:164    .bss:00000049 circle_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:169    .bss:0000004a left_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:174    .bss:0000004b right_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:179    .bss:0000004c up_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:184    .bss:0000004d down_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:189    .bss:0000004e start_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:194    .bss:0000004f select_state
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:199    .bss:00000050 l_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:204    .bss:00000051 l_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:209    .bss:00000052 l_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:214    .bss:00000053 r_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:219    .bss:00000054 r_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:224    .bss:00000055 r_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:229    .bss:00000056 cross_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:234    .bss:00000057 sqr_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:239    .bss:00000058 triangle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:244    .bss:00000059 circle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:249    .bss:0000005a left_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:254    .bss:0000005b right_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:259    .bss:0000005c up_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:264    .bss:0000005d down_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:269    .bss:0000005e start_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:274    .bss:0000005f select_state_before
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:282    .data:00000000 data_R
                            *COM*:00000005 data_E
                            *COM*:00000001 psx_status
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:290    .bss:00000060 flipped
                            *COM*:00000004 result
                            *COM*:00000001 pwm_max
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:295    .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:300    .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1264   .text.configure_E:00000000 configure_E
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2174   .text.psxHandShake:00000000 psxHandShake
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1656   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2053   .text.psxLeControle:00000000 psxLeControle
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1468   .text.write_E:00000000 write_E
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2621   .text.updateButtonStates:00000000 updateButtonStates
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1106   .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1111   .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2425   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1213   .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1208   .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1259   .text.configure_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1463   .text.write_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1651   .text.psxConfiguraControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1687   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1793   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1923   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1682   .text.psxEnterConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2285   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1788   .text.psxSetAnalogMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:1918   .text.psxExitConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2048   .text.psxLeControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2169   .text.psxHandShake:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2280   .text.psxTrocaByte:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2420   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2478   .text.printByteToInt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2483   .text.printByteToInt:00000000 printByteToInt
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2585   .text.VADC0_C0_2_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2590   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2616   .text.updateButtonStates:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2835   .text.turbo:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2840   .text.turbo:00000000 turbo
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2867   .text.shunt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2872   .text.shunt:00000000 shunt
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2899   .text.flip:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccEal8Ih.s:2904   .text.flip:00000000 flip
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d

UNDEFINED SYMBOLS
DAVE_Init
ADC001_Handle0
ADC001_GenerateLoadEvent
ADC001_GetResult
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
