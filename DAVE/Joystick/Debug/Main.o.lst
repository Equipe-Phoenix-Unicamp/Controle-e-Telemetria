   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	l_um
  20              		.data
  21              		.align	2
  24              	l_um:
  25 0000 00000000 		.word	turbo2
  26              		.global	l_dois
  27              		.bss
  28              		.align	2
  31              	l_dois:
  32 0000 00000000 		.space	4
  33              		.global	l_tres
  34              		.align	2
  37              	l_tres:
  38 0004 00000000 		.space	4
  39              		.global	r_um
  40              		.data
  41              		.align	2
  44              	r_um:
  45 0004 00000000 		.word	turbo
  46              		.global	r_dois
  47              		.bss
  48              		.align	2
  51              	r_dois:
  52 0008 00000000 		.space	4
  53              		.global	r_tres
  54              		.align	2
  57              	r_tres:
  58 000c 00000000 		.space	4
  59              		.global	cross
  60              		.data
  61              		.align	2
  64              	cross:
  65 0008 00000000 		.word	flip
  66              		.global	sqr
  67              		.align	2
  70              	sqr:
  71 000c 00000000 		.word	changeMode
  72              		.global	triangle
  73              		.align	2
  76              	triangle:
  77 0010 00000000 		.word	changeMode
  78              		.global	circle
  79              		.align	2
  82              	circle:
  83 0014 00000000 		.word	changeMode
  84              		.global	left
  85              		.bss
  86              		.align	2
  89              	left:
  90 0010 00000000 		.space	4
  91              		.global	right
  92              		.align	2
  95              	right:
  96 0014 00000000 		.space	4
  97              		.global	up
  98              		.align	2
 101              	up:
 102 0018 00000000 		.space	4
 103              		.global	down
 104              		.align	2
 107              	down:
 108 001c 00000000 		.space	4
 109              		.global	start
 110              		.align	2
 113              	start:
 114 0020 00000000 		.space	4
 115              		.global	select
 116              		.align	2
 119              	select:
 120 0024 00000000 		.space	4
 121              		.global	l_um_state
 124              	l_um_state:
 125 0028 00       		.space	1
 126              		.global	l_dois_state
 129              	l_dois_state:
 130 0029 00       		.space	1
 131              		.global	l_tres_state
 134              	l_tres_state:
 135 002a 00       		.space	1
 136              		.global	r_um_state
 139              	r_um_state:
 140 002b 00       		.space	1
 141              		.global	r_dois_state
 144              	r_dois_state:
 145 002c 00       		.space	1
 146              		.global	r_tres_state
 149              	r_tres_state:
 150 002d 00       		.space	1
 151              		.global	cross_state
 154              	cross_state:
 155 002e 00       		.space	1
 156              		.global	sqr_state
 159              	sqr_state:
 160 002f 00       		.space	1
 161              		.global	triangle_state
 164              	triangle_state:
 165 0030 00       		.space	1
 166              		.global	circle_state
 169              	circle_state:
 170 0031 00       		.space	1
 171              		.global	left_state
 174              	left_state:
 175 0032 00       		.space	1
 176              		.global	right_state
 179              	right_state:
 180 0033 00       		.space	1
 181              		.global	up_state
 184              	up_state:
 185 0034 00       		.space	1
 186              		.global	down_state
 189              	down_state:
 190 0035 00       		.space	1
 191              		.global	start_state
 194              	start_state:
 195 0036 00       		.space	1
 196              		.global	select_state
 199              	select_state:
 200 0037 00       		.space	1
 201              		.global	l_um_state_before
 204              	l_um_state_before:
 205 0038 00       		.space	1
 206              		.global	l_dois_state_before
 209              	l_dois_state_before:
 210 0039 00       		.space	1
 211              		.global	l_tres_state_before
 214              	l_tres_state_before:
 215 003a 00       		.space	1
 216              		.global	r_um_state_before
 219              	r_um_state_before:
 220 003b 00       		.space	1
 221              		.global	r_dois_state_before
 224              	r_dois_state_before:
 225 003c 00       		.space	1
 226              		.global	r_tres_state_before
 229              	r_tres_state_before:
 230 003d 00       		.space	1
 231              		.global	cross_state_before
 234              	cross_state_before:
 235 003e 00       		.space	1
 236              		.global	sqr_state_before
 239              	sqr_state_before:
 240 003f 00       		.space	1
 241              		.global	triangle_state_before
 244              	triangle_state_before:
 245 0040 00       		.space	1
 246              		.global	circle_state_before
 249              	circle_state_before:
 250 0041 00       		.space	1
 251              		.global	left_state_before
 254              	left_state_before:
 255 0042 00       		.space	1
 256              		.global	right_state_before
 259              	right_state_before:
 260 0043 00       		.space	1
 261              		.global	up_state_before
 264              	up_state_before:
 265 0044 00       		.space	1
 266              		.global	down_state_before
 269              	down_state_before:
 270 0045 00       		.space	1
 271              		.global	start_state_before
 274              	start_state_before:
 275 0046 00       		.space	1
 276              		.global	select_state_before
 279              	select_state_before:
 280 0047 00       		.space	1
 281              		.comm	psxDado,24,4
 282              		.comm	configuration,15,4
 283              		.global	data_R
 284              		.data
 287              	data_R:
 288 0018 30       		.byte	48
 289              		.comm	data_E,5,4
 290              		.comm	psx_status,1,1
 291              		.global	flipped
 292              		.bss
 295              	flipped:
 296 0048 00       		.space	1
 297              		.comm	result,4,4
 298              		.comm	pwm_max,1,1
 299              		.global	mode
 300              		.data
 303              	mode:
 304 0019 01       		.byte	1
 305              		.global	acceleration_ticks
 306 001a 0000     		.bss
 307 0049 000000   		.align	2
 310              	acceleration_ticks:
 311 004c 00000000 		.space	4
 312              		.global	started_acceleration
 315              	started_acceleration:
 316 0050 00       		.space	1
 317              		.global	last_value_left
 318 0051 000000   		.align	2
 321              	last_value_left:
 322 0054 00000000 		.space	4
 323              		.global	last_value_right
 324              		.align	2
 327              	last_value_right:
 328 0058 00000000 		.space	4
 329              		.global	offset_ramp
 330              		.align	2
 333              	offset_ramp:
 334 005c 00000000 		.space	4
 335              		.section	.text.main,"ax",%progbits
 336              		.align	2
 337              		.global	main
 338              		.thumb
 339              		.thumb_func
 341              	main:
 342              	.LFB117:
 343              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 20/11/2014
   5:../Main.c     ****  *      Author: Carlos
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** /* DADO3:
   9:../Main.c     ****  BIT 0: BLAH2
  10:../Main.c     ****  BIT 1: BUZINA
  11:../Main.c     ****  BIT 2: ENABLE
  12:../Main.c     ****  BIT 3: ALBH2
  13:../Main.c     ****  BIT 4: BLAH1
  14:../Main.c     ****  BIT 5: ALBH1
  15:../Main.c     ****  */
  16:../Main.c     **** 
  17:../Main.c     **** /*
  18:../Main.c     ****  * Potenciometro(costas)
  19:../Main.c     ****  * |	|
  20:../Main.c     ****  * Gnd	Sig
  21:../Main.c     ****  *
  22:../Main.c     ****  *
  23:../Main.c     ****  *
  24:../Main.c     ****  *
  25:../Main.c     ****  *
  26:../Main.c     ****  * |
  27:../Main.c     ****  * Vcc
  28:../Main.c     ****  * */
  29:../Main.c     **** 
  30:../Main.c     **** /***************************************************
  31:../Main.c     ****  * Codigo organizado para uso no XI WINTER CHALLENGE
  32:../Main.c     ****  *Byte 0 : LEDS (? definido no spartacus, retirar quando trocar prgrama do feather)
  33:../Main.c     ****  *Byte 1 : PWM 1
  34:../Main.c     ****  *Byte 2 : PWM 2
  35:../Main.c     ****  *Byte 3 : SENTIDOS
  36:../Main.c     ****  *Byte 3 : PWM 3 (Arma)
  37:../Main.c     ****  ***************************************************/
  38:../Main.c     **** 
  39:../Main.c     **** //TODO Separar partes do codigo em arquivos diferentes
  40:../Main.c     **** /***************************************************/
  41:../Main.c     **** /*************DECLARACAO DAS DEFINICOES*************/
  42:../Main.c     **** /***************************************************/
  43:../Main.c     **** 
  44:../Main.c     **** #define NULL 0
  45:../Main.c     **** //Defines referentes aos limites
  46:../Main.c     **** #define PWM_LIM 70
  47:../Main.c     **** 
  48:../Main.c     **** //Defines referentes ao protocolo
  49:../Main.c     **** #define BYTES_TO_SEND 5
  50:../Main.c     **** //Defines referentes ao byte DADO 3
  51:../Main.c     **** #define	BLAH2		0
  52:../Main.c     **** #define	BUZINA		1
  53:../Main.c     **** #define	ENABLE		2
  54:../Main.c     **** #define	ALBH2		3
  55:../Main.c     **** #define	BLAH1		4
  56:../Main.c     **** #define	ALBH1		5
  57:../Main.c     **** //Defines referentes ao transceptor
  58:../Main.c     **** #define CS	 	IO004_Handle1
  59:../Main.c     **** #define CLK1 	IO004_Handle2
  60:../Main.c     **** #define DATA 	IO004_Handle4
  61:../Main.c     **** #define DR1		IO004_Handle5
  62:../Main.c     **** #define CE 		IO004_Handle6
  63:../Main.c     **** //Defines referentes ao controle
  64:../Main.c     **** #define ATT 		IO004_Handle11 //Amarelo
  65:../Main.c     **** #define CMD			IO004_Handle12 //Laranja
  66:../Main.c     **** #define CONT_DADO 	IO004_Handle9 //Marrom
  67:../Main.c     **** #define CONT_CLK 	IO004_Handle10 //Azul
  68:../Main.c     **** //Defines referentes aos delays do controle
  69:../Main.c     **** #define tempoInicio     300
  70:../Main.c     **** #define tempoClk        300
  71:../Main.c     **** #define tempoEntreByte  100
  72:../Main.c     **** //Defines referentes aos LEDS da Relax kit (debug only)
  73:../Main.c     **** #define LED1 IO004_Handle7
  74:../Main.c     **** #define LED2 IO004_Handle8
  75:../Main.c     **** //Defines dos botoes para realizar as callbacks
  76:../Main.c     **** #define L_UM (psxDado[1] & (1<<2))
  77:../Main.c     **** #define L_DOIS (psxDado[1] & (1<<0))
  78:../Main.c     **** #define L_TRES (psxDado[0] & (1<<2))
  79:../Main.c     **** #define R_UM (psxDado[1] & (1<<3))
  80:../Main.c     **** #define R_DOIS (psxDado[1] & (1<<1))
  81:../Main.c     **** #define R_TRES (psxDado[0] & (1<<1))
  82:../Main.c     **** #define CROSS (psxDado[1] & (1<<6))
  83:../Main.c     **** #define SQR (psxDado[1] & (1<<7))
  84:../Main.c     **** #define TRIANGLE (psxDado[1] & (1<<4))
  85:../Main.c     **** #define CIRCLE (psxDado[1] & (1<<5))
  86:../Main.c     **** #define LEFT (psxDado[0] & (1<<7))
  87:../Main.c     **** #define RIGHT (psxDado[0] & (1<<5))
  88:../Main.c     **** #define UP (psxDado[0] & (1<<4))
  89:../Main.c     **** #define DOWN (psxDado[0] & (1<<6))
  90:../Main.c     **** #define START (psxDado[0] & (1<<3))
  91:../Main.c     **** #define SELECT (psxDado[0] & (1<<0))
  92:../Main.c     **** 
  93:../Main.c     **** 
  94:../Main.c     **** 
  95:../Main.c     **** //Defines referentes a testes de locomocao
  96:../Main.c     **** #define LINEAR 	2
  97:../Main.c     **** #define DEGRAU 	0
  98:../Main.c     **** #define EXP	1
  99:../Main.c     **** 
 100:../Main.c     **** /***************************************************/
 101:../Main.c     **** /*********************INCLUDES**********************/
 102:../Main.c     **** /***************************************************/
 103:../Main.c     **** 
 104:../Main.c     **** #include <DAVE3.h>		//Declarations from DAVE3 Code Generation (includes SFR declaration)
 105:../Main.c     **** /***************************************************/
 106:../Main.c     **** /**************DECLARACAO DAS FUNCOES***************/
 107:../Main.c     **** /***************************************************/
 108:../Main.c     **** 
 109:../Main.c     **** void psxLeControle();
 110:../Main.c     **** int psxTrocaByte(int byteDado);
 111:../Main.c     **** int psxLeByte();
 112:../Main.c     **** void delay(long unsigned int i);
 113:../Main.c     **** void pulse_R();
 114:../Main.c     **** void configure_R();
 115:../Main.c     **** void configure_E();
 116:../Main.c     **** void write_E();
 117:../Main.c     **** void read_R();
 118:../Main.c     **** void delay(long unsigned int i);
 119:../Main.c     **** void printByteToInt(char a);
 120:../Main.c     **** void psxConfiguraControle();
 121:../Main.c     **** void psxEnterConfigMode();
 122:../Main.c     **** void psxExitConfigMode();
 123:../Main.c     **** void psxSetAnalogMode();
 124:../Main.c     **** void psxHandShake();
 125:../Main.c     **** void updateButtonStates();
 126:../Main.c     **** void flip(void);
 127:../Main.c     **** void turbo(void);
 128:../Main.c     **** void turbo2(void);
 129:../Main.c     **** void changeMode(char a_mode);
 130:../Main.c     **** void Software_Timers_Init();
 131:../Main.c     **** void Tick_Handler(void);
 132:../Main.c     **** 
 133:../Main.c     **** /***************************************************/
 134:../Main.c     **** /*********CALLBACK PARA BOTOES DO CONTROLE**********/
 135:../Main.c     **** /***************************************************/
 136:../Main.c     **** 
 137:../Main.c     **** void (*l_um)(void) = turbo2;
 138:../Main.c     **** void (*l_dois)(void) = NULL;
 139:../Main.c     **** void (*l_tres)(void) = NULL;
 140:../Main.c     **** void (*r_um)(void) = turbo;
 141:../Main.c     **** void (*r_dois)(void) = NULL;
 142:../Main.c     **** void (*r_tres)(void) = NULL;
 143:../Main.c     **** void (*cross)(void) = flip;
 144:../Main.c     **** void (*sqr)(char m) = changeMode;
 145:../Main.c     **** void (*triangle)(char m) = changeMode;
 146:../Main.c     **** void (*circle)(char m) = changeMode;
 147:../Main.c     **** void (*left)(void) = NULL;
 148:../Main.c     **** void (*right)(void) = NULL;
 149:../Main.c     **** void (*up)(void) = NULL;
 150:../Main.c     **** void (*down)(void) = NULL;
 151:../Main.c     **** void (*start)(void) = NULL;
 152:../Main.c     **** void (*select)(void) = NULL;
 153:../Main.c     **** 
 154:../Main.c     **** //Variaveis de controle do joystick
 155:../Main.c     **** BOOLType l_um_state = 0;
 156:../Main.c     **** BOOLType l_dois_state = 0;
 157:../Main.c     **** BOOLType l_tres_state = 0;
 158:../Main.c     **** BOOLType r_um_state = 0;
 159:../Main.c     **** BOOLType r_dois_state = 0;
 160:../Main.c     **** BOOLType r_tres_state = 0;
 161:../Main.c     **** BOOLType cross_state = 0;
 162:../Main.c     **** BOOLType sqr_state = 0;
 163:../Main.c     **** BOOLType triangle_state = 0;
 164:../Main.c     **** BOOLType circle_state = 0;
 165:../Main.c     **** BOOLType left_state = 0;
 166:../Main.c     **** BOOLType right_state = 0;
 167:../Main.c     **** BOOLType up_state = 0;
 168:../Main.c     **** BOOLType down_state = 0;
 169:../Main.c     **** BOOLType start_state = 0;
 170:../Main.c     **** BOOLType select_state = 0;
 171:../Main.c     **** 
 172:../Main.c     **** BOOLType l_um_state_before = 0;
 173:../Main.c     **** BOOLType l_dois_state_before = 0;
 174:../Main.c     **** BOOLType l_tres_state_before = 0;
 175:../Main.c     **** BOOLType r_um_state_before = 0;
 176:../Main.c     **** BOOLType r_dois_state_before = 0;
 177:../Main.c     **** BOOLType r_tres_state_before = 0;
 178:../Main.c     **** BOOLType cross_state_before = 0;
 179:../Main.c     **** BOOLType sqr_state_before = 0;
 180:../Main.c     **** BOOLType triangle_state_before = 0;
 181:../Main.c     **** BOOLType circle_state_before = 0;
 182:../Main.c     **** BOOLType left_state_before = 0;
 183:../Main.c     **** BOOLType right_state_before = 0;
 184:../Main.c     **** BOOLType up_state_before = 0;
 185:../Main.c     **** BOOLType down_state_before = 0;
 186:../Main.c     **** BOOLType start_state_before = 0;
 187:../Main.c     **** BOOLType select_state_before = 0;
 188:../Main.c     **** 
 189:../Main.c     **** /***************************************************/
 190:../Main.c     **** /**********DECLARACAO DE VARIAVEIS GLOBAIS**********/
 191:../Main.c     **** /***************************************************/
 192:../Main.c     **** 
 193:../Main.c     **** int psxDado[6];
 194:../Main.c     **** char configuration[15];
 195:../Main.c     **** char data_R = '0';
 196:../Main.c     **** char data_E[BYTES_TO_SEND];
 197:../Main.c     **** uint8_t psx_status;
 198:../Main.c     **** /*Booleanos de controle para estados do robo*/
 199:../Main.c     **** BOOLType flipped = 0;
 200:../Main.c     **** ADC001_ResultHandleType result;
 201:../Main.c     **** uint8_t pwm_max;
 202:../Main.c     **** char mode = EXP;
 203:../Main.c     **** uint32_t acceleration_ticks = 0UL;
 204:../Main.c     **** char started_acceleration = 0;
 205:../Main.c     **** int last_value_left = 0;
 206:../Main.c     **** int last_value_right = 0;
 207:../Main.c     **** int offset_ramp = 0;
 208:../Main.c     **** 
 209:../Main.c     **** 
 210:../Main.c     **** /***************************************************/
 211:../Main.c     **** /***********************MAIN************************/
 212:../Main.c     **** /***************************************************/
 213:../Main.c     **** 
 214:../Main.c     **** int main(void) {
 344              		.loc 1 214 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 16
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348 0000 80B5     		push	{r7, lr}
 349              	.LCFI0:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 84B0     		sub	sp, sp, #16
 354              	.LCFI1:
 355              		.cfi_def_cfa_offset 24
 356 0004 00AF     		add	r7, sp, #0
 357              	.LCFI2:
 358              		.cfi_def_cfa_register 7
 215:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
 216:../Main.c     **** 	PORT0 ->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 359              		.loc 1 216 0
 360 0006 4FF40043 		mov	r3, #32768
 361 000a C4F60203 		movt	r3, 18434
 362 000e 4FF40042 		mov	r2, #32768
 363 0012 C4F60202 		movt	r2, 18434
 364 0016 526F     		ldr	r2, [r2, #116]
 365 0018 22F44042 		bic	r2, r2, #49152
 366 001c 5A67     		str	r2, [r3, #116]
 217:../Main.c     **** 	PORT0 ->HWSEL |= 0 << 14;
 367              		.loc 1 217 0
 368 001e 4FF40043 		mov	r3, #32768
 369 0022 C4F60203 		movt	r3, 18434
 370 0026 4FF40042 		mov	r2, #32768
 371 002a C4F60202 		movt	r2, 18434
 372 002e 526F     		ldr	r2, [r2, #116]
 373 0030 5A67     		str	r2, [r3, #116]
 218:../Main.c     **** 	DAVE_Init(); // Initialization of DAVE Apps
 374              		.loc 1 218 0
 375 0032 FFF7FEFF 		bl	DAVE_Init
 219:../Main.c     **** 	//PORT0->HWSEL &= ~0x0000c000UL; //Faz pin 0.7 funcionar
 220:../Main.c     **** 	//PORT0->HWSEL |= 0 << 14;
 221:../Main.c     **** 	/*Etapa de inicializacao*/
 222:../Main.c     **** 	configure_E(); //Configura transceptor como emissor
 376              		.loc 1 222 0
 377 0036 FFF7FEFF 		bl	configure_E
 223:../Main.c     **** 	//IO004_SetPin(LED1); //Leds para debug
 224:../Main.c     **** 	//IO004_SetPin(LED2);
 225:../Main.c     **** 	//VER COMOFAS pra ligar analog do controle aqui ja
 226:../Main.c     **** 
 227:../Main.c     **** 	psxHandShake();
 378              		.loc 1 227 0
 379 003a FFF7FEFF 		bl	psxHandShake
 228:../Main.c     **** 	psxConfiguraControle();
 380              		.loc 1 228 0
 381 003e FFF7FEFF 		bl	psxConfiguraControle
 229:../Main.c     **** 	ADC001_GenerateLoadEvent(&ADC001_Handle0);
 382              		.loc 1 229 0
 383 0042 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 384 0046 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 385 004a FFF7FEFF 		bl	ADC001_GenerateLoadEvent
 230:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 386              		.loc 1 230 0
 387 004e 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 388 0052 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 389 0056 40F20001 		movw	r1, #:lower16:result
 390 005a C0F20001 		movt	r1, #:upper16:result
 391 005e FFF7FEFF 		bl	ADC001_GetResult
 231:../Main.c     **** 	Software_Timers_Init();
 392              		.loc 1 231 0
 393 0062 FFF7FEFF 		bl	Software_Timers_Init
 394              	.L48:
 395              	.LBB4:
 232:../Main.c     **** 	/*Loop do controle*/
 233:../Main.c     **** 	while (1) {
 234:../Main.c     **** 		ADC001_GetResult(&ADC001_Handle0, &result);
 396              		.loc 1 234 0
 397 0066 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 398 006a C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 399 006e 40F20001 		movw	r1, #:lower16:result
 400 0072 C0F20001 		movt	r1, #:upper16:result
 401 0076 FFF7FEFF 		bl	ADC001_GetResult
 235:../Main.c     **** 		pwm_max = PWM_LIM;
 402              		.loc 1 235 0
 403 007a 40F20003 		movw	r3, #:lower16:pwm_max
 404 007e C0F20003 		movt	r3, #:upper16:pwm_max
 405 0082 4FF04602 		mov	r2, #70
 406 0086 1A70     		strb	r2, [r3, #0]
 236:../Main.c     **** 		/*Inicializa o que sera mandado*/
 237:../Main.c     **** 		BOOLType blah2 = 1;
 407              		.loc 1 237 0
 408 0088 4FF00103 		mov	r3, #1
 409 008c FB73     		strb	r3, [r7, #15]
 238:../Main.c     **** 		BOOLType buzina = 1;
 410              		.loc 1 238 0
 411 008e 4FF00103 		mov	r3, #1
 412 0092 7B72     		strb	r3, [r7, #9]
 239:../Main.c     **** 		BOOLType enable = 0;
 413              		.loc 1 239 0
 414 0094 4FF00003 		mov	r3, #0
 415 0098 3B72     		strb	r3, [r7, #8]
 240:../Main.c     **** 		BOOLType albh2 = 1;
 416              		.loc 1 240 0
 417 009a 4FF00103 		mov	r3, #1
 418 009e BB73     		strb	r3, [r7, #14]
 241:../Main.c     **** 		BOOLType blah1 = 1;
 419              		.loc 1 241 0
 420 00a0 4FF00103 		mov	r3, #1
 421 00a4 7B73     		strb	r3, [r7, #13]
 242:../Main.c     **** 		BOOLType albh1 = 1;
 422              		.loc 1 242 0
 423 00a6 4FF00103 		mov	r3, #1
 424 00aa 3B73     		strb	r3, [r7, #12]
 243:../Main.c     **** 		int16_t pow1, pow2;
 244:../Main.c     **** 		/*Le controle*/
 245:../Main.c     **** 		psxLeControle();
 425              		.loc 1 245 0
 426 00ac FFF7FEFF 		bl	psxLeControle
 246:../Main.c     **** 		if (psx_status != 140) //Nao ta analogico
 427              		.loc 1 246 0
 428 00b0 40F20003 		movw	r3, #:lower16:psx_status
 429 00b4 C0F20003 		movt	r3, #:upper16:psx_status
 430 00b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 431 00ba 8C2B     		cmp	r3, #140
 432 00bc 05D0     		beq	.L2
 247:../Main.c     **** 				{
 248:../Main.c     **** 			psxHandShake();
 433              		.loc 1 248 0
 434 00be FFF7FEFF 		bl	psxHandShake
 249:../Main.c     **** 			psxConfiguraControle();
 435              		.loc 1 249 0
 436 00c2 FFF7FEFF 		bl	psxConfiguraControle
 250:../Main.c     **** 			continue;
 437              		.loc 1 250 0
 438 00c6 00BF     		nop
 439              	.LBE4:
 251:../Main.c     **** 		}
 252:../Main.c     **** 		/*Com dados do controle atribui valores e chama callbacks*/
 253:../Main.c     **** 		if (START && start) {
 254:../Main.c     **** 			start_state = 1;
 255:../Main.c     **** 			start();
 256:../Main.c     **** 		}
 257:../Main.c     **** 		if (SELECT && select) {
 258:../Main.c     **** 			select_state = 1;
 259:../Main.c     **** 			select();
 260:../Main.c     **** 		}
 261:../Main.c     **** 		if (L_DOIS && l_dois) {
 262:../Main.c     **** 			l_dois_state = 1;
 263:../Main.c     **** 			l_dois();
 264:../Main.c     **** 		}
 265:../Main.c     **** 		if (L_UM && l_um) {
 266:../Main.c     **** 			l_um_state = 1;
 267:../Main.c     **** 			l_um();
 268:../Main.c     **** 		}else if(!R_UM){
 269:../Main.c     **** 			acceleration_ticks=0;
 270:../Main.c     **** 		}
 271:../Main.c     **** 		if (L_TRES && l_tres) {
 272:../Main.c     **** 			l_tres_state = 1;
 273:../Main.c     **** 			l_tres();
 274:../Main.c     **** 		}
 275:../Main.c     **** 		if (R_UM && r_um) {
 276:../Main.c     **** 			r_um_state = 1;
 277:../Main.c     **** 			r_um();
 278:../Main.c     **** 		}else if(!L_UM){
 279:../Main.c     **** 			acceleration_ticks = 0;
 280:../Main.c     **** 		}
 281:../Main.c     **** 		if (R_DOIS && r_dois) {
 282:../Main.c     **** 			r_dois_state = 1;
 283:../Main.c     **** 			r_dois();
 284:../Main.c     **** 		}
 285:../Main.c     **** 		if (R_TRES && r_tres) {
 286:../Main.c     **** 			r_tres_state = 1;
 287:../Main.c     **** 			r_tres();
 288:../Main.c     **** 		}
 289:../Main.c     **** 		if (SQR && sqr) {
 290:../Main.c     **** 			sqr_state = 1;
 291:../Main.c     **** 			sqr(DEGRAU);
 292:../Main.c     **** //			changeMode(DEGRAU);
 293:../Main.c     **** 		}
 294:../Main.c     **** 		if (TRIANGLE && triangle) {
 295:../Main.c     **** 			triangle_state = 1;
 296:../Main.c     **** 			triangle(LINEAR);
 297:../Main.c     **** //			changeMode(LINEAR);
 298:../Main.c     **** 		}
 299:../Main.c     **** 		if (CIRCLE && circle) {
 300:../Main.c     **** 			circle_state = 1;
 301:../Main.c     **** 			circle(EXP);
 302:../Main.c     **** //			changeMode(EXP);
 303:../Main.c     **** 		}
 304:../Main.c     **** 		if (CROSS && cross) {
 305:../Main.c     **** 			cross_state = 1;
 306:../Main.c     **** 			cross();
 307:../Main.c     **** 		}
 308:../Main.c     **** 		if (LEFT && left) {
 309:../Main.c     **** 			left_state = 1;
 310:../Main.c     **** 			left();
 311:../Main.c     **** 		}
 312:../Main.c     **** 		if (RIGHT && right) {
 313:../Main.c     **** 			right_state = 1;
 314:../Main.c     **** 			right();
 315:../Main.c     **** 		}
 316:../Main.c     **** 		if (UP && up) {
 317:../Main.c     **** 			up_state = 1;
 318:../Main.c     **** 			up();
 319:../Main.c     **** 		}
 320:../Main.c     **** 		if (DOWN && down) {
 321:../Main.c     **** 			down_state = 1;
 322:../Main.c     **** 			down();
 323:../Main.c     **** 		}
 324:../Main.c     **** 
 325:../Main.c     **** 		//
 326:../Main.c     **** 
 327:../Main.c     **** 		data_E[0] = pwm_max;
 328:../Main.c     **** 		//if (psxDado[5] == 0 && psxDado[3] == 0) continue; //Enquanto for zero nao faz nada -> tirar qua
 329:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 330:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 331:../Main.c     **** 		data_E[3] = 0;
 332:../Main.c     **** 		int16_t temp; //Variavel para armazenamento temporario dos calculos
 333:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 334:../Main.c     **** 		{
 335:../Main.c     **** 			if (pow1 < -30)
 336:../Main.c     **** 				albh2 = 0; //ok
 337:../Main.c     **** 			else if (pow1 > 30)
 338:../Main.c     **** 				blah2 = 0; //ok
 339:../Main.c     **** 			else {
 340:../Main.c     **** 				albh2 = 1;
 341:../Main.c     **** 				blah2 = 0;
 342:../Main.c     **** 			}
 343:../Main.c     **** 			if (pow2 < -30)
 344:../Main.c     **** 				albh1 = 0;
 345:../Main.c     **** 			else if (pow2 > 30)
 346:../Main.c     **** 				blah1 = 0;
 347:../Main.c     **** 			else {
 348:../Main.c     **** 				albh1 = 1;
 349:../Main.c     **** 				blah1 = 0;
 350:../Main.c     **** 			}
 351:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 352:../Main.c     **** 			if (temp > 255)
 353:../Main.c     **** 				temp = 255;
 354:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 355:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 356:../Main.c     **** 			if (temp > 255)
 357:../Main.c     **** 				temp = 255;
 358:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 359:../Main.c     **** 		} else {
 360:../Main.c     **** 			if (pow2 > 30)
 361:../Main.c     **** 				albh2 = 0; //ok
 362:../Main.c     **** 			else if (pow2 < -30)
 363:../Main.c     **** 				blah2 = 0; //ok
 364:../Main.c     **** 			else {
 365:../Main.c     **** 				albh2 = 1;
 366:../Main.c     **** 				blah2 = 0;
 367:../Main.c     **** 			}
 368:../Main.c     **** 			if (pow1 > 30)
 369:../Main.c     **** 				albh1 = 0;
 370:../Main.c     **** 			else if (pow1 < -30)
 371:../Main.c     **** 				blah1 = 0;
 372:../Main.c     **** 			else {
 373:../Main.c     **** 				albh1 = 1;
 374:../Main.c     **** 				blah1 = 0;
 375:../Main.c     **** 			}
 376:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 377:../Main.c     **** 			if (temp > 255)
 378:../Main.c     **** 				temp = 255;
 379:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 380:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 381:../Main.c     **** 			if (temp > 255)
 382:../Main.c     **** 				temp = 255;
 383:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 384:../Main.c     **** 		}
 385:../Main.c     **** 		//if (data_E[1] > 20 || data_E[2] > 20) enable = 1;
 386:../Main.c     **** 
 387:../Main.c     **** 		char data_0 = (mode & 1);
 388:../Main.c     **** 		char data_1 = ((mode >> 1) & 1);
 389:../Main.c     **** 
 390:../Main.c     **** //		data_E[3] = data_E[3] | (blah1 << BLAH1) | (blah2 << BLAH2)
 391:../Main.c     **** //				| (albh1 << ALBH1) | (albh2 << ALBH2) | (enable << ENABLE)
 392:../Main.c     **** //				| (buzina << BUZINA);
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 394:../Main.c     **** 						| (albh1 << ALBH2) | (albh2 << ALBH1) | (data_1 << ENABLE)
 395:../Main.c     **** 						| (data_0 << BUZINA);
 396:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 397:../Main.c     **** 
 398:../Main.c     **** 		last_value_left = data_E[1];
 399:../Main.c     **** 		last_value_right = data_E[2];
 400:../Main.c     **** 
 401:../Main.c     **** 		write_E();
 402:../Main.c     **** 		updateButtonStates();
 403:../Main.c     **** 	}
 440              		.loc 1 403 0
 441 00c8 CDE7     		b	.L48
 442              	.L2:
 443              	.LBB5:
 253:../Main.c     **** 		if (START && start) {
 444              		.loc 1 253 0
 445 00ca 40F20003 		movw	r3, #:lower16:psxDado
 446 00ce C0F20003 		movt	r3, #:upper16:psxDado
 447 00d2 1B68     		ldr	r3, [r3, #0]
 448 00d4 03F00803 		and	r3, r3, #8
 449 00d8 002B     		cmp	r3, #0
 450 00da 13D0     		beq	.L4
 253:../Main.c     **** 		if (START && start) {
 451              		.loc 1 253 0 is_stmt 0 discriminator 1
 452 00dc 40F20003 		movw	r3, #:lower16:start
 453 00e0 C0F20003 		movt	r3, #:upper16:start
 454 00e4 1B68     		ldr	r3, [r3, #0]
 455 00e6 002B     		cmp	r3, #0
 456 00e8 0CD0     		beq	.L4
 254:../Main.c     **** 			start_state = 1;
 457              		.loc 1 254 0 is_stmt 1
 458 00ea 40F20003 		movw	r3, #:lower16:start_state
 459 00ee C0F20003 		movt	r3, #:upper16:start_state
 460 00f2 4FF00102 		mov	r2, #1
 461 00f6 1A70     		strb	r2, [r3, #0]
 255:../Main.c     **** 			start();
 462              		.loc 1 255 0
 463 00f8 40F20003 		movw	r3, #:lower16:start
 464 00fc C0F20003 		movt	r3, #:upper16:start
 465 0100 1B68     		ldr	r3, [r3, #0]
 466 0102 9847     		blx	r3
 467              	.L4:
 257:../Main.c     **** 		if (SELECT && select) {
 468              		.loc 1 257 0
 469 0104 40F20003 		movw	r3, #:lower16:psxDado
 470 0108 C0F20003 		movt	r3, #:upper16:psxDado
 471 010c 1B68     		ldr	r3, [r3, #0]
 472 010e 03F00103 		and	r3, r3, #1
 473 0112 002B     		cmp	r3, #0
 474 0114 13D0     		beq	.L5
 257:../Main.c     **** 		if (SELECT && select) {
 475              		.loc 1 257 0 is_stmt 0 discriminator 1
 476 0116 40F20003 		movw	r3, #:lower16:select
 477 011a C0F20003 		movt	r3, #:upper16:select
 478 011e 1B68     		ldr	r3, [r3, #0]
 479 0120 002B     		cmp	r3, #0
 480 0122 0CD0     		beq	.L5
 258:../Main.c     **** 			select_state = 1;
 481              		.loc 1 258 0 is_stmt 1
 482 0124 40F20003 		movw	r3, #:lower16:select_state
 483 0128 C0F20003 		movt	r3, #:upper16:select_state
 484 012c 4FF00102 		mov	r2, #1
 485 0130 1A70     		strb	r2, [r3, #0]
 259:../Main.c     **** 			select();
 486              		.loc 1 259 0
 487 0132 40F20003 		movw	r3, #:lower16:select
 488 0136 C0F20003 		movt	r3, #:upper16:select
 489 013a 1B68     		ldr	r3, [r3, #0]
 490 013c 9847     		blx	r3
 491              	.L5:
 261:../Main.c     **** 		if (L_DOIS && l_dois) {
 492              		.loc 1 261 0
 493 013e 40F20003 		movw	r3, #:lower16:psxDado
 494 0142 C0F20003 		movt	r3, #:upper16:psxDado
 495 0146 5B68     		ldr	r3, [r3, #4]
 496 0148 03F00103 		and	r3, r3, #1
 497 014c 002B     		cmp	r3, #0
 498 014e 13D0     		beq	.L6
 261:../Main.c     **** 		if (L_DOIS && l_dois) {
 499              		.loc 1 261 0 is_stmt 0 discriminator 1
 500 0150 40F20003 		movw	r3, #:lower16:l_dois
 501 0154 C0F20003 		movt	r3, #:upper16:l_dois
 502 0158 1B68     		ldr	r3, [r3, #0]
 503 015a 002B     		cmp	r3, #0
 504 015c 0CD0     		beq	.L6
 262:../Main.c     **** 			l_dois_state = 1;
 505              		.loc 1 262 0 is_stmt 1
 506 015e 40F20003 		movw	r3, #:lower16:l_dois_state
 507 0162 C0F20003 		movt	r3, #:upper16:l_dois_state
 508 0166 4FF00102 		mov	r2, #1
 509 016a 1A70     		strb	r2, [r3, #0]
 263:../Main.c     **** 			l_dois();
 510              		.loc 1 263 0
 511 016c 40F20003 		movw	r3, #:lower16:l_dois
 512 0170 C0F20003 		movt	r3, #:upper16:l_dois
 513 0174 1B68     		ldr	r3, [r3, #0]
 514 0176 9847     		blx	r3
 515              	.L6:
 265:../Main.c     **** 		if (L_UM && l_um) {
 516              		.loc 1 265 0
 517 0178 40F20003 		movw	r3, #:lower16:psxDado
 518 017c C0F20003 		movt	r3, #:upper16:psxDado
 519 0180 5B68     		ldr	r3, [r3, #4]
 520 0182 03F00403 		and	r3, r3, #4
 521 0186 002B     		cmp	r3, #0
 522 0188 14D0     		beq	.L7
 265:../Main.c     **** 		if (L_UM && l_um) {
 523              		.loc 1 265 0 is_stmt 0 discriminator 1
 524 018a 40F20003 		movw	r3, #:lower16:l_um
 525 018e C0F20003 		movt	r3, #:upper16:l_um
 526 0192 1B68     		ldr	r3, [r3, #0]
 527 0194 002B     		cmp	r3, #0
 528 0196 0DD0     		beq	.L7
 266:../Main.c     **** 			l_um_state = 1;
 529              		.loc 1 266 0 is_stmt 1
 530 0198 40F20003 		movw	r3, #:lower16:l_um_state
 531 019c C0F20003 		movt	r3, #:upper16:l_um_state
 532 01a0 4FF00102 		mov	r2, #1
 533 01a4 1A70     		strb	r2, [r3, #0]
 267:../Main.c     **** 			l_um();
 534              		.loc 1 267 0
 535 01a6 40F20003 		movw	r3, #:lower16:l_um
 536 01aa C0F20003 		movt	r3, #:upper16:l_um
 537 01ae 1B68     		ldr	r3, [r3, #0]
 538 01b0 9847     		blx	r3
 539 01b2 0FE0     		b	.L8
 540              	.L7:
 268:../Main.c     **** 		}else if(!R_UM){
 541              		.loc 1 268 0
 542 01b4 40F20003 		movw	r3, #:lower16:psxDado
 543 01b8 C0F20003 		movt	r3, #:upper16:psxDado
 544 01bc 5B68     		ldr	r3, [r3, #4]
 545 01be 03F00803 		and	r3, r3, #8
 546 01c2 002B     		cmp	r3, #0
 547 01c4 06D1     		bne	.L8
 269:../Main.c     **** 			acceleration_ticks=0;
 548              		.loc 1 269 0
 549 01c6 40F20003 		movw	r3, #:lower16:acceleration_ticks
 550 01ca C0F20003 		movt	r3, #:upper16:acceleration_ticks
 551 01ce 4FF00002 		mov	r2, #0
 552 01d2 1A60     		str	r2, [r3, #0]
 553              	.L8:
 271:../Main.c     **** 		if (L_TRES && l_tres) {
 554              		.loc 1 271 0
 555 01d4 40F20003 		movw	r3, #:lower16:psxDado
 556 01d8 C0F20003 		movt	r3, #:upper16:psxDado
 557 01dc 1B68     		ldr	r3, [r3, #0]
 558 01de 03F00403 		and	r3, r3, #4
 559 01e2 002B     		cmp	r3, #0
 560 01e4 13D0     		beq	.L9
 271:../Main.c     **** 		if (L_TRES && l_tres) {
 561              		.loc 1 271 0 is_stmt 0 discriminator 1
 562 01e6 40F20003 		movw	r3, #:lower16:l_tres
 563 01ea C0F20003 		movt	r3, #:upper16:l_tres
 564 01ee 1B68     		ldr	r3, [r3, #0]
 565 01f0 002B     		cmp	r3, #0
 566 01f2 0CD0     		beq	.L9
 272:../Main.c     **** 			l_tres_state = 1;
 567              		.loc 1 272 0 is_stmt 1
 568 01f4 40F20003 		movw	r3, #:lower16:l_tres_state
 569 01f8 C0F20003 		movt	r3, #:upper16:l_tres_state
 570 01fc 4FF00102 		mov	r2, #1
 571 0200 1A70     		strb	r2, [r3, #0]
 273:../Main.c     **** 			l_tres();
 572              		.loc 1 273 0
 573 0202 40F20003 		movw	r3, #:lower16:l_tres
 574 0206 C0F20003 		movt	r3, #:upper16:l_tres
 575 020a 1B68     		ldr	r3, [r3, #0]
 576 020c 9847     		blx	r3
 577              	.L9:
 275:../Main.c     **** 		if (R_UM && r_um) {
 578              		.loc 1 275 0
 579 020e 40F20003 		movw	r3, #:lower16:psxDado
 580 0212 C0F20003 		movt	r3, #:upper16:psxDado
 581 0216 5B68     		ldr	r3, [r3, #4]
 582 0218 03F00803 		and	r3, r3, #8
 583 021c 002B     		cmp	r3, #0
 584 021e 14D0     		beq	.L10
 275:../Main.c     **** 		if (R_UM && r_um) {
 585              		.loc 1 275 0 is_stmt 0 discriminator 1
 586 0220 40F20003 		movw	r3, #:lower16:r_um
 587 0224 C0F20003 		movt	r3, #:upper16:r_um
 588 0228 1B68     		ldr	r3, [r3, #0]
 589 022a 002B     		cmp	r3, #0
 590 022c 0DD0     		beq	.L10
 276:../Main.c     **** 			r_um_state = 1;
 591              		.loc 1 276 0 is_stmt 1
 592 022e 40F20003 		movw	r3, #:lower16:r_um_state
 593 0232 C0F20003 		movt	r3, #:upper16:r_um_state
 594 0236 4FF00102 		mov	r2, #1
 595 023a 1A70     		strb	r2, [r3, #0]
 277:../Main.c     **** 			r_um();
 596              		.loc 1 277 0
 597 023c 40F20003 		movw	r3, #:lower16:r_um
 598 0240 C0F20003 		movt	r3, #:upper16:r_um
 599 0244 1B68     		ldr	r3, [r3, #0]
 600 0246 9847     		blx	r3
 601 0248 0FE0     		b	.L11
 602              	.L10:
 278:../Main.c     **** 		}else if(!L_UM){
 603              		.loc 1 278 0
 604 024a 40F20003 		movw	r3, #:lower16:psxDado
 605 024e C0F20003 		movt	r3, #:upper16:psxDado
 606 0252 5B68     		ldr	r3, [r3, #4]
 607 0254 03F00403 		and	r3, r3, #4
 608 0258 002B     		cmp	r3, #0
 609 025a 06D1     		bne	.L11
 279:../Main.c     **** 			acceleration_ticks = 0;
 610              		.loc 1 279 0
 611 025c 40F20003 		movw	r3, #:lower16:acceleration_ticks
 612 0260 C0F20003 		movt	r3, #:upper16:acceleration_ticks
 613 0264 4FF00002 		mov	r2, #0
 614 0268 1A60     		str	r2, [r3, #0]
 615              	.L11:
 281:../Main.c     **** 		if (R_DOIS && r_dois) {
 616              		.loc 1 281 0
 617 026a 40F20003 		movw	r3, #:lower16:psxDado
 618 026e C0F20003 		movt	r3, #:upper16:psxDado
 619 0272 5B68     		ldr	r3, [r3, #4]
 620 0274 03F00203 		and	r3, r3, #2
 621 0278 002B     		cmp	r3, #0
 622 027a 13D0     		beq	.L12
 281:../Main.c     **** 		if (R_DOIS && r_dois) {
 623              		.loc 1 281 0 is_stmt 0 discriminator 1
 624 027c 40F20003 		movw	r3, #:lower16:r_dois
 625 0280 C0F20003 		movt	r3, #:upper16:r_dois
 626 0284 1B68     		ldr	r3, [r3, #0]
 627 0286 002B     		cmp	r3, #0
 628 0288 0CD0     		beq	.L12
 282:../Main.c     **** 			r_dois_state = 1;
 629              		.loc 1 282 0 is_stmt 1
 630 028a 40F20003 		movw	r3, #:lower16:r_dois_state
 631 028e C0F20003 		movt	r3, #:upper16:r_dois_state
 632 0292 4FF00102 		mov	r2, #1
 633 0296 1A70     		strb	r2, [r3, #0]
 283:../Main.c     **** 			r_dois();
 634              		.loc 1 283 0
 635 0298 40F20003 		movw	r3, #:lower16:r_dois
 636 029c C0F20003 		movt	r3, #:upper16:r_dois
 637 02a0 1B68     		ldr	r3, [r3, #0]
 638 02a2 9847     		blx	r3
 639              	.L12:
 285:../Main.c     **** 		if (R_TRES && r_tres) {
 640              		.loc 1 285 0
 641 02a4 40F20003 		movw	r3, #:lower16:psxDado
 642 02a8 C0F20003 		movt	r3, #:upper16:psxDado
 643 02ac 1B68     		ldr	r3, [r3, #0]
 644 02ae 03F00203 		and	r3, r3, #2
 645 02b2 002B     		cmp	r3, #0
 646 02b4 13D0     		beq	.L13
 285:../Main.c     **** 		if (R_TRES && r_tres) {
 647              		.loc 1 285 0 is_stmt 0 discriminator 1
 648 02b6 40F20003 		movw	r3, #:lower16:r_tres
 649 02ba C0F20003 		movt	r3, #:upper16:r_tres
 650 02be 1B68     		ldr	r3, [r3, #0]
 651 02c0 002B     		cmp	r3, #0
 652 02c2 0CD0     		beq	.L13
 286:../Main.c     **** 			r_tres_state = 1;
 653              		.loc 1 286 0 is_stmt 1
 654 02c4 40F20003 		movw	r3, #:lower16:r_tres_state
 655 02c8 C0F20003 		movt	r3, #:upper16:r_tres_state
 656 02cc 4FF00102 		mov	r2, #1
 657 02d0 1A70     		strb	r2, [r3, #0]
 287:../Main.c     **** 			r_tres();
 658              		.loc 1 287 0
 659 02d2 40F20003 		movw	r3, #:lower16:r_tres
 660 02d6 C0F20003 		movt	r3, #:upper16:r_tres
 661 02da 1B68     		ldr	r3, [r3, #0]
 662 02dc 9847     		blx	r3
 663              	.L13:
 289:../Main.c     **** 		if (SQR && sqr) {
 664              		.loc 1 289 0
 665 02de 40F20003 		movw	r3, #:lower16:psxDado
 666 02e2 C0F20003 		movt	r3, #:upper16:psxDado
 667 02e6 5B68     		ldr	r3, [r3, #4]
 668 02e8 03F08003 		and	r3, r3, #128
 669 02ec 002B     		cmp	r3, #0
 670 02ee 15D0     		beq	.L14
 289:../Main.c     **** 		if (SQR && sqr) {
 671              		.loc 1 289 0 is_stmt 0 discriminator 1
 672 02f0 40F20003 		movw	r3, #:lower16:sqr
 673 02f4 C0F20003 		movt	r3, #:upper16:sqr
 674 02f8 1B68     		ldr	r3, [r3, #0]
 675 02fa 002B     		cmp	r3, #0
 676 02fc 0ED0     		beq	.L14
 290:../Main.c     **** 			sqr_state = 1;
 677              		.loc 1 290 0 is_stmt 1
 678 02fe 40F20003 		movw	r3, #:lower16:sqr_state
 679 0302 C0F20003 		movt	r3, #:upper16:sqr_state
 680 0306 4FF00102 		mov	r2, #1
 681 030a 1A70     		strb	r2, [r3, #0]
 291:../Main.c     **** 			sqr(DEGRAU);
 682              		.loc 1 291 0
 683 030c 40F20003 		movw	r3, #:lower16:sqr
 684 0310 C0F20003 		movt	r3, #:upper16:sqr
 685 0314 1B68     		ldr	r3, [r3, #0]
 686 0316 4FF00000 		mov	r0, #0
 687 031a 9847     		blx	r3
 688              	.L14:
 294:../Main.c     **** 		if (TRIANGLE && triangle) {
 689              		.loc 1 294 0
 690 031c 40F20003 		movw	r3, #:lower16:psxDado
 691 0320 C0F20003 		movt	r3, #:upper16:psxDado
 692 0324 5B68     		ldr	r3, [r3, #4]
 693 0326 03F01003 		and	r3, r3, #16
 694 032a 002B     		cmp	r3, #0
 695 032c 15D0     		beq	.L15
 294:../Main.c     **** 		if (TRIANGLE && triangle) {
 696              		.loc 1 294 0 is_stmt 0 discriminator 1
 697 032e 40F20003 		movw	r3, #:lower16:triangle
 698 0332 C0F20003 		movt	r3, #:upper16:triangle
 699 0336 1B68     		ldr	r3, [r3, #0]
 700 0338 002B     		cmp	r3, #0
 701 033a 0ED0     		beq	.L15
 295:../Main.c     **** 			triangle_state = 1;
 702              		.loc 1 295 0 is_stmt 1
 703 033c 40F20003 		movw	r3, #:lower16:triangle_state
 704 0340 C0F20003 		movt	r3, #:upper16:triangle_state
 705 0344 4FF00102 		mov	r2, #1
 706 0348 1A70     		strb	r2, [r3, #0]
 296:../Main.c     **** 			triangle(LINEAR);
 707              		.loc 1 296 0
 708 034a 40F20003 		movw	r3, #:lower16:triangle
 709 034e C0F20003 		movt	r3, #:upper16:triangle
 710 0352 1B68     		ldr	r3, [r3, #0]
 711 0354 4FF00200 		mov	r0, #2
 712 0358 9847     		blx	r3
 713              	.L15:
 299:../Main.c     **** 		if (CIRCLE && circle) {
 714              		.loc 1 299 0
 715 035a 40F20003 		movw	r3, #:lower16:psxDado
 716 035e C0F20003 		movt	r3, #:upper16:psxDado
 717 0362 5B68     		ldr	r3, [r3, #4]
 718 0364 03F02003 		and	r3, r3, #32
 719 0368 002B     		cmp	r3, #0
 720 036a 15D0     		beq	.L16
 299:../Main.c     **** 		if (CIRCLE && circle) {
 721              		.loc 1 299 0 is_stmt 0 discriminator 1
 722 036c 40F20003 		movw	r3, #:lower16:circle
 723 0370 C0F20003 		movt	r3, #:upper16:circle
 724 0374 1B68     		ldr	r3, [r3, #0]
 725 0376 002B     		cmp	r3, #0
 726 0378 0ED0     		beq	.L16
 300:../Main.c     **** 			circle_state = 1;
 727              		.loc 1 300 0 is_stmt 1
 728 037a 40F20003 		movw	r3, #:lower16:circle_state
 729 037e C0F20003 		movt	r3, #:upper16:circle_state
 730 0382 4FF00102 		mov	r2, #1
 731 0386 1A70     		strb	r2, [r3, #0]
 301:../Main.c     **** 			circle(EXP);
 732              		.loc 1 301 0
 733 0388 40F20003 		movw	r3, #:lower16:circle
 734 038c C0F20003 		movt	r3, #:upper16:circle
 735 0390 1B68     		ldr	r3, [r3, #0]
 736 0392 4FF00100 		mov	r0, #1
 737 0396 9847     		blx	r3
 738              	.L16:
 304:../Main.c     **** 		if (CROSS && cross) {
 739              		.loc 1 304 0
 740 0398 40F20003 		movw	r3, #:lower16:psxDado
 741 039c C0F20003 		movt	r3, #:upper16:psxDado
 742 03a0 5B68     		ldr	r3, [r3, #4]
 743 03a2 03F04003 		and	r3, r3, #64
 744 03a6 002B     		cmp	r3, #0
 745 03a8 13D0     		beq	.L17
 304:../Main.c     **** 		if (CROSS && cross) {
 746              		.loc 1 304 0 is_stmt 0 discriminator 1
 747 03aa 40F20003 		movw	r3, #:lower16:cross
 748 03ae C0F20003 		movt	r3, #:upper16:cross
 749 03b2 1B68     		ldr	r3, [r3, #0]
 750 03b4 002B     		cmp	r3, #0
 751 03b6 0CD0     		beq	.L17
 305:../Main.c     **** 			cross_state = 1;
 752              		.loc 1 305 0 is_stmt 1
 753 03b8 40F20003 		movw	r3, #:lower16:cross_state
 754 03bc C0F20003 		movt	r3, #:upper16:cross_state
 755 03c0 4FF00102 		mov	r2, #1
 756 03c4 1A70     		strb	r2, [r3, #0]
 306:../Main.c     **** 			cross();
 757              		.loc 1 306 0
 758 03c6 40F20003 		movw	r3, #:lower16:cross
 759 03ca C0F20003 		movt	r3, #:upper16:cross
 760 03ce 1B68     		ldr	r3, [r3, #0]
 761 03d0 9847     		blx	r3
 762              	.L17:
 308:../Main.c     **** 		if (LEFT && left) {
 763              		.loc 1 308 0
 764 03d2 40F20003 		movw	r3, #:lower16:psxDado
 765 03d6 C0F20003 		movt	r3, #:upper16:psxDado
 766 03da 1B68     		ldr	r3, [r3, #0]
 767 03dc 03F08003 		and	r3, r3, #128
 768 03e0 002B     		cmp	r3, #0
 769 03e2 13D0     		beq	.L18
 308:../Main.c     **** 		if (LEFT && left) {
 770              		.loc 1 308 0 is_stmt 0 discriminator 1
 771 03e4 40F20003 		movw	r3, #:lower16:left
 772 03e8 C0F20003 		movt	r3, #:upper16:left
 773 03ec 1B68     		ldr	r3, [r3, #0]
 774 03ee 002B     		cmp	r3, #0
 775 03f0 0CD0     		beq	.L18
 309:../Main.c     **** 			left_state = 1;
 776              		.loc 1 309 0 is_stmt 1
 777 03f2 40F20003 		movw	r3, #:lower16:left_state
 778 03f6 C0F20003 		movt	r3, #:upper16:left_state
 779 03fa 4FF00102 		mov	r2, #1
 780 03fe 1A70     		strb	r2, [r3, #0]
 310:../Main.c     **** 			left();
 781              		.loc 1 310 0
 782 0400 40F20003 		movw	r3, #:lower16:left
 783 0404 C0F20003 		movt	r3, #:upper16:left
 784 0408 1B68     		ldr	r3, [r3, #0]
 785 040a 9847     		blx	r3
 786              	.L18:
 312:../Main.c     **** 		if (RIGHT && right) {
 787              		.loc 1 312 0
 788 040c 40F20003 		movw	r3, #:lower16:psxDado
 789 0410 C0F20003 		movt	r3, #:upper16:psxDado
 790 0414 1B68     		ldr	r3, [r3, #0]
 791 0416 03F02003 		and	r3, r3, #32
 792 041a 002B     		cmp	r3, #0
 793 041c 13D0     		beq	.L19
 312:../Main.c     **** 		if (RIGHT && right) {
 794              		.loc 1 312 0 is_stmt 0 discriminator 1
 795 041e 40F20003 		movw	r3, #:lower16:right
 796 0422 C0F20003 		movt	r3, #:upper16:right
 797 0426 1B68     		ldr	r3, [r3, #0]
 798 0428 002B     		cmp	r3, #0
 799 042a 0CD0     		beq	.L19
 313:../Main.c     **** 			right_state = 1;
 800              		.loc 1 313 0 is_stmt 1
 801 042c 40F20003 		movw	r3, #:lower16:right_state
 802 0430 C0F20003 		movt	r3, #:upper16:right_state
 803 0434 4FF00102 		mov	r2, #1
 804 0438 1A70     		strb	r2, [r3, #0]
 314:../Main.c     **** 			right();
 805              		.loc 1 314 0
 806 043a 40F20003 		movw	r3, #:lower16:right
 807 043e C0F20003 		movt	r3, #:upper16:right
 808 0442 1B68     		ldr	r3, [r3, #0]
 809 0444 9847     		blx	r3
 810              	.L19:
 316:../Main.c     **** 		if (UP && up) {
 811              		.loc 1 316 0
 812 0446 40F20003 		movw	r3, #:lower16:psxDado
 813 044a C0F20003 		movt	r3, #:upper16:psxDado
 814 044e 1B68     		ldr	r3, [r3, #0]
 815 0450 03F01003 		and	r3, r3, #16
 816 0454 002B     		cmp	r3, #0
 817 0456 13D0     		beq	.L20
 316:../Main.c     **** 		if (UP && up) {
 818              		.loc 1 316 0 is_stmt 0 discriminator 1
 819 0458 40F20003 		movw	r3, #:lower16:up
 820 045c C0F20003 		movt	r3, #:upper16:up
 821 0460 1B68     		ldr	r3, [r3, #0]
 822 0462 002B     		cmp	r3, #0
 823 0464 0CD0     		beq	.L20
 317:../Main.c     **** 			up_state = 1;
 824              		.loc 1 317 0 is_stmt 1
 825 0466 40F20003 		movw	r3, #:lower16:up_state
 826 046a C0F20003 		movt	r3, #:upper16:up_state
 827 046e 4FF00102 		mov	r2, #1
 828 0472 1A70     		strb	r2, [r3, #0]
 318:../Main.c     **** 			up();
 829              		.loc 1 318 0
 830 0474 40F20003 		movw	r3, #:lower16:up
 831 0478 C0F20003 		movt	r3, #:upper16:up
 832 047c 1B68     		ldr	r3, [r3, #0]
 833 047e 9847     		blx	r3
 834              	.L20:
 320:../Main.c     **** 		if (DOWN && down) {
 835              		.loc 1 320 0
 836 0480 40F20003 		movw	r3, #:lower16:psxDado
 837 0484 C0F20003 		movt	r3, #:upper16:psxDado
 838 0488 1B68     		ldr	r3, [r3, #0]
 839 048a 03F04003 		and	r3, r3, #64
 840 048e 002B     		cmp	r3, #0
 841 0490 13D0     		beq	.L21
 320:../Main.c     **** 		if (DOWN && down) {
 842              		.loc 1 320 0 is_stmt 0 discriminator 1
 843 0492 40F20003 		movw	r3, #:lower16:down
 844 0496 C0F20003 		movt	r3, #:upper16:down
 845 049a 1B68     		ldr	r3, [r3, #0]
 846 049c 002B     		cmp	r3, #0
 847 049e 0CD0     		beq	.L21
 321:../Main.c     **** 			down_state = 1;
 848              		.loc 1 321 0 is_stmt 1
 849 04a0 40F20003 		movw	r3, #:lower16:down_state
 850 04a4 C0F20003 		movt	r3, #:upper16:down_state
 851 04a8 4FF00102 		mov	r2, #1
 852 04ac 1A70     		strb	r2, [r3, #0]
 322:../Main.c     **** 			down();
 853              		.loc 1 322 0
 854 04ae 40F20003 		movw	r3, #:lower16:down
 855 04b2 C0F20003 		movt	r3, #:upper16:down
 856 04b6 1B68     		ldr	r3, [r3, #0]
 857 04b8 9847     		blx	r3
 858              	.L21:
 327:../Main.c     **** 		data_E[0] = pwm_max;
 859              		.loc 1 327 0
 860 04ba 40F20003 		movw	r3, #:lower16:pwm_max
 861 04be C0F20003 		movt	r3, #:upper16:pwm_max
 862 04c2 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 863 04c4 40F20003 		movw	r3, #:lower16:data_E
 864 04c8 C0F20003 		movt	r3, #:upper16:data_E
 865 04cc 1A70     		strb	r2, [r3, #0]
 329:../Main.c     **** 		pow1 = (psxDado[5] - 127); //<<1; //Analog esq //Subtrai 127 para saber o sentido
 866              		.loc 1 329 0
 867 04ce 40F20003 		movw	r3, #:lower16:psxDado
 868 04d2 C0F20003 		movt	r3, #:upper16:psxDado
 869 04d6 5B69     		ldr	r3, [r3, #20]
 870 04d8 9BB2     		uxth	r3, r3
 871 04da A3F17F03 		sub	r3, r3, #127
 872 04de 9BB2     		uxth	r3, r3
 873 04e0 FB80     		strh	r3, [r7, #6]	@ movhi
 330:../Main.c     **** 		pow2 = (psxDado[3] - 127); //<<1;
 874              		.loc 1 330 0
 875 04e2 40F20003 		movw	r3, #:lower16:psxDado
 876 04e6 C0F20003 		movt	r3, #:upper16:psxDado
 877 04ea DB68     		ldr	r3, [r3, #12]
 878 04ec 9BB2     		uxth	r3, r3
 879 04ee A3F17F03 		sub	r3, r3, #127
 880 04f2 9BB2     		uxth	r3, r3
 881 04f4 BB80     		strh	r3, [r7, #4]	@ movhi
 331:../Main.c     **** 		data_E[3] = 0;
 882              		.loc 1 331 0
 883 04f6 40F20003 		movw	r3, #:lower16:data_E
 884 04fa C0F20003 		movt	r3, #:upper16:data_E
 885 04fe 4FF00002 		mov	r2, #0
 886 0502 DA70     		strb	r2, [r3, #3]
 333:../Main.c     **** 		if (!flipped) //Robo virado, variavel atribuida pelo clique de um botao
 887              		.loc 1 333 0
 888 0504 40F20003 		movw	r3, #:lower16:flipped
 889 0508 C0F20003 		movt	r3, #:upper16:flipped
 890 050c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 891 050e 002B     		cmp	r3, #0
 892 0510 40F09980 		bne	.L22
 335:../Main.c     **** 			if (pow1 < -30)
 893              		.loc 1 335 0
 894 0514 B7F90630 		ldrsh	r3, [r7, #6]
 895 0518 13F11E0F 		cmn	r3, #30
 896 051c 03DA     		bge	.L23
 336:../Main.c     **** 				albh2 = 0; //ok
 897              		.loc 1 336 0
 898 051e 4FF00003 		mov	r3, #0
 899 0522 BB73     		strb	r3, [r7, #14]
 900 0524 0DE0     		b	.L24
 901              	.L23:
 337:../Main.c     **** 			else if (pow1 > 30)
 902              		.loc 1 337 0
 903 0526 B7F90630 		ldrsh	r3, [r7, #6]
 904 052a 1E2B     		cmp	r3, #30
 905 052c 03DD     		ble	.L25
 338:../Main.c     **** 				blah2 = 0; //ok
 906              		.loc 1 338 0
 907 052e 4FF00003 		mov	r3, #0
 908 0532 FB73     		strb	r3, [r7, #15]
 909 0534 05E0     		b	.L24
 910              	.L25:
 340:../Main.c     **** 				albh2 = 1;
 911              		.loc 1 340 0
 912 0536 4FF00103 		mov	r3, #1
 913 053a BB73     		strb	r3, [r7, #14]
 341:../Main.c     **** 				blah2 = 0;
 914              		.loc 1 341 0
 915 053c 4FF00003 		mov	r3, #0
 916 0540 FB73     		strb	r3, [r7, #15]
 917              	.L24:
 343:../Main.c     **** 			if (pow2 < -30)
 918              		.loc 1 343 0
 919 0542 B7F90430 		ldrsh	r3, [r7, #4]
 920 0546 13F11E0F 		cmn	r3, #30
 921 054a 03DA     		bge	.L26
 344:../Main.c     **** 				albh1 = 0;
 922              		.loc 1 344 0
 923 054c 4FF00003 		mov	r3, #0
 924 0550 3B73     		strb	r3, [r7, #12]
 925 0552 0DE0     		b	.L27
 926              	.L26:
 345:../Main.c     **** 			else if (pow2 > 30)
 927              		.loc 1 345 0
 928 0554 B7F90430 		ldrsh	r3, [r7, #4]
 929 0558 1E2B     		cmp	r3, #30
 930 055a 03DD     		ble	.L28
 346:../Main.c     **** 				blah1 = 0;
 931              		.loc 1 346 0
 932 055c 4FF00003 		mov	r3, #0
 933 0560 7B73     		strb	r3, [r7, #13]
 934 0562 05E0     		b	.L27
 935              	.L28:
 348:../Main.c     **** 				albh1 = 1;
 936              		.loc 1 348 0
 937 0564 4FF00103 		mov	r3, #1
 938 0568 3B73     		strb	r3, [r7, #12]
 349:../Main.c     **** 				blah1 = 0;
 939              		.loc 1 349 0
 940 056a 4FF00003 		mov	r3, #0
 941 056e 7B73     		strb	r3, [r7, #13]
 942              	.L27:
 351:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 943              		.loc 1 351 0
 944 0570 B7F90630 		ldrsh	r3, [r7, #6]
 945 0574 002B     		cmp	r3, #0
 946 0576 05DD     		ble	.L29
 351:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 947              		.loc 1 351 0 is_stmt 0 discriminator 1
 948 0578 FB88     		ldrh	r3, [r7, #6]
 949 057a 4FEA4303 		lsl	r3, r3, #1
 950 057e 9BB2     		uxth	r3, r3
 951 0580 9BB2     		uxth	r3, r3
 952 0582 08E0     		b	.L30
 953              	.L29:
 351:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 954              		.loc 1 351 0 discriminator 2
 955 0584 FB88     		ldrh	r3, [r7, #6]
 956 0586 1A46     		mov	r2, r3	@ movhi
 957 0588 4FEAC232 		lsl	r2, r2, #15
 958 058c D31A     		subs	r3, r2, r3
 959 058e 4FEA4303 		lsl	r3, r3, #1
 960 0592 9BB2     		uxth	r3, r3
 961 0594 9BB2     		uxth	r3, r3
 962              	.L30:
 351:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 963              		.loc 1 351 0 discriminator 3
 964 0596 7B81     		strh	r3, [r7, #10]	@ movhi
 352:../Main.c     **** 			if (temp > 255)
 965              		.loc 1 352 0 is_stmt 1 discriminator 3
 966 0598 B7F90A30 		ldrsh	r3, [r7, #10]
 967 059c FF2B     		cmp	r3, #255
 968 059e 02DD     		ble	.L31
 353:../Main.c     **** 				temp = 255;
 969              		.loc 1 353 0
 970 05a0 4FF0FF03 		mov	r3, #255
 971 05a4 7B81     		strh	r3, [r7, #10]	@ movhi
 972              	.L31:
 354:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 973              		.loc 1 354 0
 974 05a6 B7F90A20 		ldrsh	r2, [r7, #10]
 975 05aa 40F20003 		movw	r3, #:lower16:pwm_max
 976 05ae C0F20003 		movt	r3, #:upper16:pwm_max
 977 05b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 978 05b4 03FB02F2 		mul	r2, r3, r2
 979 05b8 48F21F53 		movw	r3, #34079
 980 05bc C5F2EB13 		movt	r3, 20971
 981 05c0 83FB0213 		smull	r1, r3, r3, r2
 982 05c4 4FEA6311 		asr	r1, r3, #5
 983 05c8 4FEAE273 		asr	r3, r2, #31
 984 05cc CB1A     		subs	r3, r1, r3
 985 05ce DAB2     		uxtb	r2, r3
 986 05d0 40F20003 		movw	r3, #:lower16:data_E
 987 05d4 C0F20003 		movt	r3, #:upper16:data_E
 988 05d8 5A70     		strb	r2, [r3, #1]
 355:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 989              		.loc 1 355 0
 990 05da B7F90430 		ldrsh	r3, [r7, #4]
 991 05de 002B     		cmp	r3, #0
 992 05e0 05DD     		ble	.L32
 355:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 993              		.loc 1 355 0 is_stmt 0 discriminator 1
 994 05e2 BB88     		ldrh	r3, [r7, #4]
 995 05e4 4FEA4303 		lsl	r3, r3, #1
 996 05e8 9BB2     		uxth	r3, r3
 997 05ea 9BB2     		uxth	r3, r3
 998 05ec 08E0     		b	.L33
 999              	.L32:
 355:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1000              		.loc 1 355 0 discriminator 2
 1001 05ee BB88     		ldrh	r3, [r7, #4]
 1002 05f0 1A46     		mov	r2, r3	@ movhi
 1003 05f2 4FEAC232 		lsl	r2, r2, #15
 1004 05f6 D31A     		subs	r3, r2, r3
 1005 05f8 4FEA4303 		lsl	r3, r3, #1
 1006 05fc 9BB2     		uxth	r3, r3
 1007 05fe 9BB2     		uxth	r3, r3
 1008              	.L33:
 355:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1009              		.loc 1 355 0 discriminator 3
 1010 0600 7B81     		strh	r3, [r7, #10]	@ movhi
 356:../Main.c     **** 			if (temp > 255)
 1011              		.loc 1 356 0 is_stmt 1 discriminator 3
 1012 0602 B7F90A30 		ldrsh	r3, [r7, #10]
 1013 0606 FF2B     		cmp	r3, #255
 1014 0608 02DD     		ble	.L34
 357:../Main.c     **** 				temp = 255;
 1015              		.loc 1 357 0
 1016 060a 4FF0FF03 		mov	r3, #255
 1017 060e 7B81     		strh	r3, [r7, #10]	@ movhi
 1018              	.L34:
 358:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 1019              		.loc 1 358 0
 1020 0610 B7F90A20 		ldrsh	r2, [r7, #10]
 1021 0614 40F20003 		movw	r3, #:lower16:pwm_max
 1022 0618 C0F20003 		movt	r3, #:upper16:pwm_max
 1023 061c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1024 061e 03FB02F2 		mul	r2, r3, r2
 1025 0622 48F21F53 		movw	r3, #34079
 1026 0626 C5F2EB13 		movt	r3, 20971
 1027 062a 83FB0213 		smull	r1, r3, r3, r2
 1028 062e 4FEA6311 		asr	r1, r3, #5
 1029 0632 4FEAE273 		asr	r3, r2, #31
 1030 0636 CB1A     		subs	r3, r1, r3
 1031 0638 DAB2     		uxtb	r2, r3
 1032 063a 40F20003 		movw	r3, #:lower16:data_E
 1033 063e C0F20003 		movt	r3, #:upper16:data_E
 1034 0642 9A70     		strb	r2, [r3, #2]
 1035 0644 97E0     		b	.L35
 1036              	.L22:
 360:../Main.c     **** 			if (pow2 > 30)
 1037              		.loc 1 360 0
 1038 0646 B7F90430 		ldrsh	r3, [r7, #4]
 1039 064a 1E2B     		cmp	r3, #30
 1040 064c 03DD     		ble	.L36
 361:../Main.c     **** 				albh2 = 0; //ok
 1041              		.loc 1 361 0
 1042 064e 4FF00003 		mov	r3, #0
 1043 0652 BB73     		strb	r3, [r7, #14]
 1044 0654 0EE0     		b	.L37
 1045              	.L36:
 362:../Main.c     **** 			else if (pow2 < -30)
 1046              		.loc 1 362 0
 1047 0656 B7F90430 		ldrsh	r3, [r7, #4]
 1048 065a 13F11E0F 		cmn	r3, #30
 1049 065e 03DA     		bge	.L38
 363:../Main.c     **** 				blah2 = 0; //ok
 1050              		.loc 1 363 0
 1051 0660 4FF00003 		mov	r3, #0
 1052 0664 FB73     		strb	r3, [r7, #15]
 1053 0666 05E0     		b	.L37
 1054              	.L38:
 365:../Main.c     **** 				albh2 = 1;
 1055              		.loc 1 365 0
 1056 0668 4FF00103 		mov	r3, #1
 1057 066c BB73     		strb	r3, [r7, #14]
 366:../Main.c     **** 				blah2 = 0;
 1058              		.loc 1 366 0
 1059 066e 4FF00003 		mov	r3, #0
 1060 0672 FB73     		strb	r3, [r7, #15]
 1061              	.L37:
 368:../Main.c     **** 			if (pow1 > 30)
 1062              		.loc 1 368 0
 1063 0674 B7F90630 		ldrsh	r3, [r7, #6]
 1064 0678 1E2B     		cmp	r3, #30
 1065 067a 03DD     		ble	.L39
 369:../Main.c     **** 				albh1 = 0;
 1066              		.loc 1 369 0
 1067 067c 4FF00003 		mov	r3, #0
 1068 0680 3B73     		strb	r3, [r7, #12]
 1069 0682 0EE0     		b	.L40
 1070              	.L39:
 370:../Main.c     **** 			else if (pow1 < -30)
 1071              		.loc 1 370 0
 1072 0684 B7F90630 		ldrsh	r3, [r7, #6]
 1073 0688 13F11E0F 		cmn	r3, #30
 1074 068c 03DA     		bge	.L41
 371:../Main.c     **** 				blah1 = 0;
 1075              		.loc 1 371 0
 1076 068e 4FF00003 		mov	r3, #0
 1077 0692 7B73     		strb	r3, [r7, #13]
 1078 0694 05E0     		b	.L40
 1079              	.L41:
 373:../Main.c     **** 				albh1 = 1;
 1080              		.loc 1 373 0
 1081 0696 4FF00103 		mov	r3, #1
 1082 069a 3B73     		strb	r3, [r7, #12]
 374:../Main.c     **** 				blah1 = 0;
 1083              		.loc 1 374 0
 1084 069c 4FF00003 		mov	r3, #0
 1085 06a0 7B73     		strb	r3, [r7, #13]
 1086              	.L40:
 376:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1087              		.loc 1 376 0
 1088 06a2 B7F90630 		ldrsh	r3, [r7, #6]
 1089 06a6 002B     		cmp	r3, #0
 1090 06a8 05DD     		ble	.L42
 376:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1091              		.loc 1 376 0 is_stmt 0 discriminator 1
 1092 06aa FB88     		ldrh	r3, [r7, #6]
 1093 06ac 4FEA4303 		lsl	r3, r3, #1
 1094 06b0 9BB2     		uxth	r3, r3
 1095 06b2 9BB2     		uxth	r3, r3
 1096 06b4 08E0     		b	.L43
 1097              	.L42:
 376:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1098              		.loc 1 376 0 discriminator 2
 1099 06b6 FB88     		ldrh	r3, [r7, #6]
 1100 06b8 1A46     		mov	r2, r3	@ movhi
 1101 06ba 4FEAC232 		lsl	r2, r2, #15
 1102 06be D31A     		subs	r3, r2, r3
 1103 06c0 4FEA4303 		lsl	r3, r3, #1
 1104 06c4 9BB2     		uxth	r3, r3
 1105 06c6 9BB2     		uxth	r3, r3
 1106              	.L43:
 376:../Main.c     **** 			temp = pow1 > 0 ? pow1 * 2 : (-pow1) * 2;
 1107              		.loc 1 376 0 discriminator 3
 1108 06c8 7B81     		strh	r3, [r7, #10]	@ movhi
 377:../Main.c     **** 			if (temp > 255)
 1109              		.loc 1 377 0 is_stmt 1 discriminator 3
 1110 06ca B7F90A30 		ldrsh	r3, [r7, #10]
 1111 06ce FF2B     		cmp	r3, #255
 1112 06d0 02DD     		ble	.L44
 378:../Main.c     **** 				temp = 255;
 1113              		.loc 1 378 0
 1114 06d2 4FF0FF03 		mov	r3, #255
 1115 06d6 7B81     		strh	r3, [r7, #10]	@ movhi
 1116              	.L44:
 379:../Main.c     **** 			data_E[2] = temp * pwm_max / 100;
 1117              		.loc 1 379 0
 1118 06d8 B7F90A20 		ldrsh	r2, [r7, #10]
 1119 06dc 40F20003 		movw	r3, #:lower16:pwm_max
 1120 06e0 C0F20003 		movt	r3, #:upper16:pwm_max
 1121 06e4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1122 06e6 03FB02F2 		mul	r2, r3, r2
 1123 06ea 48F21F53 		movw	r3, #34079
 1124 06ee C5F2EB13 		movt	r3, 20971
 1125 06f2 83FB0213 		smull	r1, r3, r3, r2
 1126 06f6 4FEA6311 		asr	r1, r3, #5
 1127 06fa 4FEAE273 		asr	r3, r2, #31
 1128 06fe CB1A     		subs	r3, r1, r3
 1129 0700 DAB2     		uxtb	r2, r3
 1130 0702 40F20003 		movw	r3, #:lower16:data_E
 1131 0706 C0F20003 		movt	r3, #:upper16:data_E
 1132 070a 9A70     		strb	r2, [r3, #2]
 380:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1133              		.loc 1 380 0
 1134 070c B7F90430 		ldrsh	r3, [r7, #4]
 1135 0710 002B     		cmp	r3, #0
 1136 0712 05DD     		ble	.L45
 380:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1137              		.loc 1 380 0 is_stmt 0 discriminator 1
 1138 0714 BB88     		ldrh	r3, [r7, #4]
 1139 0716 4FEA4303 		lsl	r3, r3, #1
 1140 071a 9BB2     		uxth	r3, r3
 1141 071c 9BB2     		uxth	r3, r3
 1142 071e 08E0     		b	.L46
 1143              	.L45:
 380:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1144              		.loc 1 380 0 discriminator 2
 1145 0720 BB88     		ldrh	r3, [r7, #4]
 1146 0722 1A46     		mov	r2, r3	@ movhi
 1147 0724 4FEAC232 		lsl	r2, r2, #15
 1148 0728 D31A     		subs	r3, r2, r3
 1149 072a 4FEA4303 		lsl	r3, r3, #1
 1150 072e 9BB2     		uxth	r3, r3
 1151 0730 9BB2     		uxth	r3, r3
 1152              	.L46:
 380:../Main.c     **** 			temp = pow2 > 0 ? pow2 * 2 : (-pow2) * 2;
 1153              		.loc 1 380 0 discriminator 3
 1154 0732 7B81     		strh	r3, [r7, #10]	@ movhi
 381:../Main.c     **** 			if (temp > 255)
 1155              		.loc 1 381 0 is_stmt 1 discriminator 3
 1156 0734 B7F90A30 		ldrsh	r3, [r7, #10]
 1157 0738 FF2B     		cmp	r3, #255
 1158 073a 02DD     		ble	.L47
 382:../Main.c     **** 				temp = 255;
 1159              		.loc 1 382 0
 1160 073c 4FF0FF03 		mov	r3, #255
 1161 0740 7B81     		strh	r3, [r7, #10]	@ movhi
 1162              	.L47:
 383:../Main.c     **** 			data_E[1] = temp * pwm_max / 100;
 1163              		.loc 1 383 0
 1164 0742 B7F90A20 		ldrsh	r2, [r7, #10]
 1165 0746 40F20003 		movw	r3, #:lower16:pwm_max
 1166 074a C0F20003 		movt	r3, #:upper16:pwm_max
 1167 074e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1168 0750 03FB02F2 		mul	r2, r3, r2
 1169 0754 48F21F53 		movw	r3, #34079
 1170 0758 C5F2EB13 		movt	r3, 20971
 1171 075c 83FB0213 		smull	r1, r3, r3, r2
 1172 0760 4FEA6311 		asr	r1, r3, #5
 1173 0764 4FEAE273 		asr	r3, r2, #31
 1174 0768 CB1A     		subs	r3, r1, r3
 1175 076a DAB2     		uxtb	r2, r3
 1176 076c 40F20003 		movw	r3, #:lower16:data_E
 1177 0770 C0F20003 		movt	r3, #:upper16:data_E
 1178 0774 5A70     		strb	r2, [r3, #1]
 1179              	.L35:
 387:../Main.c     **** 		char data_0 = (mode & 1);
 1180              		.loc 1 387 0
 1181 0776 40F20003 		movw	r3, #:lower16:mode
 1182 077a C0F20003 		movt	r3, #:upper16:mode
 1183 077e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1184 0780 03F00103 		and	r3, r3, #1
 1185 0784 FB70     		strb	r3, [r7, #3]
 388:../Main.c     **** 		char data_1 = ((mode >> 1) & 1);
 1186              		.loc 1 388 0
 1187 0786 40F20003 		movw	r3, #:lower16:mode
 1188 078a C0F20003 		movt	r3, #:upper16:mode
 1189 078e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1190 0790 4FEA5303 		lsr	r3, r3, #1
 1191 0794 DBB2     		uxtb	r3, r3
 1192 0796 03F00103 		and	r3, r3, #1
 1193 079a BB70     		strb	r3, [r7, #2]
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 1194              		.loc 1 393 0
 1195 079c 40F20003 		movw	r3, #:lower16:data_E
 1196 07a0 C0F20003 		movt	r3, #:upper16:data_E
 1197 07a4 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1198 07a6 7B7B     		ldrb	r3, [r7, #13]
 1199 07a8 1343     		orrs	r3, r3, r2
 1200 07aa DBB2     		uxtb	r3, r3
 1201 07ac DAB2     		uxtb	r2, r3
 1202 07ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1203 07b0 4FEA0313 		lsl	r3, r3, #4
 1204 07b4 DBB2     		uxtb	r3, r3
 1205 07b6 1343     		orrs	r3, r3, r2
 1206 07b8 DAB2     		uxtb	r2, r3
 394:../Main.c     **** 						| (albh1 << ALBH2) | (albh2 << ALBH1) | (data_1 << ENABLE)
 1207              		.loc 1 394 0
 1208 07ba 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 1209 07bc 4FEAC303 		lsl	r3, r3, #3
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 1210              		.loc 1 393 0
 1211 07c0 DBB2     		uxtb	r3, r3
 1212 07c2 1343     		orrs	r3, r3, r2
 1213 07c4 DAB2     		uxtb	r2, r3
 394:../Main.c     **** 						| (albh1 << ALBH2) | (albh2 << ALBH1) | (data_1 << ENABLE)
 1214              		.loc 1 394 0
 1215 07c6 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1216 07c8 4FEA4313 		lsl	r3, r3, #5
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 1217              		.loc 1 393 0
 1218 07cc DBB2     		uxtb	r3, r3
 1219 07ce 1343     		orrs	r3, r3, r2
 1220 07d0 DAB2     		uxtb	r2, r3
 394:../Main.c     **** 						| (albh1 << ALBH2) | (albh2 << ALBH1) | (data_1 << ENABLE)
 1221              		.loc 1 394 0
 1222 07d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1223 07d4 4FEA8303 		lsl	r3, r3, #2
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 1224              		.loc 1 393 0
 1225 07d8 DBB2     		uxtb	r3, r3
 1226 07da 1343     		orrs	r3, r3, r2
 1227 07dc DAB2     		uxtb	r2, r3
 395:../Main.c     **** 						| (data_0 << BUZINA);
 1228              		.loc 1 395 0
 1229 07de FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1230 07e0 4FEA4303 		lsl	r3, r3, #1
 393:../Main.c     **** 		data_E[3] = data_E[3] | (blah1 << BLAH2) | (blah2 << BLAH1)
 1231              		.loc 1 393 0
 1232 07e4 DBB2     		uxtb	r3, r3
 1233 07e6 1343     		orrs	r3, r3, r2
 1234 07e8 DBB2     		uxtb	r3, r3
 1235 07ea DAB2     		uxtb	r2, r3
 1236 07ec 40F20003 		movw	r3, #:lower16:data_E
 1237 07f0 C0F20003 		movt	r3, #:upper16:data_E
 1238 07f4 DA70     		strb	r2, [r3, #3]
 396:../Main.c     **** 		data_E[4] = result.Result >> 4; //Resultado tem precisao de 12bits, divide por 16 para obter 8 bi
 1239              		.loc 1 396 0
 1240 07f6 40F20003 		movw	r3, #:lower16:result
 1241 07fa C0F20003 		movt	r3, #:upper16:result
 1242 07fe 5B88     		ldrh	r3, [r3, #2]
 1243 0800 4FEA1313 		lsr	r3, r3, #4
 1244 0804 9BB2     		uxth	r3, r3
 1245 0806 DAB2     		uxtb	r2, r3
 1246 0808 40F20003 		movw	r3, #:lower16:data_E
 1247 080c C0F20003 		movt	r3, #:upper16:data_E
 1248 0810 1A71     		strb	r2, [r3, #4]
 398:../Main.c     **** 		last_value_left = data_E[1];
 1249              		.loc 1 398 0
 1250 0812 40F20003 		movw	r3, #:lower16:data_E
 1251 0816 C0F20003 		movt	r3, #:upper16:data_E
 1252 081a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1253 081c 1A46     		mov	r2, r3
 1254 081e 40F20003 		movw	r3, #:lower16:last_value_left
 1255 0822 C0F20003 		movt	r3, #:upper16:last_value_left
 1256 0826 1A60     		str	r2, [r3, #0]
 399:../Main.c     **** 		last_value_right = data_E[2];
 1257              		.loc 1 399 0
 1258 0828 40F20003 		movw	r3, #:lower16:data_E
 1259 082c C0F20003 		movt	r3, #:upper16:data_E
 1260 0830 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1261 0832 1A46     		mov	r2, r3
 1262 0834 40F20003 		movw	r3, #:lower16:last_value_right
 1263 0838 C0F20003 		movt	r3, #:upper16:last_value_right
 1264 083c 1A60     		str	r2, [r3, #0]
 401:../Main.c     **** 		write_E();
 1265              		.loc 1 401 0
 1266 083e FFF7FEFF 		bl	write_E
 402:../Main.c     **** 		updateButtonStates();
 1267              		.loc 1 402 0
 1268 0842 FFF7FEFF 		bl	updateButtonStates
 1269              	.LBE5:
 1270              		.loc 1 403 0
 1271 0846 0EE4     		b	.L48
 1272              		.cfi_endproc
 1273              	.LFE117:
 1275              		.section	.text.read_R,"ax",%progbits
 1276              		.align	2
 1277              		.global	read_R
 1278              		.thumb
 1279              		.thumb_func
 1281              	read_R:
 1282              	.LFB118:
 404:../Main.c     **** 	return 0;
 405:../Main.c     **** }
 406:../Main.c     **** 
 407:../Main.c     **** /***************************************************/
 408:../Main.c     **** /***************FUNCOES DO TRANSCEPTOR**************/
 409:../Main.c     **** /***************************************************/
 410:../Main.c     **** 
 411:../Main.c     **** void read_R() {
 1283              		.loc 1 411 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 1, uses_anonymous_args = 0
 1287 0000 80B5     		push	{r7, lr}
 1288              	.LCFI3:
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 82B0     		sub	sp, sp, #8
 1293              	.LCFI4:
 1294              		.cfi_def_cfa_offset 16
 1295 0004 00AF     		add	r7, sp, #0
 1296              	.LCFI5:
 1297              		.cfi_def_cfa_register 7
 412:../Main.c     **** 	int i;
 413:../Main.c     **** 	IO004_ResetPin(CE);
 1298              		.loc 1 413 0
 1299 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1300 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1301 000e 5A68     		ldr	r2, [r3, #4]
 1302 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1303 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1304 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1305 001a 4FF48031 		mov	r1, #65536
 1306 001e 01FA03F3 		lsl	r3, r1, r3
 1307 0022 5360     		str	r3, [r2, #4]
 414:../Main.c     **** 	delay(50000);
 1308              		.loc 1 414 0
 1309 0024 4CF25030 		movw	r0, #50000
 1310 0028 FFF7FEFF 		bl	delay
 415:../Main.c     **** 	uint8_t temp = 0;
 1311              		.loc 1 415 0
 1312 002c 4FF00003 		mov	r3, #0
 1313 0030 FB70     		strb	r3, [r7, #3]
 416:../Main.c     **** 
 417:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1314              		.loc 1 417 0
 1315 0032 4FF00703 		mov	r3, #7
 1316 0036 7B60     		str	r3, [r7, #4]
 1317 0038 20E0     		b	.L50
 1318              	.L52:
 418:../Main.c     **** 		if (IO004_ReadPin(DATA))
 1319              		.loc 1 418 0
 1320 003a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1321 003e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1322 0042 5B68     		ldr	r3, [r3, #4]
 1323 0044 5A6A     		ldr	r2, [r3, #36]
 1324 0046 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1325 004a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1326 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1327 0050 22FA03F3 		lsr	r3, r2, r3
 1328 0054 03F00103 		and	r3, r3, #1
 1329 0058 002B     		cmp	r3, #0
 1330 005a 09D0     		beq	.L51
 419:../Main.c     **** 			temp |= (1 << i);
 1331              		.loc 1 419 0
 1332 005c 4FF00102 		mov	r2, #1
 1333 0060 7B68     		ldr	r3, [r7, #4]
 1334 0062 02FA03F3 		lsl	r3, r2, r3
 1335 0066 DAB2     		uxtb	r2, r3
 1336 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1337 006a 1343     		orrs	r3, r3, r2
 1338 006c DBB2     		uxtb	r3, r3
 1339 006e FB70     		strb	r3, [r7, #3]
 1340              	.L51:
 420:../Main.c     **** 		pulse_R();
 1341              		.loc 1 420 0
 1342 0070 FFF7FEFF 		bl	pulse_R
 417:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1343              		.loc 1 417 0
 1344 0074 7B68     		ldr	r3, [r7, #4]
 1345 0076 03F1FF33 		add	r3, r3, #-1
 1346 007a 7B60     		str	r3, [r7, #4]
 1347              	.L50:
 417:../Main.c     **** 	for (i = 7; i > -1; i--) {
 1348              		.loc 1 417 0 is_stmt 0 discriminator 1
 1349 007c 7B68     		ldr	r3, [r7, #4]
 1350 007e 002B     		cmp	r3, #0
 1351 0080 DBDA     		bge	.L52
 421:../Main.c     **** 	}
 422:../Main.c     **** 	data_R = temp;
 1352              		.loc 1 422 0 is_stmt 1
 1353 0082 40F20003 		movw	r3, #:lower16:data_R
 1354 0086 C0F20003 		movt	r3, #:upper16:data_R
 1355 008a FA78     		ldrb	r2, [r7, #3]
 1356 008c 1A70     		strb	r2, [r3, #0]
 423:../Main.c     **** 	IO004_SetPin(CE);
 1357              		.loc 1 423 0
 1358 008e 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1359 0092 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1360 0096 5A68     		ldr	r2, [r3, #4]
 1361 0098 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1362 009c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1363 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1364 00a2 4FF00101 		mov	r1, #1
 1365 00a6 01FA03F3 		lsl	r3, r1, r3
 1366 00aa 5360     		str	r3, [r2, #4]
 424:../Main.c     **** 	delay(50000);
 1367              		.loc 1 424 0
 1368 00ac 4CF25030 		movw	r0, #50000
 1369 00b0 FFF7FEFF 		bl	delay
 425:../Main.c     **** }
 1370              		.loc 1 425 0
 1371 00b4 07F10807 		add	r7, r7, #8
 1372 00b8 BD46     		mov	sp, r7
 1373 00ba 80BD     		pop	{r7, pc}
 1374              		.cfi_endproc
 1375              	.LFE118:
 1377              		.section	.text.pulse_R,"ax",%progbits
 1378              		.align	2
 1379              		.global	pulse_R
 1380              		.thumb
 1381              		.thumb_func
 1383              	pulse_R:
 1384              	.LFB119:
 426:../Main.c     **** 
 427:../Main.c     **** void pulse_R() {
 1385              		.loc 1 427 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389 0000 80B5     		push	{r7, lr}
 1390              	.LCFI6:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 7, -8
 1393              		.cfi_offset 14, -4
 1394 0002 00AF     		add	r7, sp, #0
 1395              	.LCFI7:
 1396              		.cfi_def_cfa_register 7
 428:../Main.c     **** 	delay(300);
 1397              		.loc 1 428 0
 1398 0004 4FF49670 		mov	r0, #300
 1399 0008 FFF7FEFF 		bl	delay
 429:../Main.c     **** 	IO004_SetPin(CLK1);
 1400              		.loc 1 429 0
 1401 000c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1402 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1403 0014 5A68     		ldr	r2, [r3, #4]
 1404 0016 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1405 001a C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1406 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1407 0020 4FF00101 		mov	r1, #1
 1408 0024 01FA03F3 		lsl	r3, r1, r3
 1409 0028 5360     		str	r3, [r2, #4]
 430:../Main.c     **** 	delay(300);
 1410              		.loc 1 430 0
 1411 002a 4FF49670 		mov	r0, #300
 1412 002e FFF7FEFF 		bl	delay
 431:../Main.c     **** 	IO004_ResetPin(CLK1);
 1413              		.loc 1 431 0
 1414 0032 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1415 0036 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1416 003a 5A68     		ldr	r2, [r3, #4]
 1417 003c 40F20003 		movw	r3, #:lower16:IO004_Handle2
 1418 0040 C0F20003 		movt	r3, #:upper16:IO004_Handle2
 1419 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1420 0046 4FF48031 		mov	r1, #65536
 1421 004a 01FA03F3 		lsl	r3, r1, r3
 1422 004e 5360     		str	r3, [r2, #4]
 432:../Main.c     **** }
 1423              		.loc 1 432 0
 1424 0050 80BD     		pop	{r7, pc}
 1425              		.cfi_endproc
 1426              	.LFE119:
 1428 0052 00BF     		.section	.text.configure_E,"ax",%progbits
 1429              		.align	2
 1430              		.global	configure_E
 1431              		.thumb
 1432              		.thumb_func
 1434              	configure_E:
 1435              	.LFB120:
 433:../Main.c     **** 
 434:../Main.c     **** void configure_E() {
 1436              		.loc 1 434 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 8
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440 0000 80B5     		push	{r7, lr}
 1441              	.LCFI8:
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
 1445 0002 82B0     		sub	sp, sp, #8
 1446              	.LCFI9:
 1447              		.cfi_def_cfa_offset 16
 1448 0004 00AF     		add	r7, sp, #0
 1449              	.LCFI10:
 1450              		.cfi_def_cfa_register 7
 435:../Main.c     **** 	/*Atribuicao de valores ao vetor de configuracao do transceptor*/
 436:../Main.c     **** 	configuration[0] = 0xC4; //RF_CH# e OP_MODE 0b11011110
 1451              		.loc 1 436 0
 1452 0006 40F20003 		movw	r3, #:lower16:configuration
 1453 000a C0F20003 		movt	r3, #:upper16:configuration
 1454 000e 4FF0C402 		mov	r2, #196
 1455 0012 1A70     		strb	r2, [r3, #0]
 437:../Main.c     **** 	configuration[1] = 0x4F; //RX2_EN, CM, RFDR_SB13, X0_F, RF_PWR 0b01101111
 1456              		.loc 1 437 0
 1457 0014 40F20003 		movw	r3, #:lower16:configuration
 1458 0018 C0F20003 		movt	r3, #:upper16:configuration
 1459 001c 4FF04F02 		mov	r2, #79
 1460 0020 5A70     		strb	r2, [r3, #1]
 438:../Main.c     **** 	configuration[2] = 0xA3; //addr_w
 1461              		.loc 1 438 0
 1462 0022 40F20003 		movw	r3, #:lower16:configuration
 1463 0026 C0F20003 		movt	r3, #:upper16:configuration
 1464 002a 4FF0A302 		mov	r2, #163
 1465 002e 9A70     		strb	r2, [r3, #2]
 439:../Main.c     **** 	configuration[3] = 0xEE; //Comeco enderco CH1 00000001
 1466              		.loc 1 439 0
 1467 0030 40F20003 		movw	r3, #:lower16:configuration
 1468 0034 C0F20003 		movt	r3, #:upper16:configuration
 1469 0038 4FF0EE02 		mov	r2, #238
 1470 003c DA70     		strb	r2, [r3, #3]
 440:../Main.c     **** 	configuration[4] = 0xDD; //0b00000000
 1471              		.loc 1 440 0
 1472 003e 40F20003 		movw	r3, #:lower16:configuration
 1473 0042 C0F20003 		movt	r3, #:upper16:configuration
 1474 0046 4FF0DD02 		mov	r2, #221
 1475 004a 1A71     		strb	r2, [r3, #4]
 441:../Main.c     **** 	configuration[5] = 0xCC; //0b11010100
 1476              		.loc 1 441 0
 1477 004c 40F20003 		movw	r3, #:lower16:configuration
 1478 0050 C0F20003 		movt	r3, #:upper16:configuration
 1479 0054 4FF0CC02 		mov	r2, #204
 1480 0058 5A71     		strb	r2, [r3, #5]
 442:../Main.c     **** 	configuration[6] = 0xBB; //0b11011111
 1481              		.loc 1 442 0
 1482 005a 40F20003 		movw	r3, #:lower16:configuration
 1483 005e C0F20003 		movt	r3, #:upper16:configuration
 1484 0062 4FF0BB02 		mov	r2, #187
 1485 0066 9A71     		strb	r2, [r3, #6]
 443:../Main.c     **** 	configuration[7] = 0xAA; //Fim enderco CH1 0b11101010
 1486              		.loc 1 443 0
 1487 0068 40F20003 		movw	r3, #:lower16:configuration
 1488 006c C0F20003 		movt	r3, #:upper16:configuration
 1489 0070 4FF0AA02 		mov	r2, #170
 1490 0074 DA71     		strb	r2, [r3, #7]
 444:../Main.c     **** 	configuration[8] = 0b00000000; //Comeco enderco CH2
 1491              		.loc 1 444 0
 1492 0076 40F20003 		movw	r3, #:lower16:configuration
 1493 007a C0F20003 		movt	r3, #:upper16:configuration
 1494 007e 4FF00002 		mov	r2, #0
 1495 0082 1A72     		strb	r2, [r3, #8]
 445:../Main.c     **** 	configuration[9] = 0b00000000;
 1496              		.loc 1 445 0
 1497 0084 40F20003 		movw	r3, #:lower16:configuration
 1498 0088 C0F20003 		movt	r3, #:upper16:configuration
 1499 008c 4FF00002 		mov	r2, #0
 1500 0090 5A72     		strb	r2, [r3, #9]
 446:../Main.c     **** 	configuration[10] = 0b00000000;
 1501              		.loc 1 446 0
 1502 0092 40F20003 		movw	r3, #:lower16:configuration
 1503 0096 C0F20003 		movt	r3, #:upper16:configuration
 1504 009a 4FF00002 		mov	r2, #0
 1505 009e 9A72     		strb	r2, [r3, #10]
 447:../Main.c     **** 	configuration[11] = 0b00000000;
 1506              		.loc 1 447 0
 1507 00a0 40F20003 		movw	r3, #:lower16:configuration
 1508 00a4 C0F20003 		movt	r3, #:upper16:configuration
 1509 00a8 4FF00002 		mov	r2, #0
 1510 00ac DA72     		strb	r2, [r3, #11]
 448:../Main.c     **** 	configuration[12] = 0b00000000; //Fim enderco CH2
 1511              		.loc 1 448 0
 1512 00ae 40F20003 		movw	r3, #:lower16:configuration
 1513 00b2 C0F20003 		movt	r3, #:upper16:configuration
 1514 00b6 4FF00002 		mov	r2, #0
 1515 00ba 1A73     		strb	r2, [r3, #12]
 449:../Main.c     **** 	configuration[13] = 0x28; //num bits enviados (1 byte nesse ex) TODO arrumar
 1516              		.loc 1 449 0
 1517 00bc 40F20003 		movw	r3, #:lower16:configuration
 1518 00c0 C0F20003 		movt	r3, #:upper16:configuration
 1519 00c4 4FF02802 		mov	r2, #40
 1520 00c8 5A73     		strb	r2, [r3, #13]
 450:../Main.c     **** 	configuration[14] = 0b00000000;
 1521              		.loc 1 450 0
 1522 00ca 40F20003 		movw	r3, #:lower16:configuration
 1523 00ce C0F20003 		movt	r3, #:upper16:configuration
 1524 00d2 4FF00002 		mov	r2, #0
 1525 00d6 9A73     		strb	r2, [r3, #14]
 451:../Main.c     **** 
 452:../Main.c     **** 	IO004_ResetPin(CE);
 1526              		.loc 1 452 0
 1527 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1528 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1529 00e0 5A68     		ldr	r2, [r3, #4]
 1530 00e2 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1531 00e6 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1532 00ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1533 00ec 4FF48031 		mov	r1, #65536
 1534 00f0 01FA03F3 		lsl	r3, r1, r3
 1535 00f4 5360     		str	r3, [r2, #4]
 453:../Main.c     **** 	IO004_SetPin(CS);
 1536              		.loc 1 453 0
 1537 00f6 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1538 00fa C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1539 00fe 5A68     		ldr	r2, [r3, #4]
 1540 0100 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1541 0104 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1542 0108 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1543 010a 4FF00101 		mov	r1, #1
 1544 010e 01FA03F3 		lsl	r3, r1, r3
 1545 0112 5360     		str	r3, [r2, #4]
 454:../Main.c     **** 	int i, j;
 455:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1546              		.loc 1 455 0
 1547 0114 4FF00E03 		mov	r3, #14
 1548 0118 7B60     		str	r3, [r7, #4]
 1549 011a 3FE0     		b	.L55
 1550              	.L60:
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1551              		.loc 1 456 0
 1552 011c 4FF00703 		mov	r3, #7
 1553 0120 3B60     		str	r3, [r7, #0]
 1554 0122 34E0     		b	.L56
 1555              	.L59:
 457:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1556              		.loc 1 457 0
 1557 0124 40F20003 		movw	r3, #:lower16:configuration
 1558 0128 C0F20003 		movt	r3, #:upper16:configuration
 1559 012c 7A68     		ldr	r2, [r7, #4]
 1560 012e 9B18     		adds	r3, r3, r2
 1561 0130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1562 0132 1A46     		mov	r2, r3
 1563 0134 4FF00101 		mov	r1, #1
 1564 0138 3B68     		ldr	r3, [r7, #0]
 1565 013a 01FA03F3 		lsl	r3, r1, r3
 1566 013e 1340     		ands	r3, r3, r2
 1567 0140 002B     		cmp	r3, #0
 1568 0142 0FDD     		ble	.L57
 458:../Main.c     **** 				IO004_SetPin(DATA);
 1569              		.loc 1 458 0
 1570 0144 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1571 0148 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1572 014c 5A68     		ldr	r2, [r3, #4]
 1573 014e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1574 0152 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1575 0156 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1576 0158 4FF00101 		mov	r1, #1
 1577 015c 01FA03F3 		lsl	r3, r1, r3
 1578 0160 5360     		str	r3, [r2, #4]
 1579 0162 0EE0     		b	.L58
 1580              	.L57:
 459:../Main.c     **** 			else
 460:../Main.c     **** 				IO004_ResetPin(DATA);
 1581              		.loc 1 460 0
 1582 0164 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1583 0168 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1584 016c 5A68     		ldr	r2, [r3, #4]
 1585 016e 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1586 0172 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1587 0176 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1588 0178 4FF48031 		mov	r1, #65536
 1589 017c 01FA03F3 		lsl	r3, r1, r3
 1590 0180 5360     		str	r3, [r2, #4]
 1591              	.L58:
 461:../Main.c     **** 			;
 462:../Main.c     **** 			pulse_R();
 1592              		.loc 1 462 0
 1593 0182 FFF7FEFF 		bl	pulse_R
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1594              		.loc 1 456 0
 1595 0186 3B68     		ldr	r3, [r7, #0]
 1596 0188 03F1FF33 		add	r3, r3, #-1
 1597 018c 3B60     		str	r3, [r7, #0]
 1598              	.L56:
 456:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1599              		.loc 1 456 0 is_stmt 0 discriminator 1
 1600 018e 3B68     		ldr	r3, [r7, #0]
 1601 0190 002B     		cmp	r3, #0
 1602 0192 C7DA     		bge	.L59
 455:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1603              		.loc 1 455 0 is_stmt 1
 1604 0194 7B68     		ldr	r3, [r7, #4]
 1605 0196 03F1FF33 		add	r3, r3, #-1
 1606 019a 7B60     		str	r3, [r7, #4]
 1607              	.L55:
 455:../Main.c     **** 	for (i = 14; i > -1; i--) {
 1608              		.loc 1 455 0 is_stmt 0 discriminator 1
 1609 019c 7B68     		ldr	r3, [r7, #4]
 1610 019e 002B     		cmp	r3, #0
 1611 01a0 BCDA     		bge	.L60
 463:../Main.c     **** 		}
 464:../Main.c     **** 	}
 465:../Main.c     **** 	IO004_ResetPin(CS);
 1612              		.loc 1 465 0 is_stmt 1
 1613 01a2 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1614 01a6 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1615 01aa 5A68     		ldr	r2, [r3, #4]
 1616 01ac 40F20003 		movw	r3, #:lower16:IO004_Handle1
 1617 01b0 C0F20003 		movt	r3, #:upper16:IO004_Handle1
 1618 01b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1619 01b6 4FF48031 		mov	r1, #65536
 1620 01ba 01FA03F3 		lsl	r3, r1, r3
 1621 01be 5360     		str	r3, [r2, #4]
 466:../Main.c     **** 	delay(50000);
 1622              		.loc 1 466 0
 1623 01c0 4CF25030 		movw	r0, #50000
 1624 01c4 FFF7FEFF 		bl	delay
 467:../Main.c     **** }
 1625              		.loc 1 467 0
 1626 01c8 07F10807 		add	r7, r7, #8
 1627 01cc BD46     		mov	sp, r7
 1628 01ce 80BD     		pop	{r7, pc}
 1629              		.cfi_endproc
 1630              	.LFE120:
 1632              		.section	.text.write_E,"ax",%progbits
 1633              		.align	2
 1634              		.global	write_E
 1635              		.thumb
 1636              		.thumb_func
 1638              	write_E:
 1639              	.LFB121:
 468:../Main.c     **** void write_E() {
 1640              		.loc 1 468 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 8
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644 0000 80B5     		push	{r7, lr}
 1645              	.LCFI11:
 1646              		.cfi_def_cfa_offset 8
 1647              		.cfi_offset 7, -8
 1648              		.cfi_offset 14, -4
 1649 0002 82B0     		sub	sp, sp, #8
 1650              	.LCFI12:
 1651              		.cfi_def_cfa_offset 16
 1652 0004 00AF     		add	r7, sp, #0
 1653              	.LCFI13:
 1654              		.cfi_def_cfa_register 7
 469:../Main.c     **** 	int i, j;
 470:../Main.c     **** 	IO004_SetPin(CE);
 1655              		.loc 1 470 0
 1656 0006 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1657 000a C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1658 000e 5A68     		ldr	r2, [r3, #4]
 1659 0010 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1660 0014 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1661 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1662 001a 4FF00101 		mov	r1, #1
 1663 001e 01FA03F3 		lsl	r3, r1, r3
 1664 0022 5360     		str	r3, [r2, #4]
 471:../Main.c     **** 	delay(1000);
 1665              		.loc 1 471 0
 1666 0024 4FF47A70 		mov	r0, #1000
 1667 0028 FFF7FEFF 		bl	delay
 472:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1668              		.loc 1 472 0
 1669 002c 4FF00703 		mov	r3, #7
 1670 0030 7B60     		str	r3, [r7, #4]
 1671 0032 3FE0     		b	.L62
 1672              	.L67:
 473:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1673              		.loc 1 473 0
 1674 0034 4FF00703 		mov	r3, #7
 1675 0038 3B60     		str	r3, [r7, #0]
 1676 003a 34E0     		b	.L63
 1677              	.L66:
 474:../Main.c     **** 			if ((configuration[i] & (1 << j)) > 0)
 1678              		.loc 1 474 0
 1679 003c 40F20003 		movw	r3, #:lower16:configuration
 1680 0040 C0F20003 		movt	r3, #:upper16:configuration
 1681 0044 7A68     		ldr	r2, [r7, #4]
 1682 0046 9B18     		adds	r3, r3, r2
 1683 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1684 004a 1A46     		mov	r2, r3
 1685 004c 4FF00101 		mov	r1, #1
 1686 0050 3B68     		ldr	r3, [r7, #0]
 1687 0052 01FA03F3 		lsl	r3, r1, r3
 1688 0056 1340     		ands	r3, r3, r2
 1689 0058 002B     		cmp	r3, #0
 1690 005a 0FDD     		ble	.L64
 475:../Main.c     **** 				IO004_SetPin(DATA);
 1691              		.loc 1 475 0
 1692 005c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1693 0060 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1694 0064 5A68     		ldr	r2, [r3, #4]
 1695 0066 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1696 006a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1697 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1698 0070 4FF00101 		mov	r1, #1
 1699 0074 01FA03F3 		lsl	r3, r1, r3
 1700 0078 5360     		str	r3, [r2, #4]
 1701 007a 0EE0     		b	.L65
 1702              	.L64:
 476:../Main.c     **** 			else
 477:../Main.c     **** 				IO004_ResetPin(DATA);
 1703              		.loc 1 477 0
 1704 007c 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1705 0080 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1706 0084 5A68     		ldr	r2, [r3, #4]
 1707 0086 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1708 008a C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1709 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1710 0090 4FF48031 		mov	r1, #65536
 1711 0094 01FA03F3 		lsl	r3, r1, r3
 1712 0098 5360     		str	r3, [r2, #4]
 1713              	.L65:
 478:../Main.c     **** 			pulse_R();
 1714              		.loc 1 478 0
 1715 009a FFF7FEFF 		bl	pulse_R
 473:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1716              		.loc 1 473 0
 1717 009e 3B68     		ldr	r3, [r7, #0]
 1718 00a0 03F1FF33 		add	r3, r3, #-1
 1719 00a4 3B60     		str	r3, [r7, #0]
 1720              	.L63:
 473:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1721              		.loc 1 473 0 is_stmt 0 discriminator 1
 1722 00a6 3B68     		ldr	r3, [r7, #0]
 1723 00a8 002B     		cmp	r3, #0
 1724 00aa C7DA     		bge	.L66
 472:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1725              		.loc 1 472 0 is_stmt 1
 1726 00ac 7B68     		ldr	r3, [r7, #4]
 1727 00ae 03F1FF33 		add	r3, r3, #-1
 1728 00b2 7B60     		str	r3, [r7, #4]
 1729              	.L62:
 472:../Main.c     **** 	for (i = 7; i > 2; i--) {
 1730              		.loc 1 472 0 is_stmt 0 discriminator 1
 1731 00b4 7B68     		ldr	r3, [r7, #4]
 1732 00b6 022B     		cmp	r3, #2
 1733 00b8 BCDC     		bgt	.L67
 479:../Main.c     **** 		}
 480:../Main.c     **** 	}
 481:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1734              		.loc 1 481 0 is_stmt 1
 1735 00ba 4FF00003 		mov	r3, #0
 1736 00be 7B60     		str	r3, [r7, #4]
 1737 00c0 3FE0     		b	.L68
 1738              	.L73:
 482:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1739              		.loc 1 482 0
 1740 00c2 4FF00703 		mov	r3, #7
 1741 00c6 3B60     		str	r3, [r7, #0]
 1742 00c8 34E0     		b	.L69
 1743              	.L72:
 483:../Main.c     **** 			if ((data_E[i] & (1 << j)) > 0)
 1744              		.loc 1 483 0
 1745 00ca 40F20003 		movw	r3, #:lower16:data_E
 1746 00ce C0F20003 		movt	r3, #:upper16:data_E
 1747 00d2 7A68     		ldr	r2, [r7, #4]
 1748 00d4 9B18     		adds	r3, r3, r2
 1749 00d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1750 00d8 1A46     		mov	r2, r3
 1751 00da 4FF00101 		mov	r1, #1
 1752 00de 3B68     		ldr	r3, [r7, #0]
 1753 00e0 01FA03F3 		lsl	r3, r1, r3
 1754 00e4 1340     		ands	r3, r3, r2
 1755 00e6 002B     		cmp	r3, #0
 1756 00e8 0FDD     		ble	.L70
 484:../Main.c     **** 				IO004_SetPin(DATA);
 1757              		.loc 1 484 0
 1758 00ea 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1759 00ee C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1760 00f2 5A68     		ldr	r2, [r3, #4]
 1761 00f4 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1762 00f8 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1763 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1764 00fe 4FF00101 		mov	r1, #1
 1765 0102 01FA03F3 		lsl	r3, r1, r3
 1766 0106 5360     		str	r3, [r2, #4]
 1767 0108 0EE0     		b	.L71
 1768              	.L70:
 485:../Main.c     **** 			else
 486:../Main.c     **** 				IO004_ResetPin(DATA);
 1769              		.loc 1 486 0
 1770 010a 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1771 010e C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1772 0112 5A68     		ldr	r2, [r3, #4]
 1773 0114 40F20003 		movw	r3, #:lower16:IO004_Handle4
 1774 0118 C0F20003 		movt	r3, #:upper16:IO004_Handle4
 1775 011c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1776 011e 4FF48031 		mov	r1, #65536
 1777 0122 01FA03F3 		lsl	r3, r1, r3
 1778 0126 5360     		str	r3, [r2, #4]
 1779              	.L71:
 487:../Main.c     **** 			pulse_R();
 1780              		.loc 1 487 0
 1781 0128 FFF7FEFF 		bl	pulse_R
 482:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1782              		.loc 1 482 0
 1783 012c 3B68     		ldr	r3, [r7, #0]
 1784 012e 03F1FF33 		add	r3, r3, #-1
 1785 0132 3B60     		str	r3, [r7, #0]
 1786              	.L69:
 482:../Main.c     **** 		for (j = 7; j > -1; j--) {
 1787              		.loc 1 482 0 is_stmt 0 discriminator 1
 1788 0134 3B68     		ldr	r3, [r7, #0]
 1789 0136 002B     		cmp	r3, #0
 1790 0138 C7DA     		bge	.L72
 481:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1791              		.loc 1 481 0 is_stmt 1
 1792 013a 7B68     		ldr	r3, [r7, #4]
 1793 013c 03F10103 		add	r3, r3, #1
 1794 0140 7B60     		str	r3, [r7, #4]
 1795              	.L68:
 481:../Main.c     **** 	for (i = 0; i < BYTES_TO_SEND; i++) {
 1796              		.loc 1 481 0 is_stmt 0 discriminator 1
 1797 0142 7B68     		ldr	r3, [r7, #4]
 1798 0144 042B     		cmp	r3, #4
 1799 0146 BCDD     		ble	.L73
 488:../Main.c     **** 		}
 489:../Main.c     **** 	} //termina de enviar dados
 490:../Main.c     **** 	IO004_ResetPin(CE);
 1800              		.loc 1 490 0 is_stmt 1
 1801 0148 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1802 014c C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1803 0150 5A68     		ldr	r2, [r3, #4]
 1804 0152 40F20003 		movw	r3, #:lower16:IO004_Handle6
 1805 0156 C0F20003 		movt	r3, #:upper16:IO004_Handle6
 1806 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1807 015c 4FF48031 		mov	r1, #65536
 1808 0160 01FA03F3 		lsl	r3, r1, r3
 1809 0164 5360     		str	r3, [r2, #4]
 491:../Main.c     **** 	delay(5000);
 1810              		.loc 1 491 0
 1811 0166 41F28830 		movw	r0, #5000
 1812 016a FFF7FEFF 		bl	delay
 492:../Main.c     **** }
 1813              		.loc 1 492 0
 1814 016e 07F10807 		add	r7, r7, #8
 1815 0172 BD46     		mov	sp, r7
 1816 0174 80BD     		pop	{r7, pc}
 1817              		.cfi_endproc
 1818              	.LFE121:
 1820 0176 00BF     		.section	.text.psxConfiguraControle,"ax",%progbits
 1821              		.align	2
 1822              		.global	psxConfiguraControle
 1823              		.thumb
 1824              		.thumb_func
 1826              	psxConfiguraControle:
 1827              	.LFB122:
 493:../Main.c     **** /***************************************************/
 494:../Main.c     **** /****************FUNCOES DO CONTROLE****************/
 495:../Main.c     **** /***************************************************/
 496:../Main.c     **** void psxConfiguraControle() {
 1828              		.loc 1 496 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 0000 80B5     		push	{r7, lr}
 1833              	.LCFI14:
 1834              		.cfi_def_cfa_offset 8
 1835              		.cfi_offset 7, -8
 1836              		.cfi_offset 14, -4
 1837 0002 00AF     		add	r7, sp, #0
 1838              	.LCFI15:
 1839              		.cfi_def_cfa_register 7
 497:../Main.c     **** 	psxEnterConfigMode();
 1840              		.loc 1 497 0
 1841 0004 FFF7FEFF 		bl	psxEnterConfigMode
 498:../Main.c     **** 	psxSetAnalogMode();
 1842              		.loc 1 498 0
 1843 0008 FFF7FEFF 		bl	psxSetAnalogMode
 499:../Main.c     **** 	psxExitConfigMode();
 1844              		.loc 1 499 0
 1845 000c FFF7FEFF 		bl	psxExitConfigMode
 500:../Main.c     **** }
 1846              		.loc 1 500 0
 1847 0010 80BD     		pop	{r7, pc}
 1848              		.cfi_endproc
 1849              	.LFE122:
 1851 0012 00BF     		.section	.text.psxEnterConfigMode,"ax",%progbits
 1852              		.align	2
 1853              		.global	psxEnterConfigMode
 1854              		.thumb
 1855              		.thumb_func
 1857              	psxEnterConfigMode:
 1858              	.LFB123:
 501:../Main.c     **** 
 502:../Main.c     **** void psxEnterConfigMode() {
 1859              		.loc 1 502 0
 1860              		.cfi_startproc
 1861              		@ args = 0, pretend = 0, frame = 8
 1862              		@ frame_needed = 1, uses_anonymous_args = 0
 1863 0000 80B5     		push	{r7, lr}
 1864              	.LCFI16:
 1865              		.cfi_def_cfa_offset 8
 1866              		.cfi_offset 7, -8
 1867              		.cfi_offset 14, -4
 1868 0002 82B0     		sub	sp, sp, #8
 1869              	.LCFI17:
 1870              		.cfi_def_cfa_offset 16
 1871 0004 00AF     		add	r7, sp, #0
 1872              	.LCFI18:
 1873              		.cfi_def_cfa_register 7
 503:../Main.c     **** 	int psxByte = 0;
 1874              		.loc 1 503 0
 1875 0006 4FF00003 		mov	r3, #0
 1876 000a 7B60     		str	r3, [r7, #4]
 504:../Main.c     **** 	IO004_SetPin(CMD);
 1877              		.loc 1 504 0
 1878 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1879 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1880 0014 5A68     		ldr	r2, [r3, #4]
 1881 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1882 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1883 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1884 0020 4FF00101 		mov	r1, #1
 1885 0024 01FA03F3 		lsl	r3, r1, r3
 1886 0028 5360     		str	r3, [r2, #4]
 505:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1887              		.loc 1 505 0
 1888 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1889 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1890 0032 5A68     		ldr	r2, [r3, #4]
 1891 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1892 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1893 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1894 003e 4FF00101 		mov	r1, #1
 1895 0042 01FA03F3 		lsl	r3, r1, r3
 1896 0046 5360     		str	r3, [r2, #4]
 506:../Main.c     **** 	IO004_ResetPin(ATT);
 1897              		.loc 1 506 0
 1898 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1899 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1900 0050 5A68     		ldr	r2, [r3, #4]
 1901 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1902 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1903 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1904 005c 4FF48031 		mov	r1, #65536
 1905 0060 01FA03F3 		lsl	r3, r1, r3
 1906 0064 5360     		str	r3, [r2, #4]
 507:../Main.c     **** 	delay(tempoInicio);
 1907              		.loc 1 507 0
 1908 0066 4FF49670 		mov	r0, #300
 1909 006a FFF7FEFF 		bl	delay
 508:../Main.c     **** 
 509:../Main.c     **** 	psxByte = 1;
 1910              		.loc 1 509 0
 1911 006e 4FF00103 		mov	r3, #1
 1912 0072 7B60     		str	r3, [r7, #4]
 510:../Main.c     **** 	psxTrocaByte(psxByte);
 1913              		.loc 1 510 0
 1914 0074 7868     		ldr	r0, [r7, #4]
 1915 0076 FFF7FEFF 		bl	psxTrocaByte
 511:../Main.c     **** 
 512:../Main.c     **** 	psxByte = 0x43;
 1916              		.loc 1 512 0
 1917 007a 4FF04303 		mov	r3, #67
 1918 007e 7B60     		str	r3, [r7, #4]
 513:../Main.c     **** 	psxTrocaByte(psxByte);
 1919              		.loc 1 513 0
 1920 0080 7868     		ldr	r0, [r7, #4]
 1921 0082 FFF7FEFF 		bl	psxTrocaByte
 514:../Main.c     **** 
 515:../Main.c     **** 	psxByte = 0;
 1922              		.loc 1 515 0
 1923 0086 4FF00003 		mov	r3, #0
 1924 008a 7B60     		str	r3, [r7, #4]
 516:../Main.c     **** 	psxTrocaByte(psxByte);
 1925              		.loc 1 516 0
 1926 008c 7868     		ldr	r0, [r7, #4]
 1927 008e FFF7FEFF 		bl	psxTrocaByte
 517:../Main.c     **** 
 518:../Main.c     **** 	psxByte = 0x1;
 1928              		.loc 1 518 0
 1929 0092 4FF00103 		mov	r3, #1
 1930 0096 7B60     		str	r3, [r7, #4]
 519:../Main.c     **** 	psxTrocaByte(psxByte);
 1931              		.loc 1 519 0
 1932 0098 7868     		ldr	r0, [r7, #4]
 1933 009a FFF7FEFF 		bl	psxTrocaByte
 520:../Main.c     **** 
 521:../Main.c     **** 	psxByte = 0;
 1934              		.loc 1 521 0
 1935 009e 4FF00003 		mov	r3, #0
 1936 00a2 7B60     		str	r3, [r7, #4]
 522:../Main.c     **** 	psxTrocaByte(psxByte);
 1937              		.loc 1 522 0
 1938 00a4 7868     		ldr	r0, [r7, #4]
 1939 00a6 FFF7FEFF 		bl	psxTrocaByte
 523:../Main.c     **** 
 524:../Main.c     **** 	IO004_SetPin(ATT);
 1940              		.loc 1 524 0
 1941 00aa 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1942 00ae C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1943 00b2 5A68     		ldr	r2, [r3, #4]
 1944 00b4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 1945 00b8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 1946 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1947 00be 4FF00101 		mov	r1, #1
 1948 00c2 01FA03F3 		lsl	r3, r1, r3
 1949 00c6 5360     		str	r3, [r2, #4]
 525:../Main.c     **** }
 1950              		.loc 1 525 0
 1951 00c8 07F10807 		add	r7, r7, #8
 1952 00cc BD46     		mov	sp, r7
 1953 00ce 80BD     		pop	{r7, pc}
 1954              		.cfi_endproc
 1955              	.LFE123:
 1957              		.section	.text.psxSetAnalogMode,"ax",%progbits
 1958              		.align	2
 1959              		.global	psxSetAnalogMode
 1960              		.thumb
 1961              		.thumb_func
 1963              	psxSetAnalogMode:
 1964              	.LFB124:
 526:../Main.c     **** 
 527:../Main.c     **** void psxSetAnalogMode() {
 1965              		.loc 1 527 0
 1966              		.cfi_startproc
 1967              		@ args = 0, pretend = 0, frame = 8
 1968              		@ frame_needed = 1, uses_anonymous_args = 0
 1969 0000 80B5     		push	{r7, lr}
 1970              	.LCFI19:
 1971              		.cfi_def_cfa_offset 8
 1972              		.cfi_offset 7, -8
 1973              		.cfi_offset 14, -4
 1974 0002 82B0     		sub	sp, sp, #8
 1975              	.LCFI20:
 1976              		.cfi_def_cfa_offset 16
 1977 0004 00AF     		add	r7, sp, #0
 1978              	.LCFI21:
 1979              		.cfi_def_cfa_register 7
 528:../Main.c     **** 	int psxByte = 0;
 1980              		.loc 1 528 0
 1981 0006 4FF00003 		mov	r3, #0
 1982 000a 7B60     		str	r3, [r7, #4]
 529:../Main.c     **** 	IO004_SetPin(CMD);
 1983              		.loc 1 529 0
 1984 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1985 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1986 0014 5A68     		ldr	r2, [r3, #4]
 1987 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 1988 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 1989 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1990 0020 4FF00101 		mov	r1, #1
 1991 0024 01FA03F3 		lsl	r3, r1, r3
 1992 0028 5360     		str	r3, [r2, #4]
 530:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 1993              		.loc 1 530 0
 1994 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1995 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1996 0032 5A68     		ldr	r2, [r3, #4]
 1997 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 1998 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 1999 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2000 003e 4FF00101 		mov	r1, #1
 2001 0042 01FA03F3 		lsl	r3, r1, r3
 2002 0046 5360     		str	r3, [r2, #4]
 531:../Main.c     **** 	IO004_ResetPin(ATT);
 2003              		.loc 1 531 0
 2004 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2005 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2006 0050 5A68     		ldr	r2, [r3, #4]
 2007 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2008 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2009 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2010 005c 4FF48031 		mov	r1, #65536
 2011 0060 01FA03F3 		lsl	r3, r1, r3
 2012 0064 5360     		str	r3, [r2, #4]
 532:../Main.c     **** 	delay(tempoInicio);
 2013              		.loc 1 532 0
 2014 0066 4FF49670 		mov	r0, #300
 2015 006a FFF7FEFF 		bl	delay
 533:../Main.c     **** 
 534:../Main.c     **** 	psxByte = 1;
 2016              		.loc 1 534 0
 2017 006e 4FF00103 		mov	r3, #1
 2018 0072 7B60     		str	r3, [r7, #4]
 535:../Main.c     **** 	psxTrocaByte(psxByte);
 2019              		.loc 1 535 0
 2020 0074 7868     		ldr	r0, [r7, #4]
 2021 0076 FFF7FEFF 		bl	psxTrocaByte
 536:../Main.c     **** 
 537:../Main.c     **** 	psxByte = 0x44;
 2022              		.loc 1 537 0
 2023 007a 4FF04403 		mov	r3, #68
 2024 007e 7B60     		str	r3, [r7, #4]
 538:../Main.c     **** 	psxTrocaByte(psxByte);
 2025              		.loc 1 538 0
 2026 0080 7868     		ldr	r0, [r7, #4]
 2027 0082 FFF7FEFF 		bl	psxTrocaByte
 539:../Main.c     **** 
 540:../Main.c     **** 	psxByte = 0;
 2028              		.loc 1 540 0
 2029 0086 4FF00003 		mov	r3, #0
 2030 008a 7B60     		str	r3, [r7, #4]
 541:../Main.c     **** 	psxTrocaByte(psxByte);
 2031              		.loc 1 541 0
 2032 008c 7868     		ldr	r0, [r7, #4]
 2033 008e FFF7FEFF 		bl	psxTrocaByte
 542:../Main.c     **** 
 543:../Main.c     **** 	psxByte = 0x1;
 2034              		.loc 1 543 0
 2035 0092 4FF00103 		mov	r3, #1
 2036 0096 7B60     		str	r3, [r7, #4]
 544:../Main.c     **** 	psxTrocaByte(psxByte);
 2037              		.loc 1 544 0
 2038 0098 7868     		ldr	r0, [r7, #4]
 2039 009a FFF7FEFF 		bl	psxTrocaByte
 545:../Main.c     **** 
 546:../Main.c     **** 	psxByte = 0x3;
 2040              		.loc 1 546 0
 2041 009e 4FF00303 		mov	r3, #3
 2042 00a2 7B60     		str	r3, [r7, #4]
 547:../Main.c     **** 	psxTrocaByte(psxByte);
 2043              		.loc 1 547 0
 2044 00a4 7868     		ldr	r0, [r7, #4]
 2045 00a6 FFF7FEFF 		bl	psxTrocaByte
 548:../Main.c     **** 
 549:../Main.c     **** 	psxByte = 0;
 2046              		.loc 1 549 0
 2047 00aa 4FF00003 		mov	r3, #0
 2048 00ae 7B60     		str	r3, [r7, #4]
 550:../Main.c     **** 	psxTrocaByte(psxByte);
 2049              		.loc 1 550 0
 2050 00b0 7868     		ldr	r0, [r7, #4]
 2051 00b2 FFF7FEFF 		bl	psxTrocaByte
 551:../Main.c     **** 
 552:../Main.c     **** 	psxByte = 0;
 2052              		.loc 1 552 0
 2053 00b6 4FF00003 		mov	r3, #0
 2054 00ba 7B60     		str	r3, [r7, #4]
 553:../Main.c     **** 	psxTrocaByte(psxByte);
 2055              		.loc 1 553 0
 2056 00bc 7868     		ldr	r0, [r7, #4]
 2057 00be FFF7FEFF 		bl	psxTrocaByte
 554:../Main.c     **** 
 555:../Main.c     **** 	psxByte = 0;
 2058              		.loc 1 555 0
 2059 00c2 4FF00003 		mov	r3, #0
 2060 00c6 7B60     		str	r3, [r7, #4]
 556:../Main.c     **** 	psxTrocaByte(psxByte);
 2061              		.loc 1 556 0
 2062 00c8 7868     		ldr	r0, [r7, #4]
 2063 00ca FFF7FEFF 		bl	psxTrocaByte
 557:../Main.c     **** 
 558:../Main.c     **** 	psxByte = 0;
 2064              		.loc 1 558 0
 2065 00ce 4FF00003 		mov	r3, #0
 2066 00d2 7B60     		str	r3, [r7, #4]
 559:../Main.c     **** 	psxTrocaByte(psxByte);
 2067              		.loc 1 559 0
 2068 00d4 7868     		ldr	r0, [r7, #4]
 2069 00d6 FFF7FEFF 		bl	psxTrocaByte
 560:../Main.c     **** 
 561:../Main.c     **** 	IO004_SetPin(ATT);
 2070              		.loc 1 561 0
 2071 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2072 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2073 00e2 5A68     		ldr	r2, [r3, #4]
 2074 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2075 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2076 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2077 00ee 4FF00101 		mov	r1, #1
 2078 00f2 01FA03F3 		lsl	r3, r1, r3
 2079 00f6 5360     		str	r3, [r2, #4]
 562:../Main.c     **** }
 2080              		.loc 1 562 0
 2081 00f8 07F10807 		add	r7, r7, #8
 2082 00fc BD46     		mov	sp, r7
 2083 00fe 80BD     		pop	{r7, pc}
 2084              		.cfi_endproc
 2085              	.LFE124:
 2087              		.section	.text.psxExitConfigMode,"ax",%progbits
 2088              		.align	2
 2089              		.global	psxExitConfigMode
 2090              		.thumb
 2091              		.thumb_func
 2093              	psxExitConfigMode:
 2094              	.LFB125:
 563:../Main.c     **** 
 564:../Main.c     **** void psxExitConfigMode() {
 2095              		.loc 1 564 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 8
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099 0000 80B5     		push	{r7, lr}
 2100              	.LCFI22:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 7, -8
 2103              		.cfi_offset 14, -4
 2104 0002 82B0     		sub	sp, sp, #8
 2105              	.LCFI23:
 2106              		.cfi_def_cfa_offset 16
 2107 0004 00AF     		add	r7, sp, #0
 2108              	.LCFI24:
 2109              		.cfi_def_cfa_register 7
 565:../Main.c     **** 	int psxByte = 0;
 2110              		.loc 1 565 0
 2111 0006 4FF00003 		mov	r3, #0
 2112 000a 7B60     		str	r3, [r7, #4]
 566:../Main.c     **** 	IO004_SetPin(CMD);
 2113              		.loc 1 566 0
 2114 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2115 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2116 0014 5A68     		ldr	r2, [r3, #4]
 2117 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2118 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2119 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2120 0020 4FF00101 		mov	r1, #1
 2121 0024 01FA03F3 		lsl	r3, r1, r3
 2122 0028 5360     		str	r3, [r2, #4]
 567:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2123              		.loc 1 567 0
 2124 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2125 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2126 0032 5A68     		ldr	r2, [r3, #4]
 2127 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2128 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2129 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2130 003e 4FF00101 		mov	r1, #1
 2131 0042 01FA03F3 		lsl	r3, r1, r3
 2132 0046 5360     		str	r3, [r2, #4]
 568:../Main.c     **** 	IO004_ResetPin(ATT);
 2133              		.loc 1 568 0
 2134 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2135 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2136 0050 5A68     		ldr	r2, [r3, #4]
 2137 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2138 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2139 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2140 005c 4FF48031 		mov	r1, #65536
 2141 0060 01FA03F3 		lsl	r3, r1, r3
 2142 0064 5360     		str	r3, [r2, #4]
 569:../Main.c     **** 	delay(tempoInicio);
 2143              		.loc 1 569 0
 2144 0066 4FF49670 		mov	r0, #300
 2145 006a FFF7FEFF 		bl	delay
 570:../Main.c     **** 
 571:../Main.c     **** 	psxByte = 1;
 2146              		.loc 1 571 0
 2147 006e 4FF00103 		mov	r3, #1
 2148 0072 7B60     		str	r3, [r7, #4]
 572:../Main.c     **** 	psxTrocaByte(psxByte);
 2149              		.loc 1 572 0
 2150 0074 7868     		ldr	r0, [r7, #4]
 2151 0076 FFF7FEFF 		bl	psxTrocaByte
 573:../Main.c     **** 
 574:../Main.c     **** 	psxByte = 0x43;
 2152              		.loc 1 574 0
 2153 007a 4FF04303 		mov	r3, #67
 2154 007e 7B60     		str	r3, [r7, #4]
 575:../Main.c     **** 	psxTrocaByte(psxByte);
 2155              		.loc 1 575 0
 2156 0080 7868     		ldr	r0, [r7, #4]
 2157 0082 FFF7FEFF 		bl	psxTrocaByte
 576:../Main.c     **** 
 577:../Main.c     **** 	psxByte = 0;
 2158              		.loc 1 577 0
 2159 0086 4FF00003 		mov	r3, #0
 2160 008a 7B60     		str	r3, [r7, #4]
 578:../Main.c     **** 	psxTrocaByte(psxByte);
 2161              		.loc 1 578 0
 2162 008c 7868     		ldr	r0, [r7, #4]
 2163 008e FFF7FEFF 		bl	psxTrocaByte
 579:../Main.c     **** 
 580:../Main.c     **** 	psxByte = 0;
 2164              		.loc 1 580 0
 2165 0092 4FF00003 		mov	r3, #0
 2166 0096 7B60     		str	r3, [r7, #4]
 581:../Main.c     **** 	psxTrocaByte(psxByte);
 2167              		.loc 1 581 0
 2168 0098 7868     		ldr	r0, [r7, #4]
 2169 009a FFF7FEFF 		bl	psxTrocaByte
 582:../Main.c     **** 
 583:../Main.c     **** 	psxByte = 0x5A;
 2170              		.loc 1 583 0
 2171 009e 4FF05A03 		mov	r3, #90
 2172 00a2 7B60     		str	r3, [r7, #4]
 584:../Main.c     **** 	psxTrocaByte(psxByte);
 2173              		.loc 1 584 0
 2174 00a4 7868     		ldr	r0, [r7, #4]
 2175 00a6 FFF7FEFF 		bl	psxTrocaByte
 585:../Main.c     **** 
 586:../Main.c     **** 	psxByte = 0x5A;
 2176              		.loc 1 586 0
 2177 00aa 4FF05A03 		mov	r3, #90
 2178 00ae 7B60     		str	r3, [r7, #4]
 587:../Main.c     **** 	psxTrocaByte(psxByte);
 2179              		.loc 1 587 0
 2180 00b0 7868     		ldr	r0, [r7, #4]
 2181 00b2 FFF7FEFF 		bl	psxTrocaByte
 588:../Main.c     **** 
 589:../Main.c     **** 	psxByte = 0x5A;
 2182              		.loc 1 589 0
 2183 00b6 4FF05A03 		mov	r3, #90
 2184 00ba 7B60     		str	r3, [r7, #4]
 590:../Main.c     **** 	psxTrocaByte(psxByte);
 2185              		.loc 1 590 0
 2186 00bc 7868     		ldr	r0, [r7, #4]
 2187 00be FFF7FEFF 		bl	psxTrocaByte
 591:../Main.c     **** 
 592:../Main.c     **** 	psxByte = 0x5A;
 2188              		.loc 1 592 0
 2189 00c2 4FF05A03 		mov	r3, #90
 2190 00c6 7B60     		str	r3, [r7, #4]
 593:../Main.c     **** 	psxTrocaByte(psxByte);
 2191              		.loc 1 593 0
 2192 00c8 7868     		ldr	r0, [r7, #4]
 2193 00ca FFF7FEFF 		bl	psxTrocaByte
 594:../Main.c     **** 
 595:../Main.c     **** 	psxByte = 0x5A;
 2194              		.loc 1 595 0
 2195 00ce 4FF05A03 		mov	r3, #90
 2196 00d2 7B60     		str	r3, [r7, #4]
 596:../Main.c     **** 	psxTrocaByte(psxByte);
 2197              		.loc 1 596 0
 2198 00d4 7868     		ldr	r0, [r7, #4]
 2199 00d6 FFF7FEFF 		bl	psxTrocaByte
 597:../Main.c     **** 
 598:../Main.c     **** 	IO004_SetPin(ATT);
 2200              		.loc 1 598 0
 2201 00da 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2202 00de C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2203 00e2 5A68     		ldr	r2, [r3, #4]
 2204 00e4 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2205 00e8 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2206 00ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2207 00ee 4FF00101 		mov	r1, #1
 2208 00f2 01FA03F3 		lsl	r3, r1, r3
 2209 00f6 5360     		str	r3, [r2, #4]
 599:../Main.c     **** }
 2210              		.loc 1 599 0
 2211 00f8 07F10807 		add	r7, r7, #8
 2212 00fc BD46     		mov	sp, r7
 2213 00fe 80BD     		pop	{r7, pc}
 2214              		.cfi_endproc
 2215              	.LFE125:
 2217              		.section	.text.psxLeControle,"ax",%progbits
 2218              		.align	2
 2219              		.global	psxLeControle
 2220              		.thumb
 2221              		.thumb_func
 2223              	psxLeControle:
 2224              	.LFB126:
 600:../Main.c     **** 
 601:../Main.c     **** void psxLeControle() {
 2225              		.loc 1 601 0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 8
 2228              		@ frame_needed = 1, uses_anonymous_args = 0
 2229 0000 80B5     		push	{r7, lr}
 2230              	.LCFI25:
 2231              		.cfi_def_cfa_offset 8
 2232              		.cfi_offset 7, -8
 2233              		.cfi_offset 14, -4
 2234 0002 82B0     		sub	sp, sp, #8
 2235              	.LCFI26:
 2236              		.cfi_def_cfa_offset 16
 2237 0004 00AF     		add	r7, sp, #0
 2238              	.LCFI27:
 2239              		.cfi_def_cfa_register 7
 602:../Main.c     **** 	int psxByte = 0;
 2240              		.loc 1 602 0
 2241 0006 4FF00003 		mov	r3, #0
 2242 000a 3B60     		str	r3, [r7, #0]
 603:../Main.c     **** 	int psxCont;
 604:../Main.c     **** 
 605:../Main.c     **** 	IO004_SetPin(CMD);
 2243              		.loc 1 605 0
 2244 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2245 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2246 0014 5A68     		ldr	r2, [r3, #4]
 2247 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2248 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2249 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2250 0020 4FF00101 		mov	r1, #1
 2251 0024 01FA03F3 		lsl	r3, r1, r3
 2252 0028 5360     		str	r3, [r2, #4]
 606:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2253              		.loc 1 606 0
 2254 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2255 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2256 0032 5A68     		ldr	r2, [r3, #4]
 2257 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2258 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2259 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2260 003e 4FF00101 		mov	r1, #1
 2261 0042 01FA03F3 		lsl	r3, r1, r3
 2262 0046 5360     		str	r3, [r2, #4]
 607:../Main.c     **** 	IO004_ResetPin(ATT);
 2263              		.loc 1 607 0
 2264 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2265 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2266 0050 5A68     		ldr	r2, [r3, #4]
 2267 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2268 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2269 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2270 005c 4FF48031 		mov	r1, #65536
 2271 0060 01FA03F3 		lsl	r3, r1, r3
 2272 0064 5360     		str	r3, [r2, #4]
 608:../Main.c     **** 	delay(tempoInicio);
 2273              		.loc 1 608 0
 2274 0066 4FF49670 		mov	r0, #300
 2275 006a FFF7FEFF 		bl	delay
 609:../Main.c     **** 
 610:../Main.c     **** 	psxByte = 1;
 2276              		.loc 1 610 0
 2277 006e 4FF00103 		mov	r3, #1
 2278 0072 3B60     		str	r3, [r7, #0]
 611:../Main.c     **** 	psxTrocaByte(psxByte);
 2279              		.loc 1 611 0
 2280 0074 3868     		ldr	r0, [r7, #0]
 2281 0076 FFF7FEFF 		bl	psxTrocaByte
 612:../Main.c     **** 
 613:../Main.c     **** 	psxByte = 0x42;
 2282              		.loc 1 613 0
 2283 007a 4FF04203 		mov	r3, #66
 2284 007e 3B60     		str	r3, [r7, #0]
 614:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2285              		.loc 1 614 0
 2286 0080 3868     		ldr	r0, [r7, #0]
 2287 0082 FFF7FEFF 		bl	psxTrocaByte
 2288 0086 0346     		mov	r3, r0
 2289 0088 DAB2     		uxtb	r2, r3
 2290 008a 40F20003 		movw	r3, #:lower16:psx_status
 2291 008e C0F20003 		movt	r3, #:upper16:psx_status
 2292 0092 1A70     		strb	r2, [r3, #0]
 615:../Main.c     **** 
 616:../Main.c     **** 	psxByte = 0;
 2293              		.loc 1 616 0
 2294 0094 4FF00003 		mov	r3, #0
 2295 0098 3B60     		str	r3, [r7, #0]
 617:../Main.c     **** 	psxTrocaByte(psxByte);
 2296              		.loc 1 617 0
 2297 009a 3868     		ldr	r0, [r7, #0]
 2298 009c FFF7FEFF 		bl	psxTrocaByte
 618:../Main.c     **** 
 619:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2299              		.loc 1 619 0
 2300 00a0 4FF00003 		mov	r3, #0
 2301 00a4 7B60     		str	r3, [r7, #4]
 2302 00a6 0FE0     		b	.L79
 2303              	.L80:
 620:../Main.c     **** 		psxDado[psxCont] = psxTrocaByte(0);
 2304              		.loc 1 620 0 discriminator 2
 2305 00a8 4FF00000 		mov	r0, #0
 2306 00ac FFF7FEFF 		bl	psxTrocaByte
 2307 00b0 0146     		mov	r1, r0
 2308 00b2 40F20003 		movw	r3, #:lower16:psxDado
 2309 00b6 C0F20003 		movt	r3, #:upper16:psxDado
 2310 00ba 7A68     		ldr	r2, [r7, #4]
 2311 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 619:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2312              		.loc 1 619 0 discriminator 2
 2313 00c0 7B68     		ldr	r3, [r7, #4]
 2314 00c2 03F10103 		add	r3, r3, #1
 2315 00c6 7B60     		str	r3, [r7, #4]
 2316              	.L79:
 619:../Main.c     **** 	for (psxCont = 0; psxCont < 6; psxCont++)
 2317              		.loc 1 619 0 is_stmt 0 discriminator 1
 2318 00c8 7B68     		ldr	r3, [r7, #4]
 2319 00ca 052B     		cmp	r3, #5
 2320 00cc ECDD     		ble	.L80
 621:../Main.c     **** 
 622:../Main.c     **** 	IO004_SetPin(ATT);
 2321              		.loc 1 622 0 is_stmt 1
 2322 00ce 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2323 00d2 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2324 00d6 5A68     		ldr	r2, [r3, #4]
 2325 00d8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2326 00dc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2327 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2328 00e2 4FF00101 		mov	r1, #1
 2329 00e6 01FA03F3 		lsl	r3, r1, r3
 2330 00ea 5360     		str	r3, [r2, #4]
 623:../Main.c     **** }
 2331              		.loc 1 623 0
 2332 00ec 07F10807 		add	r7, r7, #8
 2333 00f0 BD46     		mov	sp, r7
 2334 00f2 80BD     		pop	{r7, pc}
 2335              		.cfi_endproc
 2336              	.LFE126:
 2338              		.section	.text.psxHandShake,"ax",%progbits
 2339              		.align	2
 2340              		.global	psxHandShake
 2341              		.thumb
 2342              		.thumb_func
 2344              	psxHandShake:
 2345              	.LFB127:
 624:../Main.c     **** 
 625:../Main.c     **** void psxHandShake() {
 2346              		.loc 1 625 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 8
 2349              		@ frame_needed = 1, uses_anonymous_args = 0
 2350 0000 80B5     		push	{r7, lr}
 2351              	.LCFI28:
 2352              		.cfi_def_cfa_offset 8
 2353              		.cfi_offset 7, -8
 2354              		.cfi_offset 14, -4
 2355 0002 82B0     		sub	sp, sp, #8
 2356              	.LCFI29:
 2357              		.cfi_def_cfa_offset 16
 2358 0004 00AF     		add	r7, sp, #0
 2359              	.LCFI30:
 2360              		.cfi_def_cfa_register 7
 626:../Main.c     **** 	int psxByte = 0;
 2361              		.loc 1 626 0
 2362 0006 4FF00003 		mov	r3, #0
 2363 000a 7B60     		str	r3, [r7, #4]
 627:../Main.c     **** 
 628:../Main.c     **** 	IO004_SetPin(CMD);
 2364              		.loc 1 628 0
 2365 000c 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2366 0010 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2367 0014 5A68     		ldr	r2, [r3, #4]
 2368 0016 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2369 001a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2370 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2371 0020 4FF00101 		mov	r1, #1
 2372 0024 01FA03F3 		lsl	r3, r1, r3
 2373 0028 5360     		str	r3, [r2, #4]
 629:../Main.c     **** 	IO004_SetPin(CONT_CLK);
 2374              		.loc 1 629 0
 2375 002a 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2376 002e C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2377 0032 5A68     		ldr	r2, [r3, #4]
 2378 0034 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2379 0038 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2380 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2381 003e 4FF00101 		mov	r1, #1
 2382 0042 01FA03F3 		lsl	r3, r1, r3
 2383 0046 5360     		str	r3, [r2, #4]
 630:../Main.c     **** 	IO004_ResetPin(ATT);
 2384              		.loc 1 630 0
 2385 0048 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2386 004c C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2387 0050 5A68     		ldr	r2, [r3, #4]
 2388 0052 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2389 0056 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2390 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2391 005c 4FF48031 		mov	r1, #65536
 2392 0060 01FA03F3 		lsl	r3, r1, r3
 2393 0064 5360     		str	r3, [r2, #4]
 631:../Main.c     **** 	delay(tempoInicio);
 2394              		.loc 1 631 0
 2395 0066 4FF49670 		mov	r0, #300
 2396 006a FFF7FEFF 		bl	delay
 632:../Main.c     **** 
 633:../Main.c     **** 	psxByte = 1;
 2397              		.loc 1 633 0
 2398 006e 4FF00103 		mov	r3, #1
 2399 0072 7B60     		str	r3, [r7, #4]
 634:../Main.c     **** 	psxTrocaByte(psxByte);
 2400              		.loc 1 634 0
 2401 0074 7868     		ldr	r0, [r7, #4]
 2402 0076 FFF7FEFF 		bl	psxTrocaByte
 635:../Main.c     **** 
 636:../Main.c     **** 	psxByte = 0x42;
 2403              		.loc 1 636 0
 2404 007a 4FF04203 		mov	r3, #66
 2405 007e 7B60     		str	r3, [r7, #4]
 637:../Main.c     **** 	psx_status = psxTrocaByte(psxByte);
 2406              		.loc 1 637 0
 2407 0080 7868     		ldr	r0, [r7, #4]
 2408 0082 FFF7FEFF 		bl	psxTrocaByte
 2409 0086 0346     		mov	r3, r0
 2410 0088 DAB2     		uxtb	r2, r3
 2411 008a 40F20003 		movw	r3, #:lower16:psx_status
 2412 008e C0F20003 		movt	r3, #:upper16:psx_status
 2413 0092 1A70     		strb	r2, [r3, #0]
 638:../Main.c     **** 
 639:../Main.c     **** 	psxByte = 0;
 2414              		.loc 1 639 0
 2415 0094 4FF00003 		mov	r3, #0
 2416 0098 7B60     		str	r3, [r7, #4]
 640:../Main.c     **** 	psxTrocaByte(psxByte);
 2417              		.loc 1 640 0
 2418 009a 7868     		ldr	r0, [r7, #4]
 2419 009c FFF7FEFF 		bl	psxTrocaByte
 641:../Main.c     **** 
 642:../Main.c     **** 	psxByte = 0;
 2420              		.loc 1 642 0
 2421 00a0 4FF00003 		mov	r3, #0
 2422 00a4 7B60     		str	r3, [r7, #4]
 643:../Main.c     **** 	psxTrocaByte(psxByte);
 2423              		.loc 1 643 0
 2424 00a6 7868     		ldr	r0, [r7, #4]
 2425 00a8 FFF7FEFF 		bl	psxTrocaByte
 644:../Main.c     **** 
 645:../Main.c     **** 	psxByte = 0;
 2426              		.loc 1 645 0
 2427 00ac 4FF00003 		mov	r3, #0
 2428 00b0 7B60     		str	r3, [r7, #4]
 646:../Main.c     **** 	psxTrocaByte(psxByte);
 2429              		.loc 1 646 0
 2430 00b2 7868     		ldr	r0, [r7, #4]
 2431 00b4 FFF7FEFF 		bl	psxTrocaByte
 647:../Main.c     **** 
 648:../Main.c     **** 	IO004_SetPin(ATT);
 2432              		.loc 1 648 0
 2433 00b8 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2434 00bc C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2435 00c0 5A68     		ldr	r2, [r3, #4]
 2436 00c2 40F20003 		movw	r3, #:lower16:IO004_Handle11
 2437 00c6 C0F20003 		movt	r3, #:upper16:IO004_Handle11
 2438 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2439 00cc 4FF00101 		mov	r1, #1
 2440 00d0 01FA03F3 		lsl	r3, r1, r3
 2441 00d4 5360     		str	r3, [r2, #4]
 649:../Main.c     **** }
 2442              		.loc 1 649 0
 2443 00d6 07F10807 		add	r7, r7, #8
 2444 00da BD46     		mov	sp, r7
 2445 00dc 80BD     		pop	{r7, pc}
 2446              		.cfi_endproc
 2447              	.LFE127:
 2449 00de 00BF     		.section	.text.psxTrocaByte,"ax",%progbits
 2450              		.align	2
 2451              		.global	psxTrocaByte
 2452              		.thumb
 2453              		.thumb_func
 2455              	psxTrocaByte:
 2456              	.LFB128:
 650:../Main.c     **** 
 651:../Main.c     **** int psxTrocaByte(int byteDado) {
 2457              		.loc 1 651 0
 2458              		.cfi_startproc
 2459              		@ args = 0, pretend = 0, frame = 16
 2460              		@ frame_needed = 1, uses_anonymous_args = 0
 2461 0000 80B5     		push	{r7, lr}
 2462              	.LCFI31:
 2463              		.cfi_def_cfa_offset 8
 2464              		.cfi_offset 7, -8
 2465              		.cfi_offset 14, -4
 2466 0002 84B0     		sub	sp, sp, #16
 2467              	.LCFI32:
 2468              		.cfi_def_cfa_offset 24
 2469 0004 00AF     		add	r7, sp, #0
 2470              	.LCFI33:
 2471              		.cfi_def_cfa_register 7
 2472 0006 7860     		str	r0, [r7, #4]
 652:../Main.c     **** 	int c;
 653:../Main.c     **** 	int aux = 0;
 2473              		.loc 1 653 0
 2474 0008 4FF00003 		mov	r3, #0
 2475 000c BB60     		str	r3, [r7, #8]
 654:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2476              		.loc 1 654 0
 2477 000e 4FF00003 		mov	r3, #0
 2478 0012 FB60     		str	r3, [r7, #12]
 2479 0014 69E0     		b	.L83
 2480              	.L87:
 655:../Main.c     **** 
 656:../Main.c     **** 		if (byteDado & (0x01 << c))
 2481              		.loc 1 656 0
 2482 0016 7A68     		ldr	r2, [r7, #4]
 2483 0018 FB68     		ldr	r3, [r7, #12]
 2484 001a 42FA03F3 		asr	r3, r2, r3
 2485 001e 03F00103 		and	r3, r3, #1
 2486 0022 002B     		cmp	r3, #0
 2487 0024 0FD0     		beq	.L84
 657:../Main.c     **** 			IO004_SetPin(CMD);
 2488              		.loc 1 657 0
 2489 0026 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2490 002a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2491 002e 5A68     		ldr	r2, [r3, #4]
 2492 0030 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2493 0034 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2494 0038 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2495 003a 4FF00101 		mov	r1, #1
 2496 003e 01FA03F3 		lsl	r3, r1, r3
 2497 0042 5360     		str	r3, [r2, #4]
 2498 0044 0EE0     		b	.L85
 2499              	.L84:
 658:../Main.c     **** 		else
 659:../Main.c     **** 			IO004_ResetPin(CMD);
 2500              		.loc 1 659 0
 2501 0046 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2502 004a C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2503 004e 5A68     		ldr	r2, [r3, #4]
 2504 0050 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2505 0054 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2506 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2507 005a 4FF48031 		mov	r1, #65536
 2508 005e 01FA03F3 		lsl	r3, r1, r3
 2509 0062 5360     		str	r3, [r2, #4]
 2510              	.L85:
 660:../Main.c     **** 		IO004_ResetPin(CONT_CLK);
 2511              		.loc 1 660 0
 2512 0064 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2513 0068 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2514 006c 5A68     		ldr	r2, [r3, #4]
 2515 006e 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2516 0072 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2517 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2518 0078 4FF48031 		mov	r1, #65536
 2519 007c 01FA03F3 		lsl	r3, r1, r3
 2520 0080 5360     		str	r3, [r2, #4]
 661:../Main.c     **** 		delay(tempoClk);
 2521              		.loc 1 661 0
 2522 0082 4FF49670 		mov	r0, #300
 2523 0086 FFF7FEFF 		bl	delay
 662:../Main.c     **** 		if (!IO004_ReadPin(CONT_DADO))
 2524              		.loc 1 662 0
 2525 008a 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2526 008e C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2527 0092 5B68     		ldr	r3, [r3, #4]
 2528 0094 5A6A     		ldr	r2, [r3, #36]
 2529 0096 40F20003 		movw	r3, #:lower16:IO004_Handle9
 2530 009a C0F20003 		movt	r3, #:upper16:IO004_Handle9
 2531 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2532 00a0 22FA03F3 		lsr	r3, r2, r3
 2533 00a4 03F00103 		and	r3, r3, #1
 2534 00a8 002B     		cmp	r3, #0
 2535 00aa 07D1     		bne	.L86
 663:../Main.c     **** 			aux = aux | (1 << c);
 2536              		.loc 1 663 0
 2537 00ac 4FF00102 		mov	r2, #1
 2538 00b0 FB68     		ldr	r3, [r7, #12]
 2539 00b2 02FA03F3 		lsl	r3, r2, r3
 2540 00b6 BA68     		ldr	r2, [r7, #8]
 2541 00b8 1343     		orrs	r3, r3, r2
 2542 00ba BB60     		str	r3, [r7, #8]
 2543              	.L86:
 664:../Main.c     **** 		IO004_SetPin(CONT_CLK);
 2544              		.loc 1 664 0
 2545 00bc 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2546 00c0 C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2547 00c4 5A68     		ldr	r2, [r3, #4]
 2548 00c6 40F20003 		movw	r3, #:lower16:IO004_Handle10
 2549 00ca C0F20003 		movt	r3, #:upper16:IO004_Handle10
 2550 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2551 00d0 4FF00101 		mov	r1, #1
 2552 00d4 01FA03F3 		lsl	r3, r1, r3
 2553 00d8 5360     		str	r3, [r2, #4]
 665:../Main.c     **** 		delay(tempoClk);
 2554              		.loc 1 665 0
 2555 00da 4FF49670 		mov	r0, #300
 2556 00de FFF7FEFF 		bl	delay
 654:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2557              		.loc 1 654 0
 2558 00e2 FB68     		ldr	r3, [r7, #12]
 2559 00e4 03F10103 		add	r3, r3, #1
 2560 00e8 FB60     		str	r3, [r7, #12]
 2561              	.L83:
 654:../Main.c     **** 	for (c = 0; c <= 7; c++) {
 2562              		.loc 1 654 0 is_stmt 0 discriminator 1
 2563 00ea FB68     		ldr	r3, [r7, #12]
 2564 00ec 072B     		cmp	r3, #7
 2565 00ee 92DD     		ble	.L87
 666:../Main.c     **** 	}
 667:../Main.c     **** 	IO004_SetPin(CMD);
 2566              		.loc 1 667 0 is_stmt 1
 2567 00f0 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2568 00f4 C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2569 00f8 5A68     		ldr	r2, [r3, #4]
 2570 00fa 40F20003 		movw	r3, #:lower16:IO004_Handle12
 2571 00fe C0F20003 		movt	r3, #:upper16:IO004_Handle12
 2572 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2573 0104 4FF00101 		mov	r1, #1
 2574 0108 01FA03F3 		lsl	r3, r1, r3
 2575 010c 5360     		str	r3, [r2, #4]
 668:../Main.c     **** 	delay(tempoEntreByte);
 2576              		.loc 1 668 0
 2577 010e 4FF06400 		mov	r0, #100
 2578 0112 FFF7FEFF 		bl	delay
 669:../Main.c     **** 	return aux;
 2579              		.loc 1 669 0
 2580 0116 BB68     		ldr	r3, [r7, #8]
 670:../Main.c     **** }
 2581              		.loc 1 670 0
 2582 0118 1846     		mov	r0, r3
 2583 011a 07F11007 		add	r7, r7, #16
 2584 011e BD46     		mov	sp, r7
 2585 0120 80BD     		pop	{r7, pc}
 2586              		.cfi_endproc
 2587              	.LFE128:
 2589 0122 00BF     		.section	.text.delay,"ax",%progbits
 2590              		.align	2
 2591              		.global	delay
 2592              		.thumb
 2593              		.thumb_func
 2595              	delay:
 2596              	.LFB129:
 671:../Main.c     **** //void psxLeControle()
 672:../Main.c     **** //{
 673:../Main.c     **** //	int psxByte = 0;
 674:../Main.c     **** //	int psxCont;
 675:../Main.c     **** //
 676:../Main.c     **** //	IO004_SetPin(CMD);
 677:../Main.c     **** //	IO004_SetPin(CONT_CLK);
 678:../Main.c     **** //	IO004_ResetPin(ATT);
 679:../Main.c     **** //	delay(tempoInicio);
 680:../Main.c     **** //
 681:../Main.c     **** //	psxByte = 1;
 682:../Main.c     **** //	psxGravaByte(psxByte);
 683:../Main.c     **** //
 684:../Main.c     **** //	psxByte = 66;
 685:../Main.c     **** //	psxGravaByte(psxByte);
 686:../Main.c     **** //
 687:../Main.c     **** //	psxByte = 0;
 688:../Main.c     **** //	psxGravaByte(psxByte);
 689:../Main.c     **** //
 690:../Main.c     **** //	for (psxCont = 0; psxCont<6; psxCont++)
 691:../Main.c     **** //		psxDado[psxCont] = psxLeByte();
 692:../Main.c     **** //
 693:../Main.c     **** //	IO004_SetPin(ATT);
 694:../Main.c     **** //}
 695:../Main.c     **** //void psxGravaByte(int byteDado, int byteLido)
 696:../Main.c     **** //{
 697:../Main.c     **** //	int c;
 698:../Main.c     **** //	for (c=0;c<=7;c++)
 699:../Main.c     **** //	{
 700:../Main.c     **** //		if(byteDado & (0x01<<c))
 701:../Main.c     **** //			IO004_SetPin(CMD);
 702:../Main.c     **** //		else
 703:../Main.c     **** //			IO004_ResetPin(CMD);
 704:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 705:../Main.c     **** //		delay(tempoClk);
 706:../Main.c     **** //		IO004_SetPin(CONT_CLK);
 707:../Main.c     **** //		delay(tempoClk);
 708:../Main.c     **** //	}
 709:../Main.c     **** //	IO004_SetPin(CMD);
 710:../Main.c     **** //	delay(tempoEntreByte);
 711:../Main.c     **** //}
 712:../Main.c     **** //int psxLeByte()
 713:../Main.c     **** //{
 714:../Main.c     **** //	int aux = 0;
 715:../Main.c     **** //	int c;
 716:../Main.c     **** //
 717:../Main.c     **** //	for (c=0;c<=7;c++)
 718:../Main.c     **** //	{
 719:../Main.c     **** //		IO004_ResetPin(CONT_CLK);
 720:../Main.c     **** //		delay(tempoClk);
 721:../Main.c     **** //		if (!IO004_ReadPin(CONT_DADO))
 722:../Main.c     **** //	  		  aux = aux | (1 << c);
 723:../Main.c     **** //	  	IO004_SetPin(CONT_CLK);
 724:../Main.c     **** //	  	delay(tempoClk);
 725:../Main.c     **** //	}
 726:../Main.c     **** //	delay(tempoEntreByte);
 727:../Main.c     **** //	return (aux);
 728:../Main.c     **** //}
 729:../Main.c     **** 
 730:../Main.c     **** /***************************************************/
 731:../Main.c     **** /*****************FUNCOES GERAIS********************/
 732:../Main.c     **** /***************************************************/
 733:../Main.c     **** 
 734:../Main.c     **** void delay(long unsigned int i) {
 2597              		.loc 1 734 0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 8
 2600              		@ frame_needed = 1, uses_anonymous_args = 0
 2601              		@ link register save eliminated.
 2602 0000 80B4     		push	{r7}
 2603              	.LCFI34:
 2604              		.cfi_def_cfa_offset 4
 2605              		.cfi_offset 7, -4
 2606 0002 83B0     		sub	sp, sp, #12
 2607              	.LCFI35:
 2608              		.cfi_def_cfa_offset 16
 2609 0004 00AF     		add	r7, sp, #0
 2610              	.LCFI36:
 2611              		.cfi_def_cfa_register 7
 2612 0006 7860     		str	r0, [r7, #4]
 735:../Main.c     **** 	while (i--) {
 2613              		.loc 1 735 0
 2614 0008 00E0     		b	.L90
 2615              	.L91:
 2616              	.LBB6:
 2617              	.LBB7:
 2618              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
 2619              		.loc 2 327 0
 2620              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
 2621 000a 00BF     		nop
 2622              	@ 0 "" 2
 2623              		.thumb
 2624              	.L90:
 2625              	.LBE7:
 2626              	.LBE6:
 2627              		.loc 1 735 0 discriminator 1
 2628 000c 7B68     		ldr	r3, [r7, #4]
 2629 000e 002B     		cmp	r3, #0
 2630 0010 0CBF     		ite	eq
 2631 0012 0023     		moveq	r3, #0
 2632 0014 0123     		movne	r3, #1
 2633 0016 DBB2     		uxtb	r3, r3
 2634 0018 7A68     		ldr	r2, [r7, #4]
 2635 001a 02F1FF32 		add	r2, r2, #-1
 2636 001e 7A60     		str	r2, [r7, #4]
 2637 0020 002B     		cmp	r3, #0
 2638 0022 F2D1     		bne	.L91
 736:../Main.c     **** 		__NOP();
 737:../Main.c     **** 	}
 738:../Main.c     **** }
 2639              		.loc 1 738 0
 2640 0024 07F10C07 		add	r7, r7, #12
 2641 0028 BD46     		mov	sp, r7
 2642 002a 80BC     		pop	{r7}
 2643 002c 7047     		bx	lr
 2644              		.cfi_endproc
 2645              	.LFE129:
 2647 002e 00BF     		.section	.text.printByteToInt,"ax",%progbits
 2648              		.align	2
 2649              		.global	printByteToInt
 2650              		.thumb
 2651              		.thumb_func
 2653              	printByteToInt:
 2654              	.LFB130:
 739:../Main.c     **** void printByteToInt(char a) {
 2655              		.loc 1 739 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 16
 2658              		@ frame_needed = 1, uses_anonymous_args = 0
 2659              		@ link register save eliminated.
 2660 0000 80B4     		push	{r7}
 2661              	.LCFI37:
 2662              		.cfi_def_cfa_offset 4
 2663              		.cfi_offset 7, -4
 2664 0002 85B0     		sub	sp, sp, #20
 2665              	.LCFI38:
 2666              		.cfi_def_cfa_offset 24
 2667 0004 00AF     		add	r7, sp, #0
 2668              	.LCFI39:
 2669              		.cfi_def_cfa_register 7
 2670 0006 0346     		mov	r3, r0
 2671 0008 FB71     		strb	r3, [r7, #7]
 740:../Main.c     **** 	char c = a % 10 + '0';
 2672              		.loc 1 740 0
 2673 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2674 000c 4CF6CD43 		movw	r3, #52429
 2675 0010 CCF6CC43 		movt	r3, 52428
 2676 0014 A3FB0213 		umull	r1, r3, r3, r2
 2677 0018 4FEAD301 		lsr	r1, r3, #3
 2678 001c 0B46     		mov	r3, r1
 2679 001e 4FEA8303 		lsl	r3, r3, #2
 2680 0022 5B18     		adds	r3, r3, r1
 2681 0024 4FEA4303 		lsl	r3, r3, #1
 2682 0028 D31A     		subs	r3, r2, r3
 2683 002a DBB2     		uxtb	r3, r3
 2684 002c 03F13003 		add	r3, r3, #48
 2685 0030 FB73     		strb	r3, [r7, #15]
 741:../Main.c     **** 	a /= 10;
 2686              		.loc 1 741 0
 2687 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2688 0034 4CF6CD43 		movw	r3, #52429
 2689 0038 CCF6CC43 		movt	r3, 52428
 2690 003c A3FB0213 		umull	r1, r3, r3, r2
 2691 0040 4FEAD303 		lsr	r3, r3, #3
 2692 0044 FB71     		strb	r3, [r7, #7]
 742:../Main.c     **** 	char d = a % 10 + '0';
 2693              		.loc 1 742 0
 2694 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2695 0048 4CF6CD43 		movw	r3, #52429
 2696 004c CCF6CC43 		movt	r3, 52428
 2697 0050 A3FB0213 		umull	r1, r3, r3, r2
 2698 0054 4FEAD301 		lsr	r1, r3, #3
 2699 0058 0B46     		mov	r3, r1
 2700 005a 4FEA8303 		lsl	r3, r3, #2
 2701 005e 5B18     		adds	r3, r3, r1
 2702 0060 4FEA4303 		lsl	r3, r3, #1
 2703 0064 D31A     		subs	r3, r2, r3
 2704 0066 DBB2     		uxtb	r3, r3
 2705 0068 03F13003 		add	r3, r3, #48
 2706 006c BB73     		strb	r3, [r7, #14]
 743:../Main.c     **** 	a /= 10;
 2707              		.loc 1 743 0
 2708 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2709 0070 4CF6CD43 		movw	r3, #52429
 2710 0074 CCF6CC43 		movt	r3, 52428
 2711 0078 A3FB0213 		umull	r1, r3, r3, r2
 2712 007c 4FEAD303 		lsr	r3, r3, #3
 2713 0080 FB71     		strb	r3, [r7, #7]
 744:../Main.c     **** 	char e = a % 10 + '0';
 2714              		.loc 1 744 0
 2715 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2716 0084 4CF6CD43 		movw	r3, #52429
 2717 0088 CCF6CC43 		movt	r3, 52428
 2718 008c A3FB0213 		umull	r1, r3, r3, r2
 2719 0090 4FEAD301 		lsr	r1, r3, #3
 2720 0094 0B46     		mov	r3, r1
 2721 0096 4FEA8303 		lsl	r3, r3, #2
 2722 009a 5B18     		adds	r3, r3, r1
 2723 009c 4FEA4303 		lsl	r3, r3, #1
 2724 00a0 D31A     		subs	r3, r2, r3
 2725 00a2 DBB2     		uxtb	r3, r3
 2726 00a4 03F13003 		add	r3, r3, #48
 2727 00a8 7B73     		strb	r3, [r7, #13]
 745:../Main.c     **** 	UART001_WriteData(UART001_Handle0, e);
 2728              		.loc 1 745 0
 2729 00aa 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2730 00ae C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2731 00b2 1B68     		ldr	r3, [r3, #0]
 2732 00b4 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 2733 00b6 C3F88021 		str	r2, [r3, #384]
 746:../Main.c     **** 	UART001_WriteData(UART001_Handle0, d);
 2734              		.loc 1 746 0
 2735 00ba 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2736 00be C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2737 00c2 1B68     		ldr	r3, [r3, #0]
 2738 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2739 00c6 C3F88021 		str	r2, [r3, #384]
 747:../Main.c     **** 	UART001_WriteData(UART001_Handle0, c);
 2740              		.loc 1 747 0
 2741 00ca 40F20003 		movw	r3, #:lower16:UART001_Handle0
 2742 00ce C0F20003 		movt	r3, #:upper16:UART001_Handle0
 2743 00d2 1B68     		ldr	r3, [r3, #0]
 2744 00d4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2745 00d6 C3F88021 		str	r2, [r3, #384]
 748:../Main.c     **** 
 749:../Main.c     **** }
 2746              		.loc 1 749 0
 2747 00da 07F11407 		add	r7, r7, #20
 2748 00de BD46     		mov	sp, r7
 2749 00e0 80BC     		pop	{r7}
 2750 00e2 7047     		bx	lr
 2751              		.cfi_endproc
 2752              	.LFE130:
 2754              		.section	.text.VADC0_C0_2_IRQHandler,"ax",%progbits
 2755              		.align	2
 2756              		.global	VADC0_C0_2_IRQHandler
 2757              		.thumb
 2758              		.thumb_func
 2760              	VADC0_C0_2_IRQHandler:
 2761              	.LFB131:
 750:../Main.c     **** 
 751:../Main.c     **** void adc_event(void) {
 2762              		.loc 1 751 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 1, uses_anonymous_args = 0
 2766 0000 80B5     		push	{r7, lr}
 2767              	.LCFI40:
 2768              		.cfi_def_cfa_offset 8
 2769              		.cfi_offset 7, -8
 2770              		.cfi_offset 14, -4
 2771 0002 00AF     		add	r7, sp, #0
 2772              	.LCFI41:
 2773              		.cfi_def_cfa_register 7
 752:../Main.c     **** 	ADC001_GetResult(&ADC001_Handle0, &result);
 2774              		.loc 1 752 0
 2775 0004 40F20000 		movw	r0, #:lower16:ADC001_Handle0
 2776 0008 C0F20000 		movt	r0, #:upper16:ADC001_Handle0
 2777 000c 40F20001 		movw	r1, #:lower16:result
 2778 0010 C0F20001 		movt	r1, #:upper16:result
 2779 0014 FFF7FEFF 		bl	ADC001_GetResult
 753:../Main.c     **** }
 2780              		.loc 1 753 0
 2781 0018 80BD     		pop	{r7, pc}
 2782              		.cfi_endproc
 2783              	.LFE131:
 2785 001a 00BF     		.section	.text.updateButtonStates,"ax",%progbits
 2786              		.align	2
 2787              		.global	updateButtonStates
 2788              		.thumb
 2789              		.thumb_func
 2791              	updateButtonStates:
 2792              	.LFB132:
 754:../Main.c     **** 
 755:../Main.c     **** /***************************************************/
 756:../Main.c     **** /*****************FUNCOES BOTOES********************/
 757:../Main.c     **** /***************************************************/
 758:../Main.c     **** 
 759:../Main.c     **** void updateButtonStates() {
 2793              		.loc 1 759 0
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 0
 2796              		@ frame_needed = 1, uses_anonymous_args = 0
 2797              		@ link register save eliminated.
 2798 0000 80B4     		push	{r7}
 2799              	.LCFI42:
 2800              		.cfi_def_cfa_offset 4
 2801              		.cfi_offset 7, -4
 2802 0002 00AF     		add	r7, sp, #0
 2803              	.LCFI43:
 2804              		.cfi_def_cfa_register 7
 760:../Main.c     **** 	l_um_state_before = l_um_state;
 2805              		.loc 1 760 0
 2806 0004 40F20003 		movw	r3, #:lower16:l_um_state
 2807 0008 C0F20003 		movt	r3, #:upper16:l_um_state
 2808 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2809 000e 40F20003 		movw	r3, #:lower16:l_um_state_before
 2810 0012 C0F20003 		movt	r3, #:upper16:l_um_state_before
 2811 0016 1A70     		strb	r2, [r3, #0]
 761:../Main.c     **** 	l_dois_state_before = l_dois_state;
 2812              		.loc 1 761 0
 2813 0018 40F20003 		movw	r3, #:lower16:l_dois_state
 2814 001c C0F20003 		movt	r3, #:upper16:l_dois_state
 2815 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2816 0022 40F20003 		movw	r3, #:lower16:l_dois_state_before
 2817 0026 C0F20003 		movt	r3, #:upper16:l_dois_state_before
 2818 002a 1A70     		strb	r2, [r3, #0]
 762:../Main.c     **** 	l_tres_state_before = l_tres_state;
 2819              		.loc 1 762 0
 2820 002c 40F20003 		movw	r3, #:lower16:l_tres_state
 2821 0030 C0F20003 		movt	r3, #:upper16:l_tres_state
 2822 0034 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2823 0036 40F20003 		movw	r3, #:lower16:l_tres_state_before
 2824 003a C0F20003 		movt	r3, #:upper16:l_tres_state_before
 2825 003e 1A70     		strb	r2, [r3, #0]
 763:../Main.c     **** 	r_um_state_before = r_um_state;
 2826              		.loc 1 763 0
 2827 0040 40F20003 		movw	r3, #:lower16:r_um_state
 2828 0044 C0F20003 		movt	r3, #:upper16:r_um_state
 2829 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2830 004a 40F20003 		movw	r3, #:lower16:r_um_state_before
 2831 004e C0F20003 		movt	r3, #:upper16:r_um_state_before
 2832 0052 1A70     		strb	r2, [r3, #0]
 764:../Main.c     **** 	r_dois_state_before = r_dois_state;
 2833              		.loc 1 764 0
 2834 0054 40F20003 		movw	r3, #:lower16:r_dois_state
 2835 0058 C0F20003 		movt	r3, #:upper16:r_dois_state
 2836 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2837 005e 40F20003 		movw	r3, #:lower16:r_dois_state_before
 2838 0062 C0F20003 		movt	r3, #:upper16:r_dois_state_before
 2839 0066 1A70     		strb	r2, [r3, #0]
 765:../Main.c     **** 	r_tres_state_before = r_tres_state;
 2840              		.loc 1 765 0
 2841 0068 40F20003 		movw	r3, #:lower16:r_tres_state
 2842 006c C0F20003 		movt	r3, #:upper16:r_tres_state
 2843 0070 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2844 0072 40F20003 		movw	r3, #:lower16:r_tres_state_before
 2845 0076 C0F20003 		movt	r3, #:upper16:r_tres_state_before
 2846 007a 1A70     		strb	r2, [r3, #0]
 766:../Main.c     **** 	cross_state_before = cross_state;
 2847              		.loc 1 766 0
 2848 007c 40F20003 		movw	r3, #:lower16:cross_state
 2849 0080 C0F20003 		movt	r3, #:upper16:cross_state
 2850 0084 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2851 0086 40F20003 		movw	r3, #:lower16:cross_state_before
 2852 008a C0F20003 		movt	r3, #:upper16:cross_state_before
 2853 008e 1A70     		strb	r2, [r3, #0]
 767:../Main.c     **** 	sqr_state_before = sqr_state;
 2854              		.loc 1 767 0
 2855 0090 40F20003 		movw	r3, #:lower16:sqr_state
 2856 0094 C0F20003 		movt	r3, #:upper16:sqr_state
 2857 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2858 009a 40F20003 		movw	r3, #:lower16:sqr_state_before
 2859 009e C0F20003 		movt	r3, #:upper16:sqr_state_before
 2860 00a2 1A70     		strb	r2, [r3, #0]
 768:../Main.c     **** 	triangle_state_before = triangle_state;
 2861              		.loc 1 768 0
 2862 00a4 40F20003 		movw	r3, #:lower16:triangle_state
 2863 00a8 C0F20003 		movt	r3, #:upper16:triangle_state
 2864 00ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2865 00ae 40F20003 		movw	r3, #:lower16:triangle_state_before
 2866 00b2 C0F20003 		movt	r3, #:upper16:triangle_state_before
 2867 00b6 1A70     		strb	r2, [r3, #0]
 769:../Main.c     **** 	circle_state_before = circle_state;
 2868              		.loc 1 769 0
 2869 00b8 40F20003 		movw	r3, #:lower16:circle_state
 2870 00bc C0F20003 		movt	r3, #:upper16:circle_state
 2871 00c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2872 00c2 40F20003 		movw	r3, #:lower16:circle_state_before
 2873 00c6 C0F20003 		movt	r3, #:upper16:circle_state_before
 2874 00ca 1A70     		strb	r2, [r3, #0]
 770:../Main.c     **** 	left_state_before = left_state;
 2875              		.loc 1 770 0
 2876 00cc 40F20003 		movw	r3, #:lower16:left_state
 2877 00d0 C0F20003 		movt	r3, #:upper16:left_state
 2878 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2879 00d6 40F20003 		movw	r3, #:lower16:left_state_before
 2880 00da C0F20003 		movt	r3, #:upper16:left_state_before
 2881 00de 1A70     		strb	r2, [r3, #0]
 771:../Main.c     **** 	right_state_before = right_state;
 2882              		.loc 1 771 0
 2883 00e0 40F20003 		movw	r3, #:lower16:right_state
 2884 00e4 C0F20003 		movt	r3, #:upper16:right_state
 2885 00e8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2886 00ea 40F20003 		movw	r3, #:lower16:right_state_before
 2887 00ee C0F20003 		movt	r3, #:upper16:right_state_before
 2888 00f2 1A70     		strb	r2, [r3, #0]
 772:../Main.c     **** 	up_state_before = up_state;
 2889              		.loc 1 772 0
 2890 00f4 40F20003 		movw	r3, #:lower16:up_state
 2891 00f8 C0F20003 		movt	r3, #:upper16:up_state
 2892 00fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2893 00fe 40F20003 		movw	r3, #:lower16:up_state_before
 2894 0102 C0F20003 		movt	r3, #:upper16:up_state_before
 2895 0106 1A70     		strb	r2, [r3, #0]
 773:../Main.c     **** 	down_state_before = down_state;
 2896              		.loc 1 773 0
 2897 0108 40F20003 		movw	r3, #:lower16:down_state
 2898 010c C0F20003 		movt	r3, #:upper16:down_state
 2899 0110 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2900 0112 40F20003 		movw	r3, #:lower16:down_state_before
 2901 0116 C0F20003 		movt	r3, #:upper16:down_state_before
 2902 011a 1A70     		strb	r2, [r3, #0]
 774:../Main.c     **** 	start_state_before = start_state;
 2903              		.loc 1 774 0
 2904 011c 40F20003 		movw	r3, #:lower16:start_state
 2905 0120 C0F20003 		movt	r3, #:upper16:start_state
 2906 0124 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2907 0126 40F20003 		movw	r3, #:lower16:start_state_before
 2908 012a C0F20003 		movt	r3, #:upper16:start_state_before
 2909 012e 1A70     		strb	r2, [r3, #0]
 775:../Main.c     **** 	select_state_before = select_state;
 2910              		.loc 1 775 0
 2911 0130 40F20003 		movw	r3, #:lower16:select_state
 2912 0134 C0F20003 		movt	r3, #:upper16:select_state
 2913 0138 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2914 013a 40F20003 		movw	r3, #:lower16:select_state_before
 2915 013e C0F20003 		movt	r3, #:upper16:select_state_before
 2916 0142 1A70     		strb	r2, [r3, #0]
 776:../Main.c     **** 
 777:../Main.c     **** 	l_um_state = 0;
 2917              		.loc 1 777 0
 2918 0144 40F20003 		movw	r3, #:lower16:l_um_state
 2919 0148 C0F20003 		movt	r3, #:upper16:l_um_state
 2920 014c 4FF00002 		mov	r2, #0
 2921 0150 1A70     		strb	r2, [r3, #0]
 778:../Main.c     **** 	l_dois_state = 0;
 2922              		.loc 1 778 0
 2923 0152 40F20003 		movw	r3, #:lower16:l_dois_state
 2924 0156 C0F20003 		movt	r3, #:upper16:l_dois_state
 2925 015a 4FF00002 		mov	r2, #0
 2926 015e 1A70     		strb	r2, [r3, #0]
 779:../Main.c     **** 	l_tres_state = 0;
 2927              		.loc 1 779 0
 2928 0160 40F20003 		movw	r3, #:lower16:l_tres_state
 2929 0164 C0F20003 		movt	r3, #:upper16:l_tres_state
 2930 0168 4FF00002 		mov	r2, #0
 2931 016c 1A70     		strb	r2, [r3, #0]
 780:../Main.c     **** 	r_um_state = 0;
 2932              		.loc 1 780 0
 2933 016e 40F20003 		movw	r3, #:lower16:r_um_state
 2934 0172 C0F20003 		movt	r3, #:upper16:r_um_state
 2935 0176 4FF00002 		mov	r2, #0
 2936 017a 1A70     		strb	r2, [r3, #0]
 781:../Main.c     **** 	r_dois_state = 0;
 2937              		.loc 1 781 0
 2938 017c 40F20003 		movw	r3, #:lower16:r_dois_state
 2939 0180 C0F20003 		movt	r3, #:upper16:r_dois_state
 2940 0184 4FF00002 		mov	r2, #0
 2941 0188 1A70     		strb	r2, [r3, #0]
 782:../Main.c     **** 	r_tres_state = 0;
 2942              		.loc 1 782 0
 2943 018a 40F20003 		movw	r3, #:lower16:r_tres_state
 2944 018e C0F20003 		movt	r3, #:upper16:r_tres_state
 2945 0192 4FF00002 		mov	r2, #0
 2946 0196 1A70     		strb	r2, [r3, #0]
 783:../Main.c     **** 	cross_state = 0;
 2947              		.loc 1 783 0
 2948 0198 40F20003 		movw	r3, #:lower16:cross_state
 2949 019c C0F20003 		movt	r3, #:upper16:cross_state
 2950 01a0 4FF00002 		mov	r2, #0
 2951 01a4 1A70     		strb	r2, [r3, #0]
 784:../Main.c     **** 	sqr_state = 0;
 2952              		.loc 1 784 0
 2953 01a6 40F20003 		movw	r3, #:lower16:sqr_state
 2954 01aa C0F20003 		movt	r3, #:upper16:sqr_state
 2955 01ae 4FF00002 		mov	r2, #0
 2956 01b2 1A70     		strb	r2, [r3, #0]
 785:../Main.c     **** 	triangle_state = 0;
 2957              		.loc 1 785 0
 2958 01b4 40F20003 		movw	r3, #:lower16:triangle_state
 2959 01b8 C0F20003 		movt	r3, #:upper16:triangle_state
 2960 01bc 4FF00002 		mov	r2, #0
 2961 01c0 1A70     		strb	r2, [r3, #0]
 786:../Main.c     **** 	circle_state = 0;
 2962              		.loc 1 786 0
 2963 01c2 40F20003 		movw	r3, #:lower16:circle_state
 2964 01c6 C0F20003 		movt	r3, #:upper16:circle_state
 2965 01ca 4FF00002 		mov	r2, #0
 2966 01ce 1A70     		strb	r2, [r3, #0]
 787:../Main.c     **** 	left_state = 0;
 2967              		.loc 1 787 0
 2968 01d0 40F20003 		movw	r3, #:lower16:left_state
 2969 01d4 C0F20003 		movt	r3, #:upper16:left_state
 2970 01d8 4FF00002 		mov	r2, #0
 2971 01dc 1A70     		strb	r2, [r3, #0]
 788:../Main.c     **** 	right_state = 0;
 2972              		.loc 1 788 0
 2973 01de 40F20003 		movw	r3, #:lower16:right_state
 2974 01e2 C0F20003 		movt	r3, #:upper16:right_state
 2975 01e6 4FF00002 		mov	r2, #0
 2976 01ea 1A70     		strb	r2, [r3, #0]
 789:../Main.c     **** 	up_state = 0;
 2977              		.loc 1 789 0
 2978 01ec 40F20003 		movw	r3, #:lower16:up_state
 2979 01f0 C0F20003 		movt	r3, #:upper16:up_state
 2980 01f4 4FF00002 		mov	r2, #0
 2981 01f8 1A70     		strb	r2, [r3, #0]
 790:../Main.c     **** 	down_state = 0;
 2982              		.loc 1 790 0
 2983 01fa 40F20003 		movw	r3, #:lower16:down_state
 2984 01fe C0F20003 		movt	r3, #:upper16:down_state
 2985 0202 4FF00002 		mov	r2, #0
 2986 0206 1A70     		strb	r2, [r3, #0]
 791:../Main.c     **** 	start_state = 0;
 2987              		.loc 1 791 0
 2988 0208 40F20003 		movw	r3, #:lower16:start_state
 2989 020c C0F20003 		movt	r3, #:upper16:start_state
 2990 0210 4FF00002 		mov	r2, #0
 2991 0214 1A70     		strb	r2, [r3, #0]
 792:../Main.c     **** 	select_state = 0;
 2992              		.loc 1 792 0
 2993 0216 40F20003 		movw	r3, #:lower16:select_state
 2994 021a C0F20003 		movt	r3, #:upper16:select_state
 2995 021e 4FF00002 		mov	r2, #0
 2996 0222 1A70     		strb	r2, [r3, #0]
 793:../Main.c     **** }
 2997              		.loc 1 793 0
 2998 0224 BD46     		mov	sp, r7
 2999 0226 80BC     		pop	{r7}
 3000 0228 7047     		bx	lr
 3001              		.cfi_endproc
 3002              	.LFE132:
 3004 022a 00BF     		.section	.text.turbo,"ax",%progbits
 3005              		.align	2
 3006              		.global	turbo
 3007              		.thumb
 3008              		.thumb_func
 3010              	turbo:
 3011              	.LFB133:
 794:../Main.c     **** 
 795:../Main.c     **** void turbo(void) {
 3012              		.loc 1 795 0
 3013              		.cfi_startproc
 3014              		@ args = 0, pretend = 0, frame = 0
 3015              		@ frame_needed = 1, uses_anonymous_args = 0
 3016              		@ link register save eliminated.
 3017 0000 80B4     		push	{r7}
 3018              	.LCFI44:
 3019              		.cfi_def_cfa_offset 4
 3020              		.cfi_offset 7, -4
 3021 0002 00AF     		add	r7, sp, #0
 3022              	.LCFI45:
 3023              		.cfi_def_cfa_register 7
 796:../Main.c     **** //	if(!started_acceleration){
 797:../Main.c     **** //
 798:../Main.c     **** //		started_acceleration = 1;
 799:../Main.c     **** //		acceleration_ticks=0;
 800:../Main.c     **** //		int pwm_temp = last_value_left;
 801:../Main.c     **** //		if(pwm_temp < last_value_right)
 802:../Main.c     **** //			pwm_temp = last_value_right;
 803:../Main.c     **** //
 804:../Main.c     **** //		pwm_max = pwm_temp/255.0f;
 805:../Main.c     **** //		offset_ramp = pwm_temp/255.0f;
 806:../Main.c     **** //
 807:../Main.c     **** //
 808:../Main.c     **** //	}else{
 809:../Main.c     **** //
 810:../Main.c     **** //		pwm_max = acceleration_ticks*(100 - offset_ramp)/1000.0f + offset_ramp;
 811:../Main.c     **** //		if(pwm_max > 100)
 812:../Main.c     **** //			pwm_max = 100;
 813:../Main.c     **** //	}
 814:../Main.c     **** 
 815:../Main.c     **** 	pwm_max = 100;
 3024              		.loc 1 815 0
 3025 0004 40F20003 		movw	r3, #:lower16:pwm_max
 3026 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 3027 000c 4FF06402 		mov	r2, #100
 3028 0010 1A70     		strb	r2, [r3, #0]
 816:../Main.c     **** 
 817:../Main.c     **** }
 3029              		.loc 1 817 0
 3030 0012 BD46     		mov	sp, r7
 3031 0014 80BC     		pop	{r7}
 3032 0016 7047     		bx	lr
 3033              		.cfi_endproc
 3034              	.LFE133:
 3036              		.section	.text.turbo2,"ax",%progbits
 3037              		.align	2
 3038              		.global	turbo2
 3039              		.thumb
 3040              		.thumb_func
 3042              	turbo2:
 3043              	.LFB134:
 818:../Main.c     **** 
 819:../Main.c     **** void turbo2(void) {
 3044              		.loc 1 819 0
 3045              		.cfi_startproc
 3046              		@ args = 0, pretend = 0, frame = 8
 3047              		@ frame_needed = 1, uses_anonymous_args = 0
 3048              		@ link register save eliminated.
 3049 0000 80B4     		push	{r7}
 3050              	.LCFI46:
 3051              		.cfi_def_cfa_offset 4
 3052              		.cfi_offset 7, -4
 3053 0002 83B0     		sub	sp, sp, #12
 3054              	.LCFI47:
 3055              		.cfi_def_cfa_offset 16
 3056 0004 00AF     		add	r7, sp, #0
 3057              	.LCFI48:
 3058              		.cfi_def_cfa_register 7
 820:../Main.c     **** 	if(!started_acceleration){
 3059              		.loc 1 820 0
 3060 0006 40F20003 		movw	r3, #:lower16:started_acceleration
 3061 000a C0F20003 		movt	r3, #:upper16:started_acceleration
 3062 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3063 0010 002B     		cmp	r3, #0
 3064 0012 44D1     		bne	.L97
 3065              	.LBB8:
 821:../Main.c     **** 
 822:../Main.c     **** 		started_acceleration = 1;
 3066              		.loc 1 822 0
 3067 0014 40F20003 		movw	r3, #:lower16:started_acceleration
 3068 0018 C0F20003 		movt	r3, #:upper16:started_acceleration
 3069 001c 4FF00102 		mov	r2, #1
 3070 0020 1A70     		strb	r2, [r3, #0]
 823:../Main.c     **** 		acceleration_ticks=0;
 3071              		.loc 1 823 0
 3072 0022 40F20003 		movw	r3, #:lower16:acceleration_ticks
 3073 0026 C0F20003 		movt	r3, #:upper16:acceleration_ticks
 3074 002a 4FF00002 		mov	r2, #0
 3075 002e 1A60     		str	r2, [r3, #0]
 824:../Main.c     **** 		int pwm_temp = last_value_left;
 3076              		.loc 1 824 0
 3077 0030 40F20003 		movw	r3, #:lower16:last_value_left
 3078 0034 C0F20003 		movt	r3, #:upper16:last_value_left
 3079 0038 1B68     		ldr	r3, [r3, #0]
 3080 003a 7B60     		str	r3, [r7, #4]
 825:../Main.c     **** 		if(pwm_temp < last_value_right)
 3081              		.loc 1 825 0
 3082 003c 40F20003 		movw	r3, #:lower16:last_value_right
 3083 0040 C0F20003 		movt	r3, #:upper16:last_value_right
 3084 0044 1B68     		ldr	r3, [r3, #0]
 3085 0046 7A68     		ldr	r2, [r7, #4]
 3086 0048 9A42     		cmp	r2, r3
 3087 004a 05DA     		bge	.L98
 826:../Main.c     **** 			pwm_temp = last_value_right;
 3088              		.loc 1 826 0
 3089 004c 40F20003 		movw	r3, #:lower16:last_value_right
 3090 0050 C0F20003 		movt	r3, #:upper16:last_value_right
 3091 0054 1B68     		ldr	r3, [r3, #0]
 3092 0056 7B60     		str	r3, [r7, #4]
 3093              	.L98:
 827:../Main.c     **** 
 828:../Main.c     **** 		pwm_max = pwm_temp/255.0f;
 3094              		.loc 1 828 0
 3095 0058 D7ED017A 		flds	s15, [r7, #4]	@ int
 3096 005c B8EEE77A 		fsitos	s14, s15
 3097 0060 DFED297A 		flds	s15, .L100
 3098 0064 C7EE277A 		fdivs	s15, s14, s15
 3099 0068 FCEEE77A 		ftouizs	s15, s15
 3100 006c 17EE903A 		fmrs	r3, s15	@ int
 3101 0070 DAB2     		uxtb	r2, r3
 3102 0072 40F20003 		movw	r3, #:lower16:pwm_max
 3103 0076 C0F20003 		movt	r3, #:upper16:pwm_max
 3104 007a 1A70     		strb	r2, [r3, #0]
 829:../Main.c     **** 		offset_ramp = pwm_temp/255.0f;
 3105              		.loc 1 829 0
 3106 007c D7ED017A 		flds	s15, [r7, #4]	@ int
 3107 0080 B8EEE77A 		fsitos	s14, s15
 3108 0084 DFED207A 		flds	s15, .L100
 3109 0088 C7EE277A 		fdivs	s15, s14, s15
 3110 008c FDEEE77A 		ftosizs	s15, s15
 3111 0090 40F20003 		movw	r3, #:lower16:offset_ramp
 3112 0094 C0F20003 		movt	r3, #:upper16:offset_ramp
 3113 0098 C3ED007A 		fsts	s15, [r3, #0]	@ int
 3114 009c 2EE0     		b	.L96
 3115              	.L97:
 3116              	.LBE8:
 830:../Main.c     **** 
 831:../Main.c     **** 
 832:../Main.c     **** 	}else{
 833:../Main.c     **** 
 834:../Main.c     **** 		pwm_max = acceleration_ticks*(100 - PWM_LIM)/1000.0f + PWM_LIM;
 3117              		.loc 1 834 0
 3118 009e 40F20003 		movw	r3, #:lower16:acceleration_ticks
 3119 00a2 C0F20003 		movt	r3, #:upper16:acceleration_ticks
 3120 00a6 1A68     		ldr	r2, [r3, #0]
 3121 00a8 1346     		mov	r3, r2
 3122 00aa 4FEA0313 		lsl	r3, r3, #4
 3123 00ae 9B1A     		subs	r3, r3, r2
 3124 00b0 4FEA4303 		lsl	r3, r3, #1
 3125 00b4 07EE903A 		fmsr	s15, r3	@ int
 3126 00b8 B8EE677A 		fuitos	s14, s15
 3127 00bc DFED137A 		flds	s15, .L100+4
 3128 00c0 87EE277A 		fdivs	s14, s14, s15
 3129 00c4 DFED127A 		flds	s15, .L100+8
 3130 00c8 77EE277A 		fadds	s15, s14, s15
 3131 00cc FCEEE77A 		ftouizs	s15, s15
 3132 00d0 17EE903A 		fmrs	r3, s15	@ int
 3133 00d4 DAB2     		uxtb	r2, r3
 3134 00d6 40F20003 		movw	r3, #:lower16:pwm_max
 3135 00da C0F20003 		movt	r3, #:upper16:pwm_max
 3136 00de 1A70     		strb	r2, [r3, #0]
 835:../Main.c     **** 		if(pwm_max > 100)
 3137              		.loc 1 835 0
 3138 00e0 40F20003 		movw	r3, #:lower16:pwm_max
 3139 00e4 C0F20003 		movt	r3, #:upper16:pwm_max
 3140 00e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3141 00ea 642B     		cmp	r3, #100
 3142 00ec 06D9     		bls	.L96
 836:../Main.c     **** 			pwm_max = 100;
 3143              		.loc 1 836 0
 3144 00ee 40F20003 		movw	r3, #:lower16:pwm_max
 3145 00f2 C0F20003 		movt	r3, #:upper16:pwm_max
 3146 00f6 4FF06402 		mov	r2, #100
 3147 00fa 1A70     		strb	r2, [r3, #0]
 3148              	.L96:
 837:../Main.c     **** 	}
 838:../Main.c     **** 
 839:../Main.c     **** //	pwm_max = 100;
 840:../Main.c     **** 
 841:../Main.c     **** }
 3149              		.loc 1 841 0
 3150 00fc 07F10C07 		add	r7, r7, #12
 3151 0100 BD46     		mov	sp, r7
 3152 0102 80BC     		pop	{r7}
 3153 0104 7047     		bx	lr
 3154              	.L101:
 3155 0106 00BF     		.align	2
 3156              	.L100:
 3157 0108 00007F43 		.word	1132396544
 3158 010c 00007A44 		.word	1148846080
 3159 0110 00008C42 		.word	1116471296
 3160              		.cfi_endproc
 3161              	.LFE134:
 3163              		.section	.text.shunt,"ax",%progbits
 3164              		.align	2
 3165              		.global	shunt
 3166              		.thumb
 3167              		.thumb_func
 3169              	shunt:
 3170              	.LFB135:
 842:../Main.c     **** 
 843:../Main.c     **** void shunt(void) {
 3171              		.loc 1 843 0
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 0
 3174              		@ frame_needed = 1, uses_anonymous_args = 0
 3175              		@ link register save eliminated.
 3176 0000 80B4     		push	{r7}
 3177              	.LCFI49:
 3178              		.cfi_def_cfa_offset 4
 3179              		.cfi_offset 7, -4
 3180 0002 00AF     		add	r7, sp, #0
 3181              	.LCFI50:
 3182              		.cfi_def_cfa_register 7
 844:../Main.c     **** 	pwm_max = 40;
 3183              		.loc 1 844 0
 3184 0004 40F20003 		movw	r3, #:lower16:pwm_max
 3185 0008 C0F20003 		movt	r3, #:upper16:pwm_max
 3186 000c 4FF02802 		mov	r2, #40
 3187 0010 1A70     		strb	r2, [r3, #0]
 845:../Main.c     **** }
 3188              		.loc 1 845 0
 3189 0012 BD46     		mov	sp, r7
 3190 0014 80BC     		pop	{r7}
 3191 0016 7047     		bx	lr
 3192              		.cfi_endproc
 3193              	.LFE135:
 3195              		.section	.text.flip,"ax",%progbits
 3196              		.align	2
 3197              		.global	flip
 3198              		.thumb
 3199              		.thumb_func
 3201              	flip:
 3202              	.LFB136:
 846:../Main.c     **** 
 847:../Main.c     **** void flip(void) {
 3203              		.loc 1 847 0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 0
 3206              		@ frame_needed = 1, uses_anonymous_args = 0
 3207              		@ link register save eliminated.
 3208 0000 80B4     		push	{r7}
 3209              	.LCFI51:
 3210              		.cfi_def_cfa_offset 4
 3211              		.cfi_offset 7, -4
 3212 0002 00AF     		add	r7, sp, #0
 3213              	.LCFI52:
 3214              		.cfi_def_cfa_register 7
 848:../Main.c     **** 	flipped = !flipped;
 3215              		.loc 1 848 0
 3216 0004 40F20003 		movw	r3, #:lower16:flipped
 3217 0008 C0F20003 		movt	r3, #:upper16:flipped
 3218 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3219 000e 002B     		cmp	r3, #0
 3220 0010 14BF     		ite	ne
 3221 0012 0023     		movne	r3, #0
 3222 0014 0123     		moveq	r3, #1
 3223 0016 DBB2     		uxtb	r3, r3
 3224 0018 1A46     		mov	r2, r3
 3225 001a 40F20003 		movw	r3, #:lower16:flipped
 3226 001e C0F20003 		movt	r3, #:upper16:flipped
 3227 0022 1A70     		strb	r2, [r3, #0]
 849:../Main.c     **** }
 3228              		.loc 1 849 0
 3229 0024 BD46     		mov	sp, r7
 3230 0026 80BC     		pop	{r7}
 3231 0028 7047     		bx	lr
 3232              		.cfi_endproc
 3233              	.LFE136:
 3235 002a 00BF     		.section	.text.changeMode,"ax",%progbits
 3236              		.align	2
 3237              		.global	changeMode
 3238              		.thumb
 3239              		.thumb_func
 3241              	changeMode:
 3242              	.LFB137:
 850:../Main.c     **** 
 851:../Main.c     **** void changeMode(char a_mode){
 3243              		.loc 1 851 0
 3244              		.cfi_startproc
 3245              		@ args = 0, pretend = 0, frame = 8
 3246              		@ frame_needed = 1, uses_anonymous_args = 0
 3247              		@ link register save eliminated.
 3248 0000 80B4     		push	{r7}
 3249              	.LCFI53:
 3250              		.cfi_def_cfa_offset 4
 3251              		.cfi_offset 7, -4
 3252 0002 83B0     		sub	sp, sp, #12
 3253              	.LCFI54:
 3254              		.cfi_def_cfa_offset 16
 3255 0004 00AF     		add	r7, sp, #0
 3256              	.LCFI55:
 3257              		.cfi_def_cfa_register 7
 3258 0006 0346     		mov	r3, r0
 3259 0008 FB71     		strb	r3, [r7, #7]
 852:../Main.c     **** 
 853:../Main.c     **** 	mode = a_mode;
 3260              		.loc 1 853 0
 3261 000a 40F20003 		movw	r3, #:lower16:mode
 3262 000e C0F20003 		movt	r3, #:upper16:mode
 3263 0012 FA79     		ldrb	r2, [r7, #7]
 3264 0014 1A70     		strb	r2, [r3, #0]
 854:../Main.c     **** }
 3265              		.loc 1 854 0
 3266 0016 07F10C07 		add	r7, r7, #12
 3267 001a BD46     		mov	sp, r7
 3268 001c 80BC     		pop	{r7}
 3269 001e 7047     		bx	lr
 3270              		.cfi_endproc
 3271              	.LFE137:
 3273              		.section	.text.Software_Timers_Init,"ax",%progbits
 3274              		.align	2
 3275              		.global	Software_Timers_Init
 3276              		.thumb
 3277              		.thumb_func
 3279              	Software_Timers_Init:
 3280              	.LFB138:
 855:../Main.c     **** 
 856:../Main.c     **** void Software_Timers_Init() {
 3281              		.loc 1 856 0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 8
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285 0000 80B5     		push	{r7, lr}
 3286              	.LCFI56:
 3287              		.cfi_def_cfa_offset 8
 3288              		.cfi_offset 7, -8
 3289              		.cfi_offset 14, -4
 3290 0002 82B0     		sub	sp, sp, #8
 3291              	.LCFI57:
 3292              		.cfi_def_cfa_offset 16
 3293 0004 00AF     		add	r7, sp, #0
 3294              	.LCFI58:
 3295              		.cfi_def_cfa_register 7
 857:../Main.c     **** 	handle_t TaskTimerId;
 858:../Main.c     **** 
 859:../Main.c     **** 	TaskTimerId = SYSTM002_CreateTimer(SYSTM002_SYSTICK_INTERVAL,
 3296              		.loc 1 859 0
 3297 0006 4FF06400 		mov	r0, #100
 3298 000a 4FF00101 		mov	r1, #1
 3299 000e 40F20002 		movw	r2, #:lower16:Tick_Handler
 3300 0012 C0F20002 		movt	r2, #:upper16:Tick_Handler
 3301 0016 4FF00003 		mov	r3, #0
 3302 001a FFF7FEFF 		bl	SYSTM002_CreateTimer
 3303 001e 7860     		str	r0, [r7, #4]
 860:../Main.c     **** 			SYSTM002_PERIODIC, &Tick_Handler, NULL);
 861:../Main.c     **** 	if (TaskTimerId != 0) {
 3304              		.loc 1 861 0
 3305 0020 7B68     		ldr	r3, [r7, #4]
 3306 0022 002B     		cmp	r3, #0
 3307 0024 02D0     		beq	.L105
 862:../Main.c     **** //Timer created successfully so start it
 863:../Main.c     **** 		SYSTM002_StartTimer(TaskTimerId);
 3308              		.loc 1 863 0
 3309 0026 7868     		ldr	r0, [r7, #4]
 3310 0028 FFF7FEFF 		bl	SYSTM002_StartTimer
 3311              	.L105:
 864:../Main.c     **** 	}
 865:../Main.c     **** }
 3312              		.loc 1 865 0
 3313 002c 07F10807 		add	r7, r7, #8
 3314 0030 BD46     		mov	sp, r7
 3315 0032 80BD     		pop	{r7, pc}
 3316              		.cfi_endproc
 3317              	.LFE138:
 3319              		.section	.text.Tick_Handler,"ax",%progbits
 3320              		.align	2
 3321              		.global	Tick_Handler
 3322              		.thumb
 3323              		.thumb_func
 3325              	Tick_Handler:
 3326              	.LFB139:
 866:../Main.c     **** 
 867:../Main.c     **** void Tick_Handler(void) {
 3327              		.loc 1 867 0
 3328              		.cfi_startproc
 3329              		@ args = 0, pretend = 0, frame = 0
 3330              		@ frame_needed = 1, uses_anonymous_args = 0
 3331              		@ link register save eliminated.
 3332 0000 80B4     		push	{r7}
 3333              	.LCFI59:
 3334              		.cfi_def_cfa_offset 4
 3335              		.cfi_offset 7, -4
 3336 0002 00AF     		add	r7, sp, #0
 3337              	.LCFI60:
 3338              		.cfi_def_cfa_register 7
 868:../Main.c     **** 	acceleration_ticks++;
 3339              		.loc 1 868 0
 3340 0004 40F20003 		movw	r3, #:lower16:acceleration_ticks
 3341 0008 C0F20003 		movt	r3, #:upper16:acceleration_ticks
 3342 000c 1B68     		ldr	r3, [r3, #0]
 3343 000e 03F10102 		add	r2, r3, #1
 3344 0012 40F20003 		movw	r3, #:lower16:acceleration_ticks
 3345 0016 C0F20003 		movt	r3, #:upper16:acceleration_ticks
 3346 001a 1A60     		str	r2, [r3, #0]
 869:../Main.c     **** }
 3347              		.loc 1 869 0
 3348 001c BD46     		mov	sp, r7
 3349 001e 80BC     		pop	{r7}
 3350 0020 7047     		bx	lr
 3351              		.cfi_endproc
 3352              	.LFE139:
 3354 0022 00BF     		.text
 3355              	.Letext0:
 3356              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3357              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3358              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3359              		.file 6 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3360              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3361              		.file 8 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3362              		.file 9 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3363              		.file 10 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 3364              		.file 11 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3365              		.file 12 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 3366              		.file 13 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
 3367              		.file 14 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:24     .data:00000000 l_um
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:21     .data:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3042   .text.turbo2:00000000 turbo2
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:31     .bss:00000000 l_dois
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:28     .bss:00000000 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:37     .bss:00000004 l_tres
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:44     .data:00000004 r_um
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3010   .text.turbo:00000000 turbo
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:51     .bss:00000008 r_dois
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:57     .bss:0000000c r_tres
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:64     .data:00000008 cross
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3201   .text.flip:00000000 flip
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:70     .data:0000000c sqr
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3241   .text.changeMode:00000000 changeMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:76     .data:00000010 triangle
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:82     .data:00000014 circle
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:89     .bss:00000010 left
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:95     .bss:00000014 right
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:101    .bss:00000018 up
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:107    .bss:0000001c down
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:113    .bss:00000020 start
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:119    .bss:00000024 select
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:124    .bss:00000028 l_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:129    .bss:00000029 l_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:134    .bss:0000002a l_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:139    .bss:0000002b r_um_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:144    .bss:0000002c r_dois_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:149    .bss:0000002d r_tres_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:154    .bss:0000002e cross_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:159    .bss:0000002f sqr_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:164    .bss:00000030 triangle_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:169    .bss:00000031 circle_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:174    .bss:00000032 left_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:179    .bss:00000033 right_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:184    .bss:00000034 up_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:189    .bss:00000035 down_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:194    .bss:00000036 start_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:199    .bss:00000037 select_state
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:204    .bss:00000038 l_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:209    .bss:00000039 l_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:214    .bss:0000003a l_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:219    .bss:0000003b r_um_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:224    .bss:0000003c r_dois_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:229    .bss:0000003d r_tres_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:234    .bss:0000003e cross_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:239    .bss:0000003f sqr_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:244    .bss:00000040 triangle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:249    .bss:00000041 circle_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:254    .bss:00000042 left_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:259    .bss:00000043 right_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:264    .bss:00000044 up_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:269    .bss:00000045 down_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:274    .bss:00000046 start_state_before
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:279    .bss:00000047 select_state_before
                            *COM*:00000018 psxDado
                            *COM*:0000000f configuration
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:287    .data:00000018 data_R
                            *COM*:00000005 data_E
                            *COM*:00000001 psx_status
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:295    .bss:00000048 flipped
                            *COM*:00000004 result
                            *COM*:00000001 pwm_max
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:303    .data:00000019 mode
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:310    .bss:0000004c acceleration_ticks
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:315    .bss:00000050 started_acceleration
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:321    .bss:00000054 last_value_left
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:327    .bss:00000058 last_value_right
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:333    .bss:0000005c offset_ramp
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:336    .text.main:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:341    .text.main:00000000 main
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1434   .text.configure_E:00000000 configure_E
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2344   .text.psxHandShake:00000000 psxHandShake
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1826   .text.psxConfiguraControle:00000000 psxConfiguraControle
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3279   .text.Software_Timers_Init:00000000 Software_Timers_Init
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2223   .text.psxLeControle:00000000 psxLeControle
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1638   .text.write_E:00000000 write_E
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2791   .text.updateButtonStates:00000000 updateButtonStates
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1276   .text.read_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1281   .text.read_R:00000000 read_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2595   .text.delay:00000000 delay
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1383   .text.pulse_R:00000000 pulse_R
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1378   .text.pulse_R:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1429   .text.configure_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1633   .text.write_E:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1821   .text.psxConfiguraControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1857   .text.psxEnterConfigMode:00000000 psxEnterConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1963   .text.psxSetAnalogMode:00000000 psxSetAnalogMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2093   .text.psxExitConfigMode:00000000 psxExitConfigMode
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1852   .text.psxEnterConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2455   .text.psxTrocaByte:00000000 psxTrocaByte
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:1958   .text.psxSetAnalogMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2088   .text.psxExitConfigMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2218   .text.psxLeControle:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2339   .text.psxHandShake:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2450   .text.psxTrocaByte:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2590   .text.delay:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2648   .text.printByteToInt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2653   .text.printByteToInt:00000000 printByteToInt
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2755   .text.VADC0_C0_2_IRQHandler:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2760   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:2786   .text.updateButtonStates:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3005   .text.turbo:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3037   .text.turbo2:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3157   .text.turbo2:00000108 $d
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3164   .text.shunt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3169   .text.shunt:00000000 shunt
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3196   .text.flip:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3236   .text.changeMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3274   .text.Software_Timers_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3325   .text.Tick_Handler:00000000 Tick_Handler
C:\Users\JMASS_~1\AppData\Local\Temp\cc2gD2Zg.s:3320   .text.Tick_Handler:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d
                           .group:00000000 wm4.SYSTM002_Conf.h.70.e893767dc4d518b087b4a20e349ac4d8
                           .group:00000000 wm4.SYSTM002.h.98.0f398400b32186dea0837ac3b6c1ddcb

UNDEFINED SYMBOLS
DAVE_Init
ADC001_Handle0
ADC001_GenerateLoadEvent
ADC001_GetResult
IO004_Handle6
IO004_Handle4
IO004_Handle2
IO004_Handle1
IO004_Handle12
IO004_Handle10
IO004_Handle11
IO004_Handle9
UART001_Handle0
SYSTM002_CreateTimer
SYSTM002_StartTimer
