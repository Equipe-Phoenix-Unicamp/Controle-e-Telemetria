   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ADC001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	ADC001_Init
  22              		.thumb
  23              		.thumb_func
  25              	ADC001_Init:
  26              	.LFB117:
  27              		.file 1 "../Dave/Generated/src/ADC001/ADC001.c"
   1:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADC001/ADC001.c **** **  DAVE App Name : ADC001       App Version: 1.0.22               
   3:../Dave/Generated/src/ADC001/ADC001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADC001/ADC001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADC001/ADC001.c **** 
   7:../Dave/Generated/src/ADC001/ADC001.c **** /*CODE_BLOCK_BEGIN[ADC001.c]*/
   8:../Dave/Generated/src/ADC001/ADC001.c **** 
   9:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
  10:../Dave/Generated/src/ADC001/ADC001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  11:../Dave/Generated/src/ADC001/ADC001.c ****  All rights reserved.                                                         **
  12:../Dave/Generated/src/ADC001/ADC001.c ****                                                                               **
  13:../Dave/Generated/src/ADC001/ADC001.c ****  Redistribution and use in source and binary forms, with or without           **
  14:../Dave/Generated/src/ADC001/ADC001.c ****  modification,are permitted provided that the following conditions are met:   **
  15:../Dave/Generated/src/ADC001/ADC001.c ****                                                                               **
  16:../Dave/Generated/src/ADC001/ADC001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  17:../Dave/Generated/src/ADC001/ADC001.c ****  this list of conditions and the following disclaimer.                        **
  18:../Dave/Generated/src/ADC001/ADC001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  19:../Dave/Generated/src/ADC001/ADC001.c ****  this list of conditions and the following disclaimer in the documentation    **
  20:../Dave/Generated/src/ADC001/ADC001.c ****  and/or other materials provided with the distribution.                       **
  21:../Dave/Generated/src/ADC001/ADC001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  22:../Dave/Generated/src/ADC001/ADC001.c ****  may be used to endorse or promote products derived from this software without**
  23:../Dave/Generated/src/ADC001/ADC001.c ****  specific prior written permission.                                           **
  24:../Dave/Generated/src/ADC001/ADC001.c ****                                                                               **
  25:../Dave/Generated/src/ADC001/ADC001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  26:../Dave/Generated/src/ADC001/ADC001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  27:../Dave/Generated/src/ADC001/ADC001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  28:../Dave/Generated/src/ADC001/ADC001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  29:../Dave/Generated/src/ADC001/ADC001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  30:../Dave/Generated/src/ADC001/ADC001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  31:../Dave/Generated/src/ADC001/ADC001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  32:../Dave/Generated/src/ADC001/ADC001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  33:../Dave/Generated/src/ADC001/ADC001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  34:../Dave/Generated/src/ADC001/ADC001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  35:../Dave/Generated/src/ADC001/ADC001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  36:../Dave/Generated/src/ADC001/ADC001.c ****                                                                               **
  37:../Dave/Generated/src/ADC001/ADC001.c ****  To improve the quality of the software, users are encouraged to share        **
  38:../Dave/Generated/src/ADC001/ADC001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  39:../Dave/Generated/src/ADC001/ADC001.c ****  dave@infineon.com).                                                          **
  40:../Dave/Generated/src/ADC001/ADC001.c ****                                                                               **
  41:../Dave/Generated/src/ADC001/ADC001.c **** ********************************************************************************
  42:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  43:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  44:../Dave/Generated/src/ADC001/ADC001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  45:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  46:../Dave/Generated/src/ADC001/ADC001.c **** ** COMPILER : Compiler Independent                                            **
  47:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  48:../Dave/Generated/src/ADC001/ADC001.c **** ** AUTHOR   : DAVE App Developer                                              **
  49:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  50:../Dave/Generated/src/ADC001/ADC001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  51:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  52:../Dave/Generated/src/ADC001/ADC001.c **** ** MODIFICATION DATE : Jan 29, 2014                                           **
  53:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  54:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
  55:../Dave/Generated/src/ADC001/ADC001.c **** 
  56:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
  57:../Dave/Generated/src/ADC001/ADC001.c **** **                      Author(s) Identity                                    **
  58:../Dave/Generated/src/ADC001/ADC001.c **** ********************************************************************************
  59:../Dave/Generated/src/ADC001/ADC001.c **** **                                                                            **
  60:../Dave/Generated/src/ADC001/ADC001.c **** ** Initials     Name                                                          **
  61:../Dave/Generated/src/ADC001/ADC001.c **** ** CM           DAVE App Developer                                            **
  62:../Dave/Generated/src/ADC001/ADC001.c **** ** SSAM         Sridhar Sampath                                               **
  63:../Dave/Generated/src/ADC001/ADC001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/ADC001/ADC001.c **** 
  65:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
  66:../Dave/Generated/src/ADC001/ADC001.c **** 
  67:../Dave/Generated/src/ADC001/ADC001.c **** 
  68:../Dave/Generated/src/ADC001/ADC001.c **** /**
  69:../Dave/Generated/src/ADC001/ADC001.c ****  * @file ADC001.c
  70:../Dave/Generated/src/ADC001/ADC001.c ****  *
  71:../Dave/Generated/src/ADC001/ADC001.c ****  * @brief This file contains ADC001 App API definitions
  72:../Dave/Generated/src/ADC001/ADC001.c ****  *
  73:../Dave/Generated/src/ADC001/ADC001.c ****  * Change History:
  74:../Dave/Generated/src/ADC001/ADC001.c ****  *  Date       version       Details
  75:../Dave/Generated/src/ADC001/ADC001.c ****  * 16-Dec-2012   1.0.4    Initial code added for XMC1000
  76:../Dave/Generated/src/ADC001/ADC001.c ****  * 06-Mar-2013   1.0.6    App version changed for XMC1000 and XMC4400/XMC4200
  77:../Dave/Generated/src/ADC001/ADC001.c ****  * 24-Apr-2013   1.0.8    Ported to XMC4500 step AB and
  78:../Dave/Generated/src/ADC001/ADC001.c ****  *                        Source Result selection Feature added
  79:../Dave/Generated/src/ADC001/ADC001.c ****  * 11-Jun-2013   1.0.10   1. In channel selection page Group C and Group D check
  80:../Dave/Generated/src/ADC001/ADC001.c ****  *                        boxes made invisible for XMC1200/1300/4200 devices.
  81:../Dave/Generated/src/ADC001/ADC001.c ****  *                        2. In the Header comment section device name changed
  82:../Dave/Generated/src/ADC001/ADC001.c ****  *                           to XMC1000.
  83:../Dave/Generated/src/ADC001/ADC001.c ****  *                        3. Tooltip for the Group channel selection is modified
  84:../Dave/Generated/src/ADC001/ADC001.c ****  *                        4. New api ADC001_GetFastResult() implemented.
  85:../Dave/Generated/src/ADC001/ADC001.c ****  *                        5. Source Result register selection feature disabled
  86:../Dave/Generated/src/ADC001/ADC001.c ****  *                           due to header file update not available.
  87:../Dave/Generated/src/ADC001/ADC001.c ****  * 27-Jun-2013   1.0.12   Source Result register selection feature removed to
  88:../Dave/Generated/src/ADC001/ADC001.c ****  *                        simplify the app.
  89:../Dave/Generated/src/ADC001/ADC001.c ****  * 27-Sep-2013   1.0.16   Typos in API Documentation & .h comments is corrected.
  90:../Dave/Generated/src/ADC001/ADC001.c ****  * 29-Jan-2014   1.0.18   Error codes are added in various functions,
  91:../Dave/Generated/src/ADC001/ADC001.c ****  *                        that can be logged with DBG002 App.
  92:../Dave/Generated/src/ADC001/ADC001.c ****  */
  93:../Dave/Generated/src/ADC001/ADC001.c **** 
  94:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
  95:../Dave/Generated/src/ADC001/ADC001.c ****  ** INCLUDE FILES                                                             **
  96:../Dave/Generated/src/ADC001/ADC001.c ****  ******************************************************************************/
  97:../Dave/Generated/src/ADC001/ADC001.c **** #include <DAVE3.h>
  98:../Dave/Generated/src/ADC001/ADC001.c **** 
  99:../Dave/Generated/src/ADC001/ADC001.c **** 
 100:../Dave/Generated/src/ADC001/ADC001.c **** /*****************************************************************************
 101:../Dave/Generated/src/ADC001/ADC001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 102:../Dave/Generated/src/ADC001/ADC001.c **** *****************************************************************************/
 103:../Dave/Generated/src/ADC001/ADC001.c **** /*These definitions are included here to avoid compilation errors,
 104:../Dave/Generated/src/ADC001/ADC001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 105:../Dave/Generated/src/ADC001/ADC001.c ****  as empty*/
 106:../Dave/Generated/src/ADC001/ADC001.c **** #ifndef _DBG002_H_
 107:../Dave/Generated/src/ADC001/ADC001.c **** 
 108:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_RegisterCallBack(A,B,C)
 109:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_I(e)
 110:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IG(e,g)
 111:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IH(e,h)
 112:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IP(e,p)
 113:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IGH(e,g,h)
 114:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IGP(e,g,p)
 115:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IHP(e,h,p)
 116:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IGHP(e,g,h,p)
 117:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_N(e)
 118:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NG(e,g)
 119:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NH(e,h)
 120:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NP(e,p)
 121:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NGH(e,g,h)
 122:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NGP(e,g,p)
 123:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NHP(e,h,p)
 124:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_NGHP(e,g,h,p)
 125:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_ID(e)
 126:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_IS(e)
 127:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_ISG(e,g)
 128:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 129:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 130:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 131:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 132:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 133:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 134:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 135:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 136:../Dave/Generated/src/ADC001/ADC001.c **** 
 137:../Dave/Generated/src/ADC001/ADC001.c **** #define DBG002_MESSAGEID_LITERAL
 138:../Dave/Generated/src/ADC001/ADC001.c **** 
 139:../Dave/Generated/src/ADC001/ADC001.c **** #endif/* End of defintions of dummy Debug Log macros*/
 140:../Dave/Generated/src/ADC001/ADC001.c **** 
 141:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 142:../Dave/Generated/src/ADC001/ADC001.c **** **                      Private Macro Definitions                             **
 143:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 144:../Dave/Generated/src/ADC001/ADC001.c **** #define APP_GID DBG002_GID_ADC001
 145:../Dave/Generated/src/ADC001/ADC001.c **** 
 146:../Dave/Generated/src/ADC001/ADC001.c **** /**
 147:../Dave/Generated/src/ADC001/ADC001.c ****  * @cond INTERNAL_DOCS
 148:../Dave/Generated/src/ADC001/ADC001.c ****  */
 149:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 150:../Dave/Generated/src/ADC001/ADC001.c **** **                      Private Type Definitions                              **
 151:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 152:../Dave/Generated/src/ADC001/ADC001.c **** 
 153:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 154:../Dave/Generated/src/ADC001/ADC001.c **** **                 Private Function Declarations:
 155:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 156:../Dave/Generated/src/ADC001/ADC001.c **** /**
 157:../Dave/Generated/src/ADC001/ADC001.c ****  * @brief This function initialises  the app.
 158:../Dave/Generated/src/ADC001/ADC001.c ****  *
 159:../Dave/Generated/src/ADC001/ADC001.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
 160:../Dave/Generated/src/ADC001/ADC001.c ****  *
 161:../Dave/Generated/src/ADC001/ADC001.c ****  * @return  NOne <BR>
 162:../Dave/Generated/src/ADC001/ADC001.c ****  *
 163:../Dave/Generated/src/ADC001/ADC001.c ****  * <b>Reentrancy:  Yes</b><BR>
 164:../Dave/Generated/src/ADC001/ADC001.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 165:../Dave/Generated/src/ADC001/ADC001.c ****  */
 166:../Dave/Generated/src/ADC001/ADC001.c **** 
 167:../Dave/Generated/src/ADC001/ADC001.c **** void ADC001_lInit(const ADC001_HandleType *HandlePtr );
 168:../Dave/Generated/src/ADC001/ADC001.c **** 
 169:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 170:../Dave/Generated/src/ADC001/ADC001.c **** **                      Global Constant Definitions                           **
 171:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 172:../Dave/Generated/src/ADC001/ADC001.c **** 
 173:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 174:../Dave/Generated/src/ADC001/ADC001.c **** **                      Global Variable Definitions                           **
 175:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 176:../Dave/Generated/src/ADC001/ADC001.c **** 
 177:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 178:../Dave/Generated/src/ADC001/ADC001.c **** **                      Private Constant Definitions                          **
 179:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 180:../Dave/Generated/src/ADC001/ADC001.c **** 
 181:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 182:../Dave/Generated/src/ADC001/ADC001.c **** **                 Function like macro definitions                            **
 183:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 184:../Dave/Generated/src/ADC001/ADC001.c **** 
 185:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 186:../Dave/Generated/src/ADC001/ADC001.c **** **                      Private Function Definitions                          **
 187:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 188:../Dave/Generated/src/ADC001/ADC001.c **** 
 189:../Dave/Generated/src/ADC001/ADC001.c **** /*******************************************************************************
 190:../Dave/Generated/src/ADC001/ADC001.c **** **                      Public Function Definitions                           **
 191:../Dave/Generated/src/ADC001/ADC001.c **** *******************************************************************************/
 192:../Dave/Generated/src/ADC001/ADC001.c **** 
 193:../Dave/Generated/src/ADC001/ADC001.c **** 
 194:../Dave/Generated/src/ADC001/ADC001.c **** /** This function initializes the app */
 195:../Dave/Generated/src/ADC001/ADC001.c **** void ADC001_Init(void)
 196:../Dave/Generated/src/ADC001/ADC001.c **** {
  28              		.loc 1 196 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 197:../Dave/Generated/src/ADC001/ADC001.c ****   /*Initialize the global app */
 198:../Dave/Generated/src/ADC001/ADC001.c ****   ADCGLOB001_Init();
  40              		.loc 1 198 0
  41 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 199:../Dave/Generated/src/ADC001/ADC001.c ****   ADC001_lInit(&ADC001_Handle0);
  42              		.loc 1 199 0
  43 0008 40F20000 		movw	r0, #:lower16:ADC001_Handle0
  44 000c C0F20000 		movt	r0, #:upper16:ADC001_Handle0
  45 0010 FFF7FEFF 		bl	ADC001_lInit
 200:../Dave/Generated/src/ADC001/ADC001.c **** }
  46              		.loc 1 200 0
  47 0014 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE117:
  51 0016 00BF     		.section	.text.ADC001_lInit,"ax",%progbits
  52              		.align	2
  53              		.global	ADC001_lInit
  54              		.thumb
  55              		.thumb_func
  57              	ADC001_lInit:
  58              	.LFB118:
 201:../Dave/Generated/src/ADC001/ADC001.c **** 
 202:../Dave/Generated/src/ADC001/ADC001.c **** /*
 203:../Dave/Generated/src/ADC001/ADC001.c ****  * This Function initializes the ADC001 App.
 204:../Dave/Generated/src/ADC001/ADC001.c ****  */
 205:../Dave/Generated/src/ADC001/ADC001.c **** void ADC001_lInit(const ADC001_HandleType *HandlePtr )
 206:../Dave/Generated/src/ADC001/ADC001.c **** {
  59              		.loc 1 206 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 40
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64 0000 90B4     		push	{r4, r7}
  65              	.LCFI2:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 7, -4
  69 0002 8AB0     		sub	sp, sp, #40
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 48
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 7860     		str	r0, [r7, #4]
 207:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
  76              		.loc 1 207 0
  77 0008 4FF00103 		mov	r3, #1
  78 000c 3B62     		str	r3, [r7, #32]
 208:../Dave/Generated/src/ADC001/ADC001.c **** 
 209:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 210:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChNo;
 211:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChIdx;
 212:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupIdx;
 213:../Dave/Generated/src/ADC001/ADC001.c **** 
 214:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 215:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 216:../Dave/Generated/src/ADC001/ADC001.c **** 
 217:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 218:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 219:../Dave/Generated/src/ADC001/ADC001.c **** 
 220:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
  79              		.loc 1 220 0
  80 000e 7B68     		ldr	r3, [r7, #4]
  81 0010 5B6C     		ldr	r3, [r3, #68]
  82 0012 BB60     		str	r3, [r7, #8]
 221:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
  83              		.loc 1 221 0
  84 0014 7B68     		ldr	r3, [r7, #4]
  85 0016 9B6C     		ldr	r3, [r3, #72]
  86 0018 FB60     		str	r3, [r7, #12]
 222:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
  87              		.loc 1 222 0
  88 001a 7B68     		ldr	r3, [r7, #4]
  89 001c DB6C     		ldr	r3, [r3, #76]
  90 001e 3B61     		str	r3, [r7, #16]
 223:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
  91              		.loc 1 223 0
  92 0020 7B68     		ldr	r3, [r7, #4]
  93 0022 1B6D     		ldr	r3, [r3, #80]
  94 0024 7B61     		str	r3, [r7, #20]
 224:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
  95              		.loc 1 224 0
  96 0026 7B68     		ldr	r3, [r7, #4]
  97 0028 1B6C     		ldr	r3, [r3, #64]
  98 002a FB61     		str	r3, [r7, #28]
 225:../Dave/Generated/src/ADC001/ADC001.c **** 
 226:../Dave/Generated/src/ADC001/ADC001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADC001_UNINITIALIZED))
  99              		.loc 1 226 0
 100 002c 7B68     		ldr	r3, [r7, #4]
 101 002e DB6B     		ldr	r3, [r3, #60]
 102 0030 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 103 0032 002B     		cmp	r3, #0
 104 0034 40F02F81 		bne	.L2
 227:../Dave/Generated/src/ADC001/ADC001.c ****   {
 228:../Dave/Generated/src/ADC001/ADC001.c **** 
 229:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 105              		.loc 1 229 0
 106 0038 4FF00003 		mov	r3, #0
 107 003c 87F82730 		strb	r3, [r7, #39]
 108 0040 7BE0     		b	.L4
 109              	.L5:
 230:../Dave/Generated/src/ADC001/ADC001.c ****     {
 231:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ADC001_ChannelHandlePtr[ChIdx]->kGroupNo;
 110              		.loc 1 231 0 discriminator 2
 111 0042 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 112 0046 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 113 004a C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 114 004e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 115 0052 1B78     		ldrb	r3, [r3, #0]
 116 0054 FB76     		strb	r3, [r7, #27]
 232:../Dave/Generated/src/ADC001/ADC001.c ****       ChNo = ADC001_ChannelHandlePtr[ChIdx]->kChannelNo;
 117              		.loc 1 232 0 discriminator 2
 118 0056 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 119 005a 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 120 005e C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 121 0062 53F82230 		ldr	r3, [r3, r2, lsl #2]
 122 0066 5B78     		ldrb	r3, [r3, #1]
 123 0068 BB76     		strb	r3, [r7, #26]
 233:../Dave/Generated/src/ADC001/ADC001.c ****       /* Input class */
 234:../Dave/Generated/src/ADC001/ADC001.c ****       WR_REG( VADCGroupPtr[GroupNo]->CHCTR[ChNo],
 124              		.loc 1 234 0 discriminator 2
 125 006a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 126 006c 4FEA8303 		lsl	r3, r3, #2
 127 0070 07F12801 		add	r1, r7, #40
 128 0074 CB18     		adds	r3, r1, r3
 129 0076 53F8202C 		ldr	r2, [r3, #-32]
 130 007a B87E     		ldrb	r0, [r7, #26]	@ zero_extendqisi2
 131 007c 7B68     		ldr	r3, [r7, #4]
 132 007e 93F83A30 		ldrb	r3, [r3, #58]	@ zero_extendqisi2
 133 0082 03F00301 		and	r1, r3, #3
 134 0086 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 135 0088 4FEA8303 		lsl	r3, r3, #2
 136 008c 07F1280C 		add	ip, r7, #40
 137 0090 6344     		add	r3, ip, r3
 138 0092 53F8203C 		ldr	r3, [r3, #-32]
 139 0096 BC7E     		ldrb	r4, [r7, #26]	@ zero_extendqisi2
 140 0098 04F18004 		add	r4, r4, #128
 141 009c 53F82430 		ldr	r3, [r3, r4, lsl #2]
 142 00a0 23F00303 		bic	r3, r3, #3
 143 00a4 1943     		orrs	r1, r1, r3
 144 00a6 00F18003 		add	r3, r0, #128
 145 00aa 42F82310 		str	r1, [r2, r3, lsl #2]
 235:../Dave/Generated/src/ADC001/ADC001.c ****         VADC_G_CHCTR_ICLSEL_Msk,
 236:../Dave/Generated/src/ADC001/ADC001.c ****         VADC_G_CHCTR_ICLSEL_Pos,
 237:../Dave/Generated/src/ADC001/ADC001.c ****         (uint32_t)HandlePtr->kIpClassSel
 238:../Dave/Generated/src/ADC001/ADC001.c ****        );
 239:../Dave/Generated/src/ADC001/ADC001.c **** 
 240:../Dave/Generated/src/ADC001/ADC001.c ****       /* Store result in global register */
 241:../Dave/Generated/src/ADC001/ADC001.c ****       WR_REG( VADCGroupPtr[GroupNo]->CHCTR[ChNo],
 146              		.loc 1 241 0 discriminator 2
 147 00ae FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 148 00b0 4FEA8303 		lsl	r3, r3, #2
 149 00b4 07F12801 		add	r1, r7, #40
 150 00b8 CB18     		adds	r3, r1, r3
 151 00ba 53F8202C 		ldr	r2, [r3, #-32]
 152 00be B87E     		ldrb	r0, [r7, #26]	@ zero_extendqisi2
 153 00c0 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 154 00c2 4FEA8303 		lsl	r3, r3, #2
 155 00c6 07F1280C 		add	ip, r7, #40
 156 00ca 6344     		add	r3, ip, r3
 157 00cc 53F8203C 		ldr	r3, [r3, #-32]
 158 00d0 B97E     		ldrb	r1, [r7, #26]	@ zero_extendqisi2
 159 00d2 01F18001 		add	r1, r1, #128
 160 00d6 53F82130 		ldr	r3, [r3, r1, lsl #2]
 161 00da 43F48011 		orr	r1, r3, #1048576
 162 00de 00F18003 		add	r3, r0, #128
 163 00e2 42F82310 		str	r1, [r2, r3, lsl #2]
 242:../Dave/Generated/src/ADC001/ADC001.c ****               VADC_G_CHCTR_RESTBS_Msk,
 243:../Dave/Generated/src/ADC001/ADC001.c ****               VADC_G_CHCTR_RESTBS_Pos,
 244:../Dave/Generated/src/ADC001/ADC001.c ****               (uint32_t)1
 245:../Dave/Generated/src/ADC001/ADC001.c ****              );
 246:../Dave/Generated/src/ADC001/ADC001.c **** 
 247:../Dave/Generated/src/ADC001/ADC001.c ****       /*Result Alignment */
 248:../Dave/Generated/src/ADC001/ADC001.c ****       WR_REG( VADCGroupPtr[GroupNo]->CHCTR[ChNo],
 164              		.loc 1 248 0 discriminator 2
 165 00e6 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 166 00e8 4FEA8303 		lsl	r3, r3, #2
 167 00ec 07F12801 		add	r1, r7, #40
 168 00f0 CB18     		adds	r3, r1, r3
 169 00f2 53F8202C 		ldr	r2, [r3, #-32]
 170 00f6 B87E     		ldrb	r0, [r7, #26]	@ zero_extendqisi2
 171 00f8 7B68     		ldr	r3, [r7, #4]
 172 00fa 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 173 00fe 4FEA4353 		lsl	r3, r3, #21
 174 0102 03F40011 		and	r1, r3, #2097152
 175 0106 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 176 0108 4FEA8303 		lsl	r3, r3, #2
 177 010c 07F1280C 		add	ip, r7, #40
 178 0110 6344     		add	r3, ip, r3
 179 0112 53F8203C 		ldr	r3, [r3, #-32]
 180 0116 BC7E     		ldrb	r4, [r7, #26]	@ zero_extendqisi2
 181 0118 04F18004 		add	r4, r4, #128
 182 011c 53F82430 		ldr	r3, [r3, r4, lsl #2]
 183 0120 23F40013 		bic	r3, r3, #2097152
 184 0124 1943     		orrs	r1, r1, r3
 185 0126 00F18003 		add	r3, r0, #128
 186 012a 42F82310 		str	r1, [r2, r3, lsl #2]
 229:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 187              		.loc 1 229 0 discriminator 2
 188 012e 97F82730 		ldrb	r3, [r7, #39]
 189 0132 03F10103 		add	r3, r3, #1
 190 0136 87F82730 		strb	r3, [r7, #39]
 191              	.L4:
 229:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 192              		.loc 1 229 0 is_stmt 0 discriminator 1
 193 013a 7B68     		ldr	r3, [r7, #4]
 194 013c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 195 013e 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 196 0142 9A42     		cmp	r2, r3
 197 0144 FFF47DAF 		bcc	.L5
 249:../Dave/Generated/src/ADC001/ADC001.c ****               VADC_G_CHCTR_RESPOS_Msk,
 250:../Dave/Generated/src/ADC001/ADC001.c ****               VADC_G_CHCTR_RESPOS_Pos,
 251:../Dave/Generated/src/ADC001/ADC001.c ****               (uint32_t)HandlePtr->kResultControl
 252:../Dave/Generated/src/ADC001/ADC001.c ****              );
 253:../Dave/Generated/src/ADC001/ADC001.c ****     }
 254:../Dave/Generated/src/ADC001/ADC001.c **** 
 255:../Dave/Generated/src/ADC001/ADC001.c ****     /* Wait for read mode */
 256:../Dave/Generated/src/ADC001/ADC001.c ****     WR_REG( VADCGlobalPtr->GLOBRCR,
 198              		.loc 1 256 0 is_stmt 1
 199 0148 7B68     		ldr	r3, [r7, #4]
 200 014a 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 201 014e 4FEA0363 		lsl	r3, r3, #24
 202 0152 03F08072 		and	r2, r3, #16777216
 203 0156 FB69     		ldr	r3, [r7, #28]
 204 0158 D3F88032 		ldr	r3, [r3, #640]
 205 015c 23F08073 		bic	r3, r3, #16777216
 206 0160 1A43     		orrs	r2, r2, r3
 207 0162 FB69     		ldr	r3, [r7, #28]
 208 0164 C3F88022 		str	r2, [r3, #640]
 257:../Dave/Generated/src/ADC001/ADC001.c ****             VADC_GLOBRCR_WFR_Msk,
 258:../Dave/Generated/src/ADC001/ADC001.c ****             VADC_GLOBRCR_WFR_Pos,
 259:../Dave/Generated/src/ADC001/ADC001.c ****             (uint32_t)HandlePtr->kResultReadMode
 260:../Dave/Generated/src/ADC001/ADC001.c ****            );
 261:../Dave/Generated/src/ADC001/ADC001.c **** 
 262:../Dave/Generated/src/ADC001/ADC001.c ****     /* Result event service request  */
 263:../Dave/Generated/src/ADC001/ADC001.c ****     WR_REG( VADCGlobalPtr->GLOBRCR,
 209              		.loc 1 263 0
 210 0168 7B68     		ldr	r3, [r7, #4]
 211 016a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 212 016e 4FEAC372 		lsl	r2, r3, #31
 213 0172 FB69     		ldr	r3, [r7, #28]
 214 0174 D3F88032 		ldr	r3, [r3, #640]
 215 0178 23F00043 		bic	r3, r3, #-2147483648
 216 017c 1A43     		orrs	r2, r2, r3
 217 017e FB69     		ldr	r3, [r7, #28]
 218 0180 C3F88022 		str	r2, [r3, #640]
 264:../Dave/Generated/src/ADC001/ADC001.c ****             VADC_GLOBRCR_SRGEN_Msk,
 265:../Dave/Generated/src/ADC001/ADC001.c ****             VADC_GLOBRCR_SRGEN_Pos,
 266:../Dave/Generated/src/ADC001/ADC001.c ****             (uint32_t)HandlePtr->kResultEvtEnable
 267:../Dave/Generated/src/ADC001/ADC001.c ****            );
 268:../Dave/Generated/src/ADC001/ADC001.c **** 
 269:../Dave/Generated/src/ADC001/ADC001.c ****     /* Select the input channels sequence */
 270:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[0] =  HandlePtr->kGroup0ChSelect;
 219              		.loc 1 270 0
 220 0184 7B68     		ldr	r3, [r7, #4]
 221 0186 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 222 0188 1A46     		mov	r2, r3
 223 018a FB69     		ldr	r3, [r7, #28]
 224 018c C3F88021 		str	r2, [r3, #384]
 271:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[1] =  HandlePtr->kGroup1ChSelect;
 225              		.loc 1 271 0
 226 0190 7B68     		ldr	r3, [r7, #4]
 227 0192 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 228 0194 1A46     		mov	r2, r3
 229 0196 FB69     		ldr	r3, [r7, #28]
 230 0198 C3F88421 		str	r2, [r3, #388]
 272:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[2] =  HandlePtr->kGroup2ChSelect;
 231              		.loc 1 272 0
 232 019c 7B68     		ldr	r3, [r7, #4]
 233 019e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 234 01a0 1A46     		mov	r2, r3
 235 01a2 FB69     		ldr	r3, [r7, #28]
 236 01a4 C3F88821 		str	r2, [r3, #392]
 273:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[3] =  HandlePtr->kGroup3ChSelect;
 237              		.loc 1 273 0
 238 01a8 7B68     		ldr	r3, [r7, #4]
 239 01aa 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 240 01ac 1A46     		mov	r2, r3
 241 01ae FB69     		ldr	r3, [r7, #28]
 242 01b0 C3F88C21 		str	r2, [r3, #396]
 274:../Dave/Generated/src/ADC001/ADC001.c **** 
 275:../Dave/Generated/src/ADC001/ADC001.c ****     /*
 276:../Dave/Generated/src/ADC001/ADC001.c ****      * Enable XTWC Bitfield so that XTMODE and XTSEL can be written
 277:../Dave/Generated/src/ADC001/ADC001.c ****      * Selects trigger mode .
 278:../Dave/Generated/src/ADC001/ADC001.c ****      */
 279:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSCTRL |= (uint32_t)(((uint32_t)1 << VADC_BRSCTRL_XTWC_Pos)    |  \
 243              		.loc 1 279 0
 244 01b4 FB69     		ldr	r3, [r7, #28]
 245 01b6 D3F80022 		ldr	r2, [r3, #512]
 280:../Dave/Generated/src/ADC001/ADC001.c ****                       ((uint32_t)HandlePtr->kTriggerMode << VADC_BRSCTRL_XTMODE_Pos));
 246              		.loc 1 280 0
 247 01ba 7B68     		ldr	r3, [r7, #4]
 248 01bc 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 249 01c0 4FEA4333 		lsl	r3, r3, #13
 279:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSCTRL |= (uint32_t)(((uint32_t)1 << VADC_BRSCTRL_XTWC_Pos)    |  \
 250              		.loc 1 279 0
 251 01c4 1343     		orrs	r3, r3, r2
 252 01c6 43F40042 		orr	r2, r3, #32768
 253 01ca FB69     		ldr	r3, [r7, #28]
 254 01cc C3F80022 		str	r2, [r3, #512]
 281:../Dave/Generated/src/ADC001/ADC001.c ****     /*
 282:../Dave/Generated/src/ADC001/ADC001.c ****      * Selects the gating mode and enables trigger mode.
 283:../Dave/Generated/src/ADC001/ADC001.c ****      * AutoScan enable or disable
 284:../Dave/Generated/src/ADC001/ADC001.c ****      * Source interrupt enable or disable
 285:../Dave/Generated/src/ADC001/ADC001.c ****      */
 286:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSMR |=(uint32_t)(((uint32_t)HandlePtr->kTriggerEn            \
 255              		.loc 1 286 0
 256 01d0 FB69     		ldr	r3, [r7, #28]
 257 01d2 D3F80422 		ldr	r2, [r3, #516]
 258 01d6 7B68     		ldr	r3, [r7, #4]
 259 01d8 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 287:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_ENTR_Pos) |   \
 260              		.loc 1 287 0
 261 01dc 4FEA8301 		lsl	r1, r3, #2
 288:../Dave/Generated/src/ADC001/ADC001.c ****                                     ((uint32_t)HandlePtr->kGatingMode             \
 262              		.loc 1 288 0
 263 01e0 7B68     		ldr	r3, [r7, #4]
 264 01e2 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 287:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_ENTR_Pos) |   \
 265              		.loc 1 287 0
 266 01e6 1943     		orrs	r1, r1, r3
 289:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_ENGT_Pos) |   \
 290:../Dave/Generated/src/ADC001/ADC001.c ****                                     ((uint32_t)HandlePtr->kAutoScan               \
 267              		.loc 1 290 0
 268 01e8 7B68     		ldr	r3, [r7, #4]
 269 01ea 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 291:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_SCAN_Pos) |   \
 270              		.loc 1 291 0
 271 01ee 4FEA0313 		lsl	r3, r3, #4
 289:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_ENGT_Pos) |   \
 272              		.loc 1 289 0
 273 01f2 1943     		orrs	r1, r1, r3
 292:../Dave/Generated/src/ADC001/ADC001.c ****                                     ((uint32_t)HandlePtr->kResourceEvtEnable      \
 274              		.loc 1 292 0
 275 01f4 7B68     		ldr	r3, [r7, #4]
 276 01f6 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 293:../Dave/Generated/src/ADC001/ADC001.c ****                                                       << VADC_BRSMR_ENSI_Pos));
 277              		.loc 1 293 0
 278 01fa 4FEAC303 		lsl	r3, r3, #3
 286:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSMR |=(uint32_t)(((uint32_t)HandlePtr->kTriggerEn            \
 279              		.loc 1 286 0
 280 01fe 0B43     		orrs	r3, r3, r1
 281 0200 1A43     		orrs	r2, r2, r3
 282 0202 FB69     		ldr	r3, [r7, #28]
 283 0204 C3F80422 		str	r2, [r3, #516]
 294:../Dave/Generated/src/ADC001/ADC001.c **** 
 295:../Dave/Generated/src/ADC001/ADC001.c ****     /*
 296:../Dave/Generated/src/ADC001/ADC001.c ****      * Enable Arbitration slot.
 297:../Dave/Generated/src/ADC001/ADC001.c ****      * Select conversion start mode for request source.
 298:../Dave/Generated/src/ADC001/ADC001.c ****      * Sets the priority of the background request source.
 299:../Dave/Generated/src/ADC001/ADC001.c ****      */
 300:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 284              		.loc 1 300 0
 285 0208 4FF00003 		mov	r3, #0
 286 020c 87F82630 		strb	r3, [r7, #38]
 287 0210 35E0     		b	.L6
 288              	.L8:
 301:../Dave/Generated/src/ADC001/ADC001.c ****     {
 302:../Dave/Generated/src/ADC001/ADC001.c ****       if(HandlePtr->kActiveGroups[GroupIdx] == (uint8_t)1)
 289              		.loc 1 302 0
 290 0212 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 291 0216 7A68     		ldr	r2, [r7, #4]
 292 0218 D318     		adds	r3, r2, r3
 293 021a 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 294 021e 012B     		cmp	r3, #1
 295 0220 27D1     		bne	.L7
 303:../Dave/Generated/src/ADC001/ADC001.c ****       {
 304:../Dave/Generated/src/ADC001/ADC001.c ****         VADCGroupPtr[GroupIdx]->ARBPR |= (uint32_t)(((uint32_t)HandlePtr->kAsenEnable <<  \
 296              		.loc 1 304 0
 297 0222 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 298 0226 4FEA8303 		lsl	r3, r3, #2
 299 022a 07F12801 		add	r1, r7, #40
 300 022e CB18     		adds	r3, r1, r3
 301 0230 53F8202C 		ldr	r2, [r3, #-32]
 302 0234 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 303 0238 4FEA8303 		lsl	r3, r3, #2
 304 023c 07F1280C 		add	ip, r7, #40
 305 0240 6344     		add	r3, ip, r3
 306 0242 53F8203C 		ldr	r3, [r3, #-32]
 307 0246 D3F88410 		ldr	r1, [r3, #132]
 308 024a 7B68     		ldr	r3, [r7, #4]
 309 024c 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 310 0250 4FEA8360 		lsl	r0, r3, #26
 305:../Dave/Generated/src/ADC001/ADC001.c ****                                                          VADC_G_ARBPR_ASEN2_Pos) |        \
 306:../Dave/Generated/src/ADC001/ADC001.c ****                                           ((uint32_t)HandlePtr->kStartmode   <<           \
 311              		.loc 1 306 0
 312 0254 7B68     		ldr	r3, [r7, #4]
 313 0256 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 314 025a 4FEAC323 		lsl	r3, r3, #11
 305:../Dave/Generated/src/ADC001/ADC001.c ****                                                          VADC_G_ARBPR_ASEN2_Pos) |        \
 315              		.loc 1 305 0
 316 025e 1843     		orrs	r0, r0, r3
 307:../Dave/Generated/src/ADC001/ADC001.c ****                                                          VADC_G_ARBPR_CSM2_Pos)  |        \
 308:../Dave/Generated/src/ADC001/ADC001.c ****                                           ((uint32_t)HandlePtr->kPriority    <<           \
 317              		.loc 1 308 0
 318 0260 7B68     		ldr	r3, [r7, #4]
 319 0262 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 320 0266 4FEA0323 		lsl	r3, r3, #8
 304:../Dave/Generated/src/ADC001/ADC001.c ****         VADCGroupPtr[GroupIdx]->ARBPR |= (uint32_t)(((uint32_t)HandlePtr->kAsenEnable <<  \
 321              		.loc 1 304 0
 322 026a 0343     		orrs	r3, r3, r0
 323 026c 0B43     		orrs	r3, r3, r1
 324 026e C2F88430 		str	r3, [r2, #132]
 325              	.L7:
 300:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 326              		.loc 1 300 0
 327 0272 97F82630 		ldrb	r3, [r7, #38]
 328 0276 03F10103 		add	r3, r3, #1
 329 027a 87F82630 		strb	r3, [r7, #38]
 330              	.L6:
 300:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 331              		.loc 1 300 0 is_stmt 0 discriminator 1
 332 027e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 333 0282 032B     		cmp	r3, #3
 334 0284 C5D9     		bls	.L8
 309:../Dave/Generated/src/ADC001/ADC001.c ****                                                          VADC_G_ARBPR_PRIO2_Pos));
 310:../Dave/Generated/src/ADC001/ADC001.c ****       }
 311:../Dave/Generated/src/ADC001/ADC001.c ****     }
 312:../Dave/Generated/src/ADC001/ADC001.c **** 
 313:../Dave/Generated/src/ADC001/ADC001.c ****     /* change the state to the Initialized */
 314:../Dave/Generated/src/ADC001/ADC001.c ****     HandlePtr->DynamicHandlePtr->State = ADC001_INITIALIZED;
 335              		.loc 1 314 0 is_stmt 1
 336 0286 7B68     		ldr	r3, [r7, #4]
 337 0288 DB6B     		ldr	r3, [r3, #60]
 338 028a 4FF00102 		mov	r2, #1
 339 028e 1A71     		strb	r2, [r3, #4]
 315:../Dave/Generated/src/ADC001/ADC001.c ****     Status &= (uint32_t)DAVEApp_SUCCESS;
 340              		.loc 1 315 0
 341 0290 4FF00003 		mov	r3, #0
 342 0294 3B62     		str	r3, [r7, #32]
 343              	.L2:
 316:../Dave/Generated/src/ADC001/ADC001.c ****   }
 317:../Dave/Generated/src/ADC001/ADC001.c ****   else
 318:../Dave/Generated/src/ADC001/ADC001.c ****   {
 319:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 320:../Dave/Generated/src/ADC001/ADC001.c ****   }
 321:../Dave/Generated/src/ADC001/ADC001.c **** 
 322:../Dave/Generated/src/ADC001/ADC001.c **** }
 344              		.loc 1 322 0
 345 0296 07F12807 		add	r7, r7, #40
 346 029a BD46     		mov	sp, r7
 347 029c 90BC     		pop	{r4, r7}
 348 029e 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE118:
 352              		.section	.text.ADC001_Deinit,"ax",%progbits
 353              		.align	2
 354              		.global	ADC001_Deinit
 355              		.thumb
 356              		.thumb_func
 358              	ADC001_Deinit:
 359              	.LFB119:
 323:../Dave/Generated/src/ADC001/ADC001.c **** 
 324:../Dave/Generated/src/ADC001/ADC001.c **** 
 325:../Dave/Generated/src/ADC001/ADC001.c **** /**
 326:../Dave/Generated/src/ADC001/ADC001.c ****  * This function resets the App.
 327:../Dave/Generated/src/ADC001/ADC001.c ****  */
 328:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_Deinit(const ADC001_HandleType* HandlePtr)
 329:../Dave/Generated/src/ADC001/ADC001.c **** {
 360              		.loc 1 329 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 40
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0000 80B4     		push	{r7}
 366              	.LCFI5:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 0002 8BB0     		sub	sp, sp, #44
 370              	.LCFI6:
 371              		.cfi_def_cfa_offset 48
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI7:
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
 330:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 376              		.loc 1 330 0
 377 0008 4FF00103 		mov	r3, #1
 378 000c 7B62     		str	r3, [r7, #36]
 331:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 332:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChNo;
 333:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChIdx;
 334:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupIdx;
 335:../Dave/Generated/src/ADC001/ADC001.c **** 
 336:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 337:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 338:../Dave/Generated/src/ADC001/ADC001.c **** 
 339:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 340:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 341:../Dave/Generated/src/ADC001/ADC001.c **** 
 342:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 379              		.loc 1 342 0
 380 000e 7B68     		ldr	r3, [r7, #4]
 381 0010 5B6C     		ldr	r3, [r3, #68]
 382 0012 BB60     		str	r3, [r7, #8]
 343:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 383              		.loc 1 343 0
 384 0014 7B68     		ldr	r3, [r7, #4]
 385 0016 9B6C     		ldr	r3, [r3, #72]
 386 0018 FB60     		str	r3, [r7, #12]
 344:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 387              		.loc 1 344 0
 388 001a 7B68     		ldr	r3, [r7, #4]
 389 001c DB6C     		ldr	r3, [r3, #76]
 390 001e 3B61     		str	r3, [r7, #16]
 345:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 391              		.loc 1 345 0
 392 0020 7B68     		ldr	r3, [r7, #4]
 393 0022 1B6D     		ldr	r3, [r3, #80]
 394 0024 7B61     		str	r3, [r7, #20]
 346:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 395              		.loc 1 346 0
 396 0026 7B68     		ldr	r3, [r7, #4]
 397 0028 1B6C     		ldr	r3, [r3, #64]
 398 002a FB61     		str	r3, [r7, #28]
 347:../Dave/Generated/src/ADC001/ADC001.c **** 
 348:../Dave/Generated/src/ADC001/ADC001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED))
 399              		.loc 1 348 0
 400 002c 7B68     		ldr	r3, [r7, #4]
 401 002e DB6B     		ldr	r3, [r3, #60]
 402 0030 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 403 0032 012B     		cmp	r3, #1
 404 0034 40F08580 		bne	.L10
 349:../Dave/Generated/src/ADC001/ADC001.c ****   {
 350:../Dave/Generated/src/ADC001/ADC001.c **** 
 351:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 405              		.loc 1 351 0
 406 0038 4FF00003 		mov	r3, #0
 407 003c 87F82330 		strb	r3, [r7, #35]
 408 0040 28E0     		b	.L11
 409              	.L12:
 352:../Dave/Generated/src/ADC001/ADC001.c ****     {
 353:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = (uint8_t )ADC001_ChannelHandlePtr[ChIdx]->kGroupNo;
 410              		.loc 1 353 0 discriminator 2
 411 0042 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 412 0046 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 413 004a C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 414 004e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 415 0052 1B78     		ldrb	r3, [r3, #0]
 416 0054 FB76     		strb	r3, [r7, #27]
 354:../Dave/Generated/src/ADC001/ADC001.c ****       ChNo = (uint8_t )ADC001_ChannelHandlePtr[ChIdx]->kChannelNo;
 417              		.loc 1 354 0 discriminator 2
 418 0056 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 419 005a 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 420 005e C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 421 0062 53F82230 		ldr	r3, [r3, r2, lsl #2]
 422 0066 5B78     		ldrb	r3, [r3, #1]
 423 0068 BB76     		strb	r3, [r7, #26]
 355:../Dave/Generated/src/ADC001/ADC001.c ****       VADCGroupPtr[GroupNo]->CHCTR[ChNo] = (uint32_t )0;
 424              		.loc 1 355 0 discriminator 2
 425 006a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 426 006c 4FEA8303 		lsl	r3, r3, #2
 427 0070 07F12802 		add	r2, r7, #40
 428 0074 D318     		adds	r3, r2, r3
 429 0076 53F8203C 		ldr	r3, [r3, #-32]
 430 007a BA7E     		ldrb	r2, [r7, #26]	@ zero_extendqisi2
 431 007c 02F18002 		add	r2, r2, #128
 432 0080 4FF00001 		mov	r1, #0
 433 0084 43F82210 		str	r1, [r3, r2, lsl #2]
 351:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 434              		.loc 1 351 0 discriminator 2
 435 0088 97F82330 		ldrb	r3, [r7, #35]
 436 008c 03F10103 		add	r3, r3, #1
 437 0090 87F82330 		strb	r3, [r7, #35]
 438              	.L11:
 351:../Dave/Generated/src/ADC001/ADC001.c ****     for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 439              		.loc 1 351 0 is_stmt 0 discriminator 1
 440 0094 7B68     		ldr	r3, [r7, #4]
 441 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 442 0098 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 443 009c 9A42     		cmp	r2, r3
 444 009e D0D3     		bcc	.L12
 356:../Dave/Generated/src/ADC001/ADC001.c ****     }
 357:../Dave/Generated/src/ADC001/ADC001.c **** 
 358:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->GLOBRCR = (uint32_t )0;
 445              		.loc 1 358 0 is_stmt 1
 446 00a0 FB69     		ldr	r3, [r7, #28]
 447 00a2 4FF00002 		mov	r2, #0
 448 00a6 C3F88022 		str	r2, [r3, #640]
 359:../Dave/Generated/src/ADC001/ADC001.c **** 
 360:../Dave/Generated/src/ADC001/ADC001.c ****     /* Select the input channels sequence */
 361:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[0] =  (uint32_t )0;
 449              		.loc 1 361 0
 450 00aa FB69     		ldr	r3, [r7, #28]
 451 00ac 4FF00002 		mov	r2, #0
 452 00b0 C3F88021 		str	r2, [r3, #384]
 362:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[1] =  (uint32_t )0;
 453              		.loc 1 362 0
 454 00b4 FB69     		ldr	r3, [r7, #28]
 455 00b6 4FF00002 		mov	r2, #0
 456 00ba C3F88421 		str	r2, [r3, #388]
 363:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[2] =  (uint32_t )0;
 457              		.loc 1 363 0
 458 00be FB69     		ldr	r3, [r7, #28]
 459 00c0 4FF00002 		mov	r2, #0
 460 00c4 C3F88821 		str	r2, [r3, #392]
 364:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSSEL[3] =  (uint32_t )0;
 461              		.loc 1 364 0
 462 00c8 FB69     		ldr	r3, [r7, #28]
 463 00ca 4FF00002 		mov	r2, #0
 464 00ce C3F88C21 		str	r2, [r3, #396]
 365:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSCTRL = (uint32_t )0x00808000;
 465              		.loc 1 365 0
 466 00d2 FA69     		ldr	r2, [r7, #28]
 467 00d4 4FF40043 		mov	r3, #32768
 468 00d8 C0F28003 		movt	r3, 128
 469 00dc C2F80032 		str	r3, [r2, #512]
 366:../Dave/Generated/src/ADC001/ADC001.c **** 
 367:../Dave/Generated/src/ADC001/ADC001.c ****     VADCGlobalPtr->BRSMR = (uint32_t )0;
 470              		.loc 1 367 0
 471 00e0 FB69     		ldr	r3, [r7, #28]
 472 00e2 4FF00002 		mov	r2, #0
 473 00e6 C3F80422 		str	r2, [r3, #516]
 368:../Dave/Generated/src/ADC001/ADC001.c **** 
 369:../Dave/Generated/src/ADC001/ADC001.c ****     /*
 370:../Dave/Generated/src/ADC001/ADC001.c ****      * Enable Arbitration slot.
 371:../Dave/Generated/src/ADC001/ADC001.c ****      * Select conversion start mode for request source.
 372:../Dave/Generated/src/ADC001/ADC001.c ****      * Sets the priority of the background request source.
 373:../Dave/Generated/src/ADC001/ADC001.c ****      */
 374:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t )0; GroupIdx < (uint8_t )ADC001_MAX_ADC_GROUP; GroupIdx++)
 474              		.loc 1 374 0
 475 00ea 4FF00003 		mov	r3, #0
 476 00ee 87F82230 		strb	r3, [r7, #34]
 477 00f2 1AE0     		b	.L13
 478              	.L15:
 375:../Dave/Generated/src/ADC001/ADC001.c ****     {
 376:../Dave/Generated/src/ADC001/ADC001.c ****       if(HandlePtr->kActiveGroups[GroupIdx] == (uint8_t)1)
 479              		.loc 1 376 0
 480 00f4 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 481 00f8 7A68     		ldr	r2, [r7, #4]
 482 00fa D318     		adds	r3, r2, r3
 483 00fc 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 484 0100 012B     		cmp	r3, #1
 485 0102 0CD1     		bne	.L14
 377:../Dave/Generated/src/ADC001/ADC001.c ****       {
 378:../Dave/Generated/src/ADC001/ADC001.c ****         VADCGroupPtr[GroupIdx]->ARBPR = (uint32_t )0;
 486              		.loc 1 378 0
 487 0104 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 488 0108 4FEA8303 		lsl	r3, r3, #2
 489 010c 07F12802 		add	r2, r7, #40
 490 0110 D318     		adds	r3, r2, r3
 491 0112 53F8203C 		ldr	r3, [r3, #-32]
 492 0116 4FF00002 		mov	r2, #0
 493 011a C3F88420 		str	r2, [r3, #132]
 494              	.L14:
 374:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t )0; GroupIdx < (uint8_t )ADC001_MAX_ADC_GROUP; GroupIdx++)
 495              		.loc 1 374 0
 496 011e 97F82230 		ldrb	r3, [r7, #34]
 497 0122 03F10103 		add	r3, r3, #1
 498 0126 87F82230 		strb	r3, [r7, #34]
 499              	.L13:
 374:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t )0; GroupIdx < (uint8_t )ADC001_MAX_ADC_GROUP; GroupIdx++)
 500              		.loc 1 374 0 is_stmt 0 discriminator 1
 501 012a 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 502 012e 032B     		cmp	r3, #3
 503 0130 E0D9     		bls	.L15
 379:../Dave/Generated/src/ADC001/ADC001.c ****       }
 380:../Dave/Generated/src/ADC001/ADC001.c ****     }
 381:../Dave/Generated/src/ADC001/ADC001.c **** 
 382:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 504              		.loc 1 382 0 is_stmt 1
 505 0132 4FF00003 		mov	r3, #0
 506 0136 7B62     		str	r3, [r7, #36]
 383:../Dave/Generated/src/ADC001/ADC001.c ****     HandlePtr->DynamicHandlePtr->State = ADC001_UNINITIALIZED;
 507              		.loc 1 383 0
 508 0138 7B68     		ldr	r3, [r7, #4]
 509 013a DB6B     		ldr	r3, [r3, #60]
 510 013c 4FF00002 		mov	r2, #0
 511 0140 1A71     		strb	r2, [r3, #4]
 512              	.L10:
 384:../Dave/Generated/src/ADC001/ADC001.c ****   }
 385:../Dave/Generated/src/ADC001/ADC001.c ****   else
 386:../Dave/Generated/src/ADC001/ADC001.c ****   {
 387:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 388:../Dave/Generated/src/ADC001/ADC001.c ****   }
 389:../Dave/Generated/src/ADC001/ADC001.c **** 
 390:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 513              		.loc 1 390 0
 514 0142 7B6A     		ldr	r3, [r7, #36]
 391:../Dave/Generated/src/ADC001/ADC001.c **** }
 515              		.loc 1 391 0
 516 0144 1846     		mov	r0, r3
 517 0146 07F12C07 		add	r7, r7, #44
 518 014a BD46     		mov	sp, r7
 519 014c 80BC     		pop	{r7}
 520 014e 7047     		bx	lr
 521              		.cfi_endproc
 522              	.LFE119:
 524              		.section	.text.ADC001_SelectInputClass,"ax",%progbits
 525              		.align	2
 526              		.global	ADC001_SelectInputClass
 527              		.thumb
 528              		.thumb_func
 530              	ADC001_SelectInputClass:
 531              	.LFB120:
 392:../Dave/Generated/src/ADC001/ADC001.c **** 
 393:../Dave/Generated/src/ADC001/ADC001.c **** /**
 394:../Dave/Generated/src/ADC001/ADC001.c ****  * This function selects the input class for the channel.
 395:../Dave/Generated/src/ADC001/ADC001.c ****  */
 396:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SelectInputClass(const ADC001_HandleType* HandlePtr,
 397:../Dave/Generated/src/ADC001/ADC001.c ****                                                   ADC001_GlobalInPutClass Class)
 398:../Dave/Generated/src/ADC001/ADC001.c **** {
 532              		.loc 1 398 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 32
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536              		@ link register save eliminated.
 537 0000 90B4     		push	{r4, r7}
 538              	.LCFI8:
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 4, -8
 541              		.cfi_offset 7, -4
 542 0002 88B0     		sub	sp, sp, #32
 543              	.LCFI9:
 544              		.cfi_def_cfa_offset 40
 545 0004 00AF     		add	r7, sp, #0
 546              	.LCFI10:
 547              		.cfi_def_cfa_register 7
 548 0006 7860     		str	r0, [r7, #4]
 549 0008 0B46     		mov	r3, r1
 550 000a FB70     		strb	r3, [r7, #3]
 399:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 551              		.loc 1 399 0
 552 000c 4FF00103 		mov	r3, #1
 553 0010 FB61     		str	r3, [r7, #28]
 400:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 401:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChNo;
 402:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChIdx;
 403:../Dave/Generated/src/ADC001/ADC001.c **** 
 404:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 405:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 406:../Dave/Generated/src/ADC001/ADC001.c **** 
 407:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 554              		.loc 1 407 0
 555 0012 7B68     		ldr	r3, [r7, #4]
 556 0014 5B6C     		ldr	r3, [r3, #68]
 557 0016 BB60     		str	r3, [r7, #8]
 408:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 558              		.loc 1 408 0
 559 0018 7B68     		ldr	r3, [r7, #4]
 560 001a 9B6C     		ldr	r3, [r3, #72]
 561 001c FB60     		str	r3, [r7, #12]
 409:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 562              		.loc 1 409 0
 563 001e 7B68     		ldr	r3, [r7, #4]
 564 0020 DB6C     		ldr	r3, [r3, #76]
 565 0022 3B61     		str	r3, [r7, #16]
 410:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 566              		.loc 1 410 0
 567 0024 7B68     		ldr	r3, [r7, #4]
 568 0026 1B6D     		ldr	r3, [r3, #80]
 569 0028 7B61     		str	r3, [r7, #20]
 411:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 570              		.loc 1 411 0
 571 002a 7B68     		ldr	r3, [r7, #4]
 572 002c DB6B     		ldr	r3, [r3, #60]
 573 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 574 0030 012B     		cmp	r3, #1
 575 0032 4BD1     		bne	.L18
 412:../Dave/Generated/src/ADC001/ADC001.c ****   {
 413:../Dave/Generated/src/ADC001/ADC001.c ****     if((Class == ADC001_GLOBAL_CLASS0) || (Class == ADC001_GLOBAL_CLASS1))
 576              		.loc 1 413 0
 577 0034 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 578 0036 022B     		cmp	r3, #2
 579 0038 02D0     		beq	.L19
 580              		.loc 1 413 0 is_stmt 0 discriminator 1
 581 003a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 582 003c 032B     		cmp	r3, #3
 583 003e 42D1     		bne	.L20
 584              	.L19:
 414:../Dave/Generated/src/ADC001/ADC001.c ****     {
 415:../Dave/Generated/src/ADC001/ADC001.c ****       for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 585              		.loc 1 415 0 is_stmt 1
 586 0040 4FF00003 		mov	r3, #0
 587 0044 FB76     		strb	r3, [r7, #27]
 588 0046 35E0     		b	.L21
 589              	.L22:
 416:../Dave/Generated/src/ADC001/ADC001.c ****       {
 417:../Dave/Generated/src/ADC001/ADC001.c ****         GroupNo = ADC001_ChannelHandlePtr[ChIdx]->kGroupNo;
 590              		.loc 1 417 0 discriminator 2
 591 0048 FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 592 004a 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 593 004e C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 594 0052 53F82230 		ldr	r3, [r3, r2, lsl #2]
 595 0056 1B78     		ldrb	r3, [r3, #0]
 596 0058 BB76     		strb	r3, [r7, #26]
 418:../Dave/Generated/src/ADC001/ADC001.c ****         ChNo = ADC001_ChannelHandlePtr[ChIdx]->kChannelNo;
 597              		.loc 1 418 0 discriminator 2
 598 005a FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 599 005c 40F20003 		movw	r3, #:lower16:ADC001_ChannelHandlePtr
 600 0060 C0F20003 		movt	r3, #:upper16:ADC001_ChannelHandlePtr
 601 0064 53F82230 		ldr	r3, [r3, r2, lsl #2]
 602 0068 5B78     		ldrb	r3, [r3, #1]
 603 006a 7B76     		strb	r3, [r7, #25]
 419:../Dave/Generated/src/ADC001/ADC001.c **** 
 420:../Dave/Generated/src/ADC001/ADC001.c ****         /* Input class */
 421:../Dave/Generated/src/ADC001/ADC001.c ****         WR_REG( VADCGroupPtr[GroupNo]->CHCTR[ChNo],
 604              		.loc 1 421 0 discriminator 2
 605 006c BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 606 006e 4FEA8303 		lsl	r3, r3, #2
 607 0072 07F12002 		add	r2, r7, #32
 608 0076 D318     		adds	r3, r2, r3
 609 0078 53F8182C 		ldr	r2, [r3, #-24]
 610 007c 787E     		ldrb	r0, [r7, #25]	@ zero_extendqisi2
 611 007e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 612 0080 03F00301 		and	r1, r3, #3
 613 0084 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 614 0086 4FEA8303 		lsl	r3, r3, #2
 615 008a 07F1200C 		add	ip, r7, #32
 616 008e 6344     		add	r3, ip, r3
 617 0090 53F8183C 		ldr	r3, [r3, #-24]
 618 0094 7C7E     		ldrb	r4, [r7, #25]	@ zero_extendqisi2
 619 0096 04F18004 		add	r4, r4, #128
 620 009a 53F82430 		ldr	r3, [r3, r4, lsl #2]
 621 009e 23F00303 		bic	r3, r3, #3
 622 00a2 1943     		orrs	r1, r1, r3
 623 00a4 00F18003 		add	r3, r0, #128
 624 00a8 42F82310 		str	r1, [r2, r3, lsl #2]
 415:../Dave/Generated/src/ADC001/ADC001.c ****       for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 625              		.loc 1 415 0 discriminator 2
 626 00ac FB7E     		ldrb	r3, [r7, #27]
 627 00ae 03F10103 		add	r3, r3, #1
 628 00b2 FB76     		strb	r3, [r7, #27]
 629              	.L21:
 415:../Dave/Generated/src/ADC001/ADC001.c ****       for(ChIdx = (uint8_t)0; ChIdx < (uint8_t)HandlePtr->kChannels; ChIdx++)
 630              		.loc 1 415 0 is_stmt 0 discriminator 1
 631 00b4 7B68     		ldr	r3, [r7, #4]
 632 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 633 00b8 FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 634 00ba 9A42     		cmp	r2, r3
 635 00bc C4D3     		bcc	.L22
 422:../Dave/Generated/src/ADC001/ADC001.c ****           VADC_G_CHCTR_ICLSEL_Msk,
 423:../Dave/Generated/src/ADC001/ADC001.c ****           VADC_G_CHCTR_ICLSEL_Pos,
 424:../Dave/Generated/src/ADC001/ADC001.c ****           (uint32_t)Class
 425:../Dave/Generated/src/ADC001/ADC001.c ****          );
 426:../Dave/Generated/src/ADC001/ADC001.c ****       }
 427:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint8_t)DAVEApp_SUCCESS;
 636              		.loc 1 427 0 is_stmt 1
 637 00be 4FF00003 		mov	r3, #0
 638 00c2 FB61     		str	r3, [r7, #28]
 639 00c4 02E0     		b	.L18
 640              	.L20:
 428:../Dave/Generated/src/ADC001/ADC001.c ****     }
 429:../Dave/Generated/src/ADC001/ADC001.c ****     else
 430:../Dave/Generated/src/ADC001/ADC001.c ****     {
 431:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 641              		.loc 1 431 0
 642 00c6 4FF00203 		mov	r3, #2
 643 00ca FB61     		str	r3, [r7, #28]
 644              	.L18:
 432:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 433:../Dave/Generated/src/ADC001/ADC001.c ****     }
 434:../Dave/Generated/src/ADC001/ADC001.c ****   }
 435:../Dave/Generated/src/ADC001/ADC001.c ****   else
 436:../Dave/Generated/src/ADC001/ADC001.c ****   {
 437:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 438:../Dave/Generated/src/ADC001/ADC001.c ****   }
 439:../Dave/Generated/src/ADC001/ADC001.c **** 
 440:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 645              		.loc 1 440 0
 646 00cc FB69     		ldr	r3, [r7, #28]
 441:../Dave/Generated/src/ADC001/ADC001.c **** }
 647              		.loc 1 441 0
 648 00ce 1846     		mov	r0, r3
 649 00d0 07F12007 		add	r7, r7, #32
 650 00d4 BD46     		mov	sp, r7
 651 00d6 90BC     		pop	{r4, r7}
 652 00d8 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE120:
 656 00da 00BF     		.section	.text.ADC001_EnableResultEvt,"ax",%progbits
 657              		.align	2
 658              		.global	ADC001_EnableResultEvt
 659              		.thumb
 660              		.thumb_func
 662              	ADC001_EnableResultEvt:
 663              	.LFB121:
 442:../Dave/Generated/src/ADC001/ADC001.c **** 
 443:../Dave/Generated/src/ADC001/ADC001.c **** /**
 444:../Dave/Generated/src/ADC001/ADC001.c ****  * This function enables the service request after result event.
 445:../Dave/Generated/src/ADC001/ADC001.c ****  */
 446:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_EnableResultEvt(const ADC001_HandleType* HandlePtr)
 447:../Dave/Generated/src/ADC001/ADC001.c **** {
 664              		.loc 1 447 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 16
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 669 0000 80B4     		push	{r7}
 670              	.LCFI11:
 671              		.cfi_def_cfa_offset 4
 672              		.cfi_offset 7, -4
 673 0002 85B0     		sub	sp, sp, #20
 674              	.LCFI12:
 675              		.cfi_def_cfa_offset 24
 676 0004 00AF     		add	r7, sp, #0
 677              	.LCFI13:
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 448:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 680              		.loc 1 448 0
 681 0008 4FF00103 		mov	r3, #1
 682 000c FB60     		str	r3, [r7, #12]
 449:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 450:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 451:../Dave/Generated/src/ADC001/ADC001.c **** 
 452:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 683              		.loc 1 452 0
 684 000e 7B68     		ldr	r3, [r7, #4]
 685 0010 1B6C     		ldr	r3, [r3, #64]
 686 0012 BB60     		str	r3, [r7, #8]
 453:../Dave/Generated/src/ADC001/ADC001.c **** 
 454:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 687              		.loc 1 454 0
 688 0014 7B68     		ldr	r3, [r7, #4]
 689 0016 DB6B     		ldr	r3, [r3, #60]
 690 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 691 001a 002B     		cmp	r3, #0
 692 001c 0AD0     		beq	.L26
 455:../Dave/Generated/src/ADC001/ADC001.c ****   {
 456:../Dave/Generated/src/ADC001/ADC001.c ****     /* Enable Result event service request  */
 457:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->GLOBRCR, VADC_GLOBRCR_SRGEN_Pos);
 693              		.loc 1 457 0
 694 001e BB68     		ldr	r3, [r7, #8]
 695 0020 D3F88032 		ldr	r3, [r3, #640]
 696 0024 43F00042 		orr	r2, r3, #-2147483648
 697 0028 BB68     		ldr	r3, [r7, #8]
 698 002a C3F88022 		str	r2, [r3, #640]
 458:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 699              		.loc 1 458 0
 700 002e 4FF00003 		mov	r3, #0
 701 0032 FB60     		str	r3, [r7, #12]
 702              	.L26:
 459:../Dave/Generated/src/ADC001/ADC001.c ****   }
 460:../Dave/Generated/src/ADC001/ADC001.c ****   else
 461:../Dave/Generated/src/ADC001/ADC001.c ****   {
 462:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 463:../Dave/Generated/src/ADC001/ADC001.c ****   }
 464:../Dave/Generated/src/ADC001/ADC001.c **** 
 465:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 703              		.loc 1 465 0
 704 0034 FB68     		ldr	r3, [r7, #12]
 466:../Dave/Generated/src/ADC001/ADC001.c **** }
 705              		.loc 1 466 0
 706 0036 1846     		mov	r0, r3
 707 0038 07F11407 		add	r7, r7, #20
 708 003c BD46     		mov	sp, r7
 709 003e 80BC     		pop	{r7}
 710 0040 7047     		bx	lr
 711              		.cfi_endproc
 712              	.LFE121:
 714 0042 00BF     		.section	.text.ADC001_DisableResultEvt,"ax",%progbits
 715              		.align	2
 716              		.global	ADC001_DisableResultEvt
 717              		.thumb
 718              		.thumb_func
 720              	ADC001_DisableResultEvt:
 721              	.LFB122:
 467:../Dave/Generated/src/ADC001/ADC001.c **** 
 468:../Dave/Generated/src/ADC001/ADC001.c **** /**
 469:../Dave/Generated/src/ADC001/ADC001.c ****  * This function disables the service request after result event.
 470:../Dave/Generated/src/ADC001/ADC001.c ****  */
 471:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_DisableResultEvt(const ADC001_HandleType* HandlePtr)
 472:../Dave/Generated/src/ADC001/ADC001.c **** {
 722              		.loc 1 472 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 16
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 727 0000 80B4     		push	{r7}
 728              	.LCFI14:
 729              		.cfi_def_cfa_offset 4
 730              		.cfi_offset 7, -4
 731 0002 85B0     		sub	sp, sp, #20
 732              	.LCFI15:
 733              		.cfi_def_cfa_offset 24
 734 0004 00AF     		add	r7, sp, #0
 735              	.LCFI16:
 736              		.cfi_def_cfa_register 7
 737 0006 7860     		str	r0, [r7, #4]
 473:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 738              		.loc 1 473 0
 739 0008 4FF00103 		mov	r3, #1
 740 000c FB60     		str	r3, [r7, #12]
 474:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 475:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 476:../Dave/Generated/src/ADC001/ADC001.c **** 
 477:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 741              		.loc 1 477 0
 742 000e 7B68     		ldr	r3, [r7, #4]
 743 0010 1B6C     		ldr	r3, [r3, #64]
 744 0012 BB60     		str	r3, [r7, #8]
 478:../Dave/Generated/src/ADC001/ADC001.c **** 
 479:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 745              		.loc 1 479 0
 746 0014 7B68     		ldr	r3, [r7, #4]
 747 0016 DB6B     		ldr	r3, [r3, #60]
 748 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 749 001a 002B     		cmp	r3, #0
 750 001c 0AD0     		beq	.L29
 480:../Dave/Generated/src/ADC001/ADC001.c ****   {
 481:../Dave/Generated/src/ADC001/ADC001.c ****     /* Disables Result event service request  */
 482:../Dave/Generated/src/ADC001/ADC001.c ****     CLR_BIT( VADCGlobalPtr->GLOBRCR, VADC_GLOBRCR_SRGEN_Pos);
 751              		.loc 1 482 0
 752 001e BB68     		ldr	r3, [r7, #8]
 753 0020 D3F88032 		ldr	r3, [r3, #640]
 754 0024 23F00042 		bic	r2, r3, #-2147483648
 755 0028 BB68     		ldr	r3, [r7, #8]
 756 002a C3F88022 		str	r2, [r3, #640]
 483:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 757              		.loc 1 483 0
 758 002e 4FF00003 		mov	r3, #0
 759 0032 FB60     		str	r3, [r7, #12]
 760              	.L29:
 484:../Dave/Generated/src/ADC001/ADC001.c ****   }
 485:../Dave/Generated/src/ADC001/ADC001.c ****   else
 486:../Dave/Generated/src/ADC001/ADC001.c ****   {
 487:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 488:../Dave/Generated/src/ADC001/ADC001.c ****   }
 489:../Dave/Generated/src/ADC001/ADC001.c **** 
 490:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 761              		.loc 1 490 0
 762 0034 FB68     		ldr	r3, [r7, #12]
 491:../Dave/Generated/src/ADC001/ADC001.c **** }
 763              		.loc 1 491 0
 764 0036 1846     		mov	r0, r3
 765 0038 07F11407 		add	r7, r7, #20
 766 003c BD46     		mov	sp, r7
 767 003e 80BC     		pop	{r7}
 768 0040 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE122:
 772 0042 00BF     		.section	.text.ADC001_GetResult,"ax",%progbits
 773              		.align	2
 774              		.global	ADC001_GetResult
 775              		.thumb
 776              		.thumb_func
 778              	ADC001_GetResult:
 779              	.LFB123:
 492:../Dave/Generated/src/ADC001/ADC001.c **** 
 493:../Dave/Generated/src/ADC001/ADC001.c **** /**
 494:../Dave/Generated/src/ADC001/ADC001.c ****  * This function returns the result of the normal mode ADC conversion.
 495:../Dave/Generated/src/ADC001/ADC001.c ****  */
 496:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GetResult(const ADC001_HandleType* HandlePtr,
 497:../Dave/Generated/src/ADC001/ADC001.c ****                                             ADC001_ResultHandleType* ResultPtr)
 498:../Dave/Generated/src/ADC001/ADC001.c **** {
 780              		.loc 1 498 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 24
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785 0000 80B4     		push	{r7}
 786              	.LCFI17:
 787              		.cfi_def_cfa_offset 4
 788              		.cfi_offset 7, -4
 789 0002 87B0     		sub	sp, sp, #28
 790              	.LCFI18:
 791              		.cfi_def_cfa_offset 32
 792 0004 00AF     		add	r7, sp, #0
 793              	.LCFI19:
 794              		.cfi_def_cfa_register 7
 795 0006 7860     		str	r0, [r7, #4]
 796 0008 3960     		str	r1, [r7, #0]
 499:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 797              		.loc 1 499 0
 798 000a 4FF00103 		mov	r3, #1
 799 000e 7B61     		str	r3, [r7, #20]
 500:../Dave/Generated/src/ADC001/ADC001.c ****   uint32_t ADCResult;
 501:../Dave/Generated/src/ADC001/ADC001.c **** 
 502:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 503:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 504:../Dave/Generated/src/ADC001/ADC001.c **** 
 505:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 800              		.loc 1 505 0
 801 0010 7B68     		ldr	r3, [r7, #4]
 802 0012 1B6C     		ldr	r3, [r3, #64]
 803 0014 3B61     		str	r3, [r7, #16]
 506:../Dave/Generated/src/ADC001/ADC001.c **** 
 507:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 804              		.loc 1 507 0
 805 0016 7B68     		ldr	r3, [r7, #4]
 806 0018 DB6B     		ldr	r3, [r3, #60]
 807 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 808 001c 012B     		cmp	r3, #1
 809 001e 2AD1     		bne	.L32
 508:../Dave/Generated/src/ADC001/ADC001.c ****   {
 509:../Dave/Generated/src/ADC001/ADC001.c ****     if(ResultPtr != NULL)
 810              		.loc 1 509 0
 811 0020 3B68     		ldr	r3, [r7, #0]
 812 0022 002B     		cmp	r3, #0
 813 0024 24D0     		beq	.L33
 510:../Dave/Generated/src/ADC001/ADC001.c ****     {
 511:../Dave/Generated/src/ADC001/ADC001.c ****       ADCResult = VADCGlobalPtr->GLOBRES;
 814              		.loc 1 511 0
 815 0026 3B69     		ldr	r3, [r7, #16]
 816 0028 D3F80033 		ldr	r3, [r3, #768]
 817 002c FB60     		str	r3, [r7, #12]
 512:../Dave/Generated/src/ADC001/ADC001.c ****       /* If valid flag is set */
 513:../Dave/Generated/src/ADC001/ADC001.c ****       if(((ADCResult & VADC_GLOBRES_VF_Msk) >> VADC_GLOBRES_VF_Pos) == (uint32_t)1)
 818              		.loc 1 513 0
 819 002e FB68     		ldr	r3, [r7, #12]
 820 0030 4FEAD373 		lsr	r3, r3, #31
 821 0034 012B     		cmp	r3, #1
 822 0036 17D1     		bne	.L34
 514:../Dave/Generated/src/ADC001/ADC001.c ****       {
 515:../Dave/Generated/src/ADC001/ADC001.c ****           ResultPtr->GroupNo = (uint8_t)((ADCResult & VADC_GLOBRES_GNR_Msk) >> VADC_GLOBRES_GNR_Pos
 823              		.loc 1 515 0
 824 0038 FB68     		ldr	r3, [r7, #12]
 825 003a 03F47023 		and	r3, r3, #983040
 826 003e 4FEA1343 		lsr	r3, r3, #16
 827 0042 DAB2     		uxtb	r2, r3
 828 0044 3B68     		ldr	r3, [r7, #0]
 829 0046 1A70     		strb	r2, [r3, #0]
 516:../Dave/Generated/src/ADC001/ADC001.c ****           ResultPtr->ChannelNo = (uint8_t)((ADCResult & VADC_GLOBRES_CHNR_Msk) >> VADC_GLOBRES_CHNR
 830              		.loc 1 516 0
 831 0048 FB68     		ldr	r3, [r7, #12]
 832 004a 03F0F873 		and	r3, r3, #32505856
 833 004e 4FEA1353 		lsr	r3, r3, #20
 834 0052 DAB2     		uxtb	r2, r3
 835 0054 3B68     		ldr	r3, [r7, #0]
 836 0056 5A70     		strb	r2, [r3, #1]
 517:../Dave/Generated/src/ADC001/ADC001.c ****           ResultPtr->Result = (uint16_t)(ADCResult & VADC_GLOBRES_RESULT_Msk);
 837              		.loc 1 517 0
 838 0058 FB68     		ldr	r3, [r7, #12]
 839 005a 9AB2     		uxth	r2, r3
 840 005c 3B68     		ldr	r3, [r7, #0]
 841 005e 5A80     		strh	r2, [r3, #2]	@ movhi
 518:../Dave/Generated/src/ADC001/ADC001.c ****           Status = (uint32_t)DAVEApp_SUCCESS;
 842              		.loc 1 518 0
 843 0060 4FF00003 		mov	r3, #0
 844 0064 7B61     		str	r3, [r7, #20]
 845 0066 06E0     		b	.L32
 846              	.L34:
 519:../Dave/Generated/src/ADC001/ADC001.c ****       }
 520:../Dave/Generated/src/ADC001/ADC001.c ****       /* If data is old, then send error as invalid data */
 521:../Dave/Generated/src/ADC001/ADC001.c ****       else
 522:../Dave/Generated/src/ADC001/ADC001.c ****       {
 523:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_RESULT;
 847              		.loc 1 523 0
 848 0068 4FF00303 		mov	r3, #3
 849 006c 7B61     		str	r3, [r7, #20]
 850 006e 02E0     		b	.L32
 851              	.L33:
 524:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 525:../Dave/Generated/src/ADC001/ADC001.c ****       }
 526:../Dave/Generated/src/ADC001/ADC001.c ****     }
 527:../Dave/Generated/src/ADC001/ADC001.c ****     else
 528:../Dave/Generated/src/ADC001/ADC001.c ****     {
 529:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 852              		.loc 1 529 0
 853 0070 4FF00203 		mov	r3, #2
 854 0074 7B61     		str	r3, [r7, #20]
 855              	.L32:
 530:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 531:../Dave/Generated/src/ADC001/ADC001.c ****     }
 532:../Dave/Generated/src/ADC001/ADC001.c ****   }
 533:../Dave/Generated/src/ADC001/ADC001.c ****   else
 534:../Dave/Generated/src/ADC001/ADC001.c ****   {
 535:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 536:../Dave/Generated/src/ADC001/ADC001.c ****   }
 537:../Dave/Generated/src/ADC001/ADC001.c **** 
 538:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 856              		.loc 1 538 0
 857 0076 7B69     		ldr	r3, [r7, #20]
 539:../Dave/Generated/src/ADC001/ADC001.c **** }
 858              		.loc 1 539 0
 859 0078 1846     		mov	r0, r3
 860 007a 07F11C07 		add	r7, r7, #28
 861 007e BD46     		mov	sp, r7
 862 0080 80BC     		pop	{r7}
 863 0082 7047     		bx	lr
 864              		.cfi_endproc
 865              	.LFE123:
 867              		.section	.text.ADC001_GetFastResult,"ax",%progbits
 868              		.align	2
 869              		.global	ADC001_GetFastResult
 870              		.thumb
 871              		.thumb_func
 873              	ADC001_GetFastResult:
 874              	.LFB124:
 540:../Dave/Generated/src/ADC001/ADC001.c **** 
 541:../Dave/Generated/src/ADC001/ADC001.c **** /**
 542:../Dave/Generated/src/ADC001/ADC001.c ****  * This function returns the result of the normal mode ADC conversion without checking the valid bi
 543:../Dave/Generated/src/ADC001/ADC001.c ****  */
 544:../Dave/Generated/src/ADC001/ADC001.c **** uint16_t ADC001_GetFastResult(const ADC001_HandleType* HandlePtr)
 545:../Dave/Generated/src/ADC001/ADC001.c **** {
 875              		.loc 1 545 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 16
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880 0000 80B4     		push	{r7}
 881              	.LCFI20:
 882              		.cfi_def_cfa_offset 4
 883              		.cfi_offset 7, -4
 884 0002 85B0     		sub	sp, sp, #20
 885              	.LCFI21:
 886              		.cfi_def_cfa_offset 24
 887 0004 00AF     		add	r7, sp, #0
 888              	.LCFI22:
 889              		.cfi_def_cfa_register 7
 890 0006 7860     		str	r0, [r7, #4]
 546:../Dave/Generated/src/ADC001/ADC001.c **** 
 547:../Dave/Generated/src/ADC001/ADC001.c ****     /* Pointer to the VADC Kernel Structure */
 548:../Dave/Generated/src/ADC001/ADC001.c ****     VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 549:../Dave/Generated/src/ADC001/ADC001.c ****      VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 891              		.loc 1 549 0
 892 0008 7B68     		ldr	r3, [r7, #4]
 893 000a 1B6C     		ldr	r3, [r3, #64]
 894 000c FB60     		str	r3, [r7, #12]
 550:../Dave/Generated/src/ADC001/ADC001.c **** 
 551:../Dave/Generated/src/ADC001/ADC001.c ****     return (uint16_t)(VADCGlobalPtr->GLOBRES & (uint32_t)VADC_GLOBRES_RESULT_Msk);
 895              		.loc 1 551 0
 896 000e FB68     		ldr	r3, [r7, #12]
 897 0010 D3F80033 		ldr	r3, [r3, #768]
 898 0014 9BB2     		uxth	r3, r3
 552:../Dave/Generated/src/ADC001/ADC001.c **** }
 899              		.loc 1 552 0
 900 0016 1846     		mov	r0, r3
 901 0018 07F11407 		add	r7, r7, #20
 902 001c BD46     		mov	sp, r7
 903 001e 80BC     		pop	{r7}
 904 0020 7047     		bx	lr
 905              		.cfi_endproc
 906              	.LFE124:
 908 0022 00BF     		.section	.text.ADC001_GetResultEvtFlag,"ax",%progbits
 909              		.align	2
 910              		.global	ADC001_GetResultEvtFlag
 911              		.thumb
 912              		.thumb_func
 914              	ADC001_GetResultEvtFlag:
 915              	.LFB125:
 553:../Dave/Generated/src/ADC001/ADC001.c **** 
 554:../Dave/Generated/src/ADC001/ADC001.c **** 
 555:../Dave/Generated/src/ADC001/ADC001.c **** /**
 556:../Dave/Generated/src/ADC001/ADC001.c ****  * This function checks whether Result event flag is set.
 557:../Dave/Generated/src/ADC001/ADC001.c ****  */
 558:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GetResultEvtFlag(const ADC001_HandleType* HandlePtr,
 559:../Dave/Generated/src/ADC001/ADC001.c ****                                                             uint8_t* EvtStatus)
 560:../Dave/Generated/src/ADC001/ADC001.c **** {
 916              		.loc 1 560 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 16
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921 0000 80B4     		push	{r7}
 922              	.LCFI23:
 923              		.cfi_def_cfa_offset 4
 924              		.cfi_offset 7, -4
 925 0002 85B0     		sub	sp, sp, #20
 926              	.LCFI24:
 927              		.cfi_def_cfa_offset 24
 928 0004 00AF     		add	r7, sp, #0
 929              	.LCFI25:
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
 932 0008 3960     		str	r1, [r7, #0]
 561:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 933              		.loc 1 561 0
 934 000a 4FF00103 		mov	r3, #1
 935 000e FB60     		str	r3, [r7, #12]
 562:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 563:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 564:../Dave/Generated/src/ADC001/ADC001.c **** 
 565:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 936              		.loc 1 565 0
 937 0010 7B68     		ldr	r3, [r7, #4]
 938 0012 1B6C     		ldr	r3, [r3, #64]
 939 0014 BB60     		str	r3, [r7, #8]
 566:../Dave/Generated/src/ADC001/ADC001.c **** 
 567:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 940              		.loc 1 567 0
 941 0016 7B68     		ldr	r3, [r7, #4]
 942 0018 DB6B     		ldr	r3, [r3, #60]
 943 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 944 001c 002B     		cmp	r3, #0
 945 001e 13D0     		beq	.L39
 568:../Dave/Generated/src/ADC001/ADC001.c ****   {
 569:../Dave/Generated/src/ADC001/ADC001.c ****     if(EvtStatus != NULL)
 946              		.loc 1 569 0
 947 0020 3B68     		ldr	r3, [r7, #0]
 948 0022 002B     		cmp	r3, #0
 949 0024 0DD0     		beq	.L40
 570:../Dave/Generated/src/ADC001/ADC001.c ****     {
 571:../Dave/Generated/src/ADC001/ADC001.c ****       *EvtStatus = (uint8_t)RD_REG( VADCGlobalPtr->GLOBEFLAG,
 950              		.loc 1 571 0
 951 0026 BB68     		ldr	r3, [r7, #8]
 952 0028 D3F8E030 		ldr	r3, [r3, #224]
 953 002c 03F48073 		and	r3, r3, #256
 954 0030 4FEA1323 		lsr	r3, r3, #8
 955 0034 DAB2     		uxtb	r2, r3
 956 0036 3B68     		ldr	r3, [r7, #0]
 957 0038 1A70     		strb	r2, [r3, #0]
 572:../Dave/Generated/src/ADC001/ADC001.c ****                           VADC_GLOBEFLAG_REVGLB_Msk, VADC_GLOBEFLAG_REVGLB_Pos);
 573:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 958              		.loc 1 573 0
 959 003a 4FF00003 		mov	r3, #0
 960 003e FB60     		str	r3, [r7, #12]
 961 0040 02E0     		b	.L39
 962              	.L40:
 574:../Dave/Generated/src/ADC001/ADC001.c ****     }
 575:../Dave/Generated/src/ADC001/ADC001.c ****     else
 576:../Dave/Generated/src/ADC001/ADC001.c ****     {
 577:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 963              		.loc 1 577 0
 964 0042 4FF00203 		mov	r3, #2
 965 0046 FB60     		str	r3, [r7, #12]
 966              	.L39:
 578:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 579:../Dave/Generated/src/ADC001/ADC001.c ****     }
 580:../Dave/Generated/src/ADC001/ADC001.c ****   }
 581:../Dave/Generated/src/ADC001/ADC001.c ****   else
 582:../Dave/Generated/src/ADC001/ADC001.c ****   {
 583:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 584:../Dave/Generated/src/ADC001/ADC001.c ****   }
 585:../Dave/Generated/src/ADC001/ADC001.c **** 
 586:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 967              		.loc 1 586 0
 968 0048 FB68     		ldr	r3, [r7, #12]
 587:../Dave/Generated/src/ADC001/ADC001.c **** }
 969              		.loc 1 587 0
 970 004a 1846     		mov	r0, r3
 971 004c 07F11407 		add	r7, r7, #20
 972 0050 BD46     		mov	sp, r7
 973 0052 80BC     		pop	{r7}
 974 0054 7047     		bx	lr
 975              		.cfi_endproc
 976              	.LFE125:
 978 0056 00BF     		.section	.text.ADC001_SetResultEvtFlag,"ax",%progbits
 979              		.align	2
 980              		.global	ADC001_SetResultEvtFlag
 981              		.thumb
 982              		.thumb_func
 984              	ADC001_SetResultEvtFlag:
 985              	.LFB126:
 588:../Dave/Generated/src/ADC001/ADC001.c **** 
 589:../Dave/Generated/src/ADC001/ADC001.c **** 
 590:../Dave/Generated/src/ADC001/ADC001.c **** /**
 591:../Dave/Generated/src/ADC001/ADC001.c ****  * This will set the result event flag through software.
 592:../Dave/Generated/src/ADC001/ADC001.c ****  */
 593:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetResultEvtFlag(const ADC001_HandleType* HandlePtr)
 594:../Dave/Generated/src/ADC001/ADC001.c **** {
 986              		.loc 1 594 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 16
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991 0000 80B4     		push	{r7}
 992              	.LCFI26:
 993              		.cfi_def_cfa_offset 4
 994              		.cfi_offset 7, -4
 995 0002 85B0     		sub	sp, sp, #20
 996              	.LCFI27:
 997              		.cfi_def_cfa_offset 24
 998 0004 00AF     		add	r7, sp, #0
 999              	.LCFI28:
 1000              		.cfi_def_cfa_register 7
 1001 0006 7860     		str	r0, [r7, #4]
 595:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1002              		.loc 1 595 0
 1003 0008 4FF00103 		mov	r3, #1
 1004 000c FB60     		str	r3, [r7, #12]
 596:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 597:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 598:../Dave/Generated/src/ADC001/ADC001.c **** 
 599:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1005              		.loc 1 599 0
 1006 000e 7B68     		ldr	r3, [r7, #4]
 1007 0010 1B6C     		ldr	r3, [r3, #64]
 1008 0012 BB60     		str	r3, [r7, #8]
 600:../Dave/Generated/src/ADC001/ADC001.c **** 
 601:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1009              		.loc 1 601 0
 1010 0014 7B68     		ldr	r3, [r7, #4]
 1011 0016 DB6B     		ldr	r3, [r3, #60]
 1012 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1013 001a 002B     		cmp	r3, #0
 1014 001c 0AD0     		beq	.L43
 602:../Dave/Generated/src/ADC001/ADC001.c ****   {
 603:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->GLOBEFLAG,
 1015              		.loc 1 603 0
 1016 001e BB68     		ldr	r3, [r7, #8]
 1017 0020 D3F8E030 		ldr	r3, [r3, #224]
 1018 0024 43F48072 		orr	r2, r3, #256
 1019 0028 BB68     		ldr	r3, [r7, #8]
 1020 002a C3F8E020 		str	r2, [r3, #224]
 604:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_GLOBEFLAG_REVGLB_Pos
 605:../Dave/Generated/src/ADC001/ADC001.c ****            );
 606:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1021              		.loc 1 606 0
 1022 002e 4FF00003 		mov	r3, #0
 1023 0032 FB60     		str	r3, [r7, #12]
 1024              	.L43:
 607:../Dave/Generated/src/ADC001/ADC001.c ****   }
 608:../Dave/Generated/src/ADC001/ADC001.c ****   else
 609:../Dave/Generated/src/ADC001/ADC001.c ****   {
 610:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 611:../Dave/Generated/src/ADC001/ADC001.c ****   }
 612:../Dave/Generated/src/ADC001/ADC001.c **** 
 613:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1025              		.loc 1 613 0
 1026 0034 FB68     		ldr	r3, [r7, #12]
 614:../Dave/Generated/src/ADC001/ADC001.c **** }
 1027              		.loc 1 614 0
 1028 0036 1846     		mov	r0, r3
 1029 0038 07F11407 		add	r7, r7, #20
 1030 003c BD46     		mov	sp, r7
 1031 003e 80BC     		pop	{r7}
 1032 0040 7047     		bx	lr
 1033              		.cfi_endproc
 1034              	.LFE126:
 1036 0042 00BF     		.section	.text.ADC001_ClearResultEvtFlag,"ax",%progbits
 1037              		.align	2
 1038              		.global	ADC001_ClearResultEvtFlag
 1039              		.thumb
 1040              		.thumb_func
 1042              	ADC001_ClearResultEvtFlag:
 1043              	.LFB127:
 615:../Dave/Generated/src/ADC001/ADC001.c **** 
 616:../Dave/Generated/src/ADC001/ADC001.c **** /**
 617:../Dave/Generated/src/ADC001/ADC001.c ****  * This function clears the pending result event flag
 618:../Dave/Generated/src/ADC001/ADC001.c ****  */
 619:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearResultEvtFlag(const ADC001_HandleType* HandlePtr)
 620:../Dave/Generated/src/ADC001/ADC001.c **** {
 1044              		.loc 1 620 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 16
 1047              		@ frame_needed = 1, uses_anonymous_args = 0
 1048              		@ link register save eliminated.
 1049 0000 80B4     		push	{r7}
 1050              	.LCFI29:
 1051              		.cfi_def_cfa_offset 4
 1052              		.cfi_offset 7, -4
 1053 0002 85B0     		sub	sp, sp, #20
 1054              	.LCFI30:
 1055              		.cfi_def_cfa_offset 24
 1056 0004 00AF     		add	r7, sp, #0
 1057              	.LCFI31:
 1058              		.cfi_def_cfa_register 7
 1059 0006 7860     		str	r0, [r7, #4]
 621:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1060              		.loc 1 621 0
 1061 0008 4FF00103 		mov	r3, #1
 1062 000c FB60     		str	r3, [r7, #12]
 622:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 623:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 624:../Dave/Generated/src/ADC001/ADC001.c **** 
 625:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1063              		.loc 1 625 0
 1064 000e 7B68     		ldr	r3, [r7, #4]
 1065 0010 1B6C     		ldr	r3, [r3, #64]
 1066 0012 BB60     		str	r3, [r7, #8]
 626:../Dave/Generated/src/ADC001/ADC001.c **** 
 627:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1067              		.loc 1 627 0
 1068 0014 7B68     		ldr	r3, [r7, #4]
 1069 0016 DB6B     		ldr	r3, [r3, #60]
 1070 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1071 001a 002B     		cmp	r3, #0
 1072 001c 0AD0     		beq	.L46
 628:../Dave/Generated/src/ADC001/ADC001.c ****   {
 629:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->GLOBEFLAG,
 1073              		.loc 1 629 0
 1074 001e BB68     		ldr	r3, [r7, #8]
 1075 0020 D3F8E030 		ldr	r3, [r3, #224]
 1076 0024 43F08072 		orr	r2, r3, #16777216
 1077 0028 BB68     		ldr	r3, [r7, #8]
 1078 002a C3F8E020 		str	r2, [r3, #224]
 630:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_GLOBEFLAG_REVGLBCLR_Pos
 631:../Dave/Generated/src/ADC001/ADC001.c ****            );
 632:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1079              		.loc 1 632 0
 1080 002e 4FF00003 		mov	r3, #0
 1081 0032 FB60     		str	r3, [r7, #12]
 1082              	.L46:
 633:../Dave/Generated/src/ADC001/ADC001.c ****   }
 634:../Dave/Generated/src/ADC001/ADC001.c ****   else
 635:../Dave/Generated/src/ADC001/ADC001.c ****   {
 636:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 637:../Dave/Generated/src/ADC001/ADC001.c ****   }
 638:../Dave/Generated/src/ADC001/ADC001.c **** 
 639:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1083              		.loc 1 639 0
 1084 0034 FB68     		ldr	r3, [r7, #12]
 640:../Dave/Generated/src/ADC001/ADC001.c **** }
 1085              		.loc 1 640 0
 1086 0036 1846     		mov	r0, r3
 1087 0038 07F11407 		add	r7, r7, #20
 1088 003c BD46     		mov	sp, r7
 1089 003e 80BC     		pop	{r7}
 1090 0040 7047     		bx	lr
 1091              		.cfi_endproc
 1092              	.LFE127:
 1094 0042 00BF     		.section	.text.ADC001_GetChannelEvtFlag,"ax",%progbits
 1095              		.align	2
 1096              		.global	ADC001_GetChannelEvtFlag
 1097              		.thumb
 1098              		.thumb_func
 1100              	ADC001_GetChannelEvtFlag:
 1101              	.LFB128:
 641:../Dave/Generated/src/ADC001/ADC001.c **** 
 642:../Dave/Generated/src/ADC001/ADC001.c **** /**
 643:../Dave/Generated/src/ADC001/ADC001.c ****  * This function checks whether Channel event flag is set.
 644:../Dave/Generated/src/ADC001/ADC001.c ****  */
 645:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GetChannelEvtFlag(const ADC001_HandleType* HandlePtr,
 646:../Dave/Generated/src/ADC001/ADC001.c ****                                   uint8_t* EvtStatus,
 647:../Dave/Generated/src/ADC001/ADC001.c ****                                   const ADC001_ChannelHandleType* ChannelPtr)
 648:../Dave/Generated/src/ADC001/ADC001.c **** {
 1102              		.loc 1 648 0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 40
 1105              		@ frame_needed = 1, uses_anonymous_args = 0
 1106              		@ link register save eliminated.
 1107 0000 80B4     		push	{r7}
 1108              	.LCFI32:
 1109              		.cfi_def_cfa_offset 4
 1110              		.cfi_offset 7, -4
 1111 0002 8BB0     		sub	sp, sp, #44
 1112              	.LCFI33:
 1113              		.cfi_def_cfa_offset 48
 1114 0004 00AF     		add	r7, sp, #0
 1115              	.LCFI34:
 1116              		.cfi_def_cfa_register 7
 1117 0006 F860     		str	r0, [r7, #12]
 1118 0008 B960     		str	r1, [r7, #8]
 1119 000a 7A60     		str	r2, [r7, #4]
 649:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1120              		.loc 1 649 0
 1121 000c 4FF00103 		mov	r3, #1
 1122 0010 7B62     		str	r3, [r7, #36]
 650:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 651:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
 652:../Dave/Generated/src/ADC001/ADC001.c **** 
 653:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 654:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 655:../Dave/Generated/src/ADC001/ADC001.c **** 
 656:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 1123              		.loc 1 656 0
 1124 0012 FB68     		ldr	r3, [r7, #12]
 1125 0014 5B6C     		ldr	r3, [r3, #68]
 1126 0016 3B61     		str	r3, [r7, #16]
 657:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 1127              		.loc 1 657 0
 1128 0018 FB68     		ldr	r3, [r7, #12]
 1129 001a 9B6C     		ldr	r3, [r3, #72]
 1130 001c 7B61     		str	r3, [r7, #20]
 658:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 1131              		.loc 1 658 0
 1132 001e FB68     		ldr	r3, [r7, #12]
 1133 0020 DB6C     		ldr	r3, [r3, #76]
 1134 0022 BB61     		str	r3, [r7, #24]
 659:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 1135              		.loc 1 659 0
 1136 0024 FB68     		ldr	r3, [r7, #12]
 1137 0026 1B6D     		ldr	r3, [r3, #80]
 1138 0028 FB61     		str	r3, [r7, #28]
 660:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1139              		.loc 1 660 0
 1140 002a FB68     		ldr	r3, [r7, #12]
 1141 002c DB6B     		ldr	r3, [r3, #60]
 1142 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1143 0030 012B     		cmp	r3, #1
 1144 0032 4FD1     		bne	.L49
 661:../Dave/Generated/src/ADC001/ADC001.c ****   {
 662:../Dave/Generated/src/ADC001/ADC001.c ****     if((ChannelPtr != NULL) && (EvtStatus != NULL))
 1145              		.loc 1 662 0
 1146 0034 7B68     		ldr	r3, [r7, #4]
 1147 0036 002B     		cmp	r3, #0
 1148 0038 49D0     		beq	.L50
 1149              		.loc 1 662 0 is_stmt 0 discriminator 1
 1150 003a BB68     		ldr	r3, [r7, #8]
 1151 003c 002B     		cmp	r3, #0
 1152 003e 46D0     		beq	.L50
 663:../Dave/Generated/src/ADC001/ADC001.c ****     {
 664:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 1153              		.loc 1 664 0 is_stmt 1
 1154 0040 7B68     		ldr	r3, [r7, #4]
 1155 0042 1B78     		ldrb	r3, [r3, #0]
 1156 0044 87F82330 		strb	r3, [r7, #35]
 665:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 1157              		.loc 1 665 0
 1158 0048 7B68     		ldr	r3, [r7, #4]
 1159 004a 5B78     		ldrb	r3, [r3, #1]
 1160 004c 87F82230 		strb	r3, [r7, #34]
 666:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo < (uint8_t)ADC001_MAX_ADC_GROUP) &&
 1161              		.loc 1 666 0
 1162 0050 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1163 0054 032B     		cmp	r3, #3
 1164 0056 36D8     		bhi	.L51
 1165              		.loc 1 666 0 is_stmt 0 discriminator 1
 1166 0058 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 1167 005c 072B     		cmp	r3, #7
 1168 005e 32D8     		bhi	.L51
 667:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 668:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1169              		.loc 1 668 0 is_stmt 1
 1170 0060 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1171 0064 FA68     		ldr	r2, [r7, #12]
 1172 0066 D318     		adds	r3, r2, r3
 1173 0068 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 667:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 1174              		.loc 1 667 0
 1175 006c 012B     		cmp	r3, #1
 1176 006e 2AD1     		bne	.L51
 669:../Dave/Generated/src/ADC001/ADC001.c ****               (HandlePtr->kActiveChannels[GroupNo][ChannelNo] == (uint8_t)1))
 1177              		.loc 1 669 0
 1178 0070 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 1179 0074 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 1180 0078 F968     		ldr	r1, [r7, #12]
 1181 007a 4FEAC202 		lsl	r2, r2, #3
 1182 007e 8A18     		adds	r2, r1, r2
 1183 0080 D318     		adds	r3, r2, r3
 1184 0082 03F10803 		add	r3, r3, #8
 1185 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 668:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1186              		.loc 1 668 0
 1187 0088 012B     		cmp	r3, #1
 1188 008a 1CD1     		bne	.L51
 670:../Dave/Generated/src/ADC001/ADC001.c ****       {
 671:../Dave/Generated/src/ADC001/ADC001.c ****         *EvtStatus = (uint8_t)RD_REG(VADCGroupPtr[GroupNo]->CEFLAG,
 1189              		.loc 1 671 0
 1190 008c 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1191 0090 4FEA8303 		lsl	r3, r3, #2
 1192 0094 07F12802 		add	r2, r7, #40
 1193 0098 D318     		adds	r3, r2, r3
 1194 009a 53F8183C 		ldr	r3, [r3, #-24]
 1195 009e D3F88021 		ldr	r2, [r3, #384]
 1196 00a2 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 1197 00a6 4FF00101 		mov	r1, #1
 1198 00aa 01FA03F3 		lsl	r3, r1, r3
 1199 00ae 1A40     		ands	r2, r2, r3
 1200 00b0 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 1201 00b4 22FA03F3 		lsr	r3, r2, r3
 1202 00b8 DAB2     		uxtb	r2, r3
 1203 00ba BB68     		ldr	r3, [r7, #8]
 1204 00bc 1A70     		strb	r2, [r3, #0]
 672:../Dave/Generated/src/ADC001/ADC001.c ****                       ((uint32_t)0x01 << ChannelNo),
 673:../Dave/Generated/src/ADC001/ADC001.c ****                       ChannelNo);
 674:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1205              		.loc 1 674 0
 1206 00be 4FF00003 		mov	r3, #0
 1207 00c2 7B62     		str	r3, [r7, #36]
 666:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo < (uint8_t)ADC001_MAX_ADC_GROUP) &&
 1208              		.loc 1 666 0
 1209 00c4 06E0     		b	.L49
 1210              	.L51:
 675:../Dave/Generated/src/ADC001/ADC001.c ****       }
 676:../Dave/Generated/src/ADC001/ADC001.c ****       else
 677:../Dave/Generated/src/ADC001/ADC001.c ****       {
 678:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1211              		.loc 1 678 0
 1212 00c6 4FF00203 		mov	r3, #2
 1213 00ca 7B62     		str	r3, [r7, #36]
 666:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo < (uint8_t)ADC001_MAX_ADC_GROUP) &&
 1214              		.loc 1 666 0
 1215 00cc 02E0     		b	.L49
 1216              	.L50:
 679:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 680:../Dave/Generated/src/ADC001/ADC001.c ****       }
 681:../Dave/Generated/src/ADC001/ADC001.c ****     }
 682:../Dave/Generated/src/ADC001/ADC001.c ****     else
 683:../Dave/Generated/src/ADC001/ADC001.c ****     {
 684:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1217              		.loc 1 684 0
 1218 00ce 4FF00203 		mov	r3, #2
 1219 00d2 7B62     		str	r3, [r7, #36]
 1220              	.L49:
 685:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 686:../Dave/Generated/src/ADC001/ADC001.c ****     }
 687:../Dave/Generated/src/ADC001/ADC001.c ****   }
 688:../Dave/Generated/src/ADC001/ADC001.c ****   else
 689:../Dave/Generated/src/ADC001/ADC001.c ****   {
 690:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 691:../Dave/Generated/src/ADC001/ADC001.c ****   }
 692:../Dave/Generated/src/ADC001/ADC001.c **** 
 693:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1221              		.loc 1 693 0
 1222 00d4 7B6A     		ldr	r3, [r7, #36]
 694:../Dave/Generated/src/ADC001/ADC001.c **** }
 1223              		.loc 1 694 0
 1224 00d6 1846     		mov	r0, r3
 1225 00d8 07F12C07 		add	r7, r7, #44
 1226 00dc BD46     		mov	sp, r7
 1227 00de 80BC     		pop	{r7}
 1228 00e0 7047     		bx	lr
 1229              		.cfi_endproc
 1230              	.LFE128:
 1232 00e2 00BF     		.section	.text.ADC001_SetChannelEvtFlag,"ax",%progbits
 1233              		.align	2
 1234              		.global	ADC001_SetChannelEvtFlag
 1235              		.thumb
 1236              		.thumb_func
 1238              	ADC001_SetChannelEvtFlag:
 1239              	.LFB129:
 695:../Dave/Generated/src/ADC001/ADC001.c **** 
 696:../Dave/Generated/src/ADC001/ADC001.c **** /**
 697:../Dave/Generated/src/ADC001/ADC001.c ****  * This function sets the channel event flags through software.
 698:../Dave/Generated/src/ADC001/ADC001.c ****  */
 699:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetChannelEvtFlag(const ADC001_HandleType* HandlePtr,
 700:../Dave/Generated/src/ADC001/ADC001.c ****                                   const ADC001_ChannelHandleType* ChannelPtr)
 701:../Dave/Generated/src/ADC001/ADC001.c **** {
 1240              		.loc 1 701 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 32
 1243              		@ frame_needed = 1, uses_anonymous_args = 0
 1244              		@ link register save eliminated.
 1245 0000 80B4     		push	{r7}
 1246              	.LCFI35:
 1247              		.cfi_def_cfa_offset 4
 1248              		.cfi_offset 7, -4
 1249 0002 89B0     		sub	sp, sp, #36
 1250              	.LCFI36:
 1251              		.cfi_def_cfa_offset 40
 1252 0004 00AF     		add	r7, sp, #0
 1253              	.LCFI37:
 1254              		.cfi_def_cfa_register 7
 1255 0006 7860     		str	r0, [r7, #4]
 1256 0008 3960     		str	r1, [r7, #0]
 702:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1257              		.loc 1 702 0
 1258 000a 4FF00103 		mov	r3, #1
 1259 000e FB61     		str	r3, [r7, #28]
 703:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 704:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
 705:../Dave/Generated/src/ADC001/ADC001.c **** 
 706:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 707:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 708:../Dave/Generated/src/ADC001/ADC001.c **** 
 709:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 1260              		.loc 1 709 0
 1261 0010 7B68     		ldr	r3, [r7, #4]
 1262 0012 5B6C     		ldr	r3, [r3, #68]
 1263 0014 BB60     		str	r3, [r7, #8]
 710:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 1264              		.loc 1 710 0
 1265 0016 7B68     		ldr	r3, [r7, #4]
 1266 0018 9B6C     		ldr	r3, [r3, #72]
 1267 001a FB60     		str	r3, [r7, #12]
 711:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 1268              		.loc 1 711 0
 1269 001c 7B68     		ldr	r3, [r7, #4]
 1270 001e DB6C     		ldr	r3, [r3, #76]
 1271 0020 3B61     		str	r3, [r7, #16]
 712:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 1272              		.loc 1 712 0
 1273 0022 7B68     		ldr	r3, [r7, #4]
 1274 0024 1B6D     		ldr	r3, [r3, #80]
 1275 0026 7B61     		str	r3, [r7, #20]
 713:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1276              		.loc 1 713 0
 1277 0028 7B68     		ldr	r3, [r7, #4]
 1278 002a DB6B     		ldr	r3, [r3, #60]
 1279 002c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1280 002e 012B     		cmp	r3, #1
 1281 0030 46D1     		bne	.L56
 714:../Dave/Generated/src/ADC001/ADC001.c ****   {
 715:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 1282              		.loc 1 715 0
 1283 0032 3B68     		ldr	r3, [r7, #0]
 1284 0034 002B     		cmp	r3, #0
 1285 0036 40D0     		beq	.L57
 716:../Dave/Generated/src/ADC001/ADC001.c ****     {
 717:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 1286              		.loc 1 717 0
 1287 0038 3B68     		ldr	r3, [r7, #0]
 1288 003a 1B78     		ldrb	r3, [r3, #0]
 1289 003c FB76     		strb	r3, [r7, #27]
 718:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 1290              		.loc 1 718 0
 1291 003e 3B68     		ldr	r3, [r7, #0]
 1292 0040 5B78     		ldrb	r3, [r3, #1]
 1293 0042 BB76     		strb	r3, [r7, #26]
 719:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo < (uint8_t)ADC001_MAX_ADC_GROUP) &&
 1294              		.loc 1 719 0
 1295 0044 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1296 0046 032B     		cmp	r3, #3
 1297 0048 33D8     		bhi	.L58
 1298              		.loc 1 719 0 is_stmt 0 discriminator 1
 1299 004a BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1300 004c 072B     		cmp	r3, #7
 1301 004e 30D8     		bhi	.L58
 720:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 721:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1302              		.loc 1 721 0 is_stmt 1
 1303 0050 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1304 0052 7A68     		ldr	r2, [r7, #4]
 1305 0054 D318     		adds	r3, r2, r3
 1306 0056 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 720:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 1307              		.loc 1 720 0
 1308 005a 012B     		cmp	r3, #1
 1309 005c 29D1     		bne	.L58
 722:../Dave/Generated/src/ADC001/ADC001.c ****               (HandlePtr->kActiveChannels[GroupNo][ChannelNo] == (uint8_t)1))
 1310              		.loc 1 722 0
 1311 005e FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 1312 0060 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1313 0062 7968     		ldr	r1, [r7, #4]
 1314 0064 4FEAC202 		lsl	r2, r2, #3
 1315 0068 8A18     		adds	r2, r1, r2
 1316 006a D318     		adds	r3, r2, r3
 1317 006c 03F10803 		add	r3, r3, #8
 1318 0070 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 721:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1319              		.loc 1 721 0
 1320 0072 012B     		cmp	r3, #1
 1321 0074 1DD1     		bne	.L58
 723:../Dave/Generated/src/ADC001/ADC001.c ****       {
 724:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT( VADCGroupPtr[GroupNo]->CEFLAG, ChannelNo);
 1322              		.loc 1 724 0
 1323 0076 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1324 0078 4FEA8303 		lsl	r3, r3, #2
 1325 007c 07F12001 		add	r1, r7, #32
 1326 0080 CB18     		adds	r3, r1, r3
 1327 0082 53F8182C 		ldr	r2, [r3, #-24]
 1328 0086 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1329 0088 4FEA8303 		lsl	r3, r3, #2
 1330 008c 07F12001 		add	r1, r7, #32
 1331 0090 CB18     		adds	r3, r1, r3
 1332 0092 53F8183C 		ldr	r3, [r3, #-24]
 1333 0096 D3F88011 		ldr	r1, [r3, #384]
 1334 009a BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1335 009c 4FF00100 		mov	r0, #1
 1336 00a0 00FA03F3 		lsl	r3, r0, r3
 1337 00a4 0B43     		orrs	r3, r3, r1
 1338 00a6 C2F88031 		str	r3, [r2, #384]
 725:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1339              		.loc 1 725 0
 1340 00aa 4FF00003 		mov	r3, #0
 1341 00ae FB61     		str	r3, [r7, #28]
 1342 00b0 06E0     		b	.L56
 1343              	.L58:
 726:../Dave/Generated/src/ADC001/ADC001.c ****       }
 727:../Dave/Generated/src/ADC001/ADC001.c ****       else
 728:../Dave/Generated/src/ADC001/ADC001.c ****       {
 729:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1344              		.loc 1 729 0
 1345 00b2 4FF00203 		mov	r3, #2
 1346 00b6 FB61     		str	r3, [r7, #28]
 1347 00b8 02E0     		b	.L56
 1348              	.L57:
 730:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 731:../Dave/Generated/src/ADC001/ADC001.c ****       }
 732:../Dave/Generated/src/ADC001/ADC001.c ****     }
 733:../Dave/Generated/src/ADC001/ADC001.c ****     else
 734:../Dave/Generated/src/ADC001/ADC001.c ****     {
 735:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1349              		.loc 1 735 0
 1350 00ba 4FF00203 		mov	r3, #2
 1351 00be FB61     		str	r3, [r7, #28]
 1352              	.L56:
 736:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 737:../Dave/Generated/src/ADC001/ADC001.c ****     }
 738:../Dave/Generated/src/ADC001/ADC001.c ****   }
 739:../Dave/Generated/src/ADC001/ADC001.c ****   else
 740:../Dave/Generated/src/ADC001/ADC001.c ****   {
 741:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 742:../Dave/Generated/src/ADC001/ADC001.c ****   }
 743:../Dave/Generated/src/ADC001/ADC001.c **** 
 744:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1353              		.loc 1 744 0
 1354 00c0 FB69     		ldr	r3, [r7, #28]
 745:../Dave/Generated/src/ADC001/ADC001.c **** }
 1355              		.loc 1 745 0
 1356 00c2 1846     		mov	r0, r3
 1357 00c4 07F12407 		add	r7, r7, #36
 1358 00c8 BD46     		mov	sp, r7
 1359 00ca 80BC     		pop	{r7}
 1360 00cc 7047     		bx	lr
 1361              		.cfi_endproc
 1362              	.LFE129:
 1364 00ce 00BF     		.section	.text.ADC001_ClearChannelEvtFlag,"ax",%progbits
 1365              		.align	2
 1366              		.global	ADC001_ClearChannelEvtFlag
 1367              		.thumb
 1368              		.thumb_func
 1370              	ADC001_ClearChannelEvtFlag:
 1371              	.LFB130:
 746:../Dave/Generated/src/ADC001/ADC001.c **** 
 747:../Dave/Generated/src/ADC001/ADC001.c **** /**
 748:../Dave/Generated/src/ADC001/ADC001.c ****  * This function clears the pending channel event flag.
 749:../Dave/Generated/src/ADC001/ADC001.c ****  */
 750:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearChannelEvtFlag(const ADC001_HandleType* HandlePtr,
 751:../Dave/Generated/src/ADC001/ADC001.c ****                                     const ADC001_ChannelHandleType* ChannelPtr)
 752:../Dave/Generated/src/ADC001/ADC001.c **** {
 1372              		.loc 1 752 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 32
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377 0000 80B4     		push	{r7}
 1378              	.LCFI38:
 1379              		.cfi_def_cfa_offset 4
 1380              		.cfi_offset 7, -4
 1381 0002 89B0     		sub	sp, sp, #36
 1382              	.LCFI39:
 1383              		.cfi_def_cfa_offset 40
 1384 0004 00AF     		add	r7, sp, #0
 1385              	.LCFI40:
 1386              		.cfi_def_cfa_register 7
 1387 0006 7860     		str	r0, [r7, #4]
 1388 0008 3960     		str	r1, [r7, #0]
 753:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1389              		.loc 1 753 0
 1390 000a 4FF00103 		mov	r3, #1
 1391 000e FB61     		str	r3, [r7, #28]
 754:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
 755:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
 756:../Dave/Generated/src/ADC001/ADC001.c **** 
 757:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
 758:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
 759:../Dave/Generated/src/ADC001/ADC001.c **** 
 760:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 1392              		.loc 1 760 0
 1393 0010 7B68     		ldr	r3, [r7, #4]
 1394 0012 5B6C     		ldr	r3, [r3, #68]
 1395 0014 BB60     		str	r3, [r7, #8]
 761:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 1396              		.loc 1 761 0
 1397 0016 7B68     		ldr	r3, [r7, #4]
 1398 0018 9B6C     		ldr	r3, [r3, #72]
 1399 001a FB60     		str	r3, [r7, #12]
 762:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 1400              		.loc 1 762 0
 1401 001c 7B68     		ldr	r3, [r7, #4]
 1402 001e DB6C     		ldr	r3, [r3, #76]
 1403 0020 3B61     		str	r3, [r7, #16]
 763:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 1404              		.loc 1 763 0
 1405 0022 7B68     		ldr	r3, [r7, #4]
 1406 0024 1B6D     		ldr	r3, [r3, #80]
 1407 0026 7B61     		str	r3, [r7, #20]
 764:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1408              		.loc 1 764 0
 1409 0028 7B68     		ldr	r3, [r7, #4]
 1410 002a DB6B     		ldr	r3, [r3, #60]
 1411 002c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1412 002e 012B     		cmp	r3, #1
 1413 0030 46D1     		bne	.L62
 765:../Dave/Generated/src/ADC001/ADC001.c ****   {
 766:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 1414              		.loc 1 766 0
 1415 0032 3B68     		ldr	r3, [r7, #0]
 1416 0034 002B     		cmp	r3, #0
 1417 0036 40D0     		beq	.L63
 767:../Dave/Generated/src/ADC001/ADC001.c ****     {
 768:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 1418              		.loc 1 768 0
 1419 0038 3B68     		ldr	r3, [r7, #0]
 1420 003a 1B78     		ldrb	r3, [r3, #0]
 1421 003c FB76     		strb	r3, [r7, #27]
 769:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 1422              		.loc 1 769 0
 1423 003e 3B68     		ldr	r3, [r7, #0]
 1424 0040 5B78     		ldrb	r3, [r3, #1]
 1425 0042 BB76     		strb	r3, [r7, #26]
 770:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo < (uint8_t)ADC001_MAX_ADC_GROUP) &&
 1426              		.loc 1 770 0
 1427 0044 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1428 0046 032B     		cmp	r3, #3
 1429 0048 33D8     		bhi	.L64
 1430              		.loc 1 770 0 is_stmt 0 discriminator 1
 1431 004a BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1432 004c 072B     		cmp	r3, #7
 1433 004e 30D8     		bhi	.L64
 771:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 772:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1434              		.loc 1 772 0 is_stmt 1
 1435 0050 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1436 0052 7A68     		ldr	r2, [r7, #4]
 1437 0054 D318     		adds	r3, r2, r3
 1438 0056 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 771:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo < (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 1439              		.loc 1 771 0
 1440 005a 012B     		cmp	r3, #1
 1441 005c 29D1     		bne	.L64
 773:../Dave/Generated/src/ADC001/ADC001.c ****               (HandlePtr->kActiveChannels[GroupNo][ChannelNo] == (uint8_t)1))
 1442              		.loc 1 773 0
 1443 005e FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 1444 0060 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1445 0062 7968     		ldr	r1, [r7, #4]
 1446 0064 4FEAC202 		lsl	r2, r2, #3
 1447 0068 8A18     		adds	r2, r1, r2
 1448 006a D318     		adds	r3, r2, r3
 1449 006c 03F10803 		add	r3, r3, #8
 1450 0070 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 772:../Dave/Generated/src/ADC001/ADC001.c ****             (HandlePtr->kActiveGroups[GroupNo] == (uint8_t)1) &&
 1451              		.loc 1 772 0
 1452 0072 012B     		cmp	r3, #1
 1453 0074 1DD1     		bne	.L64
 774:../Dave/Generated/src/ADC001/ADC001.c ****       {
 775:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT( VADCGroupPtr[GroupNo]->CEFCLR, ChannelNo);
 1454              		.loc 1 775 0
 1455 0076 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1456 0078 4FEA8303 		lsl	r3, r3, #2
 1457 007c 07F12001 		add	r1, r7, #32
 1458 0080 CB18     		adds	r3, r1, r3
 1459 0082 53F8182C 		ldr	r2, [r3, #-24]
 1460 0086 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1461 0088 4FEA8303 		lsl	r3, r3, #2
 1462 008c 07F12001 		add	r1, r7, #32
 1463 0090 CB18     		adds	r3, r1, r3
 1464 0092 53F8183C 		ldr	r3, [r3, #-24]
 1465 0096 D3F89011 		ldr	r1, [r3, #400]
 1466 009a BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1467 009c 4FF00100 		mov	r0, #1
 1468 00a0 00FA03F3 		lsl	r3, r0, r3
 1469 00a4 0B43     		orrs	r3, r3, r1
 1470 00a6 C2F89031 		str	r3, [r2, #400]
 776:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1471              		.loc 1 776 0
 1472 00aa 4FF00003 		mov	r3, #0
 1473 00ae FB61     		str	r3, [r7, #28]
 1474 00b0 06E0     		b	.L62
 1475              	.L64:
 777:../Dave/Generated/src/ADC001/ADC001.c ****       }
 778:../Dave/Generated/src/ADC001/ADC001.c ****       else
 779:../Dave/Generated/src/ADC001/ADC001.c ****       {
 780:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1476              		.loc 1 780 0
 1477 00b2 4FF00203 		mov	r3, #2
 1478 00b6 FB61     		str	r3, [r7, #28]
 1479 00b8 02E0     		b	.L62
 1480              	.L63:
 781:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 782:../Dave/Generated/src/ADC001/ADC001.c ****       }
 783:../Dave/Generated/src/ADC001/ADC001.c ****     }
 784:../Dave/Generated/src/ADC001/ADC001.c ****     else
 785:../Dave/Generated/src/ADC001/ADC001.c ****     {
 786:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1481              		.loc 1 786 0
 1482 00ba 4FF00203 		mov	r3, #2
 1483 00be FB61     		str	r3, [r7, #28]
 1484              	.L62:
 787:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 788:../Dave/Generated/src/ADC001/ADC001.c ****     }
 789:../Dave/Generated/src/ADC001/ADC001.c ****   }
 790:../Dave/Generated/src/ADC001/ADC001.c ****   else
 791:../Dave/Generated/src/ADC001/ADC001.c ****   {
 792:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 793:../Dave/Generated/src/ADC001/ADC001.c ****   }
 794:../Dave/Generated/src/ADC001/ADC001.c **** 
 795:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1485              		.loc 1 795 0
 1486 00c0 FB69     		ldr	r3, [r7, #28]
 796:../Dave/Generated/src/ADC001/ADC001.c **** }
 1487              		.loc 1 796 0
 1488 00c2 1846     		mov	r0, r3
 1489 00c4 07F12407 		add	r7, r7, #36
 1490 00c8 BD46     		mov	sp, r7
 1491 00ca 80BC     		pop	{r7}
 1492 00cc 7047     		bx	lr
 1493              		.cfi_endproc
 1494              	.LFE130:
 1496 00ce 00BF     		.section	.text.ADC001_EnableBackGroundEvent,"ax",%progbits
 1497              		.align	2
 1498              		.global	ADC001_EnableBackGroundEvent
 1499              		.thumb
 1500              		.thumb_func
 1502              	ADC001_EnableBackGroundEvent:
 1503              	.LFB131:
 797:../Dave/Generated/src/ADC001/ADC001.c **** 
 798:../Dave/Generated/src/ADC001/ADC001.c **** 
 799:../Dave/Generated/src/ADC001/ADC001.c **** /**
 800:../Dave/Generated/src/ADC001/ADC001.c ****  * This function enables the service request after background request
 801:../Dave/Generated/src/ADC001/ADC001.c ****  * source event.
 802:../Dave/Generated/src/ADC001/ADC001.c ****  */
 803:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_EnableBackGroundEvent(const ADC001_HandleType* HandlePtr)
 804:../Dave/Generated/src/ADC001/ADC001.c **** {
 1504              		.loc 1 804 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 16
 1507              		@ frame_needed = 1, uses_anonymous_args = 0
 1508              		@ link register save eliminated.
 1509 0000 80B4     		push	{r7}
 1510              	.LCFI41:
 1511              		.cfi_def_cfa_offset 4
 1512              		.cfi_offset 7, -4
 1513 0002 85B0     		sub	sp, sp, #20
 1514              	.LCFI42:
 1515              		.cfi_def_cfa_offset 24
 1516 0004 00AF     		add	r7, sp, #0
 1517              	.LCFI43:
 1518              		.cfi_def_cfa_register 7
 1519 0006 7860     		str	r0, [r7, #4]
 805:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1520              		.loc 1 805 0
 1521 0008 4FF00103 		mov	r3, #1
 1522 000c FB60     		str	r3, [r7, #12]
 806:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 807:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 808:../Dave/Generated/src/ADC001/ADC001.c **** 
 809:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1523              		.loc 1 809 0
 1524 000e 7B68     		ldr	r3, [r7, #4]
 1525 0010 1B6C     		ldr	r3, [r3, #64]
 1526 0012 BB60     		str	r3, [r7, #8]
 810:../Dave/Generated/src/ADC001/ADC001.c **** 
 811:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1527              		.loc 1 811 0
 1528 0014 7B68     		ldr	r3, [r7, #4]
 1529 0016 DB6B     		ldr	r3, [r3, #60]
 1530 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1531 001a 002B     		cmp	r3, #0
 1532 001c 0AD0     		beq	.L68
 812:../Dave/Generated/src/ADC001/ADC001.c ****   {
 813:../Dave/Generated/src/ADC001/ADC001.c ****     /* Enable background request source event service request  */
 814:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->BRSMR,
 1533              		.loc 1 814 0
 1534 001e BB68     		ldr	r3, [r7, #8]
 1535 0020 D3F80432 		ldr	r3, [r3, #516]
 1536 0024 43F00802 		orr	r2, r3, #8
 1537 0028 BB68     		ldr	r3, [r7, #8]
 1538 002a C3F80422 		str	r2, [r3, #516]
 815:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_BRSMR_ENSI_Pos
 816:../Dave/Generated/src/ADC001/ADC001.c ****            );
 817:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1539              		.loc 1 817 0
 1540 002e 4FF00003 		mov	r3, #0
 1541 0032 FB60     		str	r3, [r7, #12]
 1542              	.L68:
 818:../Dave/Generated/src/ADC001/ADC001.c ****   }
 819:../Dave/Generated/src/ADC001/ADC001.c ****   else
 820:../Dave/Generated/src/ADC001/ADC001.c ****   {
 821:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 822:../Dave/Generated/src/ADC001/ADC001.c ****   }
 823:../Dave/Generated/src/ADC001/ADC001.c **** 
 824:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1543              		.loc 1 824 0
 1544 0034 FB68     		ldr	r3, [r7, #12]
 825:../Dave/Generated/src/ADC001/ADC001.c **** }
 1545              		.loc 1 825 0
 1546 0036 1846     		mov	r0, r3
 1547 0038 07F11407 		add	r7, r7, #20
 1548 003c BD46     		mov	sp, r7
 1549 003e 80BC     		pop	{r7}
 1550 0040 7047     		bx	lr
 1551              		.cfi_endproc
 1552              	.LFE131:
 1554 0042 00BF     		.section	.text.ADC001_DisableBackGroundEvent,"ax",%progbits
 1555              		.align	2
 1556              		.global	ADC001_DisableBackGroundEvent
 1557              		.thumb
 1558              		.thumb_func
 1560              	ADC001_DisableBackGroundEvent:
 1561              	.LFB132:
 826:../Dave/Generated/src/ADC001/ADC001.c **** 
 827:../Dave/Generated/src/ADC001/ADC001.c **** /**
 828:../Dave/Generated/src/ADC001/ADC001.c ****  * This function disables the service request after background request
 829:../Dave/Generated/src/ADC001/ADC001.c ****  * source event.
 830:../Dave/Generated/src/ADC001/ADC001.c ****  */
 831:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_DisableBackGroundEvent(const ADC001_HandleType* HandlePtr)
 832:../Dave/Generated/src/ADC001/ADC001.c **** {
 1562              		.loc 1 832 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 16
 1565              		@ frame_needed = 1, uses_anonymous_args = 0
 1566              		@ link register save eliminated.
 1567 0000 80B4     		push	{r7}
 1568              	.LCFI44:
 1569              		.cfi_def_cfa_offset 4
 1570              		.cfi_offset 7, -4
 1571 0002 85B0     		sub	sp, sp, #20
 1572              	.LCFI45:
 1573              		.cfi_def_cfa_offset 24
 1574 0004 00AF     		add	r7, sp, #0
 1575              	.LCFI46:
 1576              		.cfi_def_cfa_register 7
 1577 0006 7860     		str	r0, [r7, #4]
 833:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1578              		.loc 1 833 0
 1579 0008 4FF00103 		mov	r3, #1
 1580 000c FB60     		str	r3, [r7, #12]
 834:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 835:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 836:../Dave/Generated/src/ADC001/ADC001.c **** 
 837:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1581              		.loc 1 837 0
 1582 000e 7B68     		ldr	r3, [r7, #4]
 1583 0010 1B6C     		ldr	r3, [r3, #64]
 1584 0012 BB60     		str	r3, [r7, #8]
 838:../Dave/Generated/src/ADC001/ADC001.c **** 
 839:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1585              		.loc 1 839 0
 1586 0014 7B68     		ldr	r3, [r7, #4]
 1587 0016 DB6B     		ldr	r3, [r3, #60]
 1588 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1589 001a 002B     		cmp	r3, #0
 1590 001c 0AD0     		beq	.L71
 840:../Dave/Generated/src/ADC001/ADC001.c ****   {
 841:../Dave/Generated/src/ADC001/ADC001.c ****     /* Disable background request source event service request */
 842:../Dave/Generated/src/ADC001/ADC001.c ****     CLR_BIT( VADCGlobalPtr->BRSMR,
 1591              		.loc 1 842 0
 1592 001e BB68     		ldr	r3, [r7, #8]
 1593 0020 D3F80432 		ldr	r3, [r3, #516]
 1594 0024 23F00802 		bic	r2, r3, #8
 1595 0028 BB68     		ldr	r3, [r7, #8]
 1596 002a C3F80422 		str	r2, [r3, #516]
 843:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_BRSMR_ENSI_Pos
 844:../Dave/Generated/src/ADC001/ADC001.c ****            );
 845:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1597              		.loc 1 845 0
 1598 002e 4FF00003 		mov	r3, #0
 1599 0032 FB60     		str	r3, [r7, #12]
 1600              	.L71:
 846:../Dave/Generated/src/ADC001/ADC001.c ****   }
 847:../Dave/Generated/src/ADC001/ADC001.c ****   else
 848:../Dave/Generated/src/ADC001/ADC001.c ****   {
 849:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 850:../Dave/Generated/src/ADC001/ADC001.c ****   }
 851:../Dave/Generated/src/ADC001/ADC001.c **** 
 852:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1601              		.loc 1 852 0
 1602 0034 FB68     		ldr	r3, [r7, #12]
 853:../Dave/Generated/src/ADC001/ADC001.c **** }
 1603              		.loc 1 853 0
 1604 0036 1846     		mov	r0, r3
 1605 0038 07F11407 		add	r7, r7, #20
 1606 003c BD46     		mov	sp, r7
 1607 003e 80BC     		pop	{r7}
 1608 0040 7047     		bx	lr
 1609              		.cfi_endproc
 1610              	.LFE132:
 1612 0042 00BF     		.section	.text.ADC001_GetBackGroundEvtFlag,"ax",%progbits
 1613              		.align	2
 1614              		.global	ADC001_GetBackGroundEvtFlag
 1615              		.thumb
 1616              		.thumb_func
 1618              	ADC001_GetBackGroundEvtFlag:
 1619              	.LFB133:
 854:../Dave/Generated/src/ADC001/ADC001.c **** 
 855:../Dave/Generated/src/ADC001/ADC001.c **** 
 856:../Dave/Generated/src/ADC001/ADC001.c **** /**
 857:../Dave/Generated/src/ADC001/ADC001.c ****  * This function checks whether source event flag is set.
 858:../Dave/Generated/src/ADC001/ADC001.c ****  */
 859:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GetBackGroundEvtFlag(const ADC001_HandleType* HandlePtr,
 860:../Dave/Generated/src/ADC001/ADC001.c ****                                                             uint8_t* EvtStatus)
 861:../Dave/Generated/src/ADC001/ADC001.c **** {
 1620              		.loc 1 861 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 16
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0000 80B4     		push	{r7}
 1626              	.LCFI47:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 85B0     		sub	sp, sp, #20
 1630              	.LCFI48:
 1631              		.cfi_def_cfa_offset 24
 1632 0004 00AF     		add	r7, sp, #0
 1633              	.LCFI49:
 1634              		.cfi_def_cfa_register 7
 1635 0006 7860     		str	r0, [r7, #4]
 1636 0008 3960     		str	r1, [r7, #0]
 862:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1637              		.loc 1 862 0
 1638 000a 4FF00103 		mov	r3, #1
 1639 000e FB60     		str	r3, [r7, #12]
 863:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 864:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 865:../Dave/Generated/src/ADC001/ADC001.c **** 
 866:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1640              		.loc 1 866 0
 1641 0010 7B68     		ldr	r3, [r7, #4]
 1642 0012 1B6C     		ldr	r3, [r3, #64]
 1643 0014 BB60     		str	r3, [r7, #8]
 867:../Dave/Generated/src/ADC001/ADC001.c **** 
 868:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1644              		.loc 1 868 0
 1645 0016 7B68     		ldr	r3, [r7, #4]
 1646 0018 DB6B     		ldr	r3, [r3, #60]
 1647 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1648 001c 012B     		cmp	r3, #1
 1649 001e 12D1     		bne	.L74
 869:../Dave/Generated/src/ADC001/ADC001.c ****   {
 870:../Dave/Generated/src/ADC001/ADC001.c ****     if(EvtStatus != NULL)
 1650              		.loc 1 870 0
 1651 0020 3B68     		ldr	r3, [r7, #0]
 1652 0022 002B     		cmp	r3, #0
 1653 0024 0CD0     		beq	.L75
 871:../Dave/Generated/src/ADC001/ADC001.c ****     {
 872:../Dave/Generated/src/ADC001/ADC001.c ****       *EvtStatus = (uint8_t)RD_REG( VADCGlobalPtr->GLOBEFLAG,
 1654              		.loc 1 872 0
 1655 0026 BB68     		ldr	r3, [r7, #8]
 1656 0028 D3F8E030 		ldr	r3, [r3, #224]
 1657 002c DBB2     		uxtb	r3, r3
 1658 002e 03F00103 		and	r3, r3, #1
 1659 0032 DAB2     		uxtb	r2, r3
 1660 0034 3B68     		ldr	r3, [r7, #0]
 1661 0036 1A70     		strb	r2, [r3, #0]
 873:../Dave/Generated/src/ADC001/ADC001.c ****                           VADC_GLOBEFLAG_SEVGLB_Msk,
 874:../Dave/Generated/src/ADC001/ADC001.c ****                           VADC_GLOBEFLAG_SEVGLB_Pos
 875:../Dave/Generated/src/ADC001/ADC001.c ****                    );
 876:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1662              		.loc 1 876 0
 1663 0038 4FF00003 		mov	r3, #0
 1664 003c FB60     		str	r3, [r7, #12]
 1665 003e 02E0     		b	.L74
 1666              	.L75:
 877:../Dave/Generated/src/ADC001/ADC001.c ****     }
 878:../Dave/Generated/src/ADC001/ADC001.c ****     else
 879:../Dave/Generated/src/ADC001/ADC001.c ****     {
 880:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1667              		.loc 1 880 0
 1668 0040 4FF00203 		mov	r3, #2
 1669 0044 FB60     		str	r3, [r7, #12]
 1670              	.L74:
 881:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 882:../Dave/Generated/src/ADC001/ADC001.c ****     }
 883:../Dave/Generated/src/ADC001/ADC001.c ****   }
 884:../Dave/Generated/src/ADC001/ADC001.c ****   else
 885:../Dave/Generated/src/ADC001/ADC001.c ****   {
 886:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 887:../Dave/Generated/src/ADC001/ADC001.c ****   }
 888:../Dave/Generated/src/ADC001/ADC001.c **** 
 889:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1671              		.loc 1 889 0
 1672 0046 FB68     		ldr	r3, [r7, #12]
 890:../Dave/Generated/src/ADC001/ADC001.c **** }
 1673              		.loc 1 890 0
 1674 0048 1846     		mov	r0, r3
 1675 004a 07F11407 		add	r7, r7, #20
 1676 004e BD46     		mov	sp, r7
 1677 0050 80BC     		pop	{r7}
 1678 0052 7047     		bx	lr
 1679              		.cfi_endproc
 1680              	.LFE133:
 1682              		.section	.text.ADC001_SetBackGroundEvtFlag,"ax",%progbits
 1683              		.align	2
 1684              		.global	ADC001_SetBackGroundEvtFlag
 1685              		.thumb
 1686              		.thumb_func
 1688              	ADC001_SetBackGroundEvtFlag:
 1689              	.LFB134:
 891:../Dave/Generated/src/ADC001/ADC001.c **** 
 892:../Dave/Generated/src/ADC001/ADC001.c **** 
 893:../Dave/Generated/src/ADC001/ADC001.c **** /**
 894:../Dave/Generated/src/ADC001/ADC001.c ****  * This function sets the source event flag through software.
 895:../Dave/Generated/src/ADC001/ADC001.c ****  */
 896:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetBackGroundEvtFlag(const ADC001_HandleType* HandlePtr)
 897:../Dave/Generated/src/ADC001/ADC001.c **** {
 1690              		.loc 1 897 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 16
 1693              		@ frame_needed = 1, uses_anonymous_args = 0
 1694              		@ link register save eliminated.
 1695 0000 80B4     		push	{r7}
 1696              	.LCFI50:
 1697              		.cfi_def_cfa_offset 4
 1698              		.cfi_offset 7, -4
 1699 0002 85B0     		sub	sp, sp, #20
 1700              	.LCFI51:
 1701              		.cfi_def_cfa_offset 24
 1702 0004 00AF     		add	r7, sp, #0
 1703              	.LCFI52:
 1704              		.cfi_def_cfa_register 7
 1705 0006 7860     		str	r0, [r7, #4]
 898:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1706              		.loc 1 898 0
 1707 0008 4FF00103 		mov	r3, #1
 1708 000c FB60     		str	r3, [r7, #12]
 899:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 900:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 901:../Dave/Generated/src/ADC001/ADC001.c **** 
 902:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1709              		.loc 1 902 0
 1710 000e 7B68     		ldr	r3, [r7, #4]
 1711 0010 1B6C     		ldr	r3, [r3, #64]
 1712 0012 BB60     		str	r3, [r7, #8]
 903:../Dave/Generated/src/ADC001/ADC001.c **** 
 904:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1713              		.loc 1 904 0
 1714 0014 7B68     		ldr	r3, [r7, #4]
 1715 0016 DB6B     		ldr	r3, [r3, #60]
 1716 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1717 001a 002B     		cmp	r3, #0
 1718 001c 0AD0     		beq	.L78
 905:../Dave/Generated/src/ADC001/ADC001.c ****   {
 906:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->GLOBEFLAG,
 1719              		.loc 1 906 0
 1720 001e BB68     		ldr	r3, [r7, #8]
 1721 0020 D3F8E030 		ldr	r3, [r3, #224]
 1722 0024 43F00102 		orr	r2, r3, #1
 1723 0028 BB68     		ldr	r3, [r7, #8]
 1724 002a C3F8E020 		str	r2, [r3, #224]
 907:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_GLOBEFLAG_SEVGLB_Pos
 908:../Dave/Generated/src/ADC001/ADC001.c ****            );
 909:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1725              		.loc 1 909 0
 1726 002e 4FF00003 		mov	r3, #0
 1727 0032 FB60     		str	r3, [r7, #12]
 1728              	.L78:
 910:../Dave/Generated/src/ADC001/ADC001.c ****   }
 911:../Dave/Generated/src/ADC001/ADC001.c ****   else
 912:../Dave/Generated/src/ADC001/ADC001.c ****   {
 913:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 914:../Dave/Generated/src/ADC001/ADC001.c ****   }
 915:../Dave/Generated/src/ADC001/ADC001.c **** 
 916:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1729              		.loc 1 916 0
 1730 0034 FB68     		ldr	r3, [r7, #12]
 917:../Dave/Generated/src/ADC001/ADC001.c **** }
 1731              		.loc 1 917 0
 1732 0036 1846     		mov	r0, r3
 1733 0038 07F11407 		add	r7, r7, #20
 1734 003c BD46     		mov	sp, r7
 1735 003e 80BC     		pop	{r7}
 1736 0040 7047     		bx	lr
 1737              		.cfi_endproc
 1738              	.LFE134:
 1740 0042 00BF     		.section	.text.ADC001_ClearBackGroundEvtFlag,"ax",%progbits
 1741              		.align	2
 1742              		.global	ADC001_ClearBackGroundEvtFlag
 1743              		.thumb
 1744              		.thumb_func
 1746              	ADC001_ClearBackGroundEvtFlag:
 1747              	.LFB135:
 918:../Dave/Generated/src/ADC001/ADC001.c **** 
 919:../Dave/Generated/src/ADC001/ADC001.c **** /**
 920:../Dave/Generated/src/ADC001/ADC001.c ****  * This function clears the pending source event flag.
 921:../Dave/Generated/src/ADC001/ADC001.c ****  */
 922:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearBackGroundEvtFlag(const ADC001_HandleType* HandlePtr)
 923:../Dave/Generated/src/ADC001/ADC001.c **** {
 1748              		.loc 1 923 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 16
 1751              		@ frame_needed = 1, uses_anonymous_args = 0
 1752              		@ link register save eliminated.
 1753 0000 80B4     		push	{r7}
 1754              	.LCFI53:
 1755              		.cfi_def_cfa_offset 4
 1756              		.cfi_offset 7, -4
 1757 0002 85B0     		sub	sp, sp, #20
 1758              	.LCFI54:
 1759              		.cfi_def_cfa_offset 24
 1760 0004 00AF     		add	r7, sp, #0
 1761              	.LCFI55:
 1762              		.cfi_def_cfa_register 7
 1763 0006 7860     		str	r0, [r7, #4]
 924:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1764              		.loc 1 924 0
 1765 0008 4FF00103 		mov	r3, #1
 1766 000c FB60     		str	r3, [r7, #12]
 925:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 926:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 927:../Dave/Generated/src/ADC001/ADC001.c **** 
 928:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1767              		.loc 1 928 0
 1768 000e 7B68     		ldr	r3, [r7, #4]
 1769 0010 1B6C     		ldr	r3, [r3, #64]
 1770 0012 BB60     		str	r3, [r7, #8]
 929:../Dave/Generated/src/ADC001/ADC001.c **** 
 930:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADC001_UNINITIALIZED)
 1771              		.loc 1 930 0
 1772 0014 7B68     		ldr	r3, [r7, #4]
 1773 0016 DB6B     		ldr	r3, [r3, #60]
 1774 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1775 001a 002B     		cmp	r3, #0
 1776 001c 0AD0     		beq	.L81
 931:../Dave/Generated/src/ADC001/ADC001.c ****   {
 932:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT( VADCGlobalPtr->GLOBEFLAG,
 1777              		.loc 1 932 0
 1778 001e BB68     		ldr	r3, [r7, #8]
 1779 0020 D3F8E030 		ldr	r3, [r3, #224]
 1780 0024 43F48032 		orr	r2, r3, #65536
 1781 0028 BB68     		ldr	r3, [r7, #8]
 1782 002a C3F8E020 		str	r2, [r3, #224]
 933:../Dave/Generated/src/ADC001/ADC001.c ****              VADC_GLOBEFLAG_SEVGLBCLR_Pos
 934:../Dave/Generated/src/ADC001/ADC001.c ****            );
 935:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1783              		.loc 1 935 0
 1784 002e 4FF00003 		mov	r3, #0
 1785 0032 FB60     		str	r3, [r7, #12]
 1786              	.L81:
 936:../Dave/Generated/src/ADC001/ADC001.c ****   }
 937:../Dave/Generated/src/ADC001/ADC001.c ****   else
 938:../Dave/Generated/src/ADC001/ADC001.c ****   {
 939:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 940:../Dave/Generated/src/ADC001/ADC001.c ****   }
 941:../Dave/Generated/src/ADC001/ADC001.c **** 
 942:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1787              		.loc 1 942 0
 1788 0034 FB68     		ldr	r3, [r7, #12]
 943:../Dave/Generated/src/ADC001/ADC001.c **** }
 1789              		.loc 1 943 0
 1790 0036 1846     		mov	r0, r3
 1791 0038 07F11407 		add	r7, r7, #20
 1792 003c BD46     		mov	sp, r7
 1793 003e 80BC     		pop	{r7}
 1794 0040 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE135:
 1798 0042 00BF     		.section	.text.ADC001_ClearPendingBits,"ax",%progbits
 1799              		.align	2
 1800              		.global	ADC001_ClearPendingBits
 1801              		.thumb
 1802              		.thumb_func
 1804              	ADC001_ClearPendingBits:
 1805              	.LFB136:
 944:../Dave/Generated/src/ADC001/ADC001.c **** 
 945:../Dave/Generated/src/ADC001/ADC001.c **** /* This function clears pending bits.*/
 946:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearPendingBits(const ADC001_HandleType *HandlePtr)
 947:../Dave/Generated/src/ADC001/ADC001.c **** {
 1806              		.loc 1 947 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 16
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
 1811 0000 80B4     		push	{r7}
 1812              	.LCFI56:
 1813              		.cfi_def_cfa_offset 4
 1814              		.cfi_offset 7, -4
 1815 0002 85B0     		sub	sp, sp, #20
 1816              	.LCFI57:
 1817              		.cfi_def_cfa_offset 24
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI58:
 1820              		.cfi_def_cfa_register 7
 1821 0006 7860     		str	r0, [r7, #4]
 948:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1822              		.loc 1 948 0
 1823 0008 4FF00103 		mov	r3, #1
 1824 000c FB60     		str	r3, [r7, #12]
 949:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 950:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 951:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1825              		.loc 1 951 0
 1826 000e 7B68     		ldr	r3, [r7, #4]
 1827 0010 1B6C     		ldr	r3, [r3, #64]
 1828 0012 BB60     		str	r3, [r7, #8]
 952:../Dave/Generated/src/ADC001/ADC001.c **** 
 953:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1829              		.loc 1 953 0
 1830 0014 7B68     		ldr	r3, [r7, #4]
 1831 0016 DB6B     		ldr	r3, [r3, #60]
 1832 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1833 001a 012B     		cmp	r3, #1
 1834 001c 0AD1     		bne	.L84
 954:../Dave/Generated/src/ADC001/ADC001.c ****   {
 955:../Dave/Generated/src/ADC001/ADC001.c ****     /* Clear Pending Bits */
 956:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_CLRPND_Pos);
 1835              		.loc 1 956 0
 1836 001e BB68     		ldr	r3, [r7, #8]
 1837 0020 D3F80432 		ldr	r3, [r3, #516]
 1838 0024 43F48072 		orr	r2, r3, #256
 1839 0028 BB68     		ldr	r3, [r7, #8]
 1840 002a C3F80422 		str	r2, [r3, #516]
 957:../Dave/Generated/src/ADC001/ADC001.c **** 
 958:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1841              		.loc 1 958 0
 1842 002e 4FF00003 		mov	r3, #0
 1843 0032 FB60     		str	r3, [r7, #12]
 1844              	.L84:
 959:../Dave/Generated/src/ADC001/ADC001.c ****   }
 960:../Dave/Generated/src/ADC001/ADC001.c ****   else
 961:../Dave/Generated/src/ADC001/ADC001.c ****   {
 962:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 963:../Dave/Generated/src/ADC001/ADC001.c ****   }
 964:../Dave/Generated/src/ADC001/ADC001.c **** 
 965:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1845              		.loc 1 965 0
 1846 0034 FB68     		ldr	r3, [r7, #12]
 966:../Dave/Generated/src/ADC001/ADC001.c **** }
 1847              		.loc 1 966 0
 1848 0036 1846     		mov	r0, r3
 1849 0038 07F11407 		add	r7, r7, #20
 1850 003c BD46     		mov	sp, r7
 1851 003e 80BC     		pop	{r7}
 1852 0040 7047     		bx	lr
 1853              		.cfi_endproc
 1854              	.LFE136:
 1856 0042 00BF     		.section	.text.ADC001_GenerateLoadEvent,"ax",%progbits
 1857              		.align	2
 1858              		.global	ADC001_GenerateLoadEvent
 1859              		.thumb
 1860              		.thumb_func
 1862              	ADC001_GenerateLoadEvent:
 1863              	.LFB137:
 967:../Dave/Generated/src/ADC001/ADC001.c **** 
 968:../Dave/Generated/src/ADC001/ADC001.c **** /* This function generates a load event.*/
 969:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GenerateLoadEvent(const ADC001_HandleType *HandlePtr)
 970:../Dave/Generated/src/ADC001/ADC001.c **** {
 1864              		.loc 1 970 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 16
 1867              		@ frame_needed = 1, uses_anonymous_args = 0
 1868              		@ link register save eliminated.
 1869 0000 80B4     		push	{r7}
 1870              	.LCFI59:
 1871              		.cfi_def_cfa_offset 4
 1872              		.cfi_offset 7, -4
 1873 0002 85B0     		sub	sp, sp, #20
 1874              	.LCFI60:
 1875              		.cfi_def_cfa_offset 24
 1876 0004 00AF     		add	r7, sp, #0
 1877              	.LCFI61:
 1878              		.cfi_def_cfa_register 7
 1879 0006 7860     		str	r0, [r7, #4]
 971:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1880              		.loc 1 971 0
 1881 0008 4FF00103 		mov	r3, #1
 1882 000c FB60     		str	r3, [r7, #12]
 972:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
 973:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 974:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1883              		.loc 1 974 0
 1884 000e 7B68     		ldr	r3, [r7, #4]
 1885 0010 1B6C     		ldr	r3, [r3, #64]
 1886 0012 BB60     		str	r3, [r7, #8]
 975:../Dave/Generated/src/ADC001/ADC001.c **** 
 976:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1887              		.loc 1 976 0
 1888 0014 7B68     		ldr	r3, [r7, #4]
 1889 0016 DB6B     		ldr	r3, [r3, #60]
 1890 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1891 001a 012B     		cmp	r3, #1
 1892 001c 0AD1     		bne	.L87
 977:../Dave/Generated/src/ADC001/ADC001.c ****   {
 978:../Dave/Generated/src/ADC001/ADC001.c ****     /* Generate load event */
 979:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_LDEV_Pos);
 1893              		.loc 1 979 0
 1894 001e BB68     		ldr	r3, [r7, #8]
 1895 0020 D3F80432 		ldr	r3, [r3, #516]
 1896 0024 43F40072 		orr	r2, r3, #512
 1897 0028 BB68     		ldr	r3, [r7, #8]
 1898 002a C3F80422 		str	r2, [r3, #516]
 980:../Dave/Generated/src/ADC001/ADC001.c **** 
 981:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1899              		.loc 1 981 0
 1900 002e 4FF00003 		mov	r3, #0
 1901 0032 FB60     		str	r3, [r7, #12]
 1902              	.L87:
 982:../Dave/Generated/src/ADC001/ADC001.c ****   }
 983:../Dave/Generated/src/ADC001/ADC001.c ****   else
 984:../Dave/Generated/src/ADC001/ADC001.c ****   {
 985:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 986:../Dave/Generated/src/ADC001/ADC001.c ****   }
 987:../Dave/Generated/src/ADC001/ADC001.c **** 
 988:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1903              		.loc 1 988 0
 1904 0034 FB68     		ldr	r3, [r7, #12]
 989:../Dave/Generated/src/ADC001/ADC001.c **** }
 1905              		.loc 1 989 0
 1906 0036 1846     		mov	r0, r3
 1907 0038 07F11407 		add	r7, r7, #20
 1908 003c BD46     		mov	sp, r7
 1909 003e 80BC     		pop	{r7}
 1910 0040 7047     		bx	lr
 1911              		.cfi_endproc
 1912              	.LFE137:
 1914 0042 00BF     		.section	.text.ADC001_EnableGate,"ax",%progbits
 1915              		.align	2
 1916              		.global	ADC001_EnableGate
 1917              		.thumb
 1918              		.thumb_func
 1920              	ADC001_EnableGate:
 1921              	.LFB138:
 990:../Dave/Generated/src/ADC001/ADC001.c **** 
 991:../Dave/Generated/src/ADC001/ADC001.c **** 
 992:../Dave/Generated/src/ADC001/ADC001.c **** /*
 993:../Dave/Generated/src/ADC001/ADC001.c ****  * This function enables the gating.
 994:../Dave/Generated/src/ADC001/ADC001.c ****  */
 995:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_EnableGate(const ADC001_HandleType *HandlePtr,
 996:../Dave/Generated/src/ADC001/ADC001.c ****                                                   uint8_t GateSelectVal)
 997:../Dave/Generated/src/ADC001/ADC001.c **** {
 1922              		.loc 1 997 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 16
 1925              		@ frame_needed = 1, uses_anonymous_args = 0
 1926              		@ link register save eliminated.
 1927 0000 80B4     		push	{r7}
 1928              	.LCFI62:
 1929              		.cfi_def_cfa_offset 4
 1930              		.cfi_offset 7, -4
 1931 0002 85B0     		sub	sp, sp, #20
 1932              	.LCFI63:
 1933              		.cfi_def_cfa_offset 24
 1934 0004 00AF     		add	r7, sp, #0
 1935              	.LCFI64:
 1936              		.cfi_def_cfa_register 7
 1937 0006 7860     		str	r0, [r7, #4]
 1938 0008 0B46     		mov	r3, r1
 1939 000a FB70     		strb	r3, [r7, #3]
 998:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 1940              		.loc 1 998 0
 1941 000c 4FF00103 		mov	r3, #1
 1942 0010 FB60     		str	r3, [r7, #12]
 999:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1000:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1001:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 1943              		.loc 1 1001 0
 1944 0012 7B68     		ldr	r3, [r7, #4]
 1945 0014 1B6C     		ldr	r3, [r3, #64]
 1946 0016 BB60     		str	r3, [r7, #8]
1002:../Dave/Generated/src/ADC001/ADC001.c **** 
1003:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 1947              		.loc 1 1003 0
 1948 0018 7B68     		ldr	r3, [r7, #4]
 1949 001a DB6B     		ldr	r3, [r3, #60]
 1950 001c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1951 001e 012B     		cmp	r3, #1
 1952 0020 15D1     		bne	.L90
1004:../Dave/Generated/src/ADC001/ADC001.c ****   {
1005:../Dave/Generated/src/ADC001/ADC001.c ****     if(GateSelectVal <= (uint8_t)ADC001_GATING_ENABLED_FOR_LOW)
 1953              		.loc 1 1005 0
 1954 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1955 0024 032B     		cmp	r3, #3
 1956 0026 0FD8     		bhi	.L91
1006:../Dave/Generated/src/ADC001/ADC001.c ****     {
1007:../Dave/Generated/src/ADC001/ADC001.c ****       /* Selects the gating functionality */
1008:../Dave/Generated/src/ADC001/ADC001.c ****      WR_REG(VADCGlobalPtr->BRSMR, VADC_BRSMR_ENGT_Msk, VADC_BRSMR_ENGT_Pos,
 1957              		.loc 1 1008 0
 1958 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1959 002a 03F00302 		and	r2, r3, #3
 1960 002e BB68     		ldr	r3, [r7, #8]
 1961 0030 D3F80432 		ldr	r3, [r3, #516]
 1962 0034 23F00303 		bic	r3, r3, #3
 1963 0038 1A43     		orrs	r2, r2, r3
 1964 003a BB68     		ldr	r3, [r7, #8]
 1965 003c C3F80422 		str	r2, [r3, #516]
1009:../Dave/Generated/src/ADC001/ADC001.c ****                                                       (uint8_t)GateSelectVal);
1010:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1966              		.loc 1 1010 0
 1967 0040 4FF00003 		mov	r3, #0
 1968 0044 FB60     		str	r3, [r7, #12]
 1969 0046 02E0     		b	.L90
 1970              	.L91:
1011:../Dave/Generated/src/ADC001/ADC001.c ****     }
1012:../Dave/Generated/src/ADC001/ADC001.c ****     else
1013:../Dave/Generated/src/ADC001/ADC001.c ****     {
1014:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 1971              		.loc 1 1014 0
 1972 0048 4FF00203 		mov	r3, #2
 1973 004c FB60     		str	r3, [r7, #12]
 1974              	.L90:
1015:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1016:../Dave/Generated/src/ADC001/ADC001.c ****     }
1017:../Dave/Generated/src/ADC001/ADC001.c ****   }
1018:../Dave/Generated/src/ADC001/ADC001.c ****   else
1019:../Dave/Generated/src/ADC001/ADC001.c ****   {
1020:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1021:../Dave/Generated/src/ADC001/ADC001.c ****   }
1022:../Dave/Generated/src/ADC001/ADC001.c **** 
1023:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 1975              		.loc 1 1023 0
 1976 004e FB68     		ldr	r3, [r7, #12]
1024:../Dave/Generated/src/ADC001/ADC001.c **** }
 1977              		.loc 1 1024 0
 1978 0050 1846     		mov	r0, r3
 1979 0052 07F11407 		add	r7, r7, #20
 1980 0056 BD46     		mov	sp, r7
 1981 0058 80BC     		pop	{r7}
 1982 005a 7047     		bx	lr
 1983              		.cfi_endproc
 1984              	.LFE138:
 1986              		.section	.text.ADC001_GetGateLevel,"ax",%progbits
 1987              		.align	2
 1988              		.global	ADC001_GetGateLevel
 1989              		.thumb
 1990              		.thumb_func
 1992              	ADC001_GetGateLevel:
 1993              	.LFB139:
1025:../Dave/Generated/src/ADC001/ADC001.c **** 
1026:../Dave/Generated/src/ADC001/ADC001.c **** 
1027:../Dave/Generated/src/ADC001/ADC001.c **** /**
1028:../Dave/Generated/src/ADC001/ADC001.c ****  * This function gives the selected gate input level.
1029:../Dave/Generated/src/ADC001/ADC001.c ****  */
1030:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_GetGateLevel(const ADC001_HandleType* HandlePtr,
1031:../Dave/Generated/src/ADC001/ADC001.c ****                                                             uint8_t* GeteLvlPtr)
1032:../Dave/Generated/src/ADC001/ADC001.c **** {
 1994              		.loc 1 1032 0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 16
 1997              		@ frame_needed = 1, uses_anonymous_args = 0
 1998              		@ link register save eliminated.
 1999 0000 80B4     		push	{r7}
 2000              	.LCFI65:
 2001              		.cfi_def_cfa_offset 4
 2002              		.cfi_offset 7, -4
 2003 0002 85B0     		sub	sp, sp, #20
 2004              	.LCFI66:
 2005              		.cfi_def_cfa_offset 24
 2006 0004 00AF     		add	r7, sp, #0
 2007              	.LCFI67:
 2008              		.cfi_def_cfa_register 7
 2009 0006 7860     		str	r0, [r7, #4]
 2010 0008 3960     		str	r1, [r7, #0]
1033:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2011              		.loc 1 1033 0
 2012 000a 4FF00103 		mov	r3, #1
 2013 000e FB60     		str	r3, [r7, #12]
1034:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1035:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1036:../Dave/Generated/src/ADC001/ADC001.c **** 
1037:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2014              		.loc 1 1037 0
 2015 0010 7B68     		ldr	r3, [r7, #4]
 2016 0012 1B6C     		ldr	r3, [r3, #64]
 2017 0014 BB60     		str	r3, [r7, #8]
1038:../Dave/Generated/src/ADC001/ADC001.c **** 
1039:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2018              		.loc 1 1039 0
 2019 0016 7B68     		ldr	r3, [r7, #4]
 2020 0018 DB6B     		ldr	r3, [r3, #60]
 2021 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2022 001c 012B     		cmp	r3, #1
 2023 001e 13D1     		bne	.L94
1040:../Dave/Generated/src/ADC001/ADC001.c ****   {
1041:../Dave/Generated/src/ADC001/ADC001.c ****     if(GeteLvlPtr != NULL)
 2024              		.loc 1 1041 0
 2025 0020 3B68     		ldr	r3, [r7, #0]
 2026 0022 002B     		cmp	r3, #0
 2027 0024 0DD0     		beq	.L95
1042:../Dave/Generated/src/ADC001/ADC001.c ****     {
1043:../Dave/Generated/src/ADC001/ADC001.c ****       *GeteLvlPtr = (uint8_t)RD_REG( VADCGlobalPtr->BRSMR,
 2028              		.loc 1 1043 0
 2029 0026 BB68     		ldr	r3, [r7, #8]
 2030 0028 D3F80432 		ldr	r3, [r3, #516]
 2031 002c 03F08003 		and	r3, r3, #128
 2032 0030 4FEAD313 		lsr	r3, r3, #7
 2033 0034 DAB2     		uxtb	r2, r3
 2034 0036 3B68     		ldr	r3, [r7, #0]
 2035 0038 1A70     		strb	r2, [r3, #0]
1044:../Dave/Generated/src/ADC001/ADC001.c ****                                      VADC_BRSMR_REQGT_Msk,
1045:../Dave/Generated/src/ADC001/ADC001.c ****                                      VADC_BRSMR_REQGT_Pos
1046:../Dave/Generated/src/ADC001/ADC001.c ****                                    );
1047:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2036              		.loc 1 1047 0
 2037 003a 4FF00003 		mov	r3, #0
 2038 003e FB60     		str	r3, [r7, #12]
 2039 0040 02E0     		b	.L94
 2040              	.L95:
1048:../Dave/Generated/src/ADC001/ADC001.c ****     }
1049:../Dave/Generated/src/ADC001/ADC001.c ****     else
1050:../Dave/Generated/src/ADC001/ADC001.c ****     {
1051:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2041              		.loc 1 1051 0
 2042 0042 4FF00203 		mov	r3, #2
 2043 0046 FB60     		str	r3, [r7, #12]
 2044              	.L94:
1052:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1053:../Dave/Generated/src/ADC001/ADC001.c ****     }
1054:../Dave/Generated/src/ADC001/ADC001.c ****   }
1055:../Dave/Generated/src/ADC001/ADC001.c ****   else
1056:../Dave/Generated/src/ADC001/ADC001.c ****   {
1057:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1058:../Dave/Generated/src/ADC001/ADC001.c ****   }
1059:../Dave/Generated/src/ADC001/ADC001.c **** 
1060:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2045              		.loc 1 1060 0
 2046 0048 FB68     		ldr	r3, [r7, #12]
1061:../Dave/Generated/src/ADC001/ADC001.c **** }
 2047              		.loc 1 1061 0
 2048 004a 1846     		mov	r0, r3
 2049 004c 07F11407 		add	r7, r7, #20
 2050 0050 BD46     		mov	sp, r7
 2051 0052 80BC     		pop	{r7}
 2052 0054 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE139:
 2056 0056 00BF     		.section	.text.ADC001_SetExternalTriggerMode,"ax",%progbits
 2057              		.align	2
 2058              		.global	ADC001_SetExternalTriggerMode
 2059              		.thumb
 2060              		.thumb_func
 2062              	ADC001_SetExternalTriggerMode:
 2063              	.LFB140:
1062:../Dave/Generated/src/ADC001/ADC001.c **** 
1063:../Dave/Generated/src/ADC001/ADC001.c **** 
1064:../Dave/Generated/src/ADC001/ADC001.c **** /*
1065:../Dave/Generated/src/ADC001/ADC001.c ****  * This function sets the external trigger mode.
1066:../Dave/Generated/src/ADC001/ADC001.c ****  */
1067:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetExternalTriggerMode(const ADC001_HandleType *HandlePtr,
1068:../Dave/Generated/src/ADC001/ADC001.c ****                                                          uint8_t TriggerMode)
1069:../Dave/Generated/src/ADC001/ADC001.c **** {
 2064              		.loc 1 1069 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 24
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0000 80B4     		push	{r7}
 2070              	.LCFI68:
 2071              		.cfi_def_cfa_offset 4
 2072              		.cfi_offset 7, -4
 2073 0002 87B0     		sub	sp, sp, #28
 2074              	.LCFI69:
 2075              		.cfi_def_cfa_offset 32
 2076 0004 00AF     		add	r7, sp, #0
 2077              	.LCFI70:
 2078              		.cfi_def_cfa_register 7
 2079 0006 7860     		str	r0, [r7, #4]
 2080 0008 0B46     		mov	r3, r1
 2081 000a FB70     		strb	r3, [r7, #3]
1070:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2082              		.loc 1 1070 0
 2083 000c 4FF00103 		mov	r3, #1
 2084 0010 7B61     		str	r3, [r7, #20]
1071:../Dave/Generated/src/ADC001/ADC001.c ****   uint32_t ModeSelect;
1072:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1073:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1074:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2085              		.loc 1 1074 0
 2086 0012 7B68     		ldr	r3, [r7, #4]
 2087 0014 1B6C     		ldr	r3, [r3, #64]
 2088 0016 3B61     		str	r3, [r7, #16]
1075:../Dave/Generated/src/ADC001/ADC001.c **** 
1076:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2089              		.loc 1 1076 0
 2090 0018 7B68     		ldr	r3, [r7, #4]
 2091 001a DB6B     		ldr	r3, [r3, #60]
 2092 001c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2093 001e 012B     		cmp	r3, #1
 2094 0020 31D1     		bne	.L98
1077:../Dave/Generated/src/ADC001/ADC001.c ****   {
1078:../Dave/Generated/src/ADC001/ADC001.c ****     if(TriggerMode <= (uint8_t)ADC001_TRIGGER_UPON_BOTH_EDGE)
 2095              		.loc 1 1078 0
 2096 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2097 0024 032B     		cmp	r3, #3
 2098 0026 2BD8     		bhi	.L99
1079:../Dave/Generated/src/ADC001/ADC001.c ****     {
1080:../Dave/Generated/src/ADC001/ADC001.c ****       if(TriggerMode == (uint8_t)ADC001_NOTRIGGER)
 2099              		.loc 1 1080 0
 2100 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2101 002a 002B     		cmp	r3, #0
 2102 002c 08D1     		bne	.L100
1081:../Dave/Generated/src/ADC001/ADC001.c ****       {
1082:../Dave/Generated/src/ADC001/ADC001.c ****         /* Disables external trigger */
1083:../Dave/Generated/src/ADC001/ADC001.c ****         CLR_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_ENTR_Pos);
 2103              		.loc 1 1083 0
 2104 002e 3B69     		ldr	r3, [r7, #16]
 2105 0030 D3F80432 		ldr	r3, [r3, #516]
 2106 0034 23F00402 		bic	r2, r3, #4
 2107 0038 3B69     		ldr	r3, [r7, #16]
 2108 003a C3F80422 		str	r2, [r3, #516]
 2109 003e 07E0     		b	.L101
 2110              	.L100:
1084:../Dave/Generated/src/ADC001/ADC001.c ****       }
1085:../Dave/Generated/src/ADC001/ADC001.c ****       else
1086:../Dave/Generated/src/ADC001/ADC001.c ****       {
1087:../Dave/Generated/src/ADC001/ADC001.c ****         /* Enables external trigger */
1088:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_ENTR_Pos);
 2111              		.loc 1 1088 0
 2112 0040 3B69     		ldr	r3, [r7, #16]
 2113 0042 D3F80432 		ldr	r3, [r3, #516]
 2114 0046 43F00402 		orr	r2, r3, #4
 2115 004a 3B69     		ldr	r3, [r7, #16]
 2116 004c C3F80422 		str	r2, [r3, #516]
 2117              	.L101:
1089:../Dave/Generated/src/ADC001/ADC001.c ****       }
1090:../Dave/Generated/src/ADC001/ADC001.c ****       /* Sets the external trigger mode */
1091:../Dave/Generated/src/ADC001/ADC001.c ****       ModeSelect = VADCGlobalPtr->BRSCTRL;
 2118              		.loc 1 1091 0
 2119 0050 3B69     		ldr	r3, [r7, #16]
 2120 0052 D3F80032 		ldr	r3, [r3, #512]
 2121 0056 FB60     		str	r3, [r7, #12]
1092:../Dave/Generated/src/ADC001/ADC001.c ****       ModeSelect &= ~VADC_BRSCTRL_XTMODE_Msk;
 2122              		.loc 1 1092 0
 2123 0058 FB68     		ldr	r3, [r7, #12]
 2124 005a 23F4C043 		bic	r3, r3, #24576
 2125 005e FB60     		str	r3, [r7, #12]
1093:../Dave/Generated/src/ADC001/ADC001.c ****       ModeSelect |= (uint32_t)(((uint32_t)1 << VADC_BRSCTRL_XTWC_Pos) |
1094:../Dave/Generated/src/ADC001/ADC001.c ****                 ((uint32_t)TriggerMode << VADC_BRSCTRL_XTMODE_Pos));
 2126              		.loc 1 1094 0
 2127 0060 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2128 0062 4FEA4332 		lsl	r2, r3, #13
1093:../Dave/Generated/src/ADC001/ADC001.c ****       ModeSelect |= (uint32_t)(((uint32_t)1 << VADC_BRSCTRL_XTWC_Pos) |
 2129              		.loc 1 1093 0
 2130 0066 FB68     		ldr	r3, [r7, #12]
 2131 0068 1343     		orrs	r3, r3, r2
 2132 006a 43F40043 		orr	r3, r3, #32768
 2133 006e FB60     		str	r3, [r7, #12]
1095:../Dave/Generated/src/ADC001/ADC001.c ****       VADCGlobalPtr->BRSCTRL = ModeSelect;
 2134              		.loc 1 1095 0
 2135 0070 3B69     		ldr	r3, [r7, #16]
 2136 0072 FA68     		ldr	r2, [r7, #12]
 2137 0074 C3F80022 		str	r2, [r3, #512]
1096:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2138              		.loc 1 1096 0
 2139 0078 4FF00003 		mov	r3, #0
 2140 007c 7B61     		str	r3, [r7, #20]
 2141 007e 02E0     		b	.L98
 2142              	.L99:
1097:../Dave/Generated/src/ADC001/ADC001.c ****     }
1098:../Dave/Generated/src/ADC001/ADC001.c ****     else
1099:../Dave/Generated/src/ADC001/ADC001.c ****     {
1100:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2143              		.loc 1 1100 0
 2144 0080 4FF00203 		mov	r3, #2
 2145 0084 7B61     		str	r3, [r7, #20]
 2146              	.L98:
1101:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1102:../Dave/Generated/src/ADC001/ADC001.c ****     }
1103:../Dave/Generated/src/ADC001/ADC001.c ****   }
1104:../Dave/Generated/src/ADC001/ADC001.c ****   else
1105:../Dave/Generated/src/ADC001/ADC001.c ****   {
1106:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1107:../Dave/Generated/src/ADC001/ADC001.c ****   }
1108:../Dave/Generated/src/ADC001/ADC001.c **** 
1109:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2147              		.loc 1 1109 0
 2148 0086 7B69     		ldr	r3, [r7, #20]
1110:../Dave/Generated/src/ADC001/ADC001.c **** }
 2149              		.loc 1 1110 0
 2150 0088 1846     		mov	r0, r3
 2151 008a 07F11C07 		add	r7, r7, #28
 2152 008e BD46     		mov	sp, r7
 2153 0090 80BC     		pop	{r7}
 2154 0092 7047     		bx	lr
 2155              		.cfi_endproc
 2156              	.LFE140:
 2158              		.section	.text.ADC001_EnableExternalTrigger,"ax",%progbits
 2159              		.align	2
 2160              		.global	ADC001_EnableExternalTrigger
 2161              		.thumb
 2162              		.thumb_func
 2164              	ADC001_EnableExternalTrigger:
 2165              	.LFB141:
1111:../Dave/Generated/src/ADC001/ADC001.c **** 
1112:../Dave/Generated/src/ADC001/ADC001.c **** 
1113:../Dave/Generated/src/ADC001/ADC001.c **** /*
1114:../Dave/Generated/src/ADC001/ADC001.c ****  * This function enables external trigger.
1115:../Dave/Generated/src/ADC001/ADC001.c ****  */
1116:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_EnableExternalTrigger(const ADC001_HandleType *HandlePtr)
1117:../Dave/Generated/src/ADC001/ADC001.c **** {
 2166              		.loc 1 1117 0
 2167              		.cfi_startproc
 2168              		@ args = 0, pretend = 0, frame = 16
 2169              		@ frame_needed = 1, uses_anonymous_args = 0
 2170              		@ link register save eliminated.
 2171 0000 80B4     		push	{r7}
 2172              	.LCFI71:
 2173              		.cfi_def_cfa_offset 4
 2174              		.cfi_offset 7, -4
 2175 0002 85B0     		sub	sp, sp, #20
 2176              	.LCFI72:
 2177              		.cfi_def_cfa_offset 24
 2178 0004 00AF     		add	r7, sp, #0
 2179              	.LCFI73:
 2180              		.cfi_def_cfa_register 7
 2181 0006 7860     		str	r0, [r7, #4]
1118:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2182              		.loc 1 1118 0
 2183 0008 4FF00103 		mov	r3, #1
 2184 000c FB60     		str	r3, [r7, #12]
1119:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1120:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1121:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2185              		.loc 1 1121 0
 2186 000e 7B68     		ldr	r3, [r7, #4]
 2187 0010 1B6C     		ldr	r3, [r3, #64]
 2188 0012 BB60     		str	r3, [r7, #8]
1122:../Dave/Generated/src/ADC001/ADC001.c **** 
1123:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2189              		.loc 1 1123 0
 2190 0014 7B68     		ldr	r3, [r7, #4]
 2191 0016 DB6B     		ldr	r3, [r3, #60]
 2192 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2193 001a 012B     		cmp	r3, #1
 2194 001c 0AD1     		bne	.L104
1124:../Dave/Generated/src/ADC001/ADC001.c ****   {
1125:../Dave/Generated/src/ADC001/ADC001.c ****     /* Enables external trigger */
1126:../Dave/Generated/src/ADC001/ADC001.c ****     SET_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_ENTR_Pos);
 2195              		.loc 1 1126 0
 2196 001e BB68     		ldr	r3, [r7, #8]
 2197 0020 D3F80432 		ldr	r3, [r3, #516]
 2198 0024 43F00402 		orr	r2, r3, #4
 2199 0028 BB68     		ldr	r3, [r7, #8]
 2200 002a C3F80422 		str	r2, [r3, #516]
1127:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2201              		.loc 1 1127 0
 2202 002e 4FF00003 		mov	r3, #0
 2203 0032 FB60     		str	r3, [r7, #12]
 2204              	.L104:
1128:../Dave/Generated/src/ADC001/ADC001.c ****   }
1129:../Dave/Generated/src/ADC001/ADC001.c ****   else
1130:../Dave/Generated/src/ADC001/ADC001.c ****   {
1131:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1132:../Dave/Generated/src/ADC001/ADC001.c ****   }
1133:../Dave/Generated/src/ADC001/ADC001.c **** 
1134:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2205              		.loc 1 1134 0
 2206 0034 FB68     		ldr	r3, [r7, #12]
1135:../Dave/Generated/src/ADC001/ADC001.c **** }
 2207              		.loc 1 1135 0
 2208 0036 1846     		mov	r0, r3
 2209 0038 07F11407 		add	r7, r7, #20
 2210 003c BD46     		mov	sp, r7
 2211 003e 80BC     		pop	{r7}
 2212 0040 7047     		bx	lr
 2213              		.cfi_endproc
 2214              	.LFE141:
 2216 0042 00BF     		.section	.text.ADC001_DisableExternalTrigger,"ax",%progbits
 2217              		.align	2
 2218              		.global	ADC001_DisableExternalTrigger
 2219              		.thumb
 2220              		.thumb_func
 2222              	ADC001_DisableExternalTrigger:
 2223              	.LFB142:
1136:../Dave/Generated/src/ADC001/ADC001.c **** 
1137:../Dave/Generated/src/ADC001/ADC001.c **** 
1138:../Dave/Generated/src/ADC001/ADC001.c **** /*
1139:../Dave/Generated/src/ADC001/ADC001.c ****  * This function disables external trigger.
1140:../Dave/Generated/src/ADC001/ADC001.c ****  */
1141:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_DisableExternalTrigger(const ADC001_HandleType *HandlePtr)
1142:../Dave/Generated/src/ADC001/ADC001.c **** {
 2224              		.loc 1 1142 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 16
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228              		@ link register save eliminated.
 2229 0000 80B4     		push	{r7}
 2230              	.LCFI74:
 2231              		.cfi_def_cfa_offset 4
 2232              		.cfi_offset 7, -4
 2233 0002 85B0     		sub	sp, sp, #20
 2234              	.LCFI75:
 2235              		.cfi_def_cfa_offset 24
 2236 0004 00AF     		add	r7, sp, #0
 2237              	.LCFI76:
 2238              		.cfi_def_cfa_register 7
 2239 0006 7860     		str	r0, [r7, #4]
1143:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2240              		.loc 1 1143 0
 2241 0008 4FF00103 		mov	r3, #1
 2242 000c FB60     		str	r3, [r7, #12]
1144:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1145:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1146:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2243              		.loc 1 1146 0
 2244 000e 7B68     		ldr	r3, [r7, #4]
 2245 0010 1B6C     		ldr	r3, [r3, #64]
 2246 0012 BB60     		str	r3, [r7, #8]
1147:../Dave/Generated/src/ADC001/ADC001.c **** 
1148:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2247              		.loc 1 1148 0
 2248 0014 7B68     		ldr	r3, [r7, #4]
 2249 0016 DB6B     		ldr	r3, [r3, #60]
 2250 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2251 001a 012B     		cmp	r3, #1
 2252 001c 0AD1     		bne	.L107
1149:../Dave/Generated/src/ADC001/ADC001.c ****   {
1150:../Dave/Generated/src/ADC001/ADC001.c ****     /* Disables external trigger */
1151:../Dave/Generated/src/ADC001/ADC001.c ****     CLR_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_ENTR_Pos);
 2253              		.loc 1 1151 0
 2254 001e BB68     		ldr	r3, [r7, #8]
 2255 0020 D3F80432 		ldr	r3, [r3, #516]
 2256 0024 23F00402 		bic	r2, r3, #4
 2257 0028 BB68     		ldr	r3, [r7, #8]
 2258 002a C3F80422 		str	r2, [r3, #516]
1152:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2259              		.loc 1 1152 0
 2260 002e 4FF00003 		mov	r3, #0
 2261 0032 FB60     		str	r3, [r7, #12]
 2262              	.L107:
1153:../Dave/Generated/src/ADC001/ADC001.c ****   }
1154:../Dave/Generated/src/ADC001/ADC001.c ****   else
1155:../Dave/Generated/src/ADC001/ADC001.c ****   {
1156:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1157:../Dave/Generated/src/ADC001/ADC001.c ****   }
1158:../Dave/Generated/src/ADC001/ADC001.c **** 
1159:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2263              		.loc 1 1159 0
 2264 0034 FB68     		ldr	r3, [r7, #12]
1160:../Dave/Generated/src/ADC001/ADC001.c **** }
 2265              		.loc 1 1160 0
 2266 0036 1846     		mov	r0, r3
 2267 0038 07F11407 		add	r7, r7, #20
 2268 003c BD46     		mov	sp, r7
 2269 003e 80BC     		pop	{r7}
 2270 0040 7047     		bx	lr
 2271              		.cfi_endproc
 2272              	.LFE142:
 2274 0042 00BF     		.section	.text.ADC001_EnableArbitrationSlot,"ax",%progbits
 2275              		.align	2
 2276              		.global	ADC001_EnableArbitrationSlot
 2277              		.thumb
 2278              		.thumb_func
 2280              	ADC001_EnableArbitrationSlot:
 2281              	.LFB143:
1161:../Dave/Generated/src/ADC001/ADC001.c **** 
1162:../Dave/Generated/src/ADC001/ADC001.c **** /*
1163:../Dave/Generated/src/ADC001/ADC001.c ****  * This function enables arbitration slot.
1164:../Dave/Generated/src/ADC001/ADC001.c ****  */
1165:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_EnableArbitrationSlot(const ADC001_HandleType *HandlePtr)
1166:../Dave/Generated/src/ADC001/ADC001.c **** {
 2282              		.loc 1 1166 0
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 32
 2285              		@ frame_needed = 1, uses_anonymous_args = 0
 2286              		@ link register save eliminated.
 2287 0000 80B4     		push	{r7}
 2288              	.LCFI77:
 2289              		.cfi_def_cfa_offset 4
 2290              		.cfi_offset 7, -4
 2291 0002 89B0     		sub	sp, sp, #36
 2292              	.LCFI78:
 2293              		.cfi_def_cfa_offset 40
 2294 0004 00AF     		add	r7, sp, #0
 2295              	.LCFI79:
 2296              		.cfi_def_cfa_register 7
 2297 0006 7860     		str	r0, [r7, #4]
1167:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2298              		.loc 1 1167 0
 2299 0008 4FF00103 		mov	r3, #1
 2300 000c FB61     		str	r3, [r7, #28]
1168:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupIdx;
1169:../Dave/Generated/src/ADC001/ADC001.c **** 
1170:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
1171:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
1172:../Dave/Generated/src/ADC001/ADC001.c **** 
1173:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 2301              		.loc 1 1173 0
 2302 000e 7B68     		ldr	r3, [r7, #4]
 2303 0010 5B6C     		ldr	r3, [r3, #68]
 2304 0012 BB60     		str	r3, [r7, #8]
1174:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 2305              		.loc 1 1174 0
 2306 0014 7B68     		ldr	r3, [r7, #4]
 2307 0016 9B6C     		ldr	r3, [r3, #72]
 2308 0018 FB60     		str	r3, [r7, #12]
1175:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 2309              		.loc 1 1175 0
 2310 001a 7B68     		ldr	r3, [r7, #4]
 2311 001c DB6C     		ldr	r3, [r3, #76]
 2312 001e 3B61     		str	r3, [r7, #16]
1176:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 2313              		.loc 1 1176 0
 2314 0020 7B68     		ldr	r3, [r7, #4]
 2315 0022 1B6D     		ldr	r3, [r3, #80]
 2316 0024 7B61     		str	r3, [r7, #20]
1177:../Dave/Generated/src/ADC001/ADC001.c **** 
1178:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2317              		.loc 1 1178 0
 2318 0026 7B68     		ldr	r3, [r7, #4]
 2319 0028 DB6B     		ldr	r3, [r3, #60]
 2320 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2321 002c 012B     		cmp	r3, #1
 2322 002e 2AD1     		bne	.L110
1179:../Dave/Generated/src/ADC001/ADC001.c ****   {
1180:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2323              		.loc 1 1180 0
 2324 0030 4FF00003 		mov	r3, #0
 2325 0034 FB76     		strb	r3, [r7, #27]
 2326 0036 20E0     		b	.L111
 2327              	.L113:
1181:../Dave/Generated/src/ADC001/ADC001.c ****     {
1182:../Dave/Generated/src/ADC001/ADC001.c ****       if(HandlePtr->kActiveGroups[GroupIdx] == (uint8_t)1)
 2328              		.loc 1 1182 0
 2329 0038 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2330 003a 7A68     		ldr	r2, [r7, #4]
 2331 003c D318     		adds	r3, r2, r3
 2332 003e 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2333 0042 012B     		cmp	r3, #1
 2334 0044 15D1     		bne	.L112
1183:../Dave/Generated/src/ADC001/ADC001.c ****       {
1184:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT(VADCGroupPtr[GroupIdx]->ARBPR, VADC_G_ARBPR_ASEN2_Pos);
 2335              		.loc 1 1184 0
 2336 0046 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2337 0048 4FEA8303 		lsl	r3, r3, #2
 2338 004c 07F12001 		add	r1, r7, #32
 2339 0050 CB18     		adds	r3, r1, r3
 2340 0052 53F8182C 		ldr	r2, [r3, #-24]
 2341 0056 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2342 0058 4FEA8303 		lsl	r3, r3, #2
 2343 005c 07F12001 		add	r1, r7, #32
 2344 0060 CB18     		adds	r3, r1, r3
 2345 0062 53F8183C 		ldr	r3, [r3, #-24]
 2346 0066 D3F88430 		ldr	r3, [r3, #132]
 2347 006a 43F08063 		orr	r3, r3, #67108864
 2348 006e C2F88430 		str	r3, [r2, #132]
 2349              	.L112:
1180:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2350              		.loc 1 1180 0
 2351 0072 FB7E     		ldrb	r3, [r7, #27]
 2352 0074 03F10103 		add	r3, r3, #1
 2353 0078 FB76     		strb	r3, [r7, #27]
 2354              	.L111:
1180:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2355              		.loc 1 1180 0 is_stmt 0 discriminator 1
 2356 007a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2357 007c 032B     		cmp	r3, #3
 2358 007e DBD9     		bls	.L113
1185:../Dave/Generated/src/ADC001/ADC001.c ****       }
1186:../Dave/Generated/src/ADC001/ADC001.c ****     }
1187:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2359              		.loc 1 1187 0 is_stmt 1
 2360 0080 4FF00003 		mov	r3, #0
 2361 0084 FB61     		str	r3, [r7, #28]
 2362              	.L110:
1188:../Dave/Generated/src/ADC001/ADC001.c ****   }
1189:../Dave/Generated/src/ADC001/ADC001.c ****   else
1190:../Dave/Generated/src/ADC001/ADC001.c ****   {
1191:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1192:../Dave/Generated/src/ADC001/ADC001.c ****   }
1193:../Dave/Generated/src/ADC001/ADC001.c **** 
1194:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2363              		.loc 1 1194 0
 2364 0086 FB69     		ldr	r3, [r7, #28]
1195:../Dave/Generated/src/ADC001/ADC001.c **** }
 2365              		.loc 1 1195 0
 2366 0088 1846     		mov	r0, r3
 2367 008a 07F12407 		add	r7, r7, #36
 2368 008e BD46     		mov	sp, r7
 2369 0090 80BC     		pop	{r7}
 2370 0092 7047     		bx	lr
 2371              		.cfi_endproc
 2372              	.LFE143:
 2374              		.section	.text.ADC001_DisableArbitrationSlot,"ax",%progbits
 2375              		.align	2
 2376              		.global	ADC001_DisableArbitrationSlot
 2377              		.thumb
 2378              		.thumb_func
 2380              	ADC001_DisableArbitrationSlot:
 2381              	.LFB144:
1196:../Dave/Generated/src/ADC001/ADC001.c **** 
1197:../Dave/Generated/src/ADC001/ADC001.c **** 
1198:../Dave/Generated/src/ADC001/ADC001.c **** /*
1199:../Dave/Generated/src/ADC001/ADC001.c ****  * This function disables external trigger.
1200:../Dave/Generated/src/ADC001/ADC001.c ****  */
1201:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_DisableArbitrationSlot(const ADC001_HandleType *HandlePtr)
1202:../Dave/Generated/src/ADC001/ADC001.c **** {
 2382              		.loc 1 1202 0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 32
 2385              		@ frame_needed = 1, uses_anonymous_args = 0
 2386              		@ link register save eliminated.
 2387 0000 80B4     		push	{r7}
 2388              	.LCFI80:
 2389              		.cfi_def_cfa_offset 4
 2390              		.cfi_offset 7, -4
 2391 0002 89B0     		sub	sp, sp, #36
 2392              	.LCFI81:
 2393              		.cfi_def_cfa_offset 40
 2394 0004 00AF     		add	r7, sp, #0
 2395              	.LCFI82:
 2396              		.cfi_def_cfa_register 7
 2397 0006 7860     		str	r0, [r7, #4]
1203:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2398              		.loc 1 1203 0
 2399 0008 4FF00103 		mov	r3, #1
 2400 000c FB61     		str	r3, [r7, #28]
1204:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupIdx;
1205:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
1206:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
1207:../Dave/Generated/src/ADC001/ADC001.c **** 
1208:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 2401              		.loc 1 1208 0
 2402 000e 7B68     		ldr	r3, [r7, #4]
 2403 0010 5B6C     		ldr	r3, [r3, #68]
 2404 0012 BB60     		str	r3, [r7, #8]
1209:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 2405              		.loc 1 1209 0
 2406 0014 7B68     		ldr	r3, [r7, #4]
 2407 0016 9B6C     		ldr	r3, [r3, #72]
 2408 0018 FB60     		str	r3, [r7, #12]
1210:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 2409              		.loc 1 1210 0
 2410 001a 7B68     		ldr	r3, [r7, #4]
 2411 001c DB6C     		ldr	r3, [r3, #76]
 2412 001e 3B61     		str	r3, [r7, #16]
1211:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 2413              		.loc 1 1211 0
 2414 0020 7B68     		ldr	r3, [r7, #4]
 2415 0022 1B6D     		ldr	r3, [r3, #80]
 2416 0024 7B61     		str	r3, [r7, #20]
1212:../Dave/Generated/src/ADC001/ADC001.c **** 
1213:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2417              		.loc 1 1213 0
 2418 0026 7B68     		ldr	r3, [r7, #4]
 2419 0028 DB6B     		ldr	r3, [r3, #60]
 2420 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2421 002c 012B     		cmp	r3, #1
 2422 002e 2AD1     		bne	.L116
1214:../Dave/Generated/src/ADC001/ADC001.c ****   {
1215:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2423              		.loc 1 1215 0
 2424 0030 4FF00003 		mov	r3, #0
 2425 0034 FB76     		strb	r3, [r7, #27]
 2426 0036 20E0     		b	.L117
 2427              	.L119:
1216:../Dave/Generated/src/ADC001/ADC001.c ****     {
1217:../Dave/Generated/src/ADC001/ADC001.c ****       if(HandlePtr->kActiveGroups[GroupIdx] == (uint8_t)1)
 2428              		.loc 1 1217 0
 2429 0038 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2430 003a 7A68     		ldr	r2, [r7, #4]
 2431 003c D318     		adds	r3, r2, r3
 2432 003e 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2433 0042 012B     		cmp	r3, #1
 2434 0044 15D1     		bne	.L118
1218:../Dave/Generated/src/ADC001/ADC001.c ****       {
1219:../Dave/Generated/src/ADC001/ADC001.c ****         CLR_BIT(VADCGroupPtr[GroupIdx]->ARBPR, VADC_G_ARBPR_ASEN2_Pos);
 2435              		.loc 1 1219 0
 2436 0046 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2437 0048 4FEA8303 		lsl	r3, r3, #2
 2438 004c 07F12001 		add	r1, r7, #32
 2439 0050 CB18     		adds	r3, r1, r3
 2440 0052 53F8182C 		ldr	r2, [r3, #-24]
 2441 0056 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2442 0058 4FEA8303 		lsl	r3, r3, #2
 2443 005c 07F12001 		add	r1, r7, #32
 2444 0060 CB18     		adds	r3, r1, r3
 2445 0062 53F8183C 		ldr	r3, [r3, #-24]
 2446 0066 D3F88430 		ldr	r3, [r3, #132]
 2447 006a 23F08063 		bic	r3, r3, #67108864
 2448 006e C2F88430 		str	r3, [r2, #132]
 2449              	.L118:
1215:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2450              		.loc 1 1215 0
 2451 0072 FB7E     		ldrb	r3, [r7, #27]
 2452 0074 03F10103 		add	r3, r3, #1
 2453 0078 FB76     		strb	r3, [r7, #27]
 2454              	.L117:
1215:../Dave/Generated/src/ADC001/ADC001.c ****     for(GroupIdx = (uint8_t)0; GroupIdx < (uint8_t)ADC001_MAX_ADC_GROUP; GroupIdx++)
 2455              		.loc 1 1215 0 is_stmt 0 discriminator 1
 2456 007a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2457 007c 032B     		cmp	r3, #3
 2458 007e DBD9     		bls	.L119
1220:../Dave/Generated/src/ADC001/ADC001.c ****       }
1221:../Dave/Generated/src/ADC001/ADC001.c ****     }
1222:../Dave/Generated/src/ADC001/ADC001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2459              		.loc 1 1222 0 is_stmt 1
 2460 0080 4FF00003 		mov	r3, #0
 2461 0084 FB61     		str	r3, [r7, #28]
 2462              	.L116:
1223:../Dave/Generated/src/ADC001/ADC001.c ****   }
1224:../Dave/Generated/src/ADC001/ADC001.c ****   else
1225:../Dave/Generated/src/ADC001/ADC001.c ****   {
1226:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1227:../Dave/Generated/src/ADC001/ADC001.c ****   }
1228:../Dave/Generated/src/ADC001/ADC001.c **** 
1229:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2463              		.loc 1 1229 0
 2464 0086 FB69     		ldr	r3, [r7, #28]
1230:../Dave/Generated/src/ADC001/ADC001.c **** }
 2465              		.loc 1 1230 0
 2466 0088 1846     		mov	r0, r3
 2467 008a 07F12407 		add	r7, r7, #36
 2468 008e BD46     		mov	sp, r7
 2469 0090 80BC     		pop	{r7}
 2470 0092 7047     		bx	lr
 2471              		.cfi_endproc
 2472              	.LFE144:
 2474              		.section	.text.ADC001_SetLoadEventMode,"ax",%progbits
 2475              		.align	2
 2476              		.global	ADC001_SetLoadEventMode
 2477              		.thumb
 2478              		.thumb_func
 2480              	ADC001_SetLoadEventMode:
 2481              	.LFB145:
1231:../Dave/Generated/src/ADC001/ADC001.c **** /*
1232:../Dave/Generated/src/ADC001/ADC001.c ****  * This function sets the Autoscan Source Load Event Mode.
1233:../Dave/Generated/src/ADC001/ADC001.c ****  * Overwrite Mode or Combine Mode can be selected.
1234:../Dave/Generated/src/ADC001/ADC001.c ****  */
1235:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetLoadEventMode(const ADC001_HandleType *HandlePtr,
1236:../Dave/Generated/src/ADC001/ADC001.c ****                                                             uint8_t EventMode)
1237:../Dave/Generated/src/ADC001/ADC001.c **** {
 2482              		.loc 1 1237 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 16
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
 2487 0000 80B4     		push	{r7}
 2488              	.LCFI83:
 2489              		.cfi_def_cfa_offset 4
 2490              		.cfi_offset 7, -4
 2491 0002 85B0     		sub	sp, sp, #20
 2492              	.LCFI84:
 2493              		.cfi_def_cfa_offset 24
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI85:
 2496              		.cfi_def_cfa_register 7
 2497 0006 7860     		str	r0, [r7, #4]
 2498 0008 0B46     		mov	r3, r1
 2499 000a FB70     		strb	r3, [r7, #3]
1238:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2500              		.loc 1 1238 0
 2501 000c 4FF00103 		mov	r3, #1
 2502 0010 FB60     		str	r3, [r7, #12]
1239:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1240:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1241:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2503              		.loc 1 1241 0
 2504 0012 7B68     		ldr	r3, [r7, #4]
 2505 0014 1B6C     		ldr	r3, [r3, #64]
 2506 0016 BB60     		str	r3, [r7, #8]
1242:../Dave/Generated/src/ADC001/ADC001.c **** 
1243:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2507              		.loc 1 1243 0
 2508 0018 7B68     		ldr	r3, [r7, #4]
 2509 001a DB6B     		ldr	r3, [r3, #60]
 2510 001c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2511 001e 012B     		cmp	r3, #1
 2512 0020 20D1     		bne	.L122
1244:../Dave/Generated/src/ADC001/ADC001.c ****   {
1245:../Dave/Generated/src/ADC001/ADC001.c ****     if(EventMode == (uint8_t)ADC001_OVERWRITE_MODE)
 2513              		.loc 1 1245 0
 2514 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2515 0024 002B     		cmp	r3, #0
 2516 0026 0BD1     		bne	.L123
1246:../Dave/Generated/src/ADC001/ADC001.c ****     {
1247:../Dave/Generated/src/ADC001/ADC001.c ****       /* Set OverWrite Mode */
1248:../Dave/Generated/src/ADC001/ADC001.c ****       CLR_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_LDM_Pos);
 2517              		.loc 1 1248 0
 2518 0028 BB68     		ldr	r3, [r7, #8]
 2519 002a D3F80432 		ldr	r3, [r3, #516]
 2520 002e 23F02002 		bic	r2, r3, #32
 2521 0032 BB68     		ldr	r3, [r7, #8]
 2522 0034 C3F80422 		str	r2, [r3, #516]
1249:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2523              		.loc 1 1249 0
 2524 0038 4FF00003 		mov	r3, #0
 2525 003c FB60     		str	r3, [r7, #12]
 2526 003e 11E0     		b	.L122
 2527              	.L123:
1250:../Dave/Generated/src/ADC001/ADC001.c ****     }
1251:../Dave/Generated/src/ADC001/ADC001.c ****     else if(EventMode == (uint8_t)ADC001_COMBINE_MODE)
 2528              		.loc 1 1251 0
 2529 0040 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2530 0042 012B     		cmp	r3, #1
 2531 0044 0BD1     		bne	.L124
1252:../Dave/Generated/src/ADC001/ADC001.c ****     {
1253:../Dave/Generated/src/ADC001/ADC001.c ****       /* Set Combine Mode */
1254:../Dave/Generated/src/ADC001/ADC001.c ****       SET_BIT(VADCGlobalPtr->BRSMR, VADC_BRSMR_LDM_Pos);
 2532              		.loc 1 1254 0
 2533 0046 BB68     		ldr	r3, [r7, #8]
 2534 0048 D3F80432 		ldr	r3, [r3, #516]
 2535 004c 43F02002 		orr	r2, r3, #32
 2536 0050 BB68     		ldr	r3, [r7, #8]
 2537 0052 C3F80422 		str	r2, [r3, #516]
1255:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2538              		.loc 1 1255 0
 2539 0056 4FF00003 		mov	r3, #0
 2540 005a FB60     		str	r3, [r7, #12]
 2541 005c 02E0     		b	.L122
 2542              	.L124:
1256:../Dave/Generated/src/ADC001/ADC001.c ****     }
1257:../Dave/Generated/src/ADC001/ADC001.c ****     else
1258:../Dave/Generated/src/ADC001/ADC001.c ****     {
1259:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2543              		.loc 1 1259 0
 2544 005e 4FF00203 		mov	r3, #2
 2545 0062 FB60     		str	r3, [r7, #12]
 2546              	.L122:
1260:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1261:../Dave/Generated/src/ADC001/ADC001.c ****     }
1262:../Dave/Generated/src/ADC001/ADC001.c ****   }
1263:../Dave/Generated/src/ADC001/ADC001.c ****   else
1264:../Dave/Generated/src/ADC001/ADC001.c ****   {
1265:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1266:../Dave/Generated/src/ADC001/ADC001.c ****   }
1267:../Dave/Generated/src/ADC001/ADC001.c **** 
1268:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2547              		.loc 1 1268 0
 2548 0064 FB68     		ldr	r3, [r7, #12]
1269:../Dave/Generated/src/ADC001/ADC001.c **** }
 2549              		.loc 1 1269 0
 2550 0066 1846     		mov	r0, r3
 2551 0068 07F11407 		add	r7, r7, #20
 2552 006c BD46     		mov	sp, r7
 2553 006e 80BC     		pop	{r7}
 2554 0070 7047     		bx	lr
 2555              		.cfi_endproc
 2556              	.LFE145:
 2558 0072 00BF     		.section	.text.ADC001_SetPendingChannel,"ax",%progbits
 2559              		.align	2
 2560              		.global	ADC001_SetPendingChannel
 2561              		.thumb
 2562              		.thumb_func
 2564              	ADC001_SetPendingChannel:
 2565              	.LFB146:
1270:../Dave/Generated/src/ADC001/ADC001.c **** 
1271:../Dave/Generated/src/ADC001/ADC001.c **** 
1272:../Dave/Generated/src/ADC001/ADC001.c **** /*
1273:../Dave/Generated/src/ADC001/ADC001.c ****  * This function sets the required channel in channel pending register.
1274:../Dave/Generated/src/ADC001/ADC001.c ****  */
1275:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetPendingChannel(const ADC001_HandleType *HandlePtr,
1276:../Dave/Generated/src/ADC001/ADC001.c ****                                   const ADC001_ChannelHandleType* ChannelPtr)
1277:../Dave/Generated/src/ADC001/ADC001.c **** {
 2566              		.loc 1 1277 0
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 24
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570              		@ link register save eliminated.
 2571 0000 80B4     		push	{r7}
 2572              	.LCFI86:
 2573              		.cfi_def_cfa_offset 4
 2574              		.cfi_offset 7, -4
 2575 0002 87B0     		sub	sp, sp, #28
 2576              	.LCFI87:
 2577              		.cfi_def_cfa_offset 32
 2578 0004 00AF     		add	r7, sp, #0
 2579              	.LCFI88:
 2580              		.cfi_def_cfa_register 7
 2581 0006 7860     		str	r0, [r7, #4]
 2582 0008 3960     		str	r1, [r7, #0]
1278:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2583              		.loc 1 1278 0
 2584 000a 4FF00103 		mov	r3, #1
 2585 000e 7B61     		str	r3, [r7, #20]
1279:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1280:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1281:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
1282:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
1283:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNoAct;
1284:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNoAct;
1285:../Dave/Generated/src/ADC001/ADC001.c **** 
1286:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2586              		.loc 1 1286 0
 2587 0010 7B68     		ldr	r3, [r7, #4]
 2588 0012 1B6C     		ldr	r3, [r3, #64]
 2589 0014 3B61     		str	r3, [r7, #16]
1287:../Dave/Generated/src/ADC001/ADC001.c **** 
1288:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2590              		.loc 1 1288 0
 2591 0016 7B68     		ldr	r3, [r7, #4]
 2592 0018 DB6B     		ldr	r3, [r3, #60]
 2593 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2594 001c 012B     		cmp	r3, #1
 2595 001e 42D1     		bne	.L127
1289:../Dave/Generated/src/ADC001/ADC001.c ****   {
1290:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 2596              		.loc 1 1290 0
 2597 0020 3B68     		ldr	r3, [r7, #0]
 2598 0022 002B     		cmp	r3, #0
 2599 0024 3CD0     		beq	.L128
1291:../Dave/Generated/src/ADC001/ADC001.c ****     {
1292:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 2600              		.loc 1 1292 0
 2601 0026 3B68     		ldr	r3, [r7, #0]
 2602 0028 1B78     		ldrb	r3, [r3, #0]
 2603 002a FB73     		strb	r3, [r7, #15]
1293:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 2604              		.loc 1 1293 0
 2605 002c 3B68     		ldr	r3, [r7, #0]
 2606 002e 5B78     		ldrb	r3, [r3, #1]
 2607 0030 BB73     		strb	r3, [r7, #14]
1294:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNoAct = HandlePtr->kActiveGroups[GroupNo];
 2608              		.loc 1 1294 0
 2609 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2610 0034 7A68     		ldr	r2, [r7, #4]
 2611 0036 D318     		adds	r3, r2, r3
 2612 0038 93F82A30 		ldrb	r3, [r3, #42]
 2613 003c 7B73     		strb	r3, [r7, #13]
1295:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNoAct = HandlePtr->kActiveChannels[GroupNo][ChannelNo];
 2614              		.loc 1 1295 0
 2615 003e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2616 0040 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2617 0042 7968     		ldr	r1, [r7, #4]
 2618 0044 4FEAC202 		lsl	r2, r2, #3
 2619 0048 8A18     		adds	r2, r1, r2
 2620 004a D318     		adds	r3, r2, r3
 2621 004c 03F10803 		add	r3, r3, #8
 2622 0050 9B78     		ldrb	r3, [r3, #2]
 2623 0052 3B73     		strb	r3, [r7, #12]
1296:../Dave/Generated/src/ADC001/ADC001.c **** 
1297:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo <= (uint8_t)ADC001_MAX_ADC_GROUP) &&
 2624              		.loc 1 1297 0
 2625 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2626 0056 042B     		cmp	r3, #4
 2627 0058 1ED8     		bhi	.L129
 2628              		.loc 1 1297 0 is_stmt 0 discriminator 1
 2629 005a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2630 005c 082B     		cmp	r3, #8
 2631 005e 1BD8     		bhi	.L129
1298:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo <= (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 2632              		.loc 1 1298 0 is_stmt 1
 2633 0060 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2634 0062 012B     		cmp	r3, #1
 2635 0064 18D1     		bne	.L129
1299:../Dave/Generated/src/ADC001/ADC001.c ****             (GroupNoAct == (uint8_t)1) && (ChannelNoAct == (uint8_t)1))
 2636              		.loc 1 1299 0
 2637 0066 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2638 0068 012B     		cmp	r3, #1
 2639 006a 15D1     		bne	.L129
1300:../Dave/Generated/src/ADC001/ADC001.c ****       {
1301:../Dave/Generated/src/ADC001/ADC001.c ****         /*set the channel*/
1302:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT(VADCGlobalPtr->BRSPND[GroupNo], ChannelNo);
 2640              		.loc 1 1302 0
 2641 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2642 006e F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2643 0070 3B69     		ldr	r3, [r7, #16]
 2644 0072 01F17001 		add	r1, r1, #112
 2645 0076 53F82110 		ldr	r1, [r3, r1, lsl #2]
 2646 007a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2647 007c 4FF00100 		mov	r0, #1
 2648 0080 00FA03F3 		lsl	r3, r0, r3
 2649 0084 1943     		orrs	r1, r1, r3
 2650 0086 3B69     		ldr	r3, [r7, #16]
 2651 0088 02F17002 		add	r2, r2, #112
 2652 008c 43F82210 		str	r1, [r3, r2, lsl #2]
1303:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2653              		.loc 1 1303 0
 2654 0090 4FF00003 		mov	r3, #0
 2655 0094 7B61     		str	r3, [r7, #20]
 2656 0096 06E0     		b	.L127
 2657              	.L129:
1304:../Dave/Generated/src/ADC001/ADC001.c ****       }
1305:../Dave/Generated/src/ADC001/ADC001.c ****       else
1306:../Dave/Generated/src/ADC001/ADC001.c ****       {
1307:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2658              		.loc 1 1307 0
 2659 0098 4FF00203 		mov	r3, #2
 2660 009c 7B61     		str	r3, [r7, #20]
 2661 009e 02E0     		b	.L127
 2662              	.L128:
1308:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1309:../Dave/Generated/src/ADC001/ADC001.c ****       }
1310:../Dave/Generated/src/ADC001/ADC001.c ****     }
1311:../Dave/Generated/src/ADC001/ADC001.c ****     else
1312:../Dave/Generated/src/ADC001/ADC001.c ****     {
1313:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2663              		.loc 1 1313 0
 2664 00a0 4FF00203 		mov	r3, #2
 2665 00a4 7B61     		str	r3, [r7, #20]
 2666              	.L127:
1314:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1315:../Dave/Generated/src/ADC001/ADC001.c ****     }
1316:../Dave/Generated/src/ADC001/ADC001.c ****   }
1317:../Dave/Generated/src/ADC001/ADC001.c ****   else
1318:../Dave/Generated/src/ADC001/ADC001.c ****   {
1319:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1320:../Dave/Generated/src/ADC001/ADC001.c ****   }
1321:../Dave/Generated/src/ADC001/ADC001.c **** 
1322:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2667              		.loc 1 1322 0
 2668 00a6 7B69     		ldr	r3, [r7, #20]
1323:../Dave/Generated/src/ADC001/ADC001.c **** }
 2669              		.loc 1 1323 0
 2670 00a8 1846     		mov	r0, r3
 2671 00aa 07F11C07 		add	r7, r7, #28
 2672 00ae BD46     		mov	sp, r7
 2673 00b0 80BC     		pop	{r7}
 2674 00b2 7047     		bx	lr
 2675              		.cfi_endproc
 2676              	.LFE146:
 2678              		.section	.text.ADC001_ClearPendingChannel,"ax",%progbits
 2679              		.align	2
 2680              		.global	ADC001_ClearPendingChannel
 2681              		.thumb
 2682              		.thumb_func
 2684              	ADC001_ClearPendingChannel:
 2685              	.LFB147:
1324:../Dave/Generated/src/ADC001/ADC001.c **** 
1325:../Dave/Generated/src/ADC001/ADC001.c **** /*
1326:../Dave/Generated/src/ADC001/ADC001.c ****  * This function clears the required channel in channel pending register.
1327:../Dave/Generated/src/ADC001/ADC001.c ****  */
1328:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearPendingChannel(const ADC001_HandleType *HandlePtr,
1329:../Dave/Generated/src/ADC001/ADC001.c ****                                     const ADC001_ChannelHandleType* ChannelPtr)
1330:../Dave/Generated/src/ADC001/ADC001.c **** {
 2686              		.loc 1 1330 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 24
 2689              		@ frame_needed = 1, uses_anonymous_args = 0
 2690              		@ link register save eliminated.
 2691 0000 80B4     		push	{r7}
 2692              	.LCFI89:
 2693              		.cfi_def_cfa_offset 4
 2694              		.cfi_offset 7, -4
 2695 0002 87B0     		sub	sp, sp, #28
 2696              	.LCFI90:
 2697              		.cfi_def_cfa_offset 32
 2698 0004 00AF     		add	r7, sp, #0
 2699              	.LCFI91:
 2700              		.cfi_def_cfa_register 7
 2701 0006 7860     		str	r0, [r7, #4]
 2702 0008 3960     		str	r1, [r7, #0]
1331:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2703              		.loc 1 1331 0
 2704 000a 4FF00103 		mov	r3, #1
 2705 000e 7B61     		str	r3, [r7, #20]
1332:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1333:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1334:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
1335:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
1336:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNoAct;
1337:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNoAct;
1338:../Dave/Generated/src/ADC001/ADC001.c **** 
1339:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2706              		.loc 1 1339 0
 2707 0010 7B68     		ldr	r3, [r7, #4]
 2708 0012 1B6C     		ldr	r3, [r3, #64]
 2709 0014 3B61     		str	r3, [r7, #16]
1340:../Dave/Generated/src/ADC001/ADC001.c **** 
1341:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2710              		.loc 1 1341 0
 2711 0016 7B68     		ldr	r3, [r7, #4]
 2712 0018 DB6B     		ldr	r3, [r3, #60]
 2713 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2714 001c 012B     		cmp	r3, #1
 2715 001e 44D1     		bne	.L133
1342:../Dave/Generated/src/ADC001/ADC001.c ****   {
1343:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 2716              		.loc 1 1343 0
 2717 0020 3B68     		ldr	r3, [r7, #0]
 2718 0022 002B     		cmp	r3, #0
 2719 0024 3ED0     		beq	.L134
1344:../Dave/Generated/src/ADC001/ADC001.c ****     {
1345:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 2720              		.loc 1 1345 0
 2721 0026 3B68     		ldr	r3, [r7, #0]
 2722 0028 1B78     		ldrb	r3, [r3, #0]
 2723 002a FB73     		strb	r3, [r7, #15]
1346:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 2724              		.loc 1 1346 0
 2725 002c 3B68     		ldr	r3, [r7, #0]
 2726 002e 5B78     		ldrb	r3, [r3, #1]
 2727 0030 BB73     		strb	r3, [r7, #14]
1347:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNoAct = HandlePtr->kActiveGroups[GroupNo];
 2728              		.loc 1 1347 0
 2729 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2730 0034 7A68     		ldr	r2, [r7, #4]
 2731 0036 D318     		adds	r3, r2, r3
 2732 0038 93F82A30 		ldrb	r3, [r3, #42]
 2733 003c 7B73     		strb	r3, [r7, #13]
1348:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNoAct = HandlePtr->kActiveChannels[GroupNo][ChannelNo];
 2734              		.loc 1 1348 0
 2735 003e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2736 0040 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2737 0042 7968     		ldr	r1, [r7, #4]
 2738 0044 4FEAC202 		lsl	r2, r2, #3
 2739 0048 8A18     		adds	r2, r1, r2
 2740 004a D318     		adds	r3, r2, r3
 2741 004c 03F10803 		add	r3, r3, #8
 2742 0050 9B78     		ldrb	r3, [r3, #2]
 2743 0052 3B73     		strb	r3, [r7, #12]
1349:../Dave/Generated/src/ADC001/ADC001.c **** 
1350:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo <= (uint8_t)ADC001_MAX_ADC_GROUP) &&
 2744              		.loc 1 1350 0
 2745 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2746 0056 042B     		cmp	r3, #4
 2747 0058 20D8     		bhi	.L135
 2748              		.loc 1 1350 0 is_stmt 0 discriminator 1
 2749 005a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2750 005c 082B     		cmp	r3, #8
 2751 005e 1DD8     		bhi	.L135
1351:../Dave/Generated/src/ADC001/ADC001.c ****             (ChannelNo <= (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 2752              		.loc 1 1351 0 is_stmt 1
 2753 0060 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2754 0062 012B     		cmp	r3, #1
 2755 0064 1AD1     		bne	.L135
1352:../Dave/Generated/src/ADC001/ADC001.c ****               (GroupNoAct == (uint8_t)1) &&(ChannelNoAct == (uint8_t)1))
 2756              		.loc 1 1352 0
 2757 0066 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2758 0068 012B     		cmp	r3, #1
 2759 006a 17D1     		bne	.L135
1353:../Dave/Generated/src/ADC001/ADC001.c ****       {
1354:../Dave/Generated/src/ADC001/ADC001.c ****         /*Set the channel*/
1355:../Dave/Generated/src/ADC001/ADC001.c ****         CLR_BIT(VADCGlobalPtr->BRSPND[GroupNo], ChannelNo);
 2760              		.loc 1 1355 0
 2761 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2762 006e F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2763 0070 3B69     		ldr	r3, [r7, #16]
 2764 0072 01F17001 		add	r1, r1, #112
 2765 0076 53F82110 		ldr	r1, [r3, r1, lsl #2]
 2766 007a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2767 007c 4FF00100 		mov	r0, #1
 2768 0080 00FA03F3 		lsl	r3, r0, r3
 2769 0084 6FEA0303 		mvn	r3, r3
 2770 0088 1940     		ands	r1, r1, r3
 2771 008a 3B69     		ldr	r3, [r7, #16]
 2772 008c 02F17002 		add	r2, r2, #112
 2773 0090 43F82210 		str	r1, [r3, r2, lsl #2]
1356:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2774              		.loc 1 1356 0
 2775 0094 4FF00003 		mov	r3, #0
 2776 0098 7B61     		str	r3, [r7, #20]
 2777 009a 06E0     		b	.L133
 2778              	.L135:
1357:../Dave/Generated/src/ADC001/ADC001.c ****       }
1358:../Dave/Generated/src/ADC001/ADC001.c ****       else
1359:../Dave/Generated/src/ADC001/ADC001.c ****       {
1360:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2779              		.loc 1 1360 0
 2780 009c 4FF00203 		mov	r3, #2
 2781 00a0 7B61     		str	r3, [r7, #20]
 2782 00a2 02E0     		b	.L133
 2783              	.L134:
1361:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1362:../Dave/Generated/src/ADC001/ADC001.c ****       }
1363:../Dave/Generated/src/ADC001/ADC001.c ****     }
1364:../Dave/Generated/src/ADC001/ADC001.c ****     else
1365:../Dave/Generated/src/ADC001/ADC001.c ****     {
1366:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2784              		.loc 1 1366 0
 2785 00a4 4FF00203 		mov	r3, #2
 2786 00a8 7B61     		str	r3, [r7, #20]
 2787              	.L133:
1367:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1368:../Dave/Generated/src/ADC001/ADC001.c ****     }
1369:../Dave/Generated/src/ADC001/ADC001.c ****   }
1370:../Dave/Generated/src/ADC001/ADC001.c ****   else
1371:../Dave/Generated/src/ADC001/ADC001.c ****   {
1372:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1373:../Dave/Generated/src/ADC001/ADC001.c ****   }
1374:../Dave/Generated/src/ADC001/ADC001.c **** 
1375:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2788              		.loc 1 1375 0
 2789 00aa 7B69     		ldr	r3, [r7, #20]
1376:../Dave/Generated/src/ADC001/ADC001.c **** }
 2790              		.loc 1 1376 0
 2791 00ac 1846     		mov	r0, r3
 2792 00ae 07F11C07 		add	r7, r7, #28
 2793 00b2 BD46     		mov	sp, r7
 2794 00b4 80BC     		pop	{r7}
 2795 00b6 7047     		bx	lr
 2796              		.cfi_endproc
 2797              	.LFE147:
 2799              		.section	.text.ADC001_SetChannelSelect,"ax",%progbits
 2800              		.align	2
 2801              		.global	ADC001_SetChannelSelect
 2802              		.thumb
 2803              		.thumb_func
 2805              	ADC001_SetChannelSelect:
 2806              	.LFB148:
1377:../Dave/Generated/src/ADC001/ADC001.c **** 
1378:../Dave/Generated/src/ADC001/ADC001.c **** 
1379:../Dave/Generated/src/ADC001/ADC001.c **** /*
1380:../Dave/Generated/src/ADC001/ADC001.c ****  *This function sets the required channel in channel pending register.
1381:../Dave/Generated/src/ADC001/ADC001.c ****  */
1382:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetChannelSelect(const ADC001_HandleType *HandlePtr,
1383:../Dave/Generated/src/ADC001/ADC001.c ****                                  const ADC001_ChannelHandleType* ChannelPtr)
1384:../Dave/Generated/src/ADC001/ADC001.c **** {
 2807              		.loc 1 1384 0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 24
 2810              		@ frame_needed = 1, uses_anonymous_args = 0
 2811              		@ link register save eliminated.
 2812 0000 80B4     		push	{r7}
 2813              	.LCFI92:
 2814              		.cfi_def_cfa_offset 4
 2815              		.cfi_offset 7, -4
 2816 0002 87B0     		sub	sp, sp, #28
 2817              	.LCFI93:
 2818              		.cfi_def_cfa_offset 32
 2819 0004 00AF     		add	r7, sp, #0
 2820              	.LCFI94:
 2821              		.cfi_def_cfa_register 7
 2822 0006 7860     		str	r0, [r7, #4]
 2823 0008 3960     		str	r1, [r7, #0]
1385:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2824              		.loc 1 1385 0
 2825 000a 4FF00103 		mov	r3, #1
 2826 000e 7B61     		str	r3, [r7, #20]
1386:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1387:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1388:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
1389:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
1390:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNoAct;
1391:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNoAct;
1392:../Dave/Generated/src/ADC001/ADC001.c **** 
1393:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2827              		.loc 1 1393 0
 2828 0010 7B68     		ldr	r3, [r7, #4]
 2829 0012 1B6C     		ldr	r3, [r3, #64]
 2830 0014 3B61     		str	r3, [r7, #16]
1394:../Dave/Generated/src/ADC001/ADC001.c **** 
1395:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2831              		.loc 1 1395 0
 2832 0016 7B68     		ldr	r3, [r7, #4]
 2833 0018 DB6B     		ldr	r3, [r3, #60]
 2834 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2835 001c 012B     		cmp	r3, #1
 2836 001e 42D1     		bne	.L139
1396:../Dave/Generated/src/ADC001/ADC001.c ****   {
1397:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 2837              		.loc 1 1397 0
 2838 0020 3B68     		ldr	r3, [r7, #0]
 2839 0022 002B     		cmp	r3, #0
 2840 0024 3CD0     		beq	.L140
1398:../Dave/Generated/src/ADC001/ADC001.c ****     {
1399:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 2841              		.loc 1 1399 0
 2842 0026 3B68     		ldr	r3, [r7, #0]
 2843 0028 1B78     		ldrb	r3, [r3, #0]
 2844 002a FB73     		strb	r3, [r7, #15]
1400:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 2845              		.loc 1 1400 0
 2846 002c 3B68     		ldr	r3, [r7, #0]
 2847 002e 5B78     		ldrb	r3, [r3, #1]
 2848 0030 BB73     		strb	r3, [r7, #14]
1401:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNoAct = HandlePtr->kActiveGroups[GroupNo];
 2849              		.loc 1 1401 0
 2850 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2851 0034 7A68     		ldr	r2, [r7, #4]
 2852 0036 D318     		adds	r3, r2, r3
 2853 0038 93F82A30 		ldrb	r3, [r3, #42]
 2854 003c 7B73     		strb	r3, [r7, #13]
1402:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNoAct = HandlePtr->kActiveChannels[GroupNo][ChannelNo];
 2855              		.loc 1 1402 0
 2856 003e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2857 0040 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2858 0042 7968     		ldr	r1, [r7, #4]
 2859 0044 4FEAC202 		lsl	r2, r2, #3
 2860 0048 8A18     		adds	r2, r1, r2
 2861 004a D318     		adds	r3, r2, r3
 2862 004c 03F10803 		add	r3, r3, #8
 2863 0050 9B78     		ldrb	r3, [r3, #2]
 2864 0052 3B73     		strb	r3, [r7, #12]
1403:../Dave/Generated/src/ADC001/ADC001.c **** 
1404:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo <= (uint8_t)ADC001_MAX_ADC_GROUP) &&
 2865              		.loc 1 1404 0
 2866 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2867 0056 042B     		cmp	r3, #4
 2868 0058 1ED8     		bhi	.L141
 2869              		.loc 1 1404 0 is_stmt 0 discriminator 1
 2870 005a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2871 005c 082B     		cmp	r3, #8
 2872 005e 1BD8     		bhi	.L141
1405:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo <= (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 2873              		.loc 1 1405 0 is_stmt 1
 2874 0060 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2875 0062 012B     		cmp	r3, #1
 2876 0064 18D1     		bne	.L141
1406:../Dave/Generated/src/ADC001/ADC001.c ****             (GroupNoAct == (uint8_t)1) &&(ChannelNoAct == (uint8_t)1))
 2877              		.loc 1 1406 0
 2878 0066 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2879 0068 012B     		cmp	r3, #1
 2880 006a 15D1     		bne	.L141
1407:../Dave/Generated/src/ADC001/ADC001.c ****       {
1408:../Dave/Generated/src/ADC001/ADC001.c ****         /*set the channel*/
1409:../Dave/Generated/src/ADC001/ADC001.c ****         SET_BIT(VADCGlobalPtr->BRSSEL[GroupNo], ChannelNo);
 2881              		.loc 1 1409 0
 2882 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2883 006e F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2884 0070 3B69     		ldr	r3, [r7, #16]
 2885 0072 01F16001 		add	r1, r1, #96
 2886 0076 53F82110 		ldr	r1, [r3, r1, lsl #2]
 2887 007a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2888 007c 4FF00100 		mov	r0, #1
 2889 0080 00FA03F3 		lsl	r3, r0, r3
 2890 0084 1943     		orrs	r1, r1, r3
 2891 0086 3B69     		ldr	r3, [r7, #16]
 2892 0088 02F16002 		add	r2, r2, #96
 2893 008c 43F82210 		str	r1, [r3, r2, lsl #2]
1410:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2894              		.loc 1 1410 0
 2895 0090 4FF00003 		mov	r3, #0
 2896 0094 7B61     		str	r3, [r7, #20]
 2897 0096 06E0     		b	.L139
 2898              	.L141:
1411:../Dave/Generated/src/ADC001/ADC001.c ****       }
1412:../Dave/Generated/src/ADC001/ADC001.c ****       else
1413:../Dave/Generated/src/ADC001/ADC001.c ****       {
1414:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2899              		.loc 1 1414 0
 2900 0098 4FF00203 		mov	r3, #2
 2901 009c 7B61     		str	r3, [r7, #20]
 2902 009e 02E0     		b	.L139
 2903              	.L140:
1415:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1416:../Dave/Generated/src/ADC001/ADC001.c ****       }
1417:../Dave/Generated/src/ADC001/ADC001.c ****     }
1418:../Dave/Generated/src/ADC001/ADC001.c ****     else
1419:../Dave/Generated/src/ADC001/ADC001.c ****     {
1420:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 2904              		.loc 1 1420 0
 2905 00a0 4FF00203 		mov	r3, #2
 2906 00a4 7B61     		str	r3, [r7, #20]
 2907              	.L139:
1421:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1422:../Dave/Generated/src/ADC001/ADC001.c ****     }
1423:../Dave/Generated/src/ADC001/ADC001.c ****   }
1424:../Dave/Generated/src/ADC001/ADC001.c ****   else
1425:../Dave/Generated/src/ADC001/ADC001.c ****   {
1426:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1427:../Dave/Generated/src/ADC001/ADC001.c ****   }
1428:../Dave/Generated/src/ADC001/ADC001.c **** 
1429:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 2908              		.loc 1 1429 0
 2909 00a6 7B69     		ldr	r3, [r7, #20]
1430:../Dave/Generated/src/ADC001/ADC001.c **** }
 2910              		.loc 1 1430 0
 2911 00a8 1846     		mov	r0, r3
 2912 00aa 07F11C07 		add	r7, r7, #28
 2913 00ae BD46     		mov	sp, r7
 2914 00b0 80BC     		pop	{r7}
 2915 00b2 7047     		bx	lr
 2916              		.cfi_endproc
 2917              	.LFE148:
 2919              		.section	.text.ADC001_ClearChannelSelect,"ax",%progbits
 2920              		.align	2
 2921              		.global	ADC001_ClearChannelSelect
 2922              		.thumb
 2923              		.thumb_func
 2925              	ADC001_ClearChannelSelect:
 2926              	.LFB149:
1431:../Dave/Generated/src/ADC001/ADC001.c **** 
1432:../Dave/Generated/src/ADC001/ADC001.c **** /*
1433:../Dave/Generated/src/ADC001/ADC001.c ****  * This function clears the required channel in channel pending register.
1434:../Dave/Generated/src/ADC001/ADC001.c ****  */
1435:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_ClearChannelSelect(const ADC001_HandleType *HandlePtr,
1436:../Dave/Generated/src/ADC001/ADC001.c ****                                    const ADC001_ChannelHandleType* ChannelPtr)
1437:../Dave/Generated/src/ADC001/ADC001.c **** {
 2927              		.loc 1 1437 0
 2928              		.cfi_startproc
 2929              		@ args = 0, pretend = 0, frame = 24
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931              		@ link register save eliminated.
 2932 0000 80B4     		push	{r7}
 2933              	.LCFI95:
 2934              		.cfi_def_cfa_offset 4
 2935              		.cfi_offset 7, -4
 2936 0002 87B0     		sub	sp, sp, #28
 2937              	.LCFI96:
 2938              		.cfi_def_cfa_offset 32
 2939 0004 00AF     		add	r7, sp, #0
 2940              	.LCFI97:
 2941              		.cfi_def_cfa_register 7
 2942 0006 7860     		str	r0, [r7, #4]
 2943 0008 3960     		str	r1, [r7, #0]
1438:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 2944              		.loc 1 1438 0
 2945 000a 4FF00103 		mov	r3, #1
 2946 000e 7B61     		str	r3, [r7, #20]
1439:../Dave/Generated/src/ADC001/ADC001.c ****   /* Pointer to the VADC Kernel Structure */
1440:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
1441:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
1442:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
1443:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNoAct;
1444:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNoAct;
1445:../Dave/Generated/src/ADC001/ADC001.c **** 
1446:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 2947              		.loc 1 1446 0
 2948 0010 7B68     		ldr	r3, [r7, #4]
 2949 0012 1B6C     		ldr	r3, [r3, #64]
 2950 0014 3B61     		str	r3, [r7, #16]
1447:../Dave/Generated/src/ADC001/ADC001.c **** 
1448:../Dave/Generated/src/ADC001/ADC001.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 2951              		.loc 1 1448 0
 2952 0016 7B68     		ldr	r3, [r7, #4]
 2953 0018 DB6B     		ldr	r3, [r3, #60]
 2954 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2955 001c 012B     		cmp	r3, #1
 2956 001e 44D1     		bne	.L145
1449:../Dave/Generated/src/ADC001/ADC001.c ****   {
1450:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 2957              		.loc 1 1450 0
 2958 0020 3B68     		ldr	r3, [r7, #0]
 2959 0022 002B     		cmp	r3, #0
 2960 0024 3ED0     		beq	.L146
1451:../Dave/Generated/src/ADC001/ADC001.c ****     {
1452:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 2961              		.loc 1 1452 0
 2962 0026 3B68     		ldr	r3, [r7, #0]
 2963 0028 1B78     		ldrb	r3, [r3, #0]
 2964 002a FB73     		strb	r3, [r7, #15]
1453:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 2965              		.loc 1 1453 0
 2966 002c 3B68     		ldr	r3, [r7, #0]
 2967 002e 5B78     		ldrb	r3, [r3, #1]
 2968 0030 BB73     		strb	r3, [r7, #14]
1454:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNoAct = HandlePtr->kActiveGroups[GroupNo];
 2969              		.loc 1 1454 0
 2970 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2971 0034 7A68     		ldr	r2, [r7, #4]
 2972 0036 D318     		adds	r3, r2, r3
 2973 0038 93F82A30 		ldrb	r3, [r3, #42]
 2974 003c 7B73     		strb	r3, [r7, #13]
1455:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNoAct = HandlePtr->kActiveChannels[GroupNo][ChannelNo];
 2975              		.loc 1 1455 0
 2976 003e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2977 0040 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2978 0042 7968     		ldr	r1, [r7, #4]
 2979 0044 4FEAC202 		lsl	r2, r2, #3
 2980 0048 8A18     		adds	r2, r1, r2
 2981 004a D318     		adds	r3, r2, r3
 2982 004c 03F10803 		add	r3, r3, #8
 2983 0050 9B78     		ldrb	r3, [r3, #2]
 2984 0052 3B73     		strb	r3, [r7, #12]
1456:../Dave/Generated/src/ADC001/ADC001.c **** 
1457:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo <= (uint8_t)ADC001_MAX_ADC_GROUP) &&
 2985              		.loc 1 1457 0
 2986 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2987 0056 042B     		cmp	r3, #4
 2988 0058 20D8     		bhi	.L147
 2989              		.loc 1 1457 0 is_stmt 0 discriminator 1
 2990 005a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2991 005c 082B     		cmp	r3, #8
 2992 005e 1DD8     		bhi	.L147
1458:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo <= (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 2993              		.loc 1 1458 0 is_stmt 1
 2994 0060 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2995 0062 012B     		cmp	r3, #1
 2996 0064 1AD1     		bne	.L147
1459:../Dave/Generated/src/ADC001/ADC001.c ****             (GroupNoAct == (uint8_t)1) &&
 2997              		.loc 1 1459 0
 2998 0066 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2999 0068 012B     		cmp	r3, #1
 3000 006a 17D1     		bne	.L147
1460:../Dave/Generated/src/ADC001/ADC001.c ****               (ChannelNoAct == (uint8_t)1))
1461:../Dave/Generated/src/ADC001/ADC001.c ****       {
1462:../Dave/Generated/src/ADC001/ADC001.c ****         /*Set the channel*/
1463:../Dave/Generated/src/ADC001/ADC001.c ****         CLR_BIT(VADCGlobalPtr->BRSSEL[GroupNo], ChannelNo);
 3001              		.loc 1 1463 0
 3002 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3003 006e F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 3004 0070 3B69     		ldr	r3, [r7, #16]
 3005 0072 01F16001 		add	r1, r1, #96
 3006 0076 53F82110 		ldr	r1, [r3, r1, lsl #2]
 3007 007a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3008 007c 4FF00100 		mov	r0, #1
 3009 0080 00FA03F3 		lsl	r3, r0, r3
 3010 0084 6FEA0303 		mvn	r3, r3
 3011 0088 1940     		ands	r1, r1, r3
 3012 008a 3B69     		ldr	r3, [r7, #16]
 3013 008c 02F16002 		add	r2, r2, #96
 3014 0090 43F82210 		str	r1, [r3, r2, lsl #2]
1464:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 3015              		.loc 1 1464 0
 3016 0094 4FF00003 		mov	r3, #0
 3017 0098 7B61     		str	r3, [r7, #20]
 3018 009a 06E0     		b	.L145
 3019              	.L147:
1465:../Dave/Generated/src/ADC001/ADC001.c ****       }
1466:../Dave/Generated/src/ADC001/ADC001.c ****       else
1467:../Dave/Generated/src/ADC001/ADC001.c ****       {
1468:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 3020              		.loc 1 1468 0
 3021 009c 4FF00203 		mov	r3, #2
 3022 00a0 7B61     		str	r3, [r7, #20]
 3023 00a2 02E0     		b	.L145
 3024              	.L146:
1469:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1470:../Dave/Generated/src/ADC001/ADC001.c ****       }
1471:../Dave/Generated/src/ADC001/ADC001.c ****     }
1472:../Dave/Generated/src/ADC001/ADC001.c ****     else
1473:../Dave/Generated/src/ADC001/ADC001.c ****     {
1474:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 3025              		.loc 1 1474 0
 3026 00a4 4FF00203 		mov	r3, #2
 3027 00a8 7B61     		str	r3, [r7, #20]
 3028              	.L145:
1475:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1476:../Dave/Generated/src/ADC001/ADC001.c ****     }
1477:../Dave/Generated/src/ADC001/ADC001.c ****   }
1478:../Dave/Generated/src/ADC001/ADC001.c ****   else
1479:../Dave/Generated/src/ADC001/ADC001.c ****   {
1480:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1481:../Dave/Generated/src/ADC001/ADC001.c ****   }
1482:../Dave/Generated/src/ADC001/ADC001.c **** 
1483:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 3029              		.loc 1 1483 0
 3030 00aa 7B69     		ldr	r3, [r7, #20]
1484:../Dave/Generated/src/ADC001/ADC001.c **** }
 3031              		.loc 1 1484 0
 3032 00ac 1846     		mov	r0, r3
 3033 00ae 07F11C07 		add	r7, r7, #28
 3034 00b2 BD46     		mov	sp, r7
 3035 00b4 80BC     		pop	{r7}
 3036 00b6 7047     		bx	lr
 3037              		.cfi_endproc
 3038              	.LFE149:
 3040              		.section	.text.ADC001_SetChannelEventMode,"ax",%progbits
 3041              		.align	2
 3042              		.global	ADC001_SetChannelEventMode
 3043              		.thumb
 3044              		.thumb_func
 3046              	ADC001_SetChannelEventMode:
 3047              	.LFB150:
1485:../Dave/Generated/src/ADC001/ADC001.c **** 
1486:../Dave/Generated/src/ADC001/ADC001.c **** /*
1487:../Dave/Generated/src/ADC001/ADC001.c ****  *This function sets the channel event mode.
1488:../Dave/Generated/src/ADC001/ADC001.c ****  */
1489:../Dave/Generated/src/ADC001/ADC001.c **** status_t ADC001_SetChannelEventMode(const ADC001_HandleType *HandlePtr,
1490:../Dave/Generated/src/ADC001/ADC001.c ****                                     const ADC001_ChannelHandleType* ChannelPtr,
1491:../Dave/Generated/src/ADC001/ADC001.c ****                                     uint8_t EventMode)
1492:../Dave/Generated/src/ADC001/ADC001.c **** {
 3048              		.loc 1 1492 0
 3049              		.cfi_startproc
 3050              		@ args = 0, pretend = 0, frame = 40
 3051              		@ frame_needed = 1, uses_anonymous_args = 0
 3052              		@ link register save eliminated.
 3053 0000 90B4     		push	{r4, r7}
 3054              	.LCFI98:
 3055              		.cfi_def_cfa_offset 8
 3056              		.cfi_offset 4, -8
 3057              		.cfi_offset 7, -4
 3058 0002 8AB0     		sub	sp, sp, #40
 3059              	.LCFI99:
 3060              		.cfi_def_cfa_offset 48
 3061 0004 00AF     		add	r7, sp, #0
 3062              	.LCFI100:
 3063              		.cfi_def_cfa_register 7
 3064 0006 F860     		str	r0, [r7, #12]
 3065 0008 B960     		str	r1, [r7, #8]
 3066 000a 1346     		mov	r3, r2
 3067 000c FB71     		strb	r3, [r7, #7]
1493:../Dave/Generated/src/ADC001/ADC001.c ****   status_t Status = (uint32_t)ADC001_OPER_NOT_ALLOWED_ERROR;
 3068              		.loc 1 1493 0
 3069 000e 4FF00103 		mov	r3, #1
 3070 0012 7B62     		str	r3, [r7, #36]
1494:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNo;
1495:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNo;
1496:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t GroupNoAct;
1497:../Dave/Generated/src/ADC001/ADC001.c ****   uint8_t ChannelNoAct;
1498:../Dave/Generated/src/ADC001/ADC001.c **** 
1499:../Dave/Generated/src/ADC001/ADC001.c ****   /*Pointer to the VADC Structure */
1500:../Dave/Generated/src/ADC001/ADC001.c ****   VADC_G_TypeDef *VADCGroupPtr[4];
1501:../Dave/Generated/src/ADC001/ADC001.c **** 
1502:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[0] = HandlePtr->VADCGroup0Ptr;
 3071              		.loc 1 1502 0
 3072 0014 FB68     		ldr	r3, [r7, #12]
 3073 0016 5B6C     		ldr	r3, [r3, #68]
 3074 0018 3B61     		str	r3, [r7, #16]
1503:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[1] = HandlePtr->VADCGroup1Ptr;
 3075              		.loc 1 1503 0
 3076 001a FB68     		ldr	r3, [r7, #12]
 3077 001c 9B6C     		ldr	r3, [r3, #72]
 3078 001e 7B61     		str	r3, [r7, #20]
1504:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[2] = HandlePtr->VADCGroup2Ptr;
 3079              		.loc 1 1504 0
 3080 0020 FB68     		ldr	r3, [r7, #12]
 3081 0022 DB6C     		ldr	r3, [r3, #76]
 3082 0024 BB61     		str	r3, [r7, #24]
1505:../Dave/Generated/src/ADC001/ADC001.c ****   VADCGroupPtr[3] = HandlePtr->VADCGroup3Ptr;
 3083              		.loc 1 1505 0
 3084 0026 FB68     		ldr	r3, [r7, #12]
 3085 0028 1B6D     		ldr	r3, [r3, #80]
 3086 002a FB61     		str	r3, [r7, #28]
1506:../Dave/Generated/src/ADC001/ADC001.c **** 
1507:../Dave/Generated/src/ADC001/ADC001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC001_INITIALIZED)
 3087              		.loc 1 1507 0
 3088 002c FB68     		ldr	r3, [r7, #12]
 3089 002e DB6B     		ldr	r3, [r3, #60]
 3090 0030 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3091 0032 012B     		cmp	r3, #1
 3092 0034 67D1     		bne	.L151
1508:../Dave/Generated/src/ADC001/ADC001.c ****   {
1509:../Dave/Generated/src/ADC001/ADC001.c ****     if(ChannelPtr != NULL)
 3093              		.loc 1 1509 0
 3094 0036 BB68     		ldr	r3, [r7, #8]
 3095 0038 002B     		cmp	r3, #0
 3096 003a 61D0     		beq	.L152
1510:../Dave/Generated/src/ADC001/ADC001.c ****     {
1511:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNo = ChannelPtr->kGroupNo;
 3097              		.loc 1 1511 0
 3098 003c BB68     		ldr	r3, [r7, #8]
 3099 003e 1B78     		ldrb	r3, [r3, #0]
 3100 0040 87F82330 		strb	r3, [r7, #35]
1512:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNo = ChannelPtr->kChannelNo;
 3101              		.loc 1 1512 0
 3102 0044 BB68     		ldr	r3, [r7, #8]
 3103 0046 5B78     		ldrb	r3, [r3, #1]
 3104 0048 87F82230 		strb	r3, [r7, #34]
1513:../Dave/Generated/src/ADC001/ADC001.c ****       GroupNoAct = HandlePtr->kActiveGroups[GroupNo];
 3105              		.loc 1 1513 0
 3106 004c 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 3107 0050 FA68     		ldr	r2, [r7, #12]
 3108 0052 D318     		adds	r3, r2, r3
 3109 0054 93F82A30 		ldrb	r3, [r3, #42]
 3110 0058 87F82130 		strb	r3, [r7, #33]
1514:../Dave/Generated/src/ADC001/ADC001.c ****       ChannelNoAct = HandlePtr->kActiveChannels[GroupNo][ChannelNo];
 3111              		.loc 1 1514 0
 3112 005c 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 3113 0060 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 3114 0064 F968     		ldr	r1, [r7, #12]
 3115 0066 4FEAC202 		lsl	r2, r2, #3
 3116 006a 8A18     		adds	r2, r1, r2
 3117 006c D318     		adds	r3, r2, r3
 3118 006e 03F10803 		add	r3, r3, #8
 3119 0072 9B78     		ldrb	r3, [r3, #2]
 3120 0074 87F82030 		strb	r3, [r7, #32]
1515:../Dave/Generated/src/ADC001/ADC001.c **** 
1516:../Dave/Generated/src/ADC001/ADC001.c ****       if((GroupNo <= (uint8_t)ADC001_MAX_ADC_GROUP) &&
 3121              		.loc 1 1516 0
 3122 0078 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 3123 007c 042B     		cmp	r3, #4
 3124 007e 3BD8     		bhi	.L153
 3125              		.loc 1 1516 0 is_stmt 0 discriminator 1
 3126 0080 97F82230 		ldrb	r3, [r7, #34]	@ zero_extendqisi2
 3127 0084 082B     		cmp	r3, #8
 3128 0086 37D8     		bhi	.L153
1517:../Dave/Generated/src/ADC001/ADC001.c ****           (ChannelNo <= (uint8_t)ADC001_MAX_ADC_GROUP_CHANNEL) &&
 3129              		.loc 1 1517 0 is_stmt 1
 3130 0088 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 3131 008c 012B     		cmp	r3, #1
 3132 008e 33D1     		bne	.L153
1518:../Dave/Generated/src/ADC001/ADC001.c ****             (GroupNoAct == (uint8_t)1) &&
 3133              		.loc 1 1518 0
 3134 0090 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 3135 0094 012B     		cmp	r3, #1
 3136 0096 2FD1     		bne	.L153
1519:../Dave/Generated/src/ADC001/ADC001.c ****               (ChannelNoAct == (uint8_t)1) &&
 3137              		.loc 1 1519 0
 3138 0098 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3139 009a 002B     		cmp	r3, #0
 3140 009c 02D0     		beq	.L154
1520:../Dave/Generated/src/ADC001/ADC001.c ****                 ((EventMode == (uint8_t)ADC001_CHANNEL_EVENT_NEVER) ||
 3141              		.loc 1 1520 0
 3142 009e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3143 00a0 032B     		cmp	r3, #3
 3144 00a2 29D1     		bne	.L153
 3145              	.L154:
1521:../Dave/Generated/src/ADC001/ADC001.c ****                     (EventMode == (uint8_t)ADC001_CHANNEL_EVENT_ALWAYS)))
1522:../Dave/Generated/src/ADC001/ADC001.c ****       {
1523:../Dave/Generated/src/ADC001/ADC001.c ****         WR_REG( VADCGroupPtr[GroupNo]->CHCTR[ChannelNo],
 3146              		.loc 1 1523 0
 3147 00a4 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 3148 00a8 4FEA8303 		lsl	r3, r3, #2
 3149 00ac 07F12802 		add	r2, r7, #40
 3150 00b0 D318     		adds	r3, r2, r3
 3151 00b2 53F8182C 		ldr	r2, [r3, #-24]
 3152 00b6 97F82200 		ldrb	r0, [r7, #34]	@ zero_extendqisi2
 3153 00ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3154 00bc 4FEA0323 		lsl	r3, r3, #8
 3155 00c0 03F44071 		and	r1, r3, #768
 3156 00c4 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 3157 00c8 4FEA8303 		lsl	r3, r3, #2
 3158 00cc 07F1280C 		add	ip, r7, #40
 3159 00d0 6344     		add	r3, ip, r3
 3160 00d2 53F8183C 		ldr	r3, [r3, #-24]
 3161 00d6 97F82240 		ldrb	r4, [r7, #34]	@ zero_extendqisi2
 3162 00da 04F18004 		add	r4, r4, #128
 3163 00de 53F82430 		ldr	r3, [r3, r4, lsl #2]
 3164 00e2 23F44073 		bic	r3, r3, #768
 3165 00e6 1943     		orrs	r1, r1, r3
 3166 00e8 00F18003 		add	r3, r0, #128
 3167 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
1524:../Dave/Generated/src/ADC001/ADC001.c ****           VADC_G_CHCTR_CHEVMODE_Msk,
1525:../Dave/Generated/src/ADC001/ADC001.c ****           VADC_G_CHCTR_CHEVMODE_Pos,
1526:../Dave/Generated/src/ADC001/ADC001.c ****           (uint32_t)EventMode
1527:../Dave/Generated/src/ADC001/ADC001.c ****          );
1528:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 3168              		.loc 1 1528 0
 3169 00f0 4FF00003 		mov	r3, #0
 3170 00f4 7B62     		str	r3, [r7, #36]
 3171 00f6 06E0     		b	.L151
 3172              	.L153:
1529:../Dave/Generated/src/ADC001/ADC001.c ****       }
1530:../Dave/Generated/src/ADC001/ADC001.c ****       else
1531:../Dave/Generated/src/ADC001/ADC001.c ****       {
1532:../Dave/Generated/src/ADC001/ADC001.c ****         Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 3173              		.loc 1 1532 0
 3174 00f8 4FF00203 		mov	r3, #2
 3175 00fc 7B62     		str	r3, [r7, #36]
 3176 00fe 02E0     		b	.L151
 3177              	.L152:
1533:../Dave/Generated/src/ADC001/ADC001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1534:../Dave/Generated/src/ADC001/ADC001.c ****       }
1535:../Dave/Generated/src/ADC001/ADC001.c ****     }
1536:../Dave/Generated/src/ADC001/ADC001.c ****     else
1537:../Dave/Generated/src/ADC001/ADC001.c ****     {
1538:../Dave/Generated/src/ADC001/ADC001.c ****       Status = (uint32_t)ADC001_INVALID_PARAM_ERROR;
 3178              		.loc 1 1538 0
 3179 0100 4FF00203 		mov	r3, #2
 3180 0104 7B62     		str	r3, [r7, #36]
 3181              	.L151:
1539:../Dave/Generated/src/ADC001/ADC001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1540:../Dave/Generated/src/ADC001/ADC001.c ****     }
1541:../Dave/Generated/src/ADC001/ADC001.c ****   }
1542:../Dave/Generated/src/ADC001/ADC001.c ****   else
1543:../Dave/Generated/src/ADC001/ADC001.c ****   {
1544:../Dave/Generated/src/ADC001/ADC001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1545:../Dave/Generated/src/ADC001/ADC001.c ****   }
1546:../Dave/Generated/src/ADC001/ADC001.c **** 
1547:../Dave/Generated/src/ADC001/ADC001.c ****   return Status;
 3182              		.loc 1 1547 0
 3183 0106 7B6A     		ldr	r3, [r7, #36]
1548:../Dave/Generated/src/ADC001/ADC001.c **** }
 3184              		.loc 1 1548 0
 3185 0108 1846     		mov	r0, r3
 3186 010a 07F12807 		add	r7, r7, #40
 3187 010e BD46     		mov	sp, r7
 3188 0110 90BC     		pop	{r4, r7}
 3189 0112 7047     		bx	lr
 3190              		.cfi_endproc
 3191              	.LFE150:
 3193              		.text
 3194              	.Letext0:
 3195              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3196              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3197              		.file 4 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3198              		.file 5 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
 3199              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3200              		.file 7 "C:\\Users\\jmass_000\\Documents\\Unicamp\\Phoenix\\Controle-e-Telemetria\\DAVE\\Joystick\
DEFINED SYMBOLS
                            *ABS*:00000000 ADC001.c
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:20     .text.ADC001_Init:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:25     .text.ADC001_Init:00000000 ADC001_Init
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:57     .text.ADC001_lInit:00000000 ADC001_lInit
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:52     .text.ADC001_lInit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:353    .text.ADC001_Deinit:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:358    .text.ADC001_Deinit:00000000 ADC001_Deinit
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:525    .text.ADC001_SelectInputClass:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:530    .text.ADC001_SelectInputClass:00000000 ADC001_SelectInputClass
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:657    .text.ADC001_EnableResultEvt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:662    .text.ADC001_EnableResultEvt:00000000 ADC001_EnableResultEvt
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:715    .text.ADC001_DisableResultEvt:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:720    .text.ADC001_DisableResultEvt:00000000 ADC001_DisableResultEvt
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:773    .text.ADC001_GetResult:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:778    .text.ADC001_GetResult:00000000 ADC001_GetResult
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:868    .text.ADC001_GetFastResult:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:873    .text.ADC001_GetFastResult:00000000 ADC001_GetFastResult
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:909    .text.ADC001_GetResultEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:914    .text.ADC001_GetResultEvtFlag:00000000 ADC001_GetResultEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:979    .text.ADC001_SetResultEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:984    .text.ADC001_SetResultEvtFlag:00000000 ADC001_SetResultEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1037   .text.ADC001_ClearResultEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1042   .text.ADC001_ClearResultEvtFlag:00000000 ADC001_ClearResultEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1095   .text.ADC001_GetChannelEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1100   .text.ADC001_GetChannelEvtFlag:00000000 ADC001_GetChannelEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1233   .text.ADC001_SetChannelEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1238   .text.ADC001_SetChannelEvtFlag:00000000 ADC001_SetChannelEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1365   .text.ADC001_ClearChannelEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1370   .text.ADC001_ClearChannelEvtFlag:00000000 ADC001_ClearChannelEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1497   .text.ADC001_EnableBackGroundEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1502   .text.ADC001_EnableBackGroundEvent:00000000 ADC001_EnableBackGroundEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1555   .text.ADC001_DisableBackGroundEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1560   .text.ADC001_DisableBackGroundEvent:00000000 ADC001_DisableBackGroundEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1613   .text.ADC001_GetBackGroundEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1618   .text.ADC001_GetBackGroundEvtFlag:00000000 ADC001_GetBackGroundEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1683   .text.ADC001_SetBackGroundEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1688   .text.ADC001_SetBackGroundEvtFlag:00000000 ADC001_SetBackGroundEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1741   .text.ADC001_ClearBackGroundEvtFlag:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1746   .text.ADC001_ClearBackGroundEvtFlag:00000000 ADC001_ClearBackGroundEvtFlag
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1799   .text.ADC001_ClearPendingBits:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1804   .text.ADC001_ClearPendingBits:00000000 ADC001_ClearPendingBits
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1857   .text.ADC001_GenerateLoadEvent:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1862   .text.ADC001_GenerateLoadEvent:00000000 ADC001_GenerateLoadEvent
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1915   .text.ADC001_EnableGate:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1920   .text.ADC001_EnableGate:00000000 ADC001_EnableGate
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1987   .text.ADC001_GetGateLevel:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:1992   .text.ADC001_GetGateLevel:00000000 ADC001_GetGateLevel
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2057   .text.ADC001_SetExternalTriggerMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2062   .text.ADC001_SetExternalTriggerMode:00000000 ADC001_SetExternalTriggerMode
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2159   .text.ADC001_EnableExternalTrigger:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2164   .text.ADC001_EnableExternalTrigger:00000000 ADC001_EnableExternalTrigger
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2217   .text.ADC001_DisableExternalTrigger:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2222   .text.ADC001_DisableExternalTrigger:00000000 ADC001_DisableExternalTrigger
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2275   .text.ADC001_EnableArbitrationSlot:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2280   .text.ADC001_EnableArbitrationSlot:00000000 ADC001_EnableArbitrationSlot
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2375   .text.ADC001_DisableArbitrationSlot:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2380   .text.ADC001_DisableArbitrationSlot:00000000 ADC001_DisableArbitrationSlot
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2475   .text.ADC001_SetLoadEventMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2480   .text.ADC001_SetLoadEventMode:00000000 ADC001_SetLoadEventMode
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2559   .text.ADC001_SetPendingChannel:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2564   .text.ADC001_SetPendingChannel:00000000 ADC001_SetPendingChannel
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2679   .text.ADC001_ClearPendingChannel:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2684   .text.ADC001_ClearPendingChannel:00000000 ADC001_ClearPendingChannel
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2800   .text.ADC001_SetChannelSelect:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2805   .text.ADC001_SetChannelSelect:00000000 ADC001_SetChannelSelect
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2920   .text.ADC001_ClearChannelSelect:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:2925   .text.ADC001_ClearChannelSelect:00000000 ADC001_ClearChannelSelect
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:3041   .text.ADC001_SetChannelEventMode:00000000 $t
C:\Users\JMASS_~1\AppData\Local\Temp\ccT3mv4g.s:3046   .text.ADC001_SetChannelEventMode:00000000 ADC001_SetChannelEventMode
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.ec21866ed24322af6d30be63c4791501
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.NVIC002_Conf.h.63.2037966d607e03e4d09b45a6c3213a0d

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADC001_Handle0
ADC001_ChannelHandlePtr
